
FlightController_STM32H743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022fbc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb8  0802325c  0802325c  0003325c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024114  08024114  00040148  2**0
                  CONTENTS
  4 .ARM          00000008  08024114  08024114  00034114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802411c  0802411c  00040148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0802411c  0802411c  0003411c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802412c  0802412c  0003412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  24000000  08024130  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a020  24000148  08024278  00040148  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2400a168  08024278  0004a168  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040148  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007278e  00000000  00000000  00040176  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000b9c7  00000000  00000000  000b2904  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003208  00000000  00000000  000be2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002df8  00000000  00000000  000c14d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0004a08a  00000000  00000000  000c42d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003980f  00000000  00000000  0010e35a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0019844b  00000000  00000000  00147b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002dffb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000df78  00000000  00000000  002e0030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08023244 	.word	0x08023244

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	08023244 	.word	0x08023244

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_frsub>:
 8000380:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__addsf3>
 8000386:	bf00      	nop

08000388 <__aeabi_fsub>:
 8000388:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800038c <__addsf3>:
 800038c:	0042      	lsls	r2, r0, #1
 800038e:	bf1f      	itttt	ne
 8000390:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000394:	ea92 0f03 	teqne	r2, r3
 8000398:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800039c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003a0:	d06a      	beq.n	8000478 <__addsf3+0xec>
 80003a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003aa:	bfc1      	itttt	gt
 80003ac:	18d2      	addgt	r2, r2, r3
 80003ae:	4041      	eorgt	r1, r0
 80003b0:	4048      	eorgt	r0, r1
 80003b2:	4041      	eorgt	r1, r0
 80003b4:	bfb8      	it	lt
 80003b6:	425b      	neglt	r3, r3
 80003b8:	2b19      	cmp	r3, #25
 80003ba:	bf88      	it	hi
 80003bc:	4770      	bxhi	lr
 80003be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003ca:	bf18      	it	ne
 80003cc:	4240      	negne	r0, r0
 80003ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4249      	negne	r1, r1
 80003de:	ea92 0f03 	teq	r2, r3
 80003e2:	d03f      	beq.n	8000464 <__addsf3+0xd8>
 80003e4:	f1a2 0201 	sub.w	r2, r2, #1
 80003e8:	fa41 fc03 	asr.w	ip, r1, r3
 80003ec:	eb10 000c 	adds.w	r0, r0, ip
 80003f0:	f1c3 0320 	rsb	r3, r3, #32
 80003f4:	fa01 f103 	lsl.w	r1, r1, r3
 80003f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003fc:	d502      	bpl.n	8000404 <__addsf3+0x78>
 80003fe:	4249      	negs	r1, r1
 8000400:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000404:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000408:	d313      	bcc.n	8000432 <__addsf3+0xa6>
 800040a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800040e:	d306      	bcc.n	800041e <__addsf3+0x92>
 8000410:	0840      	lsrs	r0, r0, #1
 8000412:	ea4f 0131 	mov.w	r1, r1, rrx
 8000416:	f102 0201 	add.w	r2, r2, #1
 800041a:	2afe      	cmp	r2, #254	; 0xfe
 800041c:	d251      	bcs.n	80004c2 <__addsf3+0x136>
 800041e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000422:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000426:	bf08      	it	eq
 8000428:	f020 0001 	biceq.w	r0, r0, #1
 800042c:	ea40 0003 	orr.w	r0, r0, r3
 8000430:	4770      	bx	lr
 8000432:	0049      	lsls	r1, r1, #1
 8000434:	eb40 0000 	adc.w	r0, r0, r0
 8000438:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800043c:	f1a2 0201 	sub.w	r2, r2, #1
 8000440:	d1ed      	bne.n	800041e <__addsf3+0x92>
 8000442:	fab0 fc80 	clz	ip, r0
 8000446:	f1ac 0c08 	sub.w	ip, ip, #8
 800044a:	ebb2 020c 	subs.w	r2, r2, ip
 800044e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000452:	bfaa      	itet	ge
 8000454:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000458:	4252      	neglt	r2, r2
 800045a:	4318      	orrge	r0, r3
 800045c:	bfbc      	itt	lt
 800045e:	40d0      	lsrlt	r0, r2
 8000460:	4318      	orrlt	r0, r3
 8000462:	4770      	bx	lr
 8000464:	f092 0f00 	teq	r2, #0
 8000468:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800046c:	bf06      	itte	eq
 800046e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000472:	3201      	addeq	r2, #1
 8000474:	3b01      	subne	r3, #1
 8000476:	e7b5      	b.n	80003e4 <__addsf3+0x58>
 8000478:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800047c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000480:	bf18      	it	ne
 8000482:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000486:	d021      	beq.n	80004cc <__addsf3+0x140>
 8000488:	ea92 0f03 	teq	r2, r3
 800048c:	d004      	beq.n	8000498 <__addsf3+0x10c>
 800048e:	f092 0f00 	teq	r2, #0
 8000492:	bf08      	it	eq
 8000494:	4608      	moveq	r0, r1
 8000496:	4770      	bx	lr
 8000498:	ea90 0f01 	teq	r0, r1
 800049c:	bf1c      	itt	ne
 800049e:	2000      	movne	r0, #0
 80004a0:	4770      	bxne	lr
 80004a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004a6:	d104      	bne.n	80004b2 <__addsf3+0x126>
 80004a8:	0040      	lsls	r0, r0, #1
 80004aa:	bf28      	it	cs
 80004ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004b0:	4770      	bx	lr
 80004b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004b6:	bf3c      	itt	cc
 80004b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004bc:	4770      	bxcc	lr
 80004be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004ca:	4770      	bx	lr
 80004cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004d0:	bf16      	itet	ne
 80004d2:	4608      	movne	r0, r1
 80004d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004d8:	4601      	movne	r1, r0
 80004da:	0242      	lsls	r2, r0, #9
 80004dc:	bf06      	itte	eq
 80004de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004e2:	ea90 0f01 	teqeq	r0, r1
 80004e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004ea:	4770      	bx	lr

080004ec <__aeabi_ui2f>:
 80004ec:	f04f 0300 	mov.w	r3, #0
 80004f0:	e004      	b.n	80004fc <__aeabi_i2f+0x8>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2f>:
 80004f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80004f8:	bf48      	it	mi
 80004fa:	4240      	negmi	r0, r0
 80004fc:	ea5f 0c00 	movs.w	ip, r0
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000508:	4601      	mov	r1, r0
 800050a:	f04f 0000 	mov.w	r0, #0
 800050e:	e01c      	b.n	800054a <__aeabi_l2f+0x2a>

08000510 <__aeabi_ul2f>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	f04f 0300 	mov.w	r3, #0
 800051c:	e00a      	b.n	8000534 <__aeabi_l2f+0x14>
 800051e:	bf00      	nop

08000520 <__aeabi_l2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800052c:	d502      	bpl.n	8000534 <__aeabi_l2f+0x14>
 800052e:	4240      	negs	r0, r0
 8000530:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000534:	ea5f 0c01 	movs.w	ip, r1
 8000538:	bf02      	ittt	eq
 800053a:	4684      	moveq	ip, r0
 800053c:	4601      	moveq	r1, r0
 800053e:	2000      	moveq	r0, #0
 8000540:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000544:	bf08      	it	eq
 8000546:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800054a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800054e:	fabc f28c 	clz	r2, ip
 8000552:	3a08      	subs	r2, #8
 8000554:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000558:	db10      	blt.n	800057c <__aeabi_l2f+0x5c>
 800055a:	fa01 fc02 	lsl.w	ip, r1, r2
 800055e:	4463      	add	r3, ip
 8000560:	fa00 fc02 	lsl.w	ip, r0, r2
 8000564:	f1c2 0220 	rsb	r2, r2, #32
 8000568:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800056c:	fa20 f202 	lsr.w	r2, r0, r2
 8000570:	eb43 0002 	adc.w	r0, r3, r2
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f102 0220 	add.w	r2, r2, #32
 8000580:	fa01 fc02 	lsl.w	ip, r1, r2
 8000584:	f1c2 0220 	rsb	r2, r2, #32
 8000588:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800058c:	fa21 f202 	lsr.w	r2, r1, r2
 8000590:	eb43 0002 	adc.w	r0, r3, r2
 8000594:	bf08      	it	eq
 8000596:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800059a:	4770      	bx	lr

0800059c <__aeabi_ldivmod>:
 800059c:	b97b      	cbnz	r3, 80005be <__aeabi_ldivmod+0x22>
 800059e:	b972      	cbnz	r2, 80005be <__aeabi_ldivmod+0x22>
 80005a0:	2900      	cmp	r1, #0
 80005a2:	bfbe      	ittt	lt
 80005a4:	2000      	movlt	r0, #0
 80005a6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80005aa:	e006      	blt.n	80005ba <__aeabi_ldivmod+0x1e>
 80005ac:	bf08      	it	eq
 80005ae:	2800      	cmpeq	r0, #0
 80005b0:	bf1c      	itt	ne
 80005b2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80005b6:	f04f 30ff 	movne.w	r0, #4294967295
 80005ba:	f000 b9bd 	b.w	8000938 <__aeabi_idiv0>
 80005be:	f1ad 0c08 	sub.w	ip, sp, #8
 80005c2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005c6:	2900      	cmp	r1, #0
 80005c8:	db09      	blt.n	80005de <__aeabi_ldivmod+0x42>
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	db1a      	blt.n	8000604 <__aeabi_ldivmod+0x68>
 80005ce:	f000 f84d 	bl	800066c <__udivmoddi4>
 80005d2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005da:	b004      	add	sp, #16
 80005dc:	4770      	bx	lr
 80005de:	4240      	negs	r0, r0
 80005e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	db1b      	blt.n	8000620 <__aeabi_ldivmod+0x84>
 80005e8:	f000 f840 	bl	800066c <__udivmoddi4>
 80005ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005f4:	b004      	add	sp, #16
 80005f6:	4240      	negs	r0, r0
 80005f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fc:	4252      	negs	r2, r2
 80005fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000602:	4770      	bx	lr
 8000604:	4252      	negs	r2, r2
 8000606:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800060a:	f000 f82f 	bl	800066c <__udivmoddi4>
 800060e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000612:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000616:	b004      	add	sp, #16
 8000618:	4240      	negs	r0, r0
 800061a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061e:	4770      	bx	lr
 8000620:	4252      	negs	r2, r2
 8000622:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000626:	f000 f821 	bl	800066c <__udivmoddi4>
 800062a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800062e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000632:	b004      	add	sp, #16
 8000634:	4252      	negs	r2, r2
 8000636:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800063a:	4770      	bx	lr

0800063c <__aeabi_uldivmod>:
 800063c:	b953      	cbnz	r3, 8000654 <__aeabi_uldivmod+0x18>
 800063e:	b94a      	cbnz	r2, 8000654 <__aeabi_uldivmod+0x18>
 8000640:	2900      	cmp	r1, #0
 8000642:	bf08      	it	eq
 8000644:	2800      	cmpeq	r0, #0
 8000646:	bf1c      	itt	ne
 8000648:	f04f 31ff 	movne.w	r1, #4294967295
 800064c:	f04f 30ff 	movne.w	r0, #4294967295
 8000650:	f000 b972 	b.w	8000938 <__aeabi_idiv0>
 8000654:	f1ad 0c08 	sub.w	ip, sp, #8
 8000658:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800065c:	f000 f806 	bl	800066c <__udivmoddi4>
 8000660:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000668:	b004      	add	sp, #16
 800066a:	4770      	bx	lr

0800066c <__udivmoddi4>:
 800066c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000670:	9e08      	ldr	r6, [sp, #32]
 8000672:	4604      	mov	r4, r0
 8000674:	4688      	mov	r8, r1
 8000676:	2b00      	cmp	r3, #0
 8000678:	d14b      	bne.n	8000712 <__udivmoddi4+0xa6>
 800067a:	428a      	cmp	r2, r1
 800067c:	4615      	mov	r5, r2
 800067e:	d967      	bls.n	8000750 <__udivmoddi4+0xe4>
 8000680:	fab2 f282 	clz	r2, r2
 8000684:	b14a      	cbz	r2, 800069a <__udivmoddi4+0x2e>
 8000686:	f1c2 0720 	rsb	r7, r2, #32
 800068a:	fa01 f302 	lsl.w	r3, r1, r2
 800068e:	fa20 f707 	lsr.w	r7, r0, r7
 8000692:	4095      	lsls	r5, r2
 8000694:	ea47 0803 	orr.w	r8, r7, r3
 8000698:	4094      	lsls	r4, r2
 800069a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800069e:	0c23      	lsrs	r3, r4, #16
 80006a0:	fbb8 f7fe 	udiv	r7, r8, lr
 80006a4:	fa1f fc85 	uxth.w	ip, r5
 80006a8:	fb0e 8817 	mls	r8, lr, r7, r8
 80006ac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006b0:	fb07 f10c 	mul.w	r1, r7, ip
 80006b4:	4299      	cmp	r1, r3
 80006b6:	d909      	bls.n	80006cc <__udivmoddi4+0x60>
 80006b8:	18eb      	adds	r3, r5, r3
 80006ba:	f107 30ff 	add.w	r0, r7, #4294967295
 80006be:	f080 811b 	bcs.w	80008f8 <__udivmoddi4+0x28c>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 8118 	bls.w	80008f8 <__udivmoddi4+0x28c>
 80006c8:	3f02      	subs	r7, #2
 80006ca:	442b      	add	r3, r5
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80006d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb00 fc0c 	mul.w	ip, r0, ip
 80006e0:	45a4      	cmp	ip, r4
 80006e2:	d909      	bls.n	80006f8 <__udivmoddi4+0x8c>
 80006e4:	192c      	adds	r4, r5, r4
 80006e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80006ea:	f080 8107 	bcs.w	80008fc <__udivmoddi4+0x290>
 80006ee:	45a4      	cmp	ip, r4
 80006f0:	f240 8104 	bls.w	80008fc <__udivmoddi4+0x290>
 80006f4:	3802      	subs	r0, #2
 80006f6:	442c      	add	r4, r5
 80006f8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006fc:	eba4 040c 	sub.w	r4, r4, ip
 8000700:	2700      	movs	r7, #0
 8000702:	b11e      	cbz	r6, 800070c <__udivmoddi4+0xa0>
 8000704:	40d4      	lsrs	r4, r2
 8000706:	2300      	movs	r3, #0
 8000708:	e9c6 4300 	strd	r4, r3, [r6]
 800070c:	4639      	mov	r1, r7
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	428b      	cmp	r3, r1
 8000714:	d909      	bls.n	800072a <__udivmoddi4+0xbe>
 8000716:	2e00      	cmp	r6, #0
 8000718:	f000 80eb 	beq.w	80008f2 <__udivmoddi4+0x286>
 800071c:	2700      	movs	r7, #0
 800071e:	e9c6 0100 	strd	r0, r1, [r6]
 8000722:	4638      	mov	r0, r7
 8000724:	4639      	mov	r1, r7
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	fab3 f783 	clz	r7, r3
 800072e:	2f00      	cmp	r7, #0
 8000730:	d147      	bne.n	80007c2 <__udivmoddi4+0x156>
 8000732:	428b      	cmp	r3, r1
 8000734:	d302      	bcc.n	800073c <__udivmoddi4+0xd0>
 8000736:	4282      	cmp	r2, r0
 8000738:	f200 80fa 	bhi.w	8000930 <__udivmoddi4+0x2c4>
 800073c:	1a84      	subs	r4, r0, r2
 800073e:	eb61 0303 	sbc.w	r3, r1, r3
 8000742:	2001      	movs	r0, #1
 8000744:	4698      	mov	r8, r3
 8000746:	2e00      	cmp	r6, #0
 8000748:	d0e0      	beq.n	800070c <__udivmoddi4+0xa0>
 800074a:	e9c6 4800 	strd	r4, r8, [r6]
 800074e:	e7dd      	b.n	800070c <__udivmoddi4+0xa0>
 8000750:	b902      	cbnz	r2, 8000754 <__udivmoddi4+0xe8>
 8000752:	deff      	udf	#255	; 0xff
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	2a00      	cmp	r2, #0
 800075a:	f040 808f 	bne.w	800087c <__udivmoddi4+0x210>
 800075e:	1b49      	subs	r1, r1, r5
 8000760:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000764:	fa1f f885 	uxth.w	r8, r5
 8000768:	2701      	movs	r7, #1
 800076a:	fbb1 fcfe 	udiv	ip, r1, lr
 800076e:	0c23      	lsrs	r3, r4, #16
 8000770:	fb0e 111c 	mls	r1, lr, ip, r1
 8000774:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000778:	fb08 f10c 	mul.w	r1, r8, ip
 800077c:	4299      	cmp	r1, r3
 800077e:	d907      	bls.n	8000790 <__udivmoddi4+0x124>
 8000780:	18eb      	adds	r3, r5, r3
 8000782:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000786:	d202      	bcs.n	800078e <__udivmoddi4+0x122>
 8000788:	4299      	cmp	r1, r3
 800078a:	f200 80cd 	bhi.w	8000928 <__udivmoddi4+0x2bc>
 800078e:	4684      	mov	ip, r0
 8000790:	1a59      	subs	r1, r3, r1
 8000792:	b2a3      	uxth	r3, r4
 8000794:	fbb1 f0fe 	udiv	r0, r1, lr
 8000798:	fb0e 1410 	mls	r4, lr, r0, r1
 800079c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007a0:	fb08 f800 	mul.w	r8, r8, r0
 80007a4:	45a0      	cmp	r8, r4
 80007a6:	d907      	bls.n	80007b8 <__udivmoddi4+0x14c>
 80007a8:	192c      	adds	r4, r5, r4
 80007aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ae:	d202      	bcs.n	80007b6 <__udivmoddi4+0x14a>
 80007b0:	45a0      	cmp	r8, r4
 80007b2:	f200 80b6 	bhi.w	8000922 <__udivmoddi4+0x2b6>
 80007b6:	4618      	mov	r0, r3
 80007b8:	eba4 0408 	sub.w	r4, r4, r8
 80007bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007c0:	e79f      	b.n	8000702 <__udivmoddi4+0x96>
 80007c2:	f1c7 0c20 	rsb	ip, r7, #32
 80007c6:	40bb      	lsls	r3, r7
 80007c8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007cc:	ea4e 0e03 	orr.w	lr, lr, r3
 80007d0:	fa01 f407 	lsl.w	r4, r1, r7
 80007d4:	fa20 f50c 	lsr.w	r5, r0, ip
 80007d8:	fa21 f30c 	lsr.w	r3, r1, ip
 80007dc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007e0:	4325      	orrs	r5, r4
 80007e2:	fbb3 f9f8 	udiv	r9, r3, r8
 80007e6:	0c2c      	lsrs	r4, r5, #16
 80007e8:	fb08 3319 	mls	r3, r8, r9, r3
 80007ec:	fa1f fa8e 	uxth.w	sl, lr
 80007f0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007f4:	fb09 f40a 	mul.w	r4, r9, sl
 80007f8:	429c      	cmp	r4, r3
 80007fa:	fa02 f207 	lsl.w	r2, r2, r7
 80007fe:	fa00 f107 	lsl.w	r1, r0, r7
 8000802:	d90b      	bls.n	800081c <__udivmoddi4+0x1b0>
 8000804:	eb1e 0303 	adds.w	r3, lr, r3
 8000808:	f109 30ff 	add.w	r0, r9, #4294967295
 800080c:	f080 8087 	bcs.w	800091e <__udivmoddi4+0x2b2>
 8000810:	429c      	cmp	r4, r3
 8000812:	f240 8084 	bls.w	800091e <__udivmoddi4+0x2b2>
 8000816:	f1a9 0902 	sub.w	r9, r9, #2
 800081a:	4473      	add	r3, lr
 800081c:	1b1b      	subs	r3, r3, r4
 800081e:	b2ad      	uxth	r5, r5
 8000820:	fbb3 f0f8 	udiv	r0, r3, r8
 8000824:	fb08 3310 	mls	r3, r8, r0, r3
 8000828:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800082c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000830:	45a2      	cmp	sl, r4
 8000832:	d908      	bls.n	8000846 <__udivmoddi4+0x1da>
 8000834:	eb1e 0404 	adds.w	r4, lr, r4
 8000838:	f100 33ff 	add.w	r3, r0, #4294967295
 800083c:	d26b      	bcs.n	8000916 <__udivmoddi4+0x2aa>
 800083e:	45a2      	cmp	sl, r4
 8000840:	d969      	bls.n	8000916 <__udivmoddi4+0x2aa>
 8000842:	3802      	subs	r0, #2
 8000844:	4474      	add	r4, lr
 8000846:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800084a:	fba0 8902 	umull	r8, r9, r0, r2
 800084e:	eba4 040a 	sub.w	r4, r4, sl
 8000852:	454c      	cmp	r4, r9
 8000854:	46c2      	mov	sl, r8
 8000856:	464b      	mov	r3, r9
 8000858:	d354      	bcc.n	8000904 <__udivmoddi4+0x298>
 800085a:	d051      	beq.n	8000900 <__udivmoddi4+0x294>
 800085c:	2e00      	cmp	r6, #0
 800085e:	d069      	beq.n	8000934 <__udivmoddi4+0x2c8>
 8000860:	ebb1 050a 	subs.w	r5, r1, sl
 8000864:	eb64 0403 	sbc.w	r4, r4, r3
 8000868:	fa04 fc0c 	lsl.w	ip, r4, ip
 800086c:	40fd      	lsrs	r5, r7
 800086e:	40fc      	lsrs	r4, r7
 8000870:	ea4c 0505 	orr.w	r5, ip, r5
 8000874:	e9c6 5400 	strd	r5, r4, [r6]
 8000878:	2700      	movs	r7, #0
 800087a:	e747      	b.n	800070c <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f703 	lsr.w	r7, r0, r3
 8000884:	4095      	lsls	r5, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	fa21 f303 	lsr.w	r3, r1, r3
 800088e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000892:	4338      	orrs	r0, r7
 8000894:	0c01      	lsrs	r1, r0, #16
 8000896:	fbb3 f7fe 	udiv	r7, r3, lr
 800089a:	fa1f f885 	uxth.w	r8, r5
 800089e:	fb0e 3317 	mls	r3, lr, r7, r3
 80008a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008a6:	fb07 f308 	mul.w	r3, r7, r8
 80008aa:	428b      	cmp	r3, r1
 80008ac:	fa04 f402 	lsl.w	r4, r4, r2
 80008b0:	d907      	bls.n	80008c2 <__udivmoddi4+0x256>
 80008b2:	1869      	adds	r1, r5, r1
 80008b4:	f107 3cff 	add.w	ip, r7, #4294967295
 80008b8:	d22f      	bcs.n	800091a <__udivmoddi4+0x2ae>
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d92d      	bls.n	800091a <__udivmoddi4+0x2ae>
 80008be:	3f02      	subs	r7, #2
 80008c0:	4429      	add	r1, r5
 80008c2:	1acb      	subs	r3, r1, r3
 80008c4:	b281      	uxth	r1, r0
 80008c6:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ca:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d2:	fb00 f308 	mul.w	r3, r0, r8
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d907      	bls.n	80008ea <__udivmoddi4+0x27e>
 80008da:	1869      	adds	r1, r5, r1
 80008dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e0:	d217      	bcs.n	8000912 <__udivmoddi4+0x2a6>
 80008e2:	428b      	cmp	r3, r1
 80008e4:	d915      	bls.n	8000912 <__udivmoddi4+0x2a6>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4429      	add	r1, r5
 80008ea:	1ac9      	subs	r1, r1, r3
 80008ec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008f0:	e73b      	b.n	800076a <__udivmoddi4+0xfe>
 80008f2:	4637      	mov	r7, r6
 80008f4:	4630      	mov	r0, r6
 80008f6:	e709      	b.n	800070c <__udivmoddi4+0xa0>
 80008f8:	4607      	mov	r7, r0
 80008fa:	e6e7      	b.n	80006cc <__udivmoddi4+0x60>
 80008fc:	4618      	mov	r0, r3
 80008fe:	e6fb      	b.n	80006f8 <__udivmoddi4+0x8c>
 8000900:	4541      	cmp	r1, r8
 8000902:	d2ab      	bcs.n	800085c <__udivmoddi4+0x1f0>
 8000904:	ebb8 0a02 	subs.w	sl, r8, r2
 8000908:	eb69 020e 	sbc.w	r2, r9, lr
 800090c:	3801      	subs	r0, #1
 800090e:	4613      	mov	r3, r2
 8000910:	e7a4      	b.n	800085c <__udivmoddi4+0x1f0>
 8000912:	4660      	mov	r0, ip
 8000914:	e7e9      	b.n	80008ea <__udivmoddi4+0x27e>
 8000916:	4618      	mov	r0, r3
 8000918:	e795      	b.n	8000846 <__udivmoddi4+0x1da>
 800091a:	4667      	mov	r7, ip
 800091c:	e7d1      	b.n	80008c2 <__udivmoddi4+0x256>
 800091e:	4681      	mov	r9, r0
 8000920:	e77c      	b.n	800081c <__udivmoddi4+0x1b0>
 8000922:	3802      	subs	r0, #2
 8000924:	442c      	add	r4, r5
 8000926:	e747      	b.n	80007b8 <__udivmoddi4+0x14c>
 8000928:	f1ac 0c02 	sub.w	ip, ip, #2
 800092c:	442b      	add	r3, r5
 800092e:	e72f      	b.n	8000790 <__udivmoddi4+0x124>
 8000930:	4638      	mov	r0, r7
 8000932:	e708      	b.n	8000746 <__udivmoddi4+0xda>
 8000934:	4637      	mov	r7, r6
 8000936:	e6e9      	b.n	800070c <__udivmoddi4+0xa0>

08000938 <__aeabi_idiv0>:
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>:
Motor m3(&htim4, TIM_CHANNEL_1);
Motor m4(&htim4, TIM_CHANNEL_2);
Motor m5(&htim3, TIM_CHANNEL_4);
Motor m6(&htim3, TIM_CHANNEL_2);

Motor::Motor(TIM_HandleTypeDef *htim, uint32_t Channel)
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
	: htim(htim)
	, Channel(Channel)
	, pwm(1000)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800095a:	811a      	strh	r2, [r3, #8]
{ }
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4618      	mov	r0, r3
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_ZN2FC5Motor5startEv>:

void Motor::start(){
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(htim, Channel);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	4610      	mov	r0, r2
 800097e:	f015 fb3f 	bl	8016000 <HAL_TIM_PWM_Start>
	setPWM(1000);
 8000982:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f804 	bl	8000994 <_ZN2FC5Motor6setPWMEt>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <_ZN2FC5Motor6setPWMEt>:

void Motor::stop(){
	HAL_TIMEx_PWMN_Stop(htim, Channel);
}

void Motor::setPWM(uint16_t pwm){
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	807b      	strh	r3, [r7, #2]
	if(pwm < MIN_PWM) 			pwm = MIN_PWM;
 80009a0:	887b      	ldrh	r3, [r7, #2]
 80009a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009a6:	d203      	bcs.n	80009b0 <_ZN2FC5Motor6setPWMEt+0x1c>
 80009a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ac:	807b      	strh	r3, [r7, #2]
 80009ae:	e006      	b.n	80009be <_ZN2FC5Motor6setPWMEt+0x2a>
	else if(pwm > MAX_PWM)		pwm = MAX_PWM;
 80009b0:	887b      	ldrh	r3, [r7, #2]
 80009b2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80009b6:	d902      	bls.n	80009be <_ZN2FC5Motor6setPWMEt+0x2a>
 80009b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009bc:	807b      	strh	r3, [r7, #2]

	this->pwm = pwm;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	887a      	ldrh	r2, [r7, #2]
 80009c2:	811a      	strh	r2, [r3, #8]

	/*
	 *  pwm(1000 ~ 2000) scale to CCR register value(10500 ~ 21000);
	 */
	uint16_t output = (pwm - MIN_PWM) * ((MAX_CCR - MIN_CCR) / (MAX_PWM - MIN_PWM)) + MIN_CCR;
 80009c4:	887b      	ldrh	r3, [r7, #2]
 80009c6:	461a      	mov	r2, r3
 80009c8:	0092      	lsls	r2, r2, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d105      	bne.n	80009e6 <_ZN2FC5Motor6setPWMEt+0x52>
 80009da:	89fa      	ldrh	r2, [r7, #14]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009e4:	e02c      	b.n	8000a40 <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	d105      	bne.n	80009fa <_ZN2FC5Motor6setPWMEt+0x66>
 80009ee:	89fa      	ldrh	r2, [r7, #14]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80009f8:	e022      	b.n	8000a40 <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b08      	cmp	r3, #8
 8000a00:	d105      	bne.n	8000a0e <_ZN2FC5Motor6setPWMEt+0x7a>
 8000a02:	89fa      	ldrh	r2, [r7, #14]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000a0c:	e018      	b.n	8000a40 <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b0c      	cmp	r3, #12
 8000a14:	d105      	bne.n	8000a22 <_ZN2FC5Motor6setPWMEt+0x8e>
 8000a16:	89fa      	ldrh	r2, [r7, #14]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000a20:	e00e      	b.n	8000a40 <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b10      	cmp	r3, #16
 8000a28:	d105      	bne.n	8000a36 <_ZN2FC5Motor6setPWMEt+0xa2>
 8000a2a:	89fa      	ldrh	r2, [r7, #14]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000a34:	e004      	b.n	8000a40 <_ZN2FC5Motor6setPWMEt+0xac>
	__HAL_TIM_SET_COMPARE(htim, Channel, output);
 8000a36:	89fa      	ldrh	r2, [r7, #14]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_Z41__static_initialization_and_destruction_0ii>:

} /* namespace FC */
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d122      	bne.n	8000aa2 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d11d      	bne.n	8000aa2 <_Z41__static_initialization_and_destruction_0ii+0x56>
Motor m1(&htim4, TIM_CHANNEL_4);
 8000a66:	220c      	movs	r2, #12
 8000a68:	4910      	ldr	r1, [pc, #64]	; (8000aac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000a6a:	4811      	ldr	r0, [pc, #68]	; (8000ab0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000a6c:	f7ff ff66 	bl	800093c <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m2(&htim4, TIM_CHANNEL_3);
 8000a70:	2208      	movs	r2, #8
 8000a72:	490e      	ldr	r1, [pc, #56]	; (8000aac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000a74:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000a76:	f7ff ff61 	bl	800093c <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m3(&htim4, TIM_CHANNEL_1);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	490b      	ldr	r1, [pc, #44]	; (8000aac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000a80:	f7ff ff5c 	bl	800093c <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m4(&htim4, TIM_CHANNEL_2);
 8000a84:	2204      	movs	r2, #4
 8000a86:	4909      	ldr	r1, [pc, #36]	; (8000aac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000a8a:	f7ff ff57 	bl	800093c <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m5(&htim3, TIM_CHANNEL_4);
 8000a8e:	220c      	movs	r2, #12
 8000a90:	490b      	ldr	r1, [pc, #44]	; (8000ac0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000a94:	f7ff ff52 	bl	800093c <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
Motor m6(&htim3, TIM_CHANNEL_2);
 8000a98:	2204      	movs	r2, #4
 8000a9a:	4909      	ldr	r1, [pc, #36]	; (8000ac0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000a9c:	480a      	ldr	r0, [pc, #40]	; (8000ac8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000a9e:	f7ff ff4d 	bl	800093c <_ZN2FC5MotorC1EP17TIM_HandleTypeDefm>
} /* namespace FC */
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	24009378 	.word	0x24009378
 8000ab0:	24000164 	.word	0x24000164
 8000ab4:	24000170 	.word	0x24000170
 8000ab8:	2400017c 	.word	0x2400017c
 8000abc:	24000188 	.word	0x24000188
 8000ac0:	2400945c 	.word	0x2400945c
 8000ac4:	24000194 	.word	0x24000194
 8000ac8:	240001a0 	.word	0x240001a0

08000acc <_GLOBAL__sub_I__ZN2FC2m1E>:
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f7ff ffb9 	bl	8000a4c <_Z41__static_initialization_and_destruction_0ii>
 8000ada:	bd80      	pop	{r7, pc}

08000adc <IST8310>:
#define IST8310_MAX_VAL_XY ((1600 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_XY (-IST8310_MAX_VAL_XY)
#define IST8310_MAX_VAL_Z ((2500 / IST8310_RESOLUTION) + 1)
#define IST8310_MIN_VAL_Z (-IST8310_MAX_VAL_Z)

void IST8310(I2C_HandleTypeDef *hi2c){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	IST8310_I2C = hi2c;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <IST8310+0x24>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
	IST8310_reset();
 8000aea:	f000 f919 	bl	8000d20 <IST8310_reset>
	IST8310_write_reg(IST8310_ADDR_CTRL1, IST8310_CTRL1_MODE_CONT_200HZ);
 8000aee:	210b      	movs	r1, #11
 8000af0:	200a      	movs	r0, #10
 8000af2:	f000 f903 	bl	8000cfc <IST8310_write_reg>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	240008e8 	.word	0x240008e8

08000b04 <IST8310_updataIT>:

/*
 *  150hz gogo
 */
void IST8310_updataIT(){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af02      	add	r7, sp, #8
	if(bm_i2cFlag != bm_i2cIdle) return;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <IST8310_updataIT+0x34>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d10e      	bne.n	8000b30 <IST8310_updataIT+0x2c>

	HAL_I2C_Mem_Read_IT(IST8310_I2C, IST8310_BUS_I2C_ADDR, IST8310_ADDR_DATA_OUT_X_LSB, 1, (uint8_t*)&ist8310.buf, sizeof(ist8310.buf));
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <IST8310_updataIT+0x38>)
 8000b14:	6818      	ldr	r0, [r3, #0]
 8000b16:	2306      	movs	r3, #6
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <IST8310_updataIT+0x3c>)
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2203      	movs	r2, #3
 8000b22:	211c      	movs	r1, #28
 8000b24:	f00e fb42 	bl	800f1ac <HAL_I2C_Mem_Read_IT>
	bm_i2cFlag = bm_i2cIST8310;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <IST8310_updataIT+0x34>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	e000      	b.n	8000b32 <IST8310_updataIT+0x2e>
	if(bm_i2cFlag != bm_i2cIdle) return;
 8000b30:	bf00      	nop

}
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	24000904 	.word	0x24000904
 8000b3c:	240008e8 	.word	0x240008e8
 8000b40:	240008ec 	.word	0x240008ec
 8000b44:	00000000 	.word	0x00000000

08000b48 <IST8310_i2cRxCpltCallback>:
uint8_t IST8310_i2cRxCpltCallback(){
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cIST8310) return 0;
 8000b4c:	4b5a      	ldr	r3, [pc, #360]	; (8000cb8 <IST8310_i2cRxCpltCallback+0x170>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d001      	beq.n	8000b58 <IST8310_i2cRxCpltCallback+0x10>
 8000b54:	2300      	movs	r3, #0
 8000b56:	e098      	b.n	8000c8a <IST8310_i2cRxCpltCallback+0x142>

	bm_i2cFlag = bm_i2cIdle;
 8000b58:	4b57      	ldr	r3, [pc, #348]	; (8000cb8 <IST8310_i2cRxCpltCallback+0x170>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]

	/* swap the data we just received */
	ist8310.count.x = (((int16_t)ist8310.buf.x[1]) << 8) | (int16_t)ist8310.buf.x[0];
 8000b5e:	4b57      	ldr	r3, [pc, #348]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000b60:	795b      	ldrb	r3, [r3, #5]
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	b21a      	sxth	r2, r3
 8000b66:	4b55      	ldr	r3, [pc, #340]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000b68:	791b      	ldrb	r3, [r3, #4]
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	b21a      	sxth	r2, r3
 8000b70:	4b52      	ldr	r3, [pc, #328]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000b72:	815a      	strh	r2, [r3, #10]
	ist8310.count.y = (((int16_t)ist8310.buf.y[1]) << 8) | (int16_t)ist8310.buf.y[0];
 8000b74:	4b51      	ldr	r3, [pc, #324]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000b76:	79db      	ldrb	r3, [r3, #7]
 8000b78:	021b      	lsls	r3, r3, #8
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	4b4f      	ldr	r3, [pc, #316]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000b7e:	799b      	ldrb	r3, [r3, #6]
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b21a      	sxth	r2, r3
 8000b86:	4b4d      	ldr	r3, [pc, #308]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000b88:	819a      	strh	r2, [r3, #12]
	ist8310.count.z = (((int16_t)ist8310.buf.z[1]) << 8) | (int16_t)ist8310.buf.z[0];
 8000b8a:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000b8c:	7a5b      	ldrb	r3, [r3, #9]
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	b21a      	sxth	r2, r3
 8000b92:	4b4a      	ldr	r3, [pc, #296]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000b94:	7a1b      	ldrb	r3, [r3, #8]
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	4b47      	ldr	r3, [pc, #284]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000b9e:	81da      	strh	r2, [r3, #14]

	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8000ba0:	4b46      	ldr	r3, [pc, #280]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000ba2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000ba6:	ee07 3a90 	vmov	s15, r3
 8000baa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bae:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8000c98 <IST8310_i2cRxCpltCallback+0x150>
 8000bb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bba:	dc45      	bgt.n	8000c48 <IST8310_i2cRxCpltCallback+0x100>
 8000bbc:	4b3f      	ldr	r3, [pc, #252]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000bbe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000bc2:	ee07 3a90 	vmov	s15, r3
 8000bc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bca:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8000ca0 <IST8310_i2cRxCpltCallback+0x158>
 8000bce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd6:	d437      	bmi.n	8000c48 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8000bd8:	4b38      	ldr	r3, [pc, #224]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000bda:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000bde:	ee07 3a90 	vmov	s15, r3
 8000be2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	if (ist8310.count.x > IST8310_MAX_VAL_XY || ist8310.count.x < IST8310_MIN_VAL_XY ||
 8000be6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8000c98 <IST8310_i2cRxCpltCallback+0x150>
 8000bea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf2:	dc29      	bgt.n	8000c48 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8000bf4:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000bf6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000bfa:	ee07 3a90 	vmov	s15, r3
 8000bfe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c02:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8000ca0 <IST8310_i2cRxCpltCallback+0x158>
 8000c06:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	d41b      	bmi.n	8000c48 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000c12:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c16:	ee07 3a90 	vmov	s15, r3
 8000c1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
		ist8310.count.y > IST8310_MAX_VAL_XY || ist8310.count.y < IST8310_MIN_VAL_XY ||
 8000c1e:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000ca8 <IST8310_i2cRxCpltCallback+0x160>
 8000c22:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2a:	dc0d      	bgt.n	8000c48 <IST8310_i2cRxCpltCallback+0x100>
		ist8310.count.z > IST8310_MAX_VAL_Z  || ist8310.count.z < IST8310_MIN_VAL_Z)
 8000c2c:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000c2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c32:	ee07 3a90 	vmov	s15, r3
 8000c36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c3a:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000cb0 <IST8310_i2cRxCpltCallback+0x168>
 8000c3e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c46:	d501      	bpl.n	8000c4c <IST8310_i2cRxCpltCallback+0x104>
	{
		return 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e01e      	b.n	8000c8a <IST8310_i2cRxCpltCallback+0x142>
	 * raw outputs
	 *
	 * Sensor doesn't follow right hand rule, swap x and y to make it obey
	 * it.
	 */
	ist8310.raw[0] = (float)(ist8310.count.y);
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000c4e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c52:	ee07 3a90 	vmov	s15, r3
 8000c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000c5c:	edc3 7a04 	vstr	s15, [r3, #16]
	ist8310.raw[1] = (float)(ist8310.count.x);
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000c62:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c66:	ee07 3a90 	vmov	s15, r3
 8000c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000c70:	edc3 7a05 	vstr	s15, [r3, #20]
	ist8310.raw[2] = (float)(ist8310.count.z);
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000c76:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c7a:	ee07 3a90 	vmov	s15, r3
 8000c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <IST8310_i2cRxCpltCallback+0x174>)
 8000c84:	edc3 7a06 	vstr	s15, [r3, #24]
	return 1;
 8000c88:	2301      	movs	r3, #1
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	f3af 8000 	nop.w
 8000c98:	55555556 	.word	0x55555556
 8000c9c:	40b4d655 	.word	0x40b4d655
 8000ca0:	55555556 	.word	0x55555556
 8000ca4:	c0b4d655 	.word	0xc0b4d655
 8000ca8:	aaaaaaab 	.word	0xaaaaaaab
 8000cac:	40c0472a 	.word	0x40c0472a
 8000cb0:	aaaaaaab 	.word	0xaaaaaaab
 8000cb4:	c0c0472a 	.word	0xc0c0472a
 8000cb8:	24000904 	.word	0x24000904
 8000cbc:	240008e8 	.word	0x240008e8

08000cc0 <IST8310_write>:

void IST8310_write(uint8_t address, uint8_t *data, uint8_t count){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af04      	add	r7, sp, #16
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(IST8310_I2C, IST8310_BUS_I2C_ADDR, address, 1, data, count, IST8310_DEFAULT_TIMEOUT);
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <IST8310_write+0x38>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	2264      	movs	r2, #100	; 0x64
 8000cde:	9202      	str	r2, [sp, #8]
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	460a      	mov	r2, r1
 8000cea:	211c      	movs	r1, #28
 8000cec:	f00e f830 	bl	800ed50 <HAL_I2C_Mem_Write>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	240008e8 	.word	0x240008e8

08000cfc <IST8310_write_reg>:

void IST8310_write_reg(uint8_t reg, uint8_t val){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	460a      	mov	r2, r1
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	71bb      	strb	r3, [r7, #6]
	IST8310_write(reg, &val, 1);
 8000d0c:	1db9      	adds	r1, r7, #6
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2201      	movs	r2, #1
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ffd4 	bl	8000cc0 <IST8310_write>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <IST8310_reset>:

void IST8310_read_reg(uint8_t reg, uint8_t* val){
	IST8310_read(reg, val, 1);
}

void IST8310_reset(){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	/* software reset */
	IST8310_write_reg(IST8310_ADDR_CTRL2, IST8310_CTRL2_SRST);
 8000d24:	2101      	movs	r1, #1
 8000d26:	200b      	movs	r0, #11
 8000d28:	f7ff ffe8 	bl	8000cfc <IST8310_write_reg>

	/* configure control register 3 */
	IST8310_write_reg(IST8310_ADDR_CTRL3, IST8310_CTRL3_SAMPLEAVG_16);
 8000d2c:	2124      	movs	r1, #36	; 0x24
 8000d2e:	2041      	movs	r0, #65	; 0x41
 8000d30:	f7ff ffe4 	bl	8000cfc <IST8310_write_reg>

	/* configure control register 4 */
	IST8310_write_reg(IST8310_ADDR_CTRL4, IST8310_CTRL4_SRPD);
 8000d34:	21c0      	movs	r1, #192	; 0xc0
 8000d36:	2042      	movs	r0, #66	; 0x42
 8000d38:	f7ff ffe0 	bl	8000cfc <IST8310_write_reg>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <Lidar1D_init>:

#include "Lidar1D.h"

Lidar1D_t lidar1D={0,};

void Lidar1D_init(TIM_HandleTypeDef *htim, uint32_t directChannel, uint32_t indirectChannel){
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
		lidar1D.htim = htim;
 8000d4c:	4a39      	ldr	r2, [pc, #228]	; (8000e34 <Lidar1D_init+0xf4>)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6013      	str	r3, [r2, #0]
		lidar1D.directChannel = directChannel;
 8000d52:	4a38      	ldr	r2, [pc, #224]	; (8000e34 <Lidar1D_init+0xf4>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	6053      	str	r3, [r2, #4]
		lidar1D.indirectChannel = indirectChannel;
 8000d58:	4a36      	ldr	r2, [pc, #216]	; (8000e34 <Lidar1D_init+0xf4>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6093      	str	r3, [r2, #8]
	  switch (directChannel)
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	2b0c      	cmp	r3, #12
 8000d62:	d82d      	bhi.n	8000dc0 <Lidar1D_init+0x80>
 8000d64:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <Lidar1D_init+0x2c>)
 8000d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6a:	bf00      	nop
 8000d6c:	08000da1 	.word	0x08000da1
 8000d70:	08000dc1 	.word	0x08000dc1
 8000d74:	08000dc1 	.word	0x08000dc1
 8000d78:	08000dc1 	.word	0x08000dc1
 8000d7c:	08000da9 	.word	0x08000da9
 8000d80:	08000dc1 	.word	0x08000dc1
 8000d84:	08000dc1 	.word	0x08000dc1
 8000d88:	08000dc1 	.word	0x08000dc1
 8000d8c:	08000db1 	.word	0x08000db1
 8000d90:	08000dc1 	.word	0x08000dc1
 8000d94:	08000dc1 	.word	0x08000dc1
 8000d98:	08000dc1 	.word	0x08000dc1
 8000d9c:	08000db9 	.word	0x08000db9
	  {
	    case TIM_CHANNEL_1:
	    {
		  lidar1D.activeChannel1 = HAL_TIM_ACTIVE_CHANNEL_1;
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <Lidar1D_init+0xf4>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	731a      	strb	r2, [r3, #12]
	      break;
 8000da6:	e00c      	b.n	8000dc2 <Lidar1D_init+0x82>
	    }

	    case TIM_CHANNEL_2:
	    {
		  lidar1D.activeChannel1 = HAL_TIM_ACTIVE_CHANNEL_2;
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <Lidar1D_init+0xf4>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	731a      	strb	r2, [r3, #12]
	      break;
 8000dae:	e008      	b.n	8000dc2 <Lidar1D_init+0x82>
	    }

	    case TIM_CHANNEL_3:
	    {
		  lidar1D.activeChannel1 = HAL_TIM_ACTIVE_CHANNEL_2;
 8000db0:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <Lidar1D_init+0xf4>)
 8000db2:	2202      	movs	r2, #2
 8000db4:	731a      	strb	r2, [r3, #12]
	      break;
 8000db6:	e004      	b.n	8000dc2 <Lidar1D_init+0x82>
	    }

	    case TIM_CHANNEL_4:
	    {
		  lidar1D.activeChannel1 = HAL_TIM_ACTIVE_CHANNEL_2;
 8000db8:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <Lidar1D_init+0xf4>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	731a      	strb	r2, [r3, #12]
	      break;
 8000dbe:	e000      	b.n	8000dc2 <Lidar1D_init+0x82>
	    }
	    default:
	      break;
 8000dc0:	bf00      	nop
	  }

	  switch (indirectChannel)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0c      	cmp	r3, #12
 8000dc6:	d82d      	bhi.n	8000e24 <Lidar1D_init+0xe4>
 8000dc8:	a201      	add	r2, pc, #4	; (adr r2, 8000dd0 <Lidar1D_init+0x90>)
 8000dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dce:	bf00      	nop
 8000dd0:	08000e05 	.word	0x08000e05
 8000dd4:	08000e25 	.word	0x08000e25
 8000dd8:	08000e25 	.word	0x08000e25
 8000ddc:	08000e25 	.word	0x08000e25
 8000de0:	08000e0d 	.word	0x08000e0d
 8000de4:	08000e25 	.word	0x08000e25
 8000de8:	08000e25 	.word	0x08000e25
 8000dec:	08000e25 	.word	0x08000e25
 8000df0:	08000e15 	.word	0x08000e15
 8000df4:	08000e25 	.word	0x08000e25
 8000df8:	08000e25 	.word	0x08000e25
 8000dfc:	08000e25 	.word	0x08000e25
 8000e00:	08000e1d 	.word	0x08000e1d
	  {
	    case TIM_CHANNEL_1:
	    {
		  lidar1D.activeChannel2 = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <Lidar1D_init+0xf4>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	735a      	strb	r2, [r3, #13]
	      break;
 8000e0a:	e00c      	b.n	8000e26 <Lidar1D_init+0xe6>
	    }

	    case TIM_CHANNEL_2:
	    {
		  lidar1D.activeChannel2 = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <Lidar1D_init+0xf4>)
 8000e0e:	2202      	movs	r2, #2
 8000e10:	735a      	strb	r2, [r3, #13]
	      break;
 8000e12:	e008      	b.n	8000e26 <Lidar1D_init+0xe6>
	    }

	    case TIM_CHANNEL_3:
	    {
		  lidar1D.activeChannel2 = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <Lidar1D_init+0xf4>)
 8000e16:	2202      	movs	r2, #2
 8000e18:	735a      	strb	r2, [r3, #13]
	      break;
 8000e1a:	e004      	b.n	8000e26 <Lidar1D_init+0xe6>
	    }

	    case TIM_CHANNEL_4:
	    {
		  lidar1D.activeChannel2 = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <Lidar1D_init+0xf4>)
 8000e1e:	2202      	movs	r2, #2
 8000e20:	735a      	strb	r2, [r3, #13]
	      break;
 8000e22:	e000      	b.n	8000e26 <Lidar1D_init+0xe6>
	    }
	    default:
	      break;
 8000e24:	bf00      	nop
	  }
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	240001ac 	.word	0x240001ac

08000e38 <Lidar1D_run>:

HAL_StatusTypeDef Lidar1D_run(){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	if(HAL_TIM_IC_Start_IT(lidar1D.htim, lidar1D.directChannel) != HAL_OK) Error_Handler();
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <Lidar1D_run+0x40>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <Lidar1D_run+0x40>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	4619      	mov	r1, r3
 8000e46:	4610      	mov	r0, r2
 8000e48:	f015 fa9a 	bl	8016380 <HAL_TIM_IC_Start_IT>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <Lidar1D_run+0x1e>
 8000e52:	f008 fc6b 	bl	800972c <Error_Handler>
	if(HAL_TIM_IC_Start_IT(lidar1D.htim, lidar1D.indirectChannel) != HAL_OK) Error_Handler();
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <Lidar1D_run+0x40>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <Lidar1D_run+0x40>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4610      	mov	r0, r2
 8000e62:	f015 fa8d 	bl	8016380 <HAL_TIM_IC_Start_IT>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <Lidar1D_run+0x38>
 8000e6c:	f008 fc5e 	bl	800972c <Error_Handler>
	return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	240001ac 	.word	0x240001ac

08000e7c <Lidar1D_CaptureCallback>:


void Lidar1D_CaptureCallback(TIM_HandleTypeDef *htim){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	if(htim->Instance != lidar1D.htim->Instance) return;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <Lidar1D_CaptureCallback+0x50>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d118      	bne.n	8000ec4 <Lidar1D_CaptureCallback+0x48>

	if(htim->Channel == lidar1D.activeChannel1){
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7f1a      	ldrb	r2, [r3, #28]
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <Lidar1D_CaptureCallback+0x50>)
 8000e98:	7b1b      	ldrb	r3, [r3, #12]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d104      	bne.n	8000ea8 <Lidar1D_CaptureCallback+0x2c>
//		IC1Value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		lidar1D.htim->Instance->CNT = 0;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <Lidar1D_CaptureCallback+0x50>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if(htim->Channel == lidar1D.activeChannel2){
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7f1a      	ldrb	r2, [r3, #28]
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <Lidar1D_CaptureCallback+0x50>)
 8000eae:	7b5b      	ldrb	r3, [r3, #13]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d108      	bne.n	8000ec6 <Lidar1D_CaptureCallback+0x4a>
		lidar1D.distance_mm = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f015 fefe 	bl	8016cb8 <HAL_TIM_ReadCapturedValue>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <Lidar1D_CaptureCallback+0x50>)
 8000ec0:	611a      	str	r2, [r3, #16]
 8000ec2:	e000      	b.n	8000ec6 <Lidar1D_CaptureCallback+0x4a>
	if(htim->Instance != lidar1D.htim->Instance) return;
 8000ec4:	bf00      	nop
	}
}
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	240001ac 	.word	0x240001ac

08000ed0 <MPU9250>:
#include "stdio.h"
#include "i2c.h"
#include "cmsis_os.h"
#include "math.h"

void MPU9250(I2C_HandleTypeDef *hi2c){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	//configuration
	mpu9250.hi2c = hi2c;
 8000ed8:	4a38      	ldr	r2, [pc, #224]	; (8000fbc <MPU9250+0xec>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
	mpu9250.Ascale = MPU9250_AFS_8G;
 8000ede:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <MPU9250+0xec>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	711a      	strb	r2, [r3, #4]
	mpu9250.Gscale = MPU9250_GFS_2000DPS;
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <MPU9250+0xec>)
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	715a      	strb	r2, [r3, #5]
	mpu9250.Mscale = MPU9250_MFS_14BITS;
 8000eea:	4b34      	ldr	r3, [pc, #208]	; (8000fbc <MPU9250+0xec>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	719a      	strb	r2, [r3, #6]
	mpu9250.Mmode = MPU9250_M_100HZ;
 8000ef0:	4b32      	ldr	r3, [pc, #200]	; (8000fbc <MPU9250+0xec>)
 8000ef2:	2206      	movs	r2, #6
 8000ef4:	71da      	strb	r2, [r3, #7]

	// set to 0
	mpu9250.aRes = 0; mpu9250.gRes = 0; mpu9250.mRes = 0;
 8000ef6:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <MPU9250+0xec>)
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <MPU9250+0xec>)
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <MPU9250+0xec>)
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
	memset(mpu9250.accelCount, 0, sizeof(mpu9250.accelCount));
 8000f0e:	2206      	movs	r2, #6
 8000f10:	2100      	movs	r1, #0
 8000f12:	482b      	ldr	r0, [pc, #172]	; (8000fc0 <MPU9250+0xf0>)
 8000f14:	f021 f93d 	bl	8022192 <memset>
	memset(mpu9250.gyroCount, 0, sizeof(mpu9250.gyroCount));
 8000f18:	2206      	movs	r2, #6
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4829      	ldr	r0, [pc, #164]	; (8000fc4 <MPU9250+0xf4>)
 8000f1e:	f021 f938 	bl	8022192 <memset>
	memset(mpu9250.magCount, 0, sizeof(mpu9250.magCount));
 8000f22:	2206      	movs	r2, #6
 8000f24:	2100      	movs	r1, #0
 8000f26:	4828      	ldr	r0, [pc, #160]	; (8000fc8 <MPU9250+0xf8>)
 8000f28:	f021 f933 	bl	8022192 <memset>
	mpu9250.tmpCount = 0;
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <MPU9250+0xec>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	84da      	strh	r2, [r3, #38]	; 0x26
	memset(mpu9250.magBias, 0, sizeof(mpu9250.magBias));
 8000f32:	220c      	movs	r2, #12
 8000f34:	2100      	movs	r1, #0
 8000f36:	4825      	ldr	r0, [pc, #148]	; (8000fcc <MPU9250+0xfc>)
 8000f38:	f021 f92b 	bl	8022192 <memset>
	memset(mpu9250.accel, 0, sizeof(mpu9250.accel));
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <MPU9250+0x100>)
 8000f42:	f021 f926 	bl	8022192 <memset>
	memset(mpu9250.gyro, 0, sizeof(mpu9250.gyro));
 8000f46:	220c      	movs	r2, #12
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <MPU9250+0x104>)
 8000f4c:	f021 f921 	bl	8022192 <memset>
	memset(mpu9250.mag, 0, sizeof(mpu9250.mag));
 8000f50:	220c      	movs	r2, #12
 8000f52:	2100      	movs	r1, #0
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <MPU9250+0x108>)
 8000f56:	f021 f91c 	bl	8022192 <memset>
	mpu9250.tmp = 0;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MPU9250+0xec>)
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	665a      	str	r2, [r3, #100]	; 0x64
	memset(mpu9250.MPU9250_buffer, 0, sizeof(mpu9250.MPU9250_buffer));
 8000f62:	220e      	movs	r2, #14
 8000f64:	2100      	movs	r1, #0
 8000f66:	481d      	ldr	r0, [pc, #116]	; (8000fdc <MPU9250+0x10c>)
 8000f68:	f021 f913 	bl	8022192 <memset>
	memset(mpu9250.AK8963_buffer, 0, sizeof(mpu9250.AK8963_buffer));
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	2100      	movs	r1, #0
 8000f70:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <MPU9250+0x110>)
 8000f72:	f021 f90e 	bl	8022192 <memset>
	mpu9250.AK8963_lastUpdate = 0;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MPU9250+0xec>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	mpu9250.dmaFlag = MPU9250_dmaIdle;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MPU9250+0xec>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

	mpu9250.magBias[0] = 280.0f;
 8000f86:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <MPU9250+0xec>)
 8000f88:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <MPU9250+0x114>)
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
	mpu9250.magBias[1] = 285.0f;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <MPU9250+0xec>)
 8000f8e:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <MPU9250+0x118>)
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu9250.magBias[2] = 330.0f;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <MPU9250+0xec>)
 8000f94:	4a15      	ldr	r2, [pc, #84]	; (8000fec <MPU9250+0x11c>)
 8000f96:	631a      	str	r2, [r3, #48]	; 0x30

	MPU9250_getMres();
 8000f98:	f000 fa22 	bl	80013e0 <MPU9250_getMres>
	MPU9250_getGres();
 8000f9c:	f000 fa3c 	bl	8001418 <MPU9250_getGres>
	MPU9250_getAres();
 8000fa0:	f000 fa6c 	bl	800147c <MPU9250_getAres>

	MPU9250_resetMPU9250();
 8000fa4:	f000 fa98 	bl	80014d8 <MPU9250_resetMPU9250>
	MPU9250_calibrateMPU9250();
 8000fa8:	f000 fb84 	bl	80016b4 <MPU9250_calibrateMPU9250>

	MPU9250_initMPU9250();	// calculate ay, ac bias
 8000fac:	f000 fb0e 	bl	80015cc <MPU9250_initMPU9250>
	MPU9250_initAK8963();	//
 8000fb0:	f000 fa9e 	bl	80014f0 <MPU9250_initAK8963>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	24000570 	.word	0x24000570
 8000fc0:	24000584 	.word	0x24000584
 8000fc4:	2400058a 	.word	0x2400058a
 8000fc8:	24000590 	.word	0x24000590
 8000fcc:	24000598 	.word	0x24000598
 8000fd0:	240005b0 	.word	0x240005b0
 8000fd4:	240005bc 	.word	0x240005bc
 8000fd8:	240005c8 	.word	0x240005c8
 8000fdc:	240005d8 	.word	0x240005d8
 8000fe0:	240005e6 	.word	0x240005e6
 8000fe4:	438c0000 	.word	0x438c0000
 8000fe8:	438e8000 	.word	0x438e8000
 8000fec:	43a50000 	.word	0x43a50000

08000ff0 <MPU9250_updateDMA>:

void MPU9250_updateDMA(){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af02      	add	r7, sp, #8
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MPU9250_updateDMA+0x38>)
 8000ff8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10f      	bne.n	8001020 <MPU9250_updateDMA+0x30>
	mpu9250.dmaFlag = MPU9250_dmaMPU9250;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MPU9250_updateDMA+0x38>)
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, mpu9250.MPU9250_buffer, 14);
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MPU9250_updateDMA+0x38>)
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	230e      	movs	r3, #14
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MPU9250_updateDMA+0x3c>)
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2301      	movs	r3, #1
 8001016:	223b      	movs	r2, #59	; 0x3b
 8001018:	21d0      	movs	r1, #208	; 0xd0
 800101a:	f00e f95d 	bl	800f2d8 <HAL_I2C_Mem_Read_DMA>
 800101e:	e000      	b.n	8001022 <MPU9250_updateDMA+0x32>
	if(mpu9250.dmaFlag != MPU9250_dmaIdle) return;
 8001020:	bf00      	nop
}
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24000570 	.word	0x24000570
 800102c:	240005d8 	.word	0x240005d8

08001030 <MPU9250_i2cRxCpltCallback>:

uint8_t MPU9250_i2cRxCpltCallback(){
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af02      	add	r7, sp, #8
	static uint8_t res = 0;
	if(mpu9250.dmaFlag == MPU9250_dmaMPU9250){
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <MPU9250_i2cRxCpltCallback+0x98>)
 8001038:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800103c:	2b01      	cmp	r3, #1
 800103e:	d12a      	bne.n	8001096 <MPU9250_i2cRxCpltCallback+0x66>
		if(MPU9250_calRawData() != MPU9250_Fail){
 8001040:	f000 f848 	bl	80010d4 <MPU9250_calRawData>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d004      	beq.n	8001054 <MPU9250_i2cRxCpltCallback+0x24>
			MPU9250_calCalibValue();
 800104a:	f000 f8c5 	bl	80011d8 <MPU9250_calCalibValue>
			res = 1;
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MPU9250_i2cRxCpltCallback+0x9c>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
		}
		if(xTaskGetTickCount() - mpu9250.AK8963_lastUpdate > AK8963_UPDATE_TICK){
 8001054:	f01e f93a 	bl	801f2cc <xTaskGetTickCount>
 8001058:	4602      	mov	r2, r0
 800105a:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MPU9250_i2cRxCpltCallback+0x98>)
 800105c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d926      	bls.n	80010b4 <MPU9250_i2cRxCpltCallback+0x84>
			mpu9250.dmaFlag = MPU9250_dmaAK8963;
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MPU9250_i2cRxCpltCallback+0x98>)
 8001068:	2202      	movs	r2, #2
 800106a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			HAL_I2C_Mem_Read_DMA(mpu9250.hi2c, AK8963_ADDRESS, AK8963_XOUT_L, 1, mpu9250.AK8963_buffer, 7);
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MPU9250_i2cRxCpltCallback+0x98>)
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	2307      	movs	r3, #7
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MPU9250_i2cRxCpltCallback+0xa0>)
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2301      	movs	r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	2118      	movs	r1, #24
 8001080:	f00e f92a 	bl	800f2d8 <HAL_I2C_Mem_Read_DMA>
			mpu9250.AK8963_lastUpdate = xTaskGetTickCount();
 8001084:	f01e f922 	bl	801f2cc <xTaskGetTickCount>
 8001088:	4602      	mov	r2, r0
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MPU9250_i2cRxCpltCallback+0x98>)
 800108c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			return res;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MPU9250_i2cRxCpltCallback+0x9c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	e014      	b.n	80010c0 <MPU9250_i2cRxCpltCallback+0x90>
		}
	}
	else if(mpu9250.dmaFlag == MPU9250_dmaAK8963){
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MPU9250_i2cRxCpltCallback+0x98>)
 8001098:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800109c:	2b02      	cmp	r3, #2
 800109e:	d109      	bne.n	80010b4 <MPU9250_i2cRxCpltCallback+0x84>
		if(AK8963_calRawData() == MPU9250_Success){
 80010a0:	f000 f90c 	bl	80012bc <AK8963_calRawData>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d104      	bne.n	80010b4 <MPU9250_i2cRxCpltCallback+0x84>
			AK8963_calCalibValue();
 80010aa:	f000 f945 	bl	8001338 <AK8963_calCalibValue>
			res = 2;
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <MPU9250_i2cRxCpltCallback+0x9c>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	701a      	strb	r2, [r3, #0]
		}
	}
	mpu9250.dmaFlag = MPU9250_dmaIdle;
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <MPU9250_i2cRxCpltCallback+0x98>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	return res;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <MPU9250_i2cRxCpltCallback+0x9c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	24000570 	.word	0x24000570
 80010cc:	240001c0 	.word	0x240001c0
 80010d0:	240005e6 	.word	0x240005e6

080010d4 <MPU9250_calRawData>:

MPU9250_Result_t MPU9250_calRawData(){
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
	// accel axis reverse
	mpu9250.accelCount[0] = -((((int16_t)mpu9250.MPU9250_buffer[0]) << 8) | mpu9250.MPU9250_buffer[1]);
 80010d8:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <MPU9250_calRawData+0x100>)
 80010da:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <MPU9250_calRawData+0x100>)
 80010e4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	425b      	negs	r3, r3
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <MPU9250_calRawData+0x100>)
 80010f8:	829a      	strh	r2, [r3, #20]
	mpu9250.accelCount[1] = -((((int16_t)mpu9250.MPU9250_buffer[2]) << 8) | mpu9250.MPU9250_buffer[3]);
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <MPU9250_calRawData+0x100>)
 80010fc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b21a      	sxth	r2, r3
 8001104:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <MPU9250_calRawData+0x100>)
 8001106:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
 8001110:	b29b      	uxth	r3, r3
 8001112:	425b      	negs	r3, r3
 8001114:	b29b      	uxth	r3, r3
 8001116:	b21a      	sxth	r2, r3
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <MPU9250_calRawData+0x100>)
 800111a:	82da      	strh	r2, [r3, #22]
	mpu9250.accelCount[2] = -((((int16_t)mpu9250.MPU9250_buffer[4]) << 8) | mpu9250.MPU9250_buffer[5]);
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <MPU9250_calRawData+0x100>)
 800111e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <MPU9250_calRawData+0x100>)
 8001128:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21b      	sxth	r3, r3
 8001132:	b29b      	uxth	r3, r3
 8001134:	425b      	negs	r3, r3
 8001136:	b29b      	uxth	r3, r3
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <MPU9250_calRawData+0x100>)
 800113c:	831a      	strh	r2, [r3, #24]
	mpu9250.tmpCount = (int16_t) (mpu9250.MPU9250_buffer[6] << 8 | mpu9250.MPU9250_buffer[7]);
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <MPU9250_calRawData+0x100>)
 8001140:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <MPU9250_calRawData+0x100>)
 800114a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21a      	sxth	r2, r3
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <MPU9250_calRawData+0x100>)
 8001156:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu9250.gyroCount[0] = (((int16_t)mpu9250.MPU9250_buffer[8]) << 8) | mpu9250.MPU9250_buffer[9];
 8001158:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <MPU9250_calRawData+0x100>)
 800115a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MPU9250_calRawData+0x100>)
 8001164:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b21a      	sxth	r2, r3
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MPU9250_calRawData+0x100>)
 8001170:	835a      	strh	r2, [r3, #26]
	mpu9250.gyroCount[1] = (((int16_t)mpu9250.MPU9250_buffer[10]) << 8) | mpu9250.MPU9250_buffer[11];
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <MPU9250_calRawData+0x100>)
 8001174:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MPU9250_calRawData+0x100>)
 800117e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001182:	b21b      	sxth	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MPU9250_calRawData+0x100>)
 800118a:	839a      	strh	r2, [r3, #28]
	mpu9250.gyroCount[2] = (((int16_t)mpu9250.MPU9250_buffer[12]) << 8) | mpu9250.MPU9250_buffer[13];
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MPU9250_calRawData+0x100>)
 800118e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21a      	sxth	r2, r3
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MPU9250_calRawData+0x100>)
 8001198:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MPU9250_calRawData+0x100>)
 80011a4:	83da      	strh	r2, [r3, #30]

	if(mpu9250.accelCount[0] == 0 && mpu9250.accelCount[1] == 0 && mpu9250.accelCount[2] == 0) return MPU9250_Fail;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MPU9250_calRawData+0x100>)
 80011a8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10b      	bne.n	80011c8 <MPU9250_calRawData+0xf4>
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MPU9250_calRawData+0x100>)
 80011b2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d106      	bne.n	80011c8 <MPU9250_calRawData+0xf4>
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MPU9250_calRawData+0x100>)
 80011bc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <MPU9250_calRawData+0xf4>
 80011c4:	2300      	movs	r3, #0
 80011c6:	e000      	b.n	80011ca <MPU9250_calRawData+0xf6>

	return MPU9250_Success;
 80011c8:	2301      	movs	r3, #1
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	24000570 	.word	0x24000570

080011d8 <MPU9250_calCalibValue>:

void MPU9250_calCalibValue(){
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
//	// Calculate the gyro value into actual degrees per second
//	MPU9250_g[0] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[0]*MPU9250_gRes - MPU9250_gyroBias[0]);  // get actual gyro value, this depends on scale being set
//	MPU9250_g[1] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[1]*MPU9250_gRes - MPU9250_gyroBias[1]);
//	MPU9250_g[2] = MPU9250_DEG2RAD*((float)MPU9250_gyroCount[2]*MPU9250_gRes - MPU9250_gyroBias[2]);

	mpu9250.accel[0] = ((float)mpu9250.accelCount[0]*mpu9250.aRes);  // get actual g value, this depends on scale being set
 80011dc:	4b35      	ldr	r3, [pc, #212]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 80011de:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ea:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 80011ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80011f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f4:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 80011f6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	mpu9250.accel[1] = ((float)mpu9250.accelCount[1]*mpu9250.aRes);
 80011fa:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 80011fc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 800120a:	edd3 7a02 	vldr	s15, [r3, #8]
 800120e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 8001214:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	mpu9250.accel[2] = ((float)mpu9250.accelCount[2]*mpu9250.aRes);
 8001218:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 800121a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 8001228:	edd3 7a02 	vldr	s15, [r3, #8]
 800122c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 8001232:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	// Calculate the gyro value into actual degrees per second
	mpu9250.gyro[0] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[0]*mpu9250.gRes);  // get actual gyro value, this depends on scale being set
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 8001238:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 8001246:	edd3 7a03 	vldr	s15, [r3, #12]
 800124a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80012b8 <MPU9250_calCalibValue+0xe0>
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 8001258:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	mpu9250.gyro[1] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[1]*mpu9250.gRes);
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 800125e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 800126c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001274:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012b8 <MPU9250_calCalibValue+0xe0>
 8001278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 800127e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu9250.gyro[2] = MPU9250_DEG2RAD*((float)mpu9250.gyroCount[2]*mpu9250.gRes);
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 8001284:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 8001292:	edd3 7a03 	vldr	s15, [r3, #12]
 8001296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012b8 <MPU9250_calCalibValue+0xe0>
 800129e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <MPU9250_calCalibValue+0xdc>)
 80012a4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	24000570 	.word	0x24000570
 80012b8:	3c8efa35 	.word	0x3c8efa35

080012bc <AK8963_calRawData>:

MPU9250_Result_t AK8963_calRawData(){
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	if(mpu9250.AK8963_buffer[6] & 0x08) return MPU9250_Fail; // Check if magnetic sensor overflow set, if not then report data
 80012c0:	4b1c      	ldr	r3, [pc, #112]	; (8001334 <AK8963_calRawData+0x78>)
 80012c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <AK8963_calRawData+0x16>
 80012ce:	2300      	movs	r3, #0
 80012d0:	e02b      	b.n	800132a <AK8963_calRawData+0x6e>

	mpu9250.magCount[1] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[1] << 8) | mpu9250.AK8963_buffer[0]);  // Turn the MSB and LSB into a signed 16-bit value
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <AK8963_calRawData+0x78>)
 80012d4:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <AK8963_calRawData+0x78>)
 80012de:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <AK8963_calRawData+0x78>)
 80012ea:	845a      	strh	r2, [r3, #34]	; 0x22
	mpu9250.magCount[0] = (int16_t)(((int16_t)mpu9250.AK8963_buffer[3] << 8) | mpu9250.AK8963_buffer[2]);  // Data stored as little Endian
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <AK8963_calRawData+0x78>)
 80012ee:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <AK8963_calRawData+0x78>)
 80012f8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <AK8963_calRawData+0x78>)
 8001304:	841a      	strh	r2, [r3, #32]
	mpu9250.magCount[2] = -(int16_t)(((int16_t)mpu9250.AK8963_buffer[5] << 8) | mpu9250.AK8963_buffer[4]);
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <AK8963_calRawData+0x78>)
 8001308:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <AK8963_calRawData+0x78>)
 8001312:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21b      	sxth	r3, r3
 800131c:	b29b      	uxth	r3, r3
 800131e:	425b      	negs	r3, r3
 8001320:	b29b      	uxth	r3, r3
 8001322:	b21a      	sxth	r2, r3
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <AK8963_calRawData+0x78>)
 8001326:	849a      	strh	r2, [r3, #36]	; 0x24
	return MPU9250_Success;
 8001328:	2301      	movs	r3, #1
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	24000570 	.word	0x24000570

08001338 <AK8963_calCalibValue>:

void AK8963_calCalibValue(){
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
	// mag have different axis with acc, gyr -> ax = my, ay = mx, az = -mz
    mpu9250.mag[0] = (float)mpu9250.magCount[0]*mpu9250.mRes*mpu9250.magCalibration[0] - mpu9250.magBias[1];  // get actual magnetometer value, this depends on scale being set
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <AK8963_calCalibValue+0xa4>)
 800133e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <AK8963_calCalibValue+0xa4>)
 800134c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001350:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <AK8963_calCalibValue+0xa4>)
 8001356:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800135a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <AK8963_calCalibValue+0xa4>)
 8001360:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <AK8963_calCalibValue+0xa4>)
 800136a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    mpu9250.mag[1] = (float)mpu9250.magCount[1]*mpu9250.mRes*mpu9250.magCalibration[1] - mpu9250.magBias[0];
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <AK8963_calCalibValue+0xa4>)
 8001370:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <AK8963_calCalibValue+0xa4>)
 800137e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001382:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <AK8963_calCalibValue+0xa4>)
 8001388:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800138c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <AK8963_calCalibValue+0xa4>)
 8001392:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <AK8963_calCalibValue+0xa4>)
 800139c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    mpu9250.mag[2] = ((float)mpu9250.magCount[2]*mpu9250.mRes*mpu9250.magCalibration[2] - mpu9250.magBias[2]);
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <AK8963_calCalibValue+0xa4>)
 80013a2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80013a6:	ee07 3a90 	vmov	s15, r3
 80013aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <AK8963_calCalibValue+0xa4>)
 80013b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80013b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <AK8963_calCalibValue+0xa4>)
 80013ba:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80013be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <AK8963_calCalibValue+0xa4>)
 80013c4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80013c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <AK8963_calCalibValue+0xa4>)
 80013ce:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	24000570 	.word	0x24000570

080013e0 <MPU9250_getMres>:

void MPU9250_getMres() {
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
	switch (mpu9250.Mscale)
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MPU9250_getMres+0x2c>)
 80013e6:	799b      	ldrb	r3, [r3, #6]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <MPU9250_getMres+0x12>
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d004      	beq.n	80013fa <MPU9250_getMres+0x1a>
		  break;
	case MPU9250_MFS_16BITS:
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
		  break;
	}
}
 80013f0:	e007      	b.n	8001402 <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <MPU9250_getMres+0x2c>)
 80013f4:	4a06      	ldr	r2, [pc, #24]	; (8001410 <MPU9250_getMres+0x30>)
 80013f6:	611a      	str	r2, [r3, #16]
		  break;
 80013f8:	e003      	b.n	8001402 <MPU9250_getMres+0x22>
		  mpu9250.mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <MPU9250_getMres+0x2c>)
 80013fc:	4a05      	ldr	r2, [pc, #20]	; (8001414 <MPU9250_getMres+0x34>)
 80013fe:	611a      	str	r2, [r3, #16]
		  break;
 8001400:	bf00      	nop
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	24000570 	.word	0x24000570
 8001410:	40bfebff 	.word	0x40bfebff
 8001414:	3fbfebff 	.word	0x3fbfebff

08001418 <MPU9250_getGres>:

void MPU9250_getGres() {
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  switch (mpu9250.Gscale)
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MPU9250_getGres+0x50>)
 800141e:	795b      	ldrb	r3, [r3, #5]
 8001420:	2b03      	cmp	r3, #3
 8001422:	d81b      	bhi.n	800145c <MPU9250_getGres+0x44>
 8001424:	a201      	add	r2, pc, #4	; (adr r2, 800142c <MPU9250_getGres+0x14>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	0800143d 	.word	0x0800143d
 8001430:	08001445 	.word	0x08001445
 8001434:	0800144d 	.word	0x0800144d
 8001438:	08001455 	.word	0x08001455
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_GFS_250DPS:
    	  mpu9250.gRes = 250.0/32768.0;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MPU9250_getGres+0x50>)
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <MPU9250_getGres+0x54>)
 8001440:	60da      	str	r2, [r3, #12]
          break;
 8001442:	e00b      	b.n	800145c <MPU9250_getGres+0x44>
    case MPU9250_GFS_500DPS:
    	  mpu9250.gRes = 500.0/32768.0;
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <MPU9250_getGres+0x50>)
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <MPU9250_getGres+0x58>)
 8001448:	60da      	str	r2, [r3, #12]
          break;
 800144a:	e007      	b.n	800145c <MPU9250_getGres+0x44>
    case MPU9250_GFS_1000DPS:
    	  mpu9250.gRes = 1000.0/32768.0;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MPU9250_getGres+0x50>)
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <MPU9250_getGres+0x5c>)
 8001450:	60da      	str	r2, [r3, #12]
          break;
 8001452:	e003      	b.n	800145c <MPU9250_getGres+0x44>
    case MPU9250_GFS_2000DPS:
    	  mpu9250.gRes = 2000.0/32768.0;
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <MPU9250_getGres+0x50>)
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <MPU9250_getGres+0x60>)
 8001458:	60da      	str	r2, [r3, #12]
          break;
 800145a:	bf00      	nop
  }
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	24000570 	.word	0x24000570
 800146c:	3bfa0000 	.word	0x3bfa0000
 8001470:	3c7a0000 	.word	0x3c7a0000
 8001474:	3cfa0000 	.word	0x3cfa0000
 8001478:	3d7a0000 	.word	0x3d7a0000

0800147c <MPU9250_getAres>:


void MPU9250_getAres() {
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  switch (mpu9250.Ascale)
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MPU9250_getAres+0x58>)
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	2b03      	cmp	r3, #3
 8001486:	d81f      	bhi.n	80014c8 <MPU9250_getAres+0x4c>
 8001488:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <MPU9250_getAres+0x14>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	080014a1 	.word	0x080014a1
 8001494:	080014ab 	.word	0x080014ab
 8001498:	080014b5 	.word	0x080014b5
 800149c:	080014bf 	.word	0x080014bf
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case MPU9250_AFS_2G:
    	  mpu9250.aRes = 2.0/32768.0;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MPU9250_getAres+0x58>)
 80014a2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80014a6:	609a      	str	r2, [r3, #8]
          break;
 80014a8:	e00e      	b.n	80014c8 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_4G:
    	  mpu9250.aRes = 4.0/32768.0;
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <MPU9250_getAres+0x58>)
 80014ac:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80014b0:	609a      	str	r2, [r3, #8]
          break;
 80014b2:	e009      	b.n	80014c8 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_8G:
    	  mpu9250.aRes = 8.0/32768.0;
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <MPU9250_getAres+0x58>)
 80014b6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80014ba:	609a      	str	r2, [r3, #8]
          break;
 80014bc:	e004      	b.n	80014c8 <MPU9250_getAres+0x4c>
    case MPU9250_AFS_16G:
    	  mpu9250.aRes = 16.0/32768.0;
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <MPU9250_getAres+0x58>)
 80014c0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80014c4:	609a      	str	r2, [r3, #8]
          break;
 80014c6:	bf00      	nop
  }
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	24000570 	.word	0x24000570

080014d8 <MPU9250_resetMPU9250>:
  mpu9250.tmpCount = (int16_t)(((int16_t)rawData[0]) << 8 | rawData[1]) ;  // Turn the MSB and LSB into a 16-bit value
  return mpu9250.tmpCount;
}


void MPU9250_resetMPU9250() {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
    // reset device
    MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	216b      	movs	r1, #107	; 0x6b
 80014e0:	20d0      	movs	r0, #208	; 0xd0
 80014e2:	f000 fb3f 	bl	8001b64 <MPU9250_writeByte>
    HAL_Delay(10);
 80014e6:	200a      	movs	r0, #10
 80014e8:	f009 fe2e 	bl	800b148 <HAL_Delay>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <MPU9250_initAK8963>:

void MPU9250_initAK8963()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 80014f6:	2200      	movs	r2, #0
 80014f8:	210a      	movs	r1, #10
 80014fa:	2018      	movs	r0, #24
 80014fc:	f000 fb32 	bl	8001b64 <MPU9250_writeByte>
	HAL_Delay(10);
 8001500:	200a      	movs	r0, #10
 8001502:	f009 fe21 	bl	800b148 <HAL_Delay>
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001506:	220f      	movs	r2, #15
 8001508:	210a      	movs	r1, #10
 800150a:	2018      	movs	r0, #24
 800150c:	f000 fb2a 	bl	8001b64 <MPU9250_writeByte>
	HAL_Delay(10);
 8001510:	200a      	movs	r0, #10
 8001512:	f009 fe19 	bl	800b148 <HAL_Delay>
	MPU9250_readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2203      	movs	r2, #3
 800151a:	2110      	movs	r1, #16
 800151c:	2018      	movs	r0, #24
 800151e:	f000 fb3f 	bl	8001ba0 <MPU9250_readBytes>

	// set axis to accel axis
	mpu9250.magCalibration[1] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 8001522:	793b      	ldrb	r3, [r7, #4]
 8001524:	3b80      	subs	r3, #128	; 0x80
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152e:	eddf 6a25 	vldr	s13, [pc, #148]	; 80015c4 <MPU9250_initAK8963+0xd4>
 8001532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800153a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800153e:	4b22      	ldr	r3, [pc, #136]	; (80015c8 <MPU9250_initAK8963+0xd8>)
 8001540:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	mpu9250.magCalibration[0] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 8001544:	797b      	ldrb	r3, [r7, #5]
 8001546:	3b80      	subs	r3, #128	; 0x80
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001550:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80015c4 <MPU9250_initAK8963+0xd4>
 8001554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800155c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <MPU9250_initAK8963+0xd8>)
 8001562:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu9250.magCalibration[2] =  ((float)(rawData[2] - 128)/256.0f + 1.0f);
 8001566:	79bb      	ldrb	r3, [r7, #6]
 8001568:	3b80      	subs	r3, #128	; 0x80
 800156a:	ee07 3a90 	vmov	s15, r3
 800156e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001572:	eddf 6a14 	vldr	s13, [pc, #80]	; 80015c4 <MPU9250_initAK8963+0xd4>
 8001576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800157e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MPU9250_initAK8963+0xd8>)
 8001584:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8001588:	2200      	movs	r2, #0
 800158a:	210a      	movs	r1, #10
 800158c:	2018      	movs	r0, #24
 800158e:	f000 fae9 	bl	8001b64 <MPU9250_writeByte>
	HAL_Delay(10);
 8001592:	200a      	movs	r0, #10
 8001594:	f009 fdd8 	bl	800b148 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	MPU9250_writeByte(AK8963_ADDRESS, AK8963_CNTL, mpu9250.Mscale << 4 | mpu9250.Mmode); // Set magnetometer data resolution and sample ODR
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MPU9250_initAK8963+0xd8>)
 800159a:	799b      	ldrb	r3, [r3, #6]
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MPU9250_initAK8963+0xd8>)
 80015a2:	79db      	ldrb	r3, [r3, #7]
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	210a      	movs	r1, #10
 80015b0:	2018      	movs	r0, #24
 80015b2:	f000 fad7 	bl	8001b64 <MPU9250_writeByte>
	HAL_Delay(10);
 80015b6:	200a      	movs	r0, #10
 80015b8:	f009 fdc6 	bl	800b148 <HAL_Delay>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	43800000 	.word	0x43800000
 80015c8:	24000570 	.word	0x24000570

080015cc <MPU9250_initMPU9250>:


void MPU9250_initMPU9250()
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 // Initialize MPU9250 device
 // wake up device
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80015d2:	2200      	movs	r2, #0
 80015d4:	216b      	movs	r1, #107	; 0x6b
 80015d6:	20d0      	movs	r0, #208	; 0xd0
 80015d8:	f000 fac4 	bl	8001b64 <MPU9250_writeByte>
  HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80015dc:	2064      	movs	r0, #100	; 0x64
 80015de:	f009 fdb3 	bl	800b148 <HAL_Delay>

 // get stable time source
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80015e2:	2201      	movs	r2, #1
 80015e4:	216b      	movs	r1, #107	; 0x6b
 80015e6:	20d0      	movs	r0, #208	; 0xd0
 80015e8:	f000 fabc 	bl	8001b64 <MPU9250_writeByte>

 // Configure Gyro and Accelerometer
 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 80015ec:	2203      	movs	r2, #3
 80015ee:	211a      	movs	r1, #26
 80015f0:	20d0      	movs	r0, #208	; 0xd0
 80015f2:	f000 fab7 	bl	8001b64 <MPU9250_writeByte>

 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 80015f6:	2204      	movs	r2, #4
 80015f8:	2119      	movs	r1, #25
 80015fa:	20d0      	movs	r0, #208	; 0xd0
 80015fc:	f000 fab2 	bl	8001b64 <MPU9250_writeByte>

 // Set gyroscope full scale range
 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
  uint8_t c = MPU9250_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 8001600:	211b      	movs	r1, #27
 8001602:	20d0      	movs	r0, #208	; 0xd0
 8001604:	f000 faee 	bl	8001be4 <MPU9250_readByte>
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x02; // Clear Fchoice bits [1:0]
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f023 0302 	bic.w	r3, r3, #2
 8001612:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x18; // Clear AFS bits [4:3]
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f023 0318 	bic.w	r3, r3, #24
 800161a:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Gscale << 3; // Set full scale range for the gyro
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <MPU9250_initMPU9250+0xe4>)
 800161e:	795b      	ldrb	r3, [r3, #5]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	b25a      	sxtb	r2, r3
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	4313      	orrs	r3, r2
 800162a:	b25b      	sxtb	r3, r3
 800162c:	71fb      	strb	r3, [r7, #7]
 // c =| 0x00; // Set Fchoice for the gyro to 11 by writing i
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to regts inverse to bits 1:0 of GYRO_CONFIGister
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	461a      	mov	r2, r3
 8001632:	211b      	movs	r1, #27
 8001634:	20d0      	movs	r0, #208	; 0xd0
 8001636:	f000 fa95 	bl	8001b64 <MPU9250_writeByte>

 // Set accelerometer full-scale range configuration
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 800163a:	211c      	movs	r1, #28
 800163c:	20d0      	movs	r0, #208	; 0xd0
 800163e:	f000 fad1 	bl	8001be4 <MPU9250_readByte>
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
 // c = c & ~0xE0; // Clear self-test bits [7:5]
  c = c & ~0x18;  // Clear AFS bits [4:3]
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f023 0318 	bic.w	r3, r3, #24
 800164c:	71fb      	strb	r3, [r7, #7]
  c = c | mpu9250.Ascale << 3; // Set full scale range for the accelerometer
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MPU9250_initMPU9250+0xe4>)
 8001650:	791b      	ldrb	r3, [r3, #4]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	b25a      	sxtb	r2, r3
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	4313      	orrs	r3, r2
 800165c:	b25b      	sxtb	r3, r3
 800165e:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	461a      	mov	r2, r3
 8001664:	211c      	movs	r1, #28
 8001666:	20d0      	movs	r0, #208	; 0xd0
 8001668:	f000 fa7c 	bl	8001b64 <MPU9250_writeByte>

 // Set accelerometer sample rate configuration
 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
  c = MPU9250_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 800166c:	211d      	movs	r1, #29
 800166e:	20d0      	movs	r0, #208	; 0xd0
 8001670:	f000 fab8 	bl	8001be4 <MPU9250_readByte>
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f023 030f 	bic.w	r3, r3, #15
 800167e:	71fb      	strb	r3, [r7, #7]
  c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f043 0303 	orr.w	r3, r3, #3
 8001686:	71fb      	strb	r3, [r7, #7]
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	461a      	mov	r2, r3
 800168c:	211d      	movs	r1, #29
 800168e:	20d0      	movs	r0, #208	; 0xd0
 8001690:	f000 fa68 	bl	8001b64 <MPU9250_writeByte>
 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

  // Configure Interrupts and Bypass Enable
  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
  // can join the I2C bus and all can be controlled by the Arduino as master
  MPU9250_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8001694:	2222      	movs	r2, #34	; 0x22
 8001696:	2137      	movs	r1, #55	; 0x37
 8001698:	20d0      	movs	r0, #208	; 0xd0
 800169a:	f000 fa63 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 800169e:	2201      	movs	r2, #1
 80016a0:	2138      	movs	r1, #56	; 0x38
 80016a2:	20d0      	movs	r0, #208	; 0xd0
 80016a4:	f000 fa5e 	bl	8001b64 <MPU9250_writeByte>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	24000570 	.word	0x24000570

080016b4 <MPU9250_calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void MPU9250_calibrateMPU9250()
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b094      	sub	sp, #80	; 0x50
 80016b8:	af00      	add	r7, sp, #0
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3] = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016be:	2300      	movs	r3, #0
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
 80016c2:	2300      	movs	r3, #0
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28

// reset device, reset all registers, clear gyro and accelerometer bias registers
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	216b      	movs	r1, #107	; 0x6b
 80016d6:	20d0      	movs	r0, #208	; 0xd0
 80016d8:	f000 fa44 	bl	8001b64 <MPU9250_writeByte>
  HAL_Delay(100);
 80016dc:	2064      	movs	r0, #100	; 0x64
 80016de:	f009 fd33 	bl	800b148 <HAL_Delay>

// get stable time source
// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 80016e2:	2201      	movs	r2, #1
 80016e4:	216b      	movs	r1, #107	; 0x6b
 80016e6:	20d0      	movs	r0, #208	; 0xd0
 80016e8:	f000 fa3c 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 80016ec:	2200      	movs	r2, #0
 80016ee:	216c      	movs	r1, #108	; 0x6c
 80016f0:	20d0      	movs	r0, #208	; 0xd0
 80016f2:	f000 fa37 	bl	8001b64 <MPU9250_writeByte>
  HAL_Delay(200);
 80016f6:	20c8      	movs	r0, #200	; 0xc8
 80016f8:	f009 fd26 	bl	800b148 <HAL_Delay>

// Configure device for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 80016fc:	2200      	movs	r2, #0
 80016fe:	2138      	movs	r1, #56	; 0x38
 8001700:	20d0      	movs	r0, #208	; 0xd0
 8001702:	f000 fa2f 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8001706:	2200      	movs	r2, #0
 8001708:	2123      	movs	r1, #35	; 0x23
 800170a:	20d0      	movs	r0, #208	; 0xd0
 800170c:	f000 fa2a 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8001710:	2200      	movs	r2, #0
 8001712:	216b      	movs	r1, #107	; 0x6b
 8001714:	20d0      	movs	r0, #208	; 0xd0
 8001716:	f000 fa25 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 800171a:	2200      	movs	r2, #0
 800171c:	2124      	movs	r1, #36	; 0x24
 800171e:	20d0      	movs	r0, #208	; 0xd0
 8001720:	f000 fa20 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8001724:	2200      	movs	r2, #0
 8001726:	216a      	movs	r1, #106	; 0x6a
 8001728:	20d0      	movs	r0, #208	; 0xd0
 800172a:	f000 fa1b 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 800172e:	220c      	movs	r2, #12
 8001730:	216a      	movs	r1, #106	; 0x6a
 8001732:	20d0      	movs	r0, #208	; 0xd0
 8001734:	f000 fa16 	bl	8001b64 <MPU9250_writeByte>
  HAL_Delay(15);
 8001738:	200f      	movs	r0, #15
 800173a:	f009 fd05 	bl	800b148 <HAL_Delay>

// Configure MPU9250 gyro and accelerometer for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 800173e:	2201      	movs	r2, #1
 8001740:	211a      	movs	r1, #26
 8001742:	20d0      	movs	r0, #208	; 0xd0
 8001744:	f000 fa0e 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001748:	2200      	movs	r2, #0
 800174a:	2119      	movs	r1, #25
 800174c:	20d0      	movs	r0, #208	; 0xd0
 800174e:	f000 fa09 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001752:	2200      	movs	r2, #0
 8001754:	211b      	movs	r1, #27
 8001756:	20d0      	movs	r0, #208	; 0xd0
 8001758:	f000 fa04 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 800175c:	2200      	movs	r2, #0
 800175e:	211c      	movs	r1, #28
 8001760:	20d0      	movs	r0, #208	; 0xd0
 8001762:	f000 f9ff 	bl	8001b64 <MPU9250_writeByte>

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU9250_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8001766:	2240      	movs	r2, #64	; 0x40
 8001768:	216a      	movs	r1, #106	; 0x6a
 800176a:	20d0      	movs	r0, #208	; 0xd0
 800176c:	f000 f9fa 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001770:	2278      	movs	r2, #120	; 0x78
 8001772:	2123      	movs	r1, #35	; 0x23
 8001774:	20d0      	movs	r0, #208	; 0xd0
 8001776:	f000 f9f5 	bl	8001b64 <MPU9250_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 800177a:	2028      	movs	r0, #40	; 0x28
 800177c:	f009 fce4 	bl	800b148 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU9250_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001780:	2200      	movs	r2, #0
 8001782:	2123      	movs	r1, #35	; 0x23
 8001784:	20d0      	movs	r0, #208	; 0xd0
 8001786:	f000 f9ed 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 800178a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800178e:	2202      	movs	r2, #2
 8001790:	2172      	movs	r1, #114	; 0x72
 8001792:	20d0      	movs	r0, #208	; 0xd0
 8001794:	f000 fa04 	bl	8001ba0 <MPU9250_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001798:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	b21a      	sxth	r2, r3
 80017a0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	4313      	orrs	r3, r2
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 80017ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80017b2:	4ab3      	ldr	r2, [pc, #716]	; (8001a80 <MPU9250_calibrateMPU9250+0x3cc>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	08db      	lsrs	r3, r3, #3
 80017ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

  for (ii = 0; ii < packet_count; ii++) {
 80017be:	2300      	movs	r3, #0
 80017c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80017c4:	e071      	b.n	80018aa <MPU9250_calibrateMPU9250+0x1f6>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 80017c6:	2300      	movs	r3, #0
 80017c8:	813b      	strh	r3, [r7, #8]
 80017ca:	2300      	movs	r3, #0
 80017cc:	817b      	strh	r3, [r7, #10]
 80017ce:	2300      	movs	r3, #0
 80017d0:	81bb      	strh	r3, [r7, #12]
 80017d2:	2300      	movs	r3, #0
 80017d4:	803b      	strh	r3, [r7, #0]
 80017d6:	2300      	movs	r3, #0
 80017d8:	807b      	strh	r3, [r7, #2]
 80017da:	2300      	movs	r3, #0
 80017dc:	80bb      	strh	r3, [r7, #4]
    MPU9250_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 80017de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017e2:	220c      	movs	r2, #12
 80017e4:	2174      	movs	r1, #116	; 0x74
 80017e6:	20d0      	movs	r0, #208	; 0xd0
 80017e8:	f000 f9da 	bl	8001ba0 <MPU9250_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80017ec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	813b      	strh	r3, [r7, #8]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001800:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800180c:	b21b      	sxth	r3, r3
 800180e:	4313      	orrs	r3, r2
 8001810:	b21b      	sxth	r3, r3
 8001812:	817b      	strh	r3, [r7, #10]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001814:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	b21a      	sxth	r2, r3
 800181c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001820:	b21b      	sxth	r3, r3
 8001822:	4313      	orrs	r3, r2
 8001824:	b21b      	sxth	r3, r3
 8001826:	81bb      	strh	r3, [r7, #12]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001828:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	b21a      	sxth	r2, r3
 8001830:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001834:	b21b      	sxth	r3, r3
 8001836:	4313      	orrs	r3, r2
 8001838:	b21b      	sxth	r3, r3
 800183a:	803b      	strh	r3, [r7, #0]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 800183c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	b21a      	sxth	r2, r3
 8001844:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21b      	sxth	r3, r3
 800184e:	807b      	strh	r3, [r7, #2]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001850:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800185c:	b21b      	sxth	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	b21b      	sxth	r3, r3
 8001862:	80bb      	strh	r3, [r7, #4]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800186a:	4413      	add	r3, r2
 800186c:	623b      	str	r3, [r7, #32]
    accel_bias[1] += (int32_t) accel_temp[1];
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001874:	4413      	add	r3, r2
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] += (int32_t) accel_temp[2];
 8001878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001884:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001888:	4413      	add	r3, r2
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 800188c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001892:	4413      	add	r3, r2
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001898:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
  for (ii = 0; ii < packet_count; ii++) {
 80018a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018a4:	3301      	adds	r3, #1
 80018a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80018aa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80018ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d387      	bcc.n	80017c6 <MPU9250_calibrateMPU9250+0x112>

  }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80018b6:	6a3a      	ldr	r2, [r7, #32]
 80018b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c0:	623b      	str	r3, [r7, #32]
    accel_bias[1] /= (int32_t) packet_count;
 80018c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    accel_bias[2] /= (int32_t) packet_count;
 80018ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias[0]  /= (int32_t) packet_count;
 80018da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    gyro_bias[1]  /= (int32_t) packet_count;
 80018e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018e8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
    gyro_bias[2]  /= (int32_t) packet_count;
 80018f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34

    uint16_t accelsensitivity = (uint16_t)(1/mpu9250.aRes);
 80018fe:	4b61      	ldr	r3, [pc, #388]	; (8001a84 <MPU9250_calibrateMPU9250+0x3d0>)
 8001900:	ed93 7a02 	vldr	s14, [r3, #8]
 8001904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800190c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001910:	ee17 3a90 	vmov	r3, s15
 8001914:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
//    uint16_t gyrosensitivity = (uint16_t)(1/mpu9250.gRes);
//    printf("%u, %u", accelsensitivity, gyrosensitivity);

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191a:	2b00      	cmp	r3, #0
 800191c:	dd05      	ble.n	800192a <MPU9250_calibrateMPU9250+0x276>
 800191e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001920:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
 8001928:	e004      	b.n	8001934 <MPU9250_calibrateMPU9250+0x280>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 800192a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800192c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001930:	4413      	add	r3, r2
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	425b      	negs	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	da00      	bge.n	800193e <MPU9250_calibrateMPU9250+0x28a>
 800193c:	3303      	adds	r3, #3
 800193e:	109b      	asrs	r3, r3, #2
 8001940:	121b      	asrs	r3, r3, #8
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194a:	425b      	negs	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	da00      	bge.n	8001952 <MPU9250_calibrateMPU9250+0x29e>
 8001950:	3303      	adds	r3, #3
 8001952:	109b      	asrs	r3, r3, #2
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 800195a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800195c:	425b      	negs	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	da00      	bge.n	8001964 <MPU9250_calibrateMPU9250+0x2b0>
 8001962:	3303      	adds	r3, #3
 8001964:	109b      	asrs	r3, r3, #2
 8001966:	121b      	asrs	r3, r3, #8
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 800196e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001970:	425b      	negs	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	da00      	bge.n	8001978 <MPU9250_calibrateMPU9250+0x2c4>
 8001976:	3303      	adds	r3, #3
 8001978:	109b      	asrs	r3, r3, #2
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8001980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001982:	425b      	negs	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	da00      	bge.n	800198a <MPU9250_calibrateMPU9250+0x2d6>
 8001988:	3303      	adds	r3, #3
 800198a:	109b      	asrs	r3, r3, #2
 800198c:	121b      	asrs	r3, r3, #8
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	425b      	negs	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	da00      	bge.n	800199e <MPU9250_calibrateMPU9250+0x2ea>
 800199c:	3303      	adds	r3, #3
 800199e:	109b      	asrs	r3, r3, #2
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

/// Push gyro biases to hardware registers
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 80019a6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80019aa:	461a      	mov	r2, r3
 80019ac:	2113      	movs	r1, #19
 80019ae:	20d0      	movs	r0, #208	; 0xd0
 80019b0:	f000 f8d8 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 80019b4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80019b8:	461a      	mov	r2, r3
 80019ba:	2114      	movs	r1, #20
 80019bc:	20d0      	movs	r0, #208	; 0xd0
 80019be:	f000 f8d1 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 80019c2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80019c6:	461a      	mov	r2, r3
 80019c8:	2115      	movs	r1, #21
 80019ca:	20d0      	movs	r0, #208	; 0xd0
 80019cc:	f000 f8ca 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 80019d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019d4:	461a      	mov	r2, r3
 80019d6:	2116      	movs	r1, #22
 80019d8:	20d0      	movs	r0, #208	; 0xd0
 80019da:	f000 f8c3 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 80019de:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019e2:	461a      	mov	r2, r3
 80019e4:	2117      	movs	r1, #23
 80019e6:	20d0      	movs	r0, #208	; 0xd0
 80019e8:	f000 f8bc 	bl	8001b64 <MPU9250_writeByte>
  MPU9250_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 80019ec:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80019f0:	461a      	mov	r2, r3
 80019f2:	2118      	movs	r1, #24
 80019f4:	20d0      	movs	r0, #208	; 0xd0
 80019f6:	f000 f8b5 	bl	8001b64 <MPU9250_writeByte>
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
  MPU9250_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8001a06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	2177      	movs	r1, #119	; 0x77
 8001a0e:	20d0      	movs	r0, #208	; 0xd0
 8001a10:	f000 f8c6 	bl	8001ba0 <MPU9250_readBytes>
  accel_bias_reg[0] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a14:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a22:	4313      	orrs	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]
  MPU9250_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 8001a26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	217a      	movs	r1, #122	; 0x7a
 8001a2e:	20d0      	movs	r0, #208	; 0xd0
 8001a30:	f000 f8b6 	bl	8001ba0 <MPU9250_readBytes>
  accel_bias_reg[1] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a34:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
  MPU9250_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 8001a46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	217d      	movs	r1, #125	; 0x7d
 8001a4e:	20d0      	movs	r0, #208	; 0xd0
 8001a50:	f000 f8a6 	bl	8001ba0 <MPU9250_readBytes>
  accel_bias_reg[2] = (int16_t) ((int16_t)data[0] << 8) | data[1];
 8001a54:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61fb      	str	r3, [r7, #28]

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8001a66:	2301      	movs	r3, #1
 8001a68:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	743b      	strb	r3, [r7, #16]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	747b      	strb	r3, [r7, #17]
 8001a72:	2300      	movs	r3, #0
 8001a74:	74bb      	strb	r3, [r7, #18]

  for(ii = 0; ii < 3; ii++) {
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001a7c:	e01e      	b.n	8001abc <MPU9250_calibrateMPU9250+0x408>
 8001a7e:	bf00      	nop
 8001a80:	aaaaaaab 	.word	0xaaaaaaab
 8001a84:	24000570 	.word	0x24000570
    if(accel_bias_reg[ii] & mask) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 8001a88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001a92:	4413      	add	r3, r2
 8001a94:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <MPU9250_calibrateMPU9250+0x3fe>
 8001aa2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001aa6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001aaa:	4413      	add	r3, r2
 8001aac:	2201      	movs	r2, #1
 8001aae:	f803 2c40 	strb.w	r2, [r3, #-64]
  for(ii = 0; ii < 3; ii++) {
 8001ab2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001abc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d9e1      	bls.n	8001a88 <MPU9250_calibrateMPU9250+0x3d4>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	da00      	bge.n	8001ace <MPU9250_calibrateMPU9250+0x41a>
 8001acc:	3307      	adds	r3, #7
 8001ace:	10db      	asrs	r3, r3, #3
 8001ad0:	425b      	negs	r3, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da00      	bge.n	8001ae0 <MPU9250_calibrateMPU9250+0x42c>
 8001ade:	3307      	adds	r3, #7
 8001ae0:	10db      	asrs	r3, r3, #3
 8001ae2:	425b      	negs	r3, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	da00      	bge.n	8001af2 <MPU9250_calibrateMPU9250+0x43e>
 8001af0:	3307      	adds	r3, #7
 8001af2:	10db      	asrs	r3, r3, #3
 8001af4:	425b      	negs	r3, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	61fb      	str	r3, [r7, #28]

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	121b      	asrs	r3, r3, #8
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  data[1] = (accel_bias_reg[0])      & 0xFF;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001b0c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8001b10:	7c3b      	ldrb	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	121b      	asrs	r3, r3, #8
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  data[3] = (accel_bias_reg[1])      & 0xFF;
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001b2c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001b30:	7c7b      	ldrb	r3, [r7, #17]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	121b      	asrs	r3, r3, #8
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  data[5] = (accel_bias_reg[2])      & 0xFF;
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8001b4c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b50:	7cbb      	ldrb	r3, [r7, #18]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

// Output scaled accelerometer biases for manual subtraction in the main program
//    MPU9250_accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
//    MPU9250_accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
//    MPU9250_accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
}
 8001b5a:	bf00      	nop
 8001b5c:	3750      	adds	r7, #80	; 0x50
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop

08001b64 <MPU9250_writeByte>:
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
   }
}

void MPU9250_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af04      	add	r7, sp, #16
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	71bb      	strb	r3, [r7, #6]
 8001b72:	4613      	mov	r3, r2
 8001b74:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(mpu9250.hi2c, address, subAddress, 1, &data, 1, MPU9250_DEFAULT_TIMEOUT);
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MPU9250_writeByte+0x38>)
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	b299      	uxth	r1, r3
 8001b7e:	79bb      	ldrb	r3, [r7, #6]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	2364      	movs	r3, #100	; 0x64
 8001b84:	9302      	str	r3, [sp, #8]
 8001b86:	2301      	movs	r3, #1
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	1d7b      	adds	r3, r7, #5
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	f00d f8de 	bl	800ed50 <HAL_I2C_Mem_Write>
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	24000570 	.word	0x24000570

08001ba0 <MPU9250_readBytes>:

void MPU9250_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af04      	add	r7, sp, #16
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	4603      	mov	r3, r0
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	460b      	mov	r3, r1
 8001bae:	71bb      	strb	r3, [r7, #6]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(mpu9250.hi2c, address, subAddress, 1, (uint8_t*)dest, count, MPU9250_DEFAULT_TIMEOUT);
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <MPU9250_readBytes+0x40>)
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	b299      	uxth	r1, r3
 8001bbc:	79bb      	ldrb	r3, [r7, #6]
 8001bbe:	b29c      	uxth	r4, r3
 8001bc0:	797b      	ldrb	r3, [r7, #5]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	2264      	movs	r2, #100	; 0x64
 8001bc6:	9202      	str	r2, [sp, #8]
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	4622      	mov	r2, r4
 8001bd2:	f00d f9d1 	bl	800ef78 <HAL_I2C_Mem_Read>
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd90      	pop	{r4, r7, pc}
 8001bde:	bf00      	nop
 8001be0:	24000570 	.word	0x24000570

08001be4 <MPU9250_readByte>:

char MPU9250_readByte(uint8_t address, uint8_t subAddress)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	460a      	mov	r2, r1
 8001bee:	71fb      	strb	r3, [r7, #7]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	71bb      	strb	r3, [r7, #6]
	char data; // `data` will store the register data
	MPU9250_readBytes(address, subAddress, 1, (uint8_t*)&data);
 8001bf4:	f107 030f 	add.w	r3, r7, #15
 8001bf8:	79b9      	ldrb	r1, [r7, #6]
 8001bfa:	79f8      	ldrb	r0, [r7, #7]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f7ff ffcf 	bl	8001ba0 <MPU9250_readBytes>
	return data;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <BME280_init>:
#include "bme280.h"
#include "math.h"

BME280_t bme280 = {0,};

void BME280_init(I2C_HandleTypeDef *hi2c, uint8_t Posr, uint8_t Hosr, uint8_t Tosr, uint8_t Mode, uint8_t IIRFilter, uint8_t SBy){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	4608      	mov	r0, r1
 8001c16:	4611      	mov	r1, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	70fb      	strb	r3, [r7, #3]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	70bb      	strb	r3, [r7, #2]
 8001c22:	4613      	mov	r3, r2
 8001c24:	707b      	strb	r3, [r7, #1]
	bme280.hi2c = hi2c;
 8001c26:	4a6f      	ldr	r2, [pc, #444]	; (8001de4 <BME280_init+0x1d8>)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6013      	str	r3, [r2, #0]
	BME280_reset();
 8001c2c:	f000 f958 	bl	8001ee0 <BME280_reset>
	// Configure the BME280
	// Set H oversampling rate
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_HUM, 0x07 & Hosr);
 8001c30:	78bb      	ldrb	r3, [r7, #2]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	21f2      	movs	r1, #242	; 0xf2
 8001c3c:	20ec      	movs	r0, #236	; 0xec
 8001c3e:	f000 fb43 	bl	80022c8 <BME280_writeByte>
	// Set T and P oversampling rates and sensor mode
	BME280_writeByte(BME280_ADDRESS, BME280_CTRL_MEAS, Tosr << 5 | Posr << 2 | Mode);
 8001c42:	787b      	ldrb	r3, [r7, #1]
 8001c44:	015b      	lsls	r3, r3, #5
 8001c46:	b25a      	sxtb	r2, r3
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	b25b      	sxtb	r3, r3
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	b25a      	sxtb	r2, r3
 8001c52:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8001c56:	4313      	orrs	r3, r2
 8001c58:	b25b      	sxtb	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	21f4      	movs	r1, #244	; 0xf4
 8001c60:	20ec      	movs	r0, #236	; 0xec
 8001c62:	f000 fb31 	bl	80022c8 <BME280_writeByte>
	// Set standby time interval in normal mode and bandwidth
	BME280_writeByte(BME280_ADDRESS, BME280_CONFIG, SBy << 5 | IIRFilter << 2);
 8001c66:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001c6a:	015b      	lsls	r3, r3, #5
 8001c6c:	b25a      	sxtb	r2, r3
 8001c6e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	4313      	orrs	r3, r2
 8001c78:	b25b      	sxtb	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	21f5      	movs	r1, #245	; 0xf5
 8001c80:	20ec      	movs	r0, #236	; 0xec
 8001c82:	f000 fb21 	bl	80022c8 <BME280_writeByte>

	//wait.
	HAL_Delay(50);
 8001c86:	2032      	movs	r0, #50	; 0x32
 8001c88:	f009 fa5e 	bl	800b148 <HAL_Delay>
	uint8_t calib[26];
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB00, 26, &calib[0]);
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	221a      	movs	r2, #26
 8001c92:	2188      	movs	r1, #136	; 0x88
 8001c94:	20ec      	movs	r0, #236	; 0xec
 8001c96:	f000 fb35 	bl	8002304 <BME280_readBytes>
	bme280._dig_T1 = (uint16_t)(((uint16_t) calib[1] << 8) | calib[0]);
 8001c9a:	7b7b      	ldrb	r3, [r7, #13]
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	7b3b      	ldrb	r3, [r7, #12]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <BME280_init+0x1d8>)
 8001cac:	821a      	strh	r2, [r3, #16]
	bme280._dig_T2 = ( int16_t)((( int16_t) calib[3] << 8) | calib[2]);
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	7bbb      	ldrb	r3, [r7, #14]
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <BME280_init+0x1d8>)
 8001cbe:	831a      	strh	r2, [r3, #24]
	bme280._dig_T3 = ( int16_t)((( int16_t) calib[5] << 8) | calib[4]);
 8001cc0:	7c7b      	ldrb	r3, [r7, #17]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	7c3b      	ldrb	r3, [r7, #16]
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b21a      	sxth	r2, r3
 8001cce:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <BME280_init+0x1d8>)
 8001cd0:	835a      	strh	r2, [r3, #26]
	bme280._dig_P1 = (uint16_t)(((uint16_t) calib[7] << 8) | calib[6]);
 8001cd2:	7cfb      	ldrb	r3, [r7, #19]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	7cbb      	ldrb	r3, [r7, #18]
 8001cda:	b21b      	sxth	r3, r3
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <BME280_init+0x1d8>)
 8001ce4:	825a      	strh	r2, [r3, #18]
	bme280._dig_P2 = ( int16_t)((( int16_t) calib[9] << 8) | calib[8]);
 8001ce6:	7d7b      	ldrb	r3, [r7, #21]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	7d3b      	ldrb	r3, [r7, #20]
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b21a      	sxth	r2, r3
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <BME280_init+0x1d8>)
 8001cf6:	839a      	strh	r2, [r3, #28]
	bme280._dig_P3 = ( int16_t)((( int16_t) calib[11] << 8) | calib[10]);
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	b21a      	sxth	r2, r3
 8001cfe:	7dbb      	ldrb	r3, [r7, #22]
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	4313      	orrs	r3, r2
 8001d04:	b21a      	sxth	r2, r3
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <BME280_init+0x1d8>)
 8001d08:	83da      	strh	r2, [r3, #30]
	bme280._dig_P4 = ( int16_t)((( int16_t) calib[13] << 8) | calib[12]);
 8001d0a:	7e7b      	ldrb	r3, [r7, #25]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	7e3b      	ldrb	r3, [r7, #24]
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <BME280_init+0x1d8>)
 8001d1a:	841a      	strh	r2, [r3, #32]
	bme280._dig_P5 = ( int16_t)((( int16_t) calib[15] << 8) | calib[14]);
 8001d1c:	7efb      	ldrb	r3, [r7, #27]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	b21a      	sxth	r2, r3
 8001d22:	7ebb      	ldrb	r3, [r7, #26]
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	4313      	orrs	r3, r2
 8001d28:	b21a      	sxth	r2, r3
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <BME280_init+0x1d8>)
 8001d2c:	845a      	strh	r2, [r3, #34]	; 0x22
	bme280._dig_P6 = ( int16_t)((( int16_t) calib[17] << 8) | calib[16]);
 8001d2e:	7f7b      	ldrb	r3, [r7, #29]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	b21a      	sxth	r2, r3
 8001d34:	7f3b      	ldrb	r3, [r7, #28]
 8001d36:	b21b      	sxth	r3, r3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <BME280_init+0x1d8>)
 8001d3e:	849a      	strh	r2, [r3, #36]	; 0x24
	bme280._dig_P7 = ( int16_t)((( int16_t) calib[19] << 8) | calib[18]);
 8001d40:	7ffb      	ldrb	r3, [r7, #31]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	7fbb      	ldrb	r3, [r7, #30]
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <BME280_init+0x1d8>)
 8001d50:	84da      	strh	r2, [r3, #38]	; 0x26
	bme280._dig_P8 = ( int16_t)((( int16_t) calib[21] << 8) | calib[20]);
 8001d52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	b21a      	sxth	r2, r3
 8001d5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	4313      	orrs	r3, r2
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <BME280_init+0x1d8>)
 8001d66:	851a      	strh	r2, [r3, #40]	; 0x28
	bme280._dig_P9 = ( int16_t)((( int16_t) calib[23] << 8) | calib[22]);
 8001d68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	b21a      	sxth	r2, r3
 8001d70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <BME280_init+0x1d8>)
 8001d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
	bme280._dig_H1 = calib[25];
 8001d7e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <BME280_init+0x1d8>)
 8001d84:	735a      	strb	r2, [r3, #13]
	BME280_readBytes(BME280_ADDRESS, BME280_CALIB26, 7, &calib[0]);
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	21e1      	movs	r1, #225	; 0xe1
 8001d8e:	20ec      	movs	r0, #236	; 0xec
 8001d90:	f000 fab8 	bl	8002304 <BME280_readBytes>
	bme280._dig_H2 = ( int16_t)((( int16_t) calib[1] << 8) | calib[0]);
 8001d94:	7b7b      	ldrb	r3, [r7, #13]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	7b3b      	ldrb	r3, [r7, #12]
 8001d9c:	b21b      	sxth	r3, r3
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	b21a      	sxth	r2, r3
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <BME280_init+0x1d8>)
 8001da4:	859a      	strh	r2, [r3, #44]	; 0x2c
	bme280._dig_H3 = calib[2];
 8001da6:	7bba      	ldrb	r2, [r7, #14]
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <BME280_init+0x1d8>)
 8001daa:	739a      	strb	r2, [r3, #14]
	bme280._dig_H4 = ( int16_t)(((( int16_t) calib[3] << 8) | (0x0F & calib[4]) << 4) >> 4);
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	021a      	lsls	r2, r3, #8
 8001db0:	7c3b      	ldrb	r3, [r7, #16]
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	4313      	orrs	r3, r2
 8001db8:	111b      	asrs	r3, r3, #4
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <BME280_init+0x1d8>)
 8001dbe:	829a      	strh	r2, [r3, #20]
	bme280._dig_H5 = ( int16_t)(((( int16_t) calib[5] << 8) | (0xF0 & calib[4]) ) >> 4 );
 8001dc0:	7c7b      	ldrb	r3, [r7, #17]
 8001dc2:	021a      	lsls	r2, r3, #8
 8001dc4:	7c3b      	ldrb	r3, [r7, #16]
 8001dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	111b      	asrs	r3, r3, #4
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <BME280_init+0x1d8>)
 8001dd2:	82da      	strh	r2, [r3, #22]
	bme280._dig_H6 = calib[6];
 8001dd4:	7cba      	ldrb	r2, [r7, #18]
 8001dd6:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <BME280_init+0x1d8>)
 8001dd8:	73da      	strb	r2, [r3, #15]
}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	; 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	240001c4 	.word	0x240001c4

08001de8 <BME280_readIT>:

void BME280_readIT(){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af02      	add	r7, sp, #8
	if(bm_i2cFlag == bm_i2cIdle){
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <BME280_readIT+0x30>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10e      	bne.n	8001e14 <BME280_readIT+0x2c>
		HAL_I2C_Mem_Read_IT(bme280.hi2c, BME280_ADDRESS, BME280_PRESS_MSB, 1, bme280.buf, 6);
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <BME280_readIT+0x34>)
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <BME280_readIT+0x38>)
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2301      	movs	r3, #1
 8001e04:	22f7      	movs	r2, #247	; 0xf7
 8001e06:	21ec      	movs	r1, #236	; 0xec
 8001e08:	f00d f9d0 	bl	800f1ac <HAL_I2C_Mem_Read_IT>
		bm_i2cFlag = bm_i2cBME280;
 8001e0c:	4b02      	ldr	r3, [pc, #8]	; (8001e18 <BME280_readIT+0x30>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
		return;
 8001e12:	bf00      	nop
	}
}
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	24000904 	.word	0x24000904
 8001e1c:	240001c4 	.word	0x240001c4
 8001e20:	240001c8 	.word	0x240001c8
 8001e24:	00000000 	.word	0x00000000

08001e28 <BME280_i2cRxCpltCallback>:

uint8_t BME280_i2cRxCpltCallback(){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	if(bm_i2cFlag != bm_i2cBME280) return 0;
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <BME280_i2cRxCpltCallback+0xb0>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d001      	beq.n	8001e38 <BME280_i2cRxCpltCallback+0x10>
 8001e34:	2300      	movs	r3, #0
 8001e36:	e044      	b.n	8001ec2 <BME280_i2cRxCpltCallback+0x9a>
    bme280.countP = (int32_t) (((int32_t) bme280.buf[0] << 24 | (int32_t) bme280.buf[1] << 16 | (int32_t) bme280.buf[2] << 8) >> 12);
 8001e38:	4b28      	ldr	r3, [pc, #160]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e3a:	791b      	ldrb	r3, [r3, #4]
 8001e3c:	061a      	lsls	r2, r3, #24
 8001e3e:	4b27      	ldr	r3, [pc, #156]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e40:	795b      	ldrb	r3, [r3, #5]
 8001e42:	041b      	lsls	r3, r3, #16
 8001e44:	431a      	orrs	r2, r3
 8001e46:	4b25      	ldr	r3, [pc, #148]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e48:	799b      	ldrb	r3, [r3, #6]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	131b      	asrs	r3, r3, #12
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38
    bme280.countT = (int32_t) (((int32_t) bme280.buf[3] << 24 | (int32_t) bme280.buf[4] << 16 | (int32_t) bme280.buf[5] << 8) >> 12);
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e58:	79db      	ldrb	r3, [r3, #7]
 8001e5a:	061a      	lsls	r2, r3, #24
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e5e:	7a1b      	ldrb	r3, [r3, #8]
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e66:	7a5b      	ldrb	r3, [r3, #9]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	131b      	asrs	r3, r3, #12
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e70:	6353      	str	r3, [r2, #52]	; 0x34

    // change to hPa
    bme280.P = BME280_compensate_P(bme280.countP)/25600.0;	/*[hPa]*/
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f878 	bl	8001f6c <BME280_compensate_P>
 8001e7c:	ee07 0a90 	vmov	s15, r0
 8001e80:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001e84:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001ec8 <BME280_i2cRxCpltCallback+0xa0>
 8001e88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e92:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    bme280.T = BME280_compensate_T(bme280.countT)/100.0;	/*[degC]*/
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f82a 	bl	8001ef4 <BME280_compensate_T>
 8001ea0:	ee07 0a90 	vmov	s15, r0
 8001ea4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ea8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001ed0 <BME280_i2cRxCpltCallback+0xa8>
 8001eac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001eb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <BME280_i2cRxCpltCallback+0xb4>)
 8001eb6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

//    bme280.alt = 44330 * (1.0 - pow(bme280.P / bme280.base_P, 0.1903));

    bm_i2cFlag = bm_i2cIdle;
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <BME280_i2cRxCpltCallback+0xb0>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    return 1;
 8001ec0:	2301      	movs	r3, #1
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	00000000 	.word	0x00000000
 8001ecc:	40d90000 	.word	0x40d90000
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	40590000 	.word	0x40590000
 8001ed8:	24000904 	.word	0x24000904
 8001edc:	240001c4 	.word	0x240001c4

08001ee0 <BME280_reset>:

uint8_t BME280_getChipID(){
	  uint8_t c = BME280_readByte(BME280_ADDRESS, BME280_ID);
	  return c;
}
void BME280_reset(){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	BME280_writeByte(BME280_ADDRESS, BME280_RESET, 0xB6);
 8001ee4:	22b6      	movs	r2, #182	; 0xb6
 8001ee6:	21e0      	movs	r1, #224	; 0xe0
 8001ee8:	20ec      	movs	r0, #236	; 0xec
 8001eea:	f000 f9ed 	bl	80022c8 <BME280_writeByte>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <BME280_compensate_T>:



// Returns temperature in DegC, resolution is 0.01 DegC. Output value of
// “5123” equals 51.23 DegC.
int32_t BME280_compensate_T(int32_t adc_T){
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	  int32_t var1, var2, T;
	  var1 = ((((adc_T >> 3) - ((int32_t)bme280._dig_T1 << 1))) * ((int32_t)bme280._dig_T2)) >> 11;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	10da      	asrs	r2, r3, #3
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <BME280_compensate_T+0x74>)
 8001f02:	8a1b      	ldrh	r3, [r3, #16]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <BME280_compensate_T+0x74>)
 8001f0a:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	12db      	asrs	r3, r3, #11
 8001f14:	617b      	str	r3, [r7, #20]
	  var2 = (((((adc_T >> 4) - ((int32_t)bme280._dig_T1)) * ((adc_T >> 4) - ((int32_t)bme280._dig_T1))) >> 12) * ((int32_t)bme280._dig_T3)) >> 14;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	111b      	asrs	r3, r3, #4
 8001f1a:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <BME280_compensate_T+0x74>)
 8001f1c:	8a12      	ldrh	r2, [r2, #16]
 8001f1e:	1a9b      	subs	r3, r3, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	1112      	asrs	r2, r2, #4
 8001f24:	4910      	ldr	r1, [pc, #64]	; (8001f68 <BME280_compensate_T+0x74>)
 8001f26:	8a09      	ldrh	r1, [r1, #16]
 8001f28:	1a52      	subs	r2, r2, r1
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	131b      	asrs	r3, r3, #12
 8001f30:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <BME280_compensate_T+0x74>)
 8001f32:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	139b      	asrs	r3, r3, #14
 8001f3c:	613b      	str	r3, [r7, #16]
	  bme280._t_fine = var1 + var2;
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <BME280_compensate_T+0x74>)
 8001f46:	6313      	str	r3, [r2, #48]	; 0x30
	  T = (bme280._t_fine * 5 + 128) >> 8;
 8001f48:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <BME280_compensate_T+0x74>)
 8001f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3380      	adds	r3, #128	; 0x80
 8001f54:	121b      	asrs	r3, r3, #8
 8001f56:	60fb      	str	r3, [r7, #12]
	  return T;
 8001f58:	68fb      	ldr	r3, [r7, #12]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	240001c4 	.word	0x240001c4

08001f6c <BME280_compensate_P>:

// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8
//fractional bits).
//Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t BME280_compensate_P(int32_t adc_P){
 8001f6c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001f70:	b088      	sub	sp, #32
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
	  int64_t var1, var2, p;
	  var1 = ((int64_t)bme280._t_fine) - 128000;
 8001f76:	4b65      	ldr	r3, [pc, #404]	; (800210c <BME280_compensate_P+0x1a0>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001f80:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001f84:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001f88:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = var1 * var1 * (int64_t)bme280._dig_P6;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	fb02 f203 	mul.w	r2, r2, r3
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	69b9      	ldr	r1, [r7, #24]
 8001f98:	fb01 f303 	mul.w	r3, r1, r3
 8001f9c:	441a      	add	r2, r3
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fba1 3403 	umull	r3, r4, r1, r3
 8001fa6:	4422      	add	r2, r4
 8001fa8:	4614      	mov	r4, r2
 8001faa:	4a58      	ldr	r2, [pc, #352]	; (800210c <BME280_compensate_P+0x1a0>)
 8001fac:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8001fb0:	b211      	sxth	r1, r2
 8001fb2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001fb6:	fb01 f504 	mul.w	r5, r1, r4
 8001fba:	fb03 f002 	mul.w	r0, r3, r2
 8001fbe:	4428      	add	r0, r5
 8001fc0:	fba3 3401 	umull	r3, r4, r3, r1
 8001fc4:	1902      	adds	r2, r0, r4
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8001fcc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + ((var1*(int64_t)bme280._dig_P5)<<17);
 8001fd0:	4b4e      	ldr	r3, [pc, #312]	; (800210c <BME280_compensate_P+0x1a0>)
 8001fd2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	fb04 f102 	mul.w	r1, r4, r2
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	fb03 f202 	mul.w	r2, r3, r2
 8001fe8:	1888      	adds	r0, r1, r2
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	fba2 1203 	umull	r1, r2, r2, r3
 8001ff0:	1883      	adds	r3, r0, r2
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f04f 0500 	mov.w	r5, #0
 8001ff8:	f04f 0600 	mov.w	r6, #0
 8001ffc:	0456      	lsls	r6, r2, #17
 8001ffe:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8002002:	044d      	lsls	r5, r1, #17
 8002004:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002008:	186b      	adds	r3, r5, r1
 800200a:	eb46 0402 	adc.w	r4, r6, r2
 800200e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var2 = var2 + (((int64_t)bme280._dig_P4)<<35);
 8002012:	4b3e      	ldr	r3, [pc, #248]	; (800210c <BME280_compensate_P+0x1a0>)
 8002014:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002018:	b219      	sxth	r1, r3
 800201a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800201e:	f04f 0500 	mov.w	r5, #0
 8002022:	f04f 0600 	mov.w	r6, #0
 8002026:	00ce      	lsls	r6, r1, #3
 8002028:	2500      	movs	r5, #0
 800202a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800202e:	186b      	adds	r3, r5, r1
 8002030:	eb46 0402 	adc.w	r4, r6, r2
 8002034:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  var1 = ((var1 * var1 * (int64_t)bme280._dig_P3)>>8) + ((var1 * (int64_t)bme280._dig_P2)<<12);
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	fb02 f203 	mul.w	r2, r2, r3
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	69b9      	ldr	r1, [r7, #24]
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	441a      	add	r2, r3
 800204a:	69b9      	ldr	r1, [r7, #24]
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fba1 3403 	umull	r3, r4, r1, r3
 8002052:	4422      	add	r2, r4
 8002054:	4614      	mov	r4, r2
 8002056:	4a2d      	ldr	r2, [pc, #180]	; (800210c <BME280_compensate_P+0x1a0>)
 8002058:	f9b2 201e 	ldrsh.w	r2, [r2, #30]
 800205c:	b211      	sxth	r1, r2
 800205e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8002062:	fb01 f504 	mul.w	r5, r1, r4
 8002066:	fb03 f002 	mul.w	r0, r3, r2
 800206a:	4428      	add	r0, r5
 800206c:	fba3 3401 	umull	r3, r4, r3, r1
 8002070:	1902      	adds	r2, r0, r4
 8002072:	4614      	mov	r4, r2
 8002074:	f04f 0100 	mov.w	r1, #0
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	0a19      	lsrs	r1, r3, #8
 800207e:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8002082:	1222      	asrs	r2, r4, #8
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <BME280_compensate_P+0x1a0>)
 8002086:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800208a:	b21b      	sxth	r3, r3
 800208c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002090:	69b8      	ldr	r0, [r7, #24]
 8002092:	fb04 f500 	mul.w	r5, r4, r0
 8002096:	69f8      	ldr	r0, [r7, #28]
 8002098:	fb03 f000 	mul.w	r0, r3, r0
 800209c:	4428      	add	r0, r5
 800209e:	69bd      	ldr	r5, [r7, #24]
 80020a0:	fba5 5603 	umull	r5, r6, r5, r3
 80020a4:	1983      	adds	r3, r0, r6
 80020a6:	461e      	mov	r6, r3
 80020a8:	f04f 0b00 	mov.w	fp, #0
 80020ac:	f04f 0c00 	mov.w	ip, #0
 80020b0:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 80020b4:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80020b8:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 80020bc:	eb1b 0301 	adds.w	r3, fp, r1
 80020c0:	eb4c 0402 	adc.w	r4, ip, r2
 80020c4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)bme280._dig_P1)>>33;
 80020c8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80020cc:	1c19      	adds	r1, r3, #0
 80020ce:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <BME280_compensate_P+0x1a0>)
 80020d4:	8a5b      	ldrh	r3, [r3, #18]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	f04f 0400 	mov.w	r4, #0
 80020dc:	fb03 f502 	mul.w	r5, r3, r2
 80020e0:	fb01 f004 	mul.w	r0, r1, r4
 80020e4:	4428      	add	r0, r5
 80020e6:	fba1 3403 	umull	r3, r4, r1, r3
 80020ea:	1902      	adds	r2, r0, r4
 80020ec:	4614      	mov	r4, r2
 80020ee:	f04f 0100 	mov.w	r1, #0
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	1061      	asrs	r1, r4, #1
 80020f8:	17e2      	asrs	r2, r4, #31
 80020fa:	e9c7 1206 	strd	r1, r2, [r7, #24]
	  if(var1 == 0)
 80020fe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002102:	4323      	orrs	r3, r4
 8002104:	d104      	bne.n	8002110 <BME280_compensate_P+0x1a4>
	  {
	    return 0;
 8002106:	2300      	movs	r3, #0
 8002108:	e0d7      	b.n	80022ba <BME280_compensate_P+0x34e>
 800210a:	bf00      	nop
 800210c:	240001c4 	.word	0x240001c4
	    // avoid exception caused by division by zero
	  }
	  p = 1048576 - adc_P;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002116:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800211a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  p = (((p<<31) - var2)*3125)/var1;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	ea4f 0963 	mov.w	r9, r3, asr #1
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 800212a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800212e:	4645      	mov	r5, r8
 8002130:	464e      	mov	r6, r9
 8002132:	1aed      	subs	r5, r5, r3
 8002134:	eb66 0604 	sbc.w	r6, r6, r4
 8002138:	46a8      	mov	r8, r5
 800213a:	46b1      	mov	r9, r6
 800213c:	eb18 0308 	adds.w	r3, r8, r8
 8002140:	eb49 0409 	adc.w	r4, r9, r9
 8002144:	4698      	mov	r8, r3
 8002146:	46a1      	mov	r9, r4
 8002148:	eb18 0805 	adds.w	r8, r8, r5
 800214c:	eb49 0906 	adc.w	r9, r9, r6
 8002150:	f04f 0100 	mov.w	r1, #0
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	ea4f 1289 	mov.w	r2, r9, lsl #6
 800215c:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8002160:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8002164:	eb18 0801 	adds.w	r8, r8, r1
 8002168:	eb49 0902 	adc.w	r9, r9, r2
 800216c:	f04f 0100 	mov.w	r1, #0
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002178:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800217c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8002180:	4688      	mov	r8, r1
 8002182:	4691      	mov	r9, r2
 8002184:	eb18 0805 	adds.w	r8, r8, r5
 8002188:	eb49 0906 	adc.w	r9, r9, r6
 800218c:	f04f 0100 	mov.w	r1, #0
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8002198:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 800219c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80021a0:	4688      	mov	r8, r1
 80021a2:	4691      	mov	r9, r2
 80021a4:	eb18 0005 	adds.w	r0, r8, r5
 80021a8:	eb49 0106 	adc.w	r1, r9, r6
 80021ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021b0:	f7fe f9f4 	bl	800059c <__aeabi_ldivmod>
 80021b4:	4603      	mov	r3, r0
 80021b6:	460c      	mov	r4, r1
 80021b8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  var1 = (((int64_t)bme280._dig_P9) * (p>>13) * (p>>13)) >> 25;
 80021bc:	4b41      	ldr	r3, [pc, #260]	; (80022c4 <BME280_compensate_P+0x358>)
 80021be:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80021c2:	b219      	sxth	r1, r3
 80021c4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80021c8:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	f04f 0400 	mov.w	r4, #0
 80021d4:	0b6b      	lsrs	r3, r5, #13
 80021d6:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 80021da:	1374      	asrs	r4, r6, #13
 80021dc:	fb03 f502 	mul.w	r5, r3, r2
 80021e0:	fb01 f004 	mul.w	r0, r1, r4
 80021e4:	4428      	add	r0, r5
 80021e6:	fba1 1203 	umull	r1, r2, r1, r3
 80021ea:	1883      	adds	r3, r0, r2
 80021ec:	461a      	mov	r2, r3
 80021ee:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	f04f 0400 	mov.w	r4, #0
 80021fa:	0b6b      	lsrs	r3, r5, #13
 80021fc:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8002200:	1374      	asrs	r4, r6, #13
 8002202:	fb03 f502 	mul.w	r5, r3, r2
 8002206:	fb01 f004 	mul.w	r0, r1, r4
 800220a:	4428      	add	r0, r5
 800220c:	fba1 1203 	umull	r1, r2, r1, r3
 8002210:	1883      	adds	r3, r0, r2
 8002212:	461a      	mov	r2, r3
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	f04f 0400 	mov.w	r4, #0
 800221c:	0e4b      	lsrs	r3, r1, #25
 800221e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8002222:	1654      	asrs	r4, r2, #25
 8002224:	e9c7 3406 	strd	r3, r4, [r7, #24]
	  var2 = (((int64_t)bme280._dig_P8) * p)>> 19;
 8002228:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <BME280_compensate_P+0x358>)
 800222a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800222e:	b21b      	sxth	r3, r3
 8002230:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	fb04 f102 	mul.w	r1, r4, r2
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	fb03 f202 	mul.w	r2, r3, r2
 8002240:	1888      	adds	r0, r1, r2
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	fba2 1203 	umull	r1, r2, r2, r3
 8002248:	1883      	adds	r3, r0, r2
 800224a:	461a      	mov	r2, r3
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	f04f 0400 	mov.w	r4, #0
 8002254:	0ccb      	lsrs	r3, r1, #19
 8002256:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800225a:	14d4      	asrs	r4, r2, #19
 800225c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	  p = ((p + var1 + var2) >> 8) + (((int64_t)bme280._dig_P7)<<4);
 8002260:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002264:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002268:	eb11 0803 	adds.w	r8, r1, r3
 800226c:	eb42 0904 	adc.w	r9, r2, r4
 8002270:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002274:	eb13 0508 	adds.w	r5, r3, r8
 8002278:	eb44 0609 	adc.w	r6, r4, r9
 800227c:	f04f 0100 	mov.w	r1, #0
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	0a29      	lsrs	r1, r5, #8
 8002286:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 800228a:	1232      	asrs	r2, r6, #8
 800228c:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <BME280_compensate_P+0x358>)
 800228e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002292:	b21d      	sxth	r5, r3
 8002294:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8002298:	f04f 0800 	mov.w	r8, #0
 800229c:	f04f 0900 	mov.w	r9, #0
 80022a0:	ea4f 1906 	mov.w	r9, r6, lsl #4
 80022a4:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 80022a8:	ea4f 1805 	mov.w	r8, r5, lsl #4
 80022ac:	eb18 0301 	adds.w	r3, r8, r1
 80022b0:	eb49 0402 	adc.w	r4, r9, r2
 80022b4:	e9c7 3402 	strd	r3, r4, [r7, #8]
	  return (uint32_t)p;
 80022b8:	68bb      	ldr	r3, [r7, #8]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80022c4:	240001c4 	.word	0x240001c4

080022c8 <BME280_writeByte>:
	var = (var < 0 ? 0 : var);
	var = (var > 419430400 ? 419430400 : var);
	return(uint32_t)(var >> 12);
}

void BME280_writeByte(uint8_t address, uint8_t subAddress, uint8_t data){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af04      	add	r7, sp, #16
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
 80022d2:	460b      	mov	r3, r1
 80022d4:	71bb      	strb	r3, [r7, #6]
 80022d6:	4613      	mov	r3, r2
 80022d8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(bme280.hi2c, address, subAddress, 1, &data, 1, BME_DEFAULT_TIMEOUT);
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <BME280_writeByte+0x38>)
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	b299      	uxth	r1, r3
 80022e2:	79bb      	ldrb	r3, [r7, #6]
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	2364      	movs	r3, #100	; 0x64
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	2301      	movs	r3, #1
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	1d7b      	adds	r3, r7, #5
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2301      	movs	r3, #1
 80022f4:	f00c fd2c 	bl	800ed50 <HAL_I2C_Mem_Write>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	240001c4 	.word	0x240001c4

08002304 <BME280_readBytes>:
void BME280_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest){
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b087      	sub	sp, #28
 8002308:	af04      	add	r7, sp, #16
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
 8002310:	460b      	mov	r3, r1
 8002312:	71bb      	strb	r3, [r7, #6]
 8002314:	4613      	mov	r3, r2
 8002316:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(bme280.hi2c, address, subAddress, 1, (uint8_t*)dest, count, BME_DEFAULT_TIMEOUT);
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <BME280_readBytes+0x40>)
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	b299      	uxth	r1, r3
 8002320:	79bb      	ldrb	r3, [r7, #6]
 8002322:	b29c      	uxth	r4, r3
 8002324:	797b      	ldrb	r3, [r7, #5]
 8002326:	b29b      	uxth	r3, r3
 8002328:	2264      	movs	r2, #100	; 0x64
 800232a:	9202      	str	r2, [sp, #8]
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2301      	movs	r3, #1
 8002334:	4622      	mov	r2, r4
 8002336:	f00c fe1f 	bl	800ef78 <HAL_I2C_Mem_Read>
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bd90      	pop	{r4, r7, pc}
 8002342:	bf00      	nop
 8002344:	240001c4 	.word	0x240001c4

08002348 <TM_GPS_Init>:
#define TM_GPS_INT_Add2CRC(c)                            (TM_GPS_CRC ^= c)
#define TM_GPS_INT_ReturnWithStatus(GPS_Data, status)    (GPS_Data)->Status = status; return status;
#define TM_GPS_INT_SetFlag(flag)                         (GPS_Flags |= (flag))

/* Public */
void TM_GPS_Init(UART_HandleTypeDef* huart) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	/* Initialize USART */
	TM_GPS_FirstTime = 1;
 8002350:	4b46      	ldr	r3, [pc, #280]	; (800246c <TM_GPS_Init+0x124>)
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
	
	/* Reset everything */
	gpsUart.gpsData.CustomStatementsCount = 0;
 8002356:	4b46      	ldr	r3, [pc, #280]	; (8002470 <TM_GPS_Init+0x128>)
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	
	/* Clear all flags */
	TM_GPS_INT_ClearFlags(&gpsUart.gpsData);
 800235e:	4844      	ldr	r0, [pc, #272]	; (8002470 <TM_GPS_Init+0x128>)
 8002360:	f001 f9ac 	bl	80036bc <TM_GPS_INT_ClearFlags>
	
	/* Set flags used */
#ifndef GPS_DISABLE_GPGGA
	GPS_Flags_OK |= GPS_FLAG_LATITUDE;
 8002364:	4b43      	ldr	r3, [pc, #268]	; (8002474 <TM_GPS_Init+0x12c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	4a41      	ldr	r2, [pc, #260]	; (8002474 <TM_GPS_Init+0x12c>)
 800236e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_NS;
 8002370:	4b40      	ldr	r3, [pc, #256]	; (8002474 <TM_GPS_Init+0x12c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002378:	4a3e      	ldr	r2, [pc, #248]	; (8002474 <TM_GPS_Init+0x12c>)
 800237a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_LONGITUDE;
 800237c:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <TM_GPS_Init+0x12c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	4a3b      	ldr	r2, [pc, #236]	; (8002474 <TM_GPS_Init+0x12c>)
 8002386:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_EW;
 8002388:	4b3a      	ldr	r3, [pc, #232]	; (8002474 <TM_GPS_Init+0x12c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f043 0320 	orr.w	r3, r3, #32
 8002390:	4a38      	ldr	r2, [pc, #224]	; (8002474 <TM_GPS_Init+0x12c>)
 8002392:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS;
 8002394:	4b37      	ldr	r3, [pc, #220]	; (8002474 <TM_GPS_Init+0x12c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f043 0304 	orr.w	r3, r3, #4
 800239c:	4a35      	ldr	r2, [pc, #212]	; (8002474 <TM_GPS_Init+0x12c>)
 800239e:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIX;
 80023a0:	4b34      	ldr	r3, [pc, #208]	; (8002474 <TM_GPS_Init+0x12c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	4a32      	ldr	r2, [pc, #200]	; (8002474 <TM_GPS_Init+0x12c>)
 80023aa:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_ALTITUDE;
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <TM_GPS_Init+0x12c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f043 0310 	orr.w	r3, r3, #16
 80023b4:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <TM_GPS_Init+0x12c>)
 80023b6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_TIME;
 80023b8:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <TM_GPS_Init+0x12c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c0:	4a2c      	ldr	r2, [pc, #176]	; (8002474 <TM_GPS_Init+0x12c>)
 80023c2:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPRMC
	GPS_Flags_OK |= GPS_FLAG_SPEED;
 80023c4:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <TM_GPS_Init+0x12c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	4a29      	ldr	r2, [pc, #164]	; (8002474 <TM_GPS_Init+0x12c>)
 80023ce:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DATE;
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <TM_GPS_Init+0x12c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d8:	4a26      	ldr	r2, [pc, #152]	; (8002474 <TM_GPS_Init+0x12c>)
 80023da:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VALIDITY;
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <TM_GPS_Init+0x12c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <TM_GPS_Init+0x12c>)
 80023e6:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_DIRECTION;
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <TM_GPS_Init+0x12c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f0:	4a20      	ldr	r2, [pc, #128]	; (8002474 <TM_GPS_Init+0x12c>)
 80023f2:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSA
	GPS_Flags_OK |= GPS_FLAG_HDOP;
 80023f4:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <TM_GPS_Init+0x12c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023fc:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <TM_GPS_Init+0x12c>)
 80023fe:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_VDOP;
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <TM_GPS_Init+0x12c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002408:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <TM_GPS_Init+0x12c>)
 800240a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_PDOP;
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <TM_GPS_Init+0x12c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <TM_GPS_Init+0x12c>)
 8002416:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_FIXMODE;
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <TM_GPS_Init+0x12c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <TM_GPS_Init+0x12c>)
 8002422:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATS1_12;
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <TM_GPS_Init+0x12c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242c:	4a11      	ldr	r2, [pc, #68]	; (8002474 <TM_GPS_Init+0x12c>)
 800242e:	6013      	str	r3, [r2, #0]
#endif
#ifndef GPS_DISABLE_GPGSV	
	GPS_Flags_OK |= GPS_FLAG_SATSINVIEW;
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <TM_GPS_Init+0x12c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <TM_GPS_Init+0x12c>)
 800243a:	6013      	str	r3, [r2, #0]
	GPS_Flags_OK |= GPS_FLAG_SATSDESC;
 800243c:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <TM_GPS_Init+0x12c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002444:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <TM_GPS_Init+0x12c>)
 8002446:	6013      	str	r3, [r2, #0]
#endif
	gpsUart.huart = huart;
 8002448:	4a09      	ldr	r2, [pc, #36]	; (8002470 <TM_GPS_Init+0x128>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
	HAL_UART_Receive_DMA(gpsUart.huart, gpsUart.GPS_DmaBuf, GPS_DMA_BUF_SIZE);
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <TM_GPS_Init+0x128>)
 8002452:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002456:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800245a:	4907      	ldr	r1, [pc, #28]	; (8002478 <TM_GPS_Init+0x130>)
 800245c:	4618      	mov	r0, r3
 800245e:	f015 fb57 	bl	8017b10 <HAL_UART_Receive_DMA>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	24000358 	.word	0x24000358
 8002470:	24000690 	.word	0x24000690
 8002474:	24000228 	.word	0x24000228
 8002478:	240007bc 	.word	0x240007bc

0800247c <TM_GPS_Update>:

TM_GPS_Result_t TM_GPS_Update(UART_HandleTypeDef* huart) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	if(huart->Instance != gpsUart.huart->Instance) return TM_GPS_Result_None;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <TM_GPS_Update+0x74>)
 800248a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <TM_GPS_Update+0x1c>
 8002494:	2303      	movs	r3, #3
 8002496:	e027      	b.n	80024e8 <TM_GPS_Update+0x6c>

	TM_GPS_Result_t result = TM_GPS_Result_OldData;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
//	HAL_UART_Transmit(&huart3, GPS_DmaBuf, GPS_DMA_BUF_SIZE, 100);
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	e013      	b.n	80024ca <TM_GPS_Update+0x4e>
		TM_GPS_INT_Do(&gpsUart.gpsData, (char)gpsUart.GPS_DmaBuf[i]);
 80024a2:	4a13      	ldr	r2, [pc, #76]	; (80024f0 <TM_GPS_Update+0x74>)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	4619      	mov	r1, r3
 80024b0:	480f      	ldr	r0, [pc, #60]	; (80024f0 <TM_GPS_Update+0x74>)
 80024b2:	f000 f8d9 	bl	8002668 <TM_GPS_INT_Do>
		if (gpsUart.gpsData.Status == TM_GPS_Result_NewData) {
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <TM_GPS_Update+0x74>)
 80024b8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <TM_GPS_Update+0x48>
//			return gps.Status;
//			gps->Status = TM_GPS_Result_OldData;
			result = TM_GPS_Result_NewData;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<GPS_DMA_BUF_SIZE; i++){
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	3301      	adds	r3, #1
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80024d0:	dbe7      	blt.n	80024a2 <TM_GPS_Update+0x26>
		}
	}
//	}
	
	if (TM_GPS_FirstTime) {
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <TM_GPS_Update+0x78>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <TM_GPS_Update+0x6a>
		/* No any valid data, return First Data Waiting */
		/* Returning only after power up and calling when no all data is received */
		TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_FirstDataWaiting);
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <TM_GPS_Update+0x74>)
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 80024e2:	2302      	movs	r3, #2
 80024e4:	e000      	b.n	80024e8 <TM_GPS_Update+0x6c>
	}
	
	/* We have old data */
//	TM_GPS_INT_ReturnWithStatus(&gpsUart.gpsData, TM_GPS_Result_OldData);

	return result;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	24000690 	.word	0x24000690
 80024f4:	24000358 	.word	0x24000358

080024f8 <TM_GPS_ConvertSpeed>:
	
	return temp;										/* Return pointer */
}
#endif

float TM_GPS_ConvertSpeed(float SpeedInKnots, TM_GPS_Speed_t toSpeed) {
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002502:	4603      	mov	r3, r0
 8002504:	70fb      	strb	r3, [r7, #3]
	switch ((uint8_t)toSpeed) {
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	2b0e      	cmp	r3, #14
 800250a:	f200 8086 	bhi.w	800261a <TM_GPS_ConvertSpeed+0x122>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <TM_GPS_ConvertSpeed+0x1c>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	08002551 	.word	0x08002551
 8002518:	0800255f 	.word	0x0800255f
 800251c:	0800256d 	.word	0x0800256d
 8002520:	0800257b 	.word	0x0800257b
 8002524:	08002589 	.word	0x08002589
 8002528:	08002597 	.word	0x08002597
 800252c:	080025a5 	.word	0x080025a5
 8002530:	080025b3 	.word	0x080025b3
 8002534:	080025c1 	.word	0x080025c1
 8002538:	080025cf 	.word	0x080025cf
 800253c:	080025dd 	.word	0x080025dd
 8002540:	080025eb 	.word	0x080025eb
 8002544:	080025f9 	.word	0x080025f9
 8002548:	08002607 	.word	0x08002607
 800254c:	08002615 	.word	0x08002615
		/* Metric */
		case TM_GPS_Speed_KilometerPerSecond:	return SpeedInKnots * 0.000514f;
 8002550:	edd7 7a01 	vldr	s15, [r7, #4]
 8002554:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800262c <TM_GPS_ConvertSpeed+0x134>
 8002558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255c:	e05f      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerSecond: 		return SpeedInKnots * 0.5144f;
 800255e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002562:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002630 <TM_GPS_ConvertSpeed+0x138>
 8002566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800256a:	e058      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_KilometerPerHour:	 	return SpeedInKnots * 1.852f;
 800256c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002570:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002634 <TM_GPS_ConvertSpeed+0x13c>
 8002574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002578:	e051      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MeterPerMinute: 		return SpeedInKnots * 30.87f;
 800257a:	edd7 7a01 	vldr	s15, [r7, #4]
 800257e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002638 <TM_GPS_ConvertSpeed+0x140>
 8002582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002586:	e04a      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		
		/* Imperial */
		case TM_GPS_Speed_MilePerSecond: 		return SpeedInKnots * 0.0003197f;
 8002588:	edd7 7a01 	vldr	s15, [r7, #4]
 800258c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800263c <TM_GPS_ConvertSpeed+0x144>
 8002590:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002594:	e043      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MilePerHour: 			return SpeedInKnots * 1.151f;
 8002596:	edd7 7a01 	vldr	s15, [r7, #4]
 800259a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002640 <TM_GPS_ConvertSpeed+0x148>
 800259e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a2:	e03c      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerSecond: 		return SpeedInKnots * 1.688f;
 80025a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002644 <TM_GPS_ConvertSpeed+0x14c>
 80025ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b0:	e035      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_FootPerMinute: 		return SpeedInKnots * 101.3f;
 80025b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002648 <TM_GPS_ConvertSpeed+0x150>
 80025ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025be:	e02e      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		
		/* For Runners and Joggers */
		case TM_GPS_Speed_MinutePerKilometer: 	return SpeedInKnots * 32.4f;
 80025c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800264c <TM_GPS_ConvertSpeed+0x154>
 80025c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025cc:	e027      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerKilometer: 	return SpeedInKnots * 1944.0f;
 80025ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002650 <TM_GPS_ConvertSpeed+0x158>
 80025d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025da:	e020      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Meters: 	return SpeedInKnots * 194.4f;
 80025dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80025e0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002654 <TM_GPS_ConvertSpeed+0x15c>
 80025e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e8:	e019      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_MinutePerMile: 		return SpeedInKnots * 52.14f;
 80025ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ee:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002658 <TM_GPS_ConvertSpeed+0x160>
 80025f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025f6:	e012      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPerMile: 		return SpeedInKnots * 3128.0f;
 80025f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025fc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800265c <TM_GPS_ConvertSpeed+0x164>
 8002600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002604:	e00b      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		case TM_GPS_Speed_SecondPer100Yards: 	return SpeedInKnots * 177.7f;
 8002606:	edd7 7a01 	vldr	s15, [r7, #4]
 800260a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002660 <TM_GPS_ConvertSpeed+0x168>
 800260e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002612:	e004      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		
		/* Nautical */
		case TM_GPS_Speed_SeaMilePerHour: 		return SpeedInKnots * 1.0f;
 8002614:	edd7 7a01 	vldr	s15, [r7, #4]
 8002618:	e001      	b.n	800261e <TM_GPS_ConvertSpeed+0x126>
		default:
			return 0;
 800261a:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002664 <TM_GPS_ConvertSpeed+0x16c>
	}
}
 800261e:	eeb0 0a67 	vmov.f32	s0, s15
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	3a06bdf5 	.word	0x3a06bdf5
 8002630:	3f03afb8 	.word	0x3f03afb8
 8002634:	3fed0e56 	.word	0x3fed0e56
 8002638:	41f6f5c3 	.word	0x41f6f5c3
 800263c:	39a79d68 	.word	0x39a79d68
 8002640:	3f9353f8 	.word	0x3f9353f8
 8002644:	3fd81062 	.word	0x3fd81062
 8002648:	42ca999a 	.word	0x42ca999a
 800264c:	4201999a 	.word	0x4201999a
 8002650:	44f30000 	.word	0x44f30000
 8002654:	43426666 	.word	0x43426666
 8002658:	42508f5c 	.word	0x42508f5c
 800265c:	45438000 	.word	0x45438000
 8002660:	4331b333 	.word	0x4331b333
 8002664:	00000000 	.word	0x00000000

08002668 <TM_GPS_INT_Do>:
		Distance_Data->Bearing += 360;
	}
}

/* Private */
TM_GPS_Result_t TM_GPS_INT_Do(TM_GPS_t* GPS_Data, char c) {
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fff3 	bl	8003660 <TM_GPS_INT_FlagsOk>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d006      	beq.n	800268e <TM_GPS_INT_Do+0x26>
		TM_GPS_INT_ClearFlags(GPS_Data);				/* Data were valid before, new data are coming, not new anymore */
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f001 f81b 	bl	80036bc <TM_GPS_INT_ClearFlags>
		GPS_Data->Status = TM_GPS_Result_OldData;		/* Data were "new" on last call, now are only "Old data", no NEW data */
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	}
	if (c == '$') {										/* Start of string detected */
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	2b24      	cmp	r3, #36	; 0x24
 8002692:	d116      	bne.n	80026c2 <TM_GPS_INT_Do+0x5a>
		TM_GPS_Star = 0;								/* Star detection reset */
 8002694:	4b5d      	ldr	r3, [pc, #372]	; (800280c <TM_GPS_INT_Do+0x1a4>)
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
		TM_GPS_CRC = 0;									/* Reset CRC */
 800269a:	4b5d      	ldr	r3, [pc, #372]	; (8002810 <TM_GPS_INT_Do+0x1a8>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
		GPS_Term_Number = 0;							/* First term in new statement */
 80026a0:	4b5c      	ldr	r3, [pc, #368]	; (8002814 <TM_GPS_INT_Do+0x1ac>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 80026a6:	4b5c      	ldr	r3, [pc, #368]	; (8002818 <TM_GPS_INT_Do+0x1b0>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = c;					/* Add character to first term */
 80026ac:	4b5a      	ldr	r3, [pc, #360]	; (8002818 <TM_GPS_INT_Do+0x1b0>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	b2d1      	uxtb	r1, r2
 80026b4:	4a58      	ldr	r2, [pc, #352]	; (8002818 <TM_GPS_INT_Do+0x1b0>)
 80026b6:	7011      	strb	r1, [r2, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	4a58      	ldr	r2, [pc, #352]	; (800281c <TM_GPS_INT_Do+0x1b4>)
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	5453      	strb	r3, [r2, r1]
 80026c0:	e09b      	b.n	80027fa <TM_GPS_INT_Do+0x192>
	} else if (c == ',') {
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	2b2c      	cmp	r3, #44	; 0x2c
 80026c6:	d120      	bne.n	800270a <TM_GPS_INT_Do+0xa2>
		TM_GPS_INT_Add2CRC(c);							/* Add to parity */
 80026c8:	4b51      	ldr	r3, [pc, #324]	; (8002810 <TM_GPS_INT_Do+0x1a8>)
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	4053      	eors	r3, r2
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4b4f      	ldr	r3, [pc, #316]	; (8002810 <TM_GPS_INT_Do+0x1a8>)
 80026d4:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of term */
 80026d6:	4b50      	ldr	r3, [pc, #320]	; (8002818 <TM_GPS_INT_Do+0x1b0>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	b2d1      	uxtb	r1, r2
 80026de:	4a4e      	ldr	r2, [pc, #312]	; (8002818 <TM_GPS_INT_Do+0x1b0>)
 80026e0:	7011      	strb	r1, [r2, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	4b4d      	ldr	r3, [pc, #308]	; (800281c <TM_GPS_INT_Do+0x1b4>)
 80026e6:	2100      	movs	r1, #0
 80026e8:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check if term is empty */
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f001 f80a 	bl	8003704 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f8a1 	bl	8002838 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 80026f6:	4b47      	ldr	r3, [pc, #284]	; (8002814 <TM_GPS_INT_Do+0x1ac>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	3301      	adds	r3, #1
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4b45      	ldr	r3, [pc, #276]	; (8002814 <TM_GPS_INT_Do+0x1ac>)
 8002700:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 8002702:	4b45      	ldr	r3, [pc, #276]	; (8002818 <TM_GPS_INT_Do+0x1b0>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e077      	b.n	80027fa <TM_GPS_INT_Do+0x192>
	} else if (c == '\n') {
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	2b0a      	cmp	r3, #10
 800270e:	d113      	bne.n	8002738 <TM_GPS_INT_Do+0xd0>
		GPS_Term_Number = 0;							/* Reset term number */
 8002710:	4b40      	ldr	r3, [pc, #256]	; (8002814 <TM_GPS_INT_Do+0x1ac>)
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
#ifndef GPS_DISABLE_GPGSV
		/* Check for GPGSV statement */
		if (TM_GPS_Statement == GPS_GPGSV && GPGSV_StatementsCount == GPSGV_StatementNumber) {
 8002716:	4b42      	ldr	r3, [pc, #264]	; (8002820 <TM_GPS_INT_Do+0x1b8>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d16d      	bne.n	80027fa <TM_GPS_INT_Do+0x192>
 800271e:	4b41      	ldr	r3, [pc, #260]	; (8002824 <TM_GPS_INT_Do+0x1bc>)
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	4b41      	ldr	r3, [pc, #260]	; (8002828 <TM_GPS_INT_Do+0x1c0>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d167      	bne.n	80027fa <TM_GPS_INT_Do+0x192>
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSDESC);		/* Set flag */
 800272a:	4b40      	ldr	r3, [pc, #256]	; (800282c <TM_GPS_INT_Do+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002732:	4a3e      	ldr	r2, [pc, #248]	; (800282c <TM_GPS_INT_Do+0x1c4>)
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e060      	b.n	80027fa <TM_GPS_INT_Do+0x192>
		}
#endif
	} else if (c == '\r') {
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	2b0d      	cmp	r3, #13
 800273c:	d128      	bne.n	8002790 <TM_GPS_INT_Do+0x128>
		GPS_Term[GPS_Term_Pos++] = 0;					/* End of character string */
 800273e:	4b36      	ldr	r3, [pc, #216]	; (8002818 <TM_GPS_INT_Do+0x1b0>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	b2d1      	uxtb	r1, r2
 8002746:	4a34      	ldr	r2, [pc, #208]	; (8002818 <TM_GPS_INT_Do+0x1b0>)
 8002748:	7011      	strb	r1, [r2, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	4b33      	ldr	r3, [pc, #204]	; (800281c <TM_GPS_INT_Do+0x1b4>)
 800274e:	2100      	movs	r1, #0
 8002750:	5499      	strb	r1, [r3, r2]
		TM_GPS_CRC_Received = TM_GPS_INT_Hex2Dec(GPS_Term[0]) * 16 + TM_GPS_INT_Hex2Dec(GPS_Term[1]);	/* Between * and \r are 2 characters of Checksum */
 8002752:	4b32      	ldr	r3, [pc, #200]	; (800281c <TM_GPS_INT_Do+0x1b4>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f000 ff58 	bl	800360c <TM_GPS_INT_Hex2Dec>
 800275c:	4603      	mov	r3, r0
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	b2dc      	uxtb	r4, r3
 8002762:	4b2e      	ldr	r3, [pc, #184]	; (800281c <TM_GPS_INT_Do+0x1b4>)
 8002764:	785b      	ldrb	r3, [r3, #1]
 8002766:	4618      	mov	r0, r3
 8002768:	f000 ff50 	bl	800360c <TM_GPS_INT_Hex2Dec>
 800276c:	4603      	mov	r3, r0
 800276e:	4423      	add	r3, r4
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4b2f      	ldr	r3, [pc, #188]	; (8002830 <TM_GPS_INT_Do+0x1c8>)
 8002774:	701a      	strb	r2, [r3, #0]
		if (TM_GPS_CRC_Received != TM_GPS_CRC) {		/* CRC is not OK, data failed somewhere */			
 8002776:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <TM_GPS_INT_Do+0x1c8>)
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	4b25      	ldr	r3, [pc, #148]	; (8002810 <TM_GPS_INT_Do+0x1a8>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d002      	beq.n	8002788 <TM_GPS_INT_Do+0x120>
			TM_GPS_INT_ClearFlags(GPS_Data);			/* Clear all flags */
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 ff9a 	bl	80036bc <TM_GPS_INT_ClearFlags>
		}
		GPS_Term_Number = 0;							/* Reset term number */
 8002788:	4b22      	ldr	r3, [pc, #136]	; (8002814 <TM_GPS_INT_Do+0x1ac>)
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	e034      	b.n	80027fa <TM_GPS_INT_Do+0x192>
	} else if (c == '*') {
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	2b2a      	cmp	r3, #42	; 0x2a
 8002794:	d11c      	bne.n	80027d0 <TM_GPS_INT_Do+0x168>
		TM_GPS_Star = 1;								/* Star detected */
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <TM_GPS_INT_Do+0x1a4>)
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
		GPS_Term[GPS_Term_Pos++] = 0;					/* Add 0 at the end */
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <TM_GPS_INT_Do+0x1b0>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	b2d1      	uxtb	r1, r2
 80027a4:	4a1c      	ldr	r2, [pc, #112]	; (8002818 <TM_GPS_INT_Do+0x1b0>)
 80027a6:	7011      	strb	r1, [r2, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <TM_GPS_INT_Do+0x1b4>)
 80027ac:	2100      	movs	r1, #0
 80027ae:	5499      	strb	r1, [r3, r2]
		TM_GPS_INT_CheckEmpty(GPS_Data);				/* Check empty */
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 ffa7 	bl	8003704 <TM_GPS_INT_CheckEmpty>
		TM_GPS_INT_CheckTerm(GPS_Data);					/* Check term */		
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f83e 	bl	8002838 <TM_GPS_INT_CheckTerm>
		GPS_Term_Number++;								/* Increase term number */
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <TM_GPS_INT_Do+0x1ac>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	3301      	adds	r3, #1
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <TM_GPS_INT_Do+0x1ac>)
 80027c6:	701a      	strb	r2, [r3, #0]
		GPS_Term_Pos = 0;								/* At position 0 of a first term */
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <TM_GPS_INT_Do+0x1b0>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	e014      	b.n	80027fa <TM_GPS_INT_Do+0x192>
	} else {
		/* Other characters detected */
		if (!TM_GPS_Star) {								/* If star is not detected yet */
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <TM_GPS_INT_Do+0x1a4>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d106      	bne.n	80027e6 <TM_GPS_INT_Do+0x17e>
			TM_GPS_INT_Add2CRC(c);						/* Add to parity */
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <TM_GPS_INT_Do+0x1a8>)
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	4053      	eors	r3, r2
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <TM_GPS_INT_Do+0x1a8>)
 80027e4:	701a      	strb	r2, [r3, #0]
		}
		GPS_Term[GPS_Term_Pos++] = c;					/* Add to term */
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <TM_GPS_INT_Do+0x1b0>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	b2d1      	uxtb	r1, r2
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <TM_GPS_INT_Do+0x1b0>)
 80027f0:	7011      	strb	r1, [r2, #0]
 80027f2:	4619      	mov	r1, r3
 80027f4:	4a09      	ldr	r2, [pc, #36]	; (800281c <TM_GPS_INT_Do+0x1b4>)
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	5453      	strb	r3, [r2, r1]
	}
	return TM_GPS_INT_Return(GPS_Data);					/* Return current GPS status */
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fdf0 	bl	80033e0 <TM_GPS_INT_Return>
 8002800:	4603      	mov	r3, r0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	bf00      	nop
 800280c:	24000223 	.word	0x24000223
 8002810:	24000221 	.word	0x24000221
 8002814:	2400021f 	.word	0x2400021f
 8002818:	24000220 	.word	0x24000220
 800281c:	24000210 	.word	0x24000210
 8002820:	24000000 	.word	0x24000000
 8002824:	24000363 	.word	0x24000363
 8002828:	24000364 	.word	0x24000364
 800282c:	24000224 	.word	0x24000224
 8002830:	24000222 	.word	0x24000222
 8002834:	00000000 	.word	0x00000000

08002838 <TM_GPS_INT_CheckTerm>:

void TM_GPS_INT_CheckTerm(TM_GPS_t* GPS_Data) {
 8002838:	b580      	push	{r7, lr}
 800283a:	ed2d 8b02 	vpush	{d8}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	uint32_t temp;
#ifndef GPS_DISABLE_GPGSA
	static uint8_t ids_count = 0;
#endif
	uint8_t count, i;
	if (GPS_Term_Number == 0) {
 8002844:	4bc2      	ldr	r3, [pc, #776]	; (8002b50 <TM_GPS_INT_CheckTerm+0x318>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d134      	bne.n	80028b6 <TM_GPS_INT_CheckTerm+0x7e>
		/* Statement indicator */
		if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGGA")) {
 800284c:	49c1      	ldr	r1, [pc, #772]	; (8002b54 <TM_GPS_INT_CheckTerm+0x31c>)
 800284e:	48c2      	ldr	r0, [pc, #776]	; (8002b58 <TM_GPS_INT_CheckTerm+0x320>)
 8002850:	f000 fe76 	bl	8003540 <TM_GPS_INT_StringStartsWith>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <TM_GPS_INT_CheckTerm+0x2a>
			TM_GPS_Statement = GPS_GPGGA;
 800285a:	4bc0      	ldr	r3, [pc, #768]	; (8002b5c <TM_GPS_INT_CheckTerm+0x324>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
 8002860:	e023      	b.n	80028aa <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPRMC")) {
 8002862:	49bf      	ldr	r1, [pc, #764]	; (8002b60 <TM_GPS_INT_CheckTerm+0x328>)
 8002864:	48bc      	ldr	r0, [pc, #752]	; (8002b58 <TM_GPS_INT_CheckTerm+0x320>)
 8002866:	f000 fe6b 	bl	8003540 <TM_GPS_INT_StringStartsWith>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <TM_GPS_INT_CheckTerm+0x40>
			TM_GPS_Statement = GPS_GPRMC;
 8002870:	4bba      	ldr	r3, [pc, #744]	; (8002b5c <TM_GPS_INT_CheckTerm+0x324>)
 8002872:	2201      	movs	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	e018      	b.n	80028aa <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSA")) {
 8002878:	49ba      	ldr	r1, [pc, #744]	; (8002b64 <TM_GPS_INT_CheckTerm+0x32c>)
 800287a:	48b7      	ldr	r0, [pc, #732]	; (8002b58 <TM_GPS_INT_CheckTerm+0x320>)
 800287c:	f000 fe60 	bl	8003540 <TM_GPS_INT_StringStartsWith>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <TM_GPS_INT_CheckTerm+0x56>
			TM_GPS_Statement = GPS_GPGSA;
 8002886:	4bb5      	ldr	r3, [pc, #724]	; (8002b5c <TM_GPS_INT_CheckTerm+0x324>)
 8002888:	2202      	movs	r2, #2
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e00d      	b.n	80028aa <TM_GPS_INT_CheckTerm+0x72>
		} else if (TM_GPS_INT_StringStartsWith(GPS_Term, "$GPGSV")) {
 800288e:	49b6      	ldr	r1, [pc, #728]	; (8002b68 <TM_GPS_INT_CheckTerm+0x330>)
 8002890:	48b1      	ldr	r0, [pc, #708]	; (8002b58 <TM_GPS_INT_CheckTerm+0x320>)
 8002892:	f000 fe55 	bl	8003540 <TM_GPS_INT_StringStartsWith>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <TM_GPS_INT_CheckTerm+0x6c>
			TM_GPS_Statement = GPS_GPGSV;
 800289c:	4baf      	ldr	r3, [pc, #700]	; (8002b5c <TM_GPS_INT_CheckTerm+0x324>)
 800289e:	2203      	movs	r2, #3
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e002      	b.n	80028aa <TM_GPS_INT_CheckTerm+0x72>
		} else {
			TM_GPS_Statement = GPS_ERR;
 80028a4:	4bad      	ldr	r3, [pc, #692]	; (8002b5c <TM_GPS_INT_CheckTerm+0x324>)
 80028a6:	2204      	movs	r2, #4
 80028a8:	701a      	strb	r2, [r3, #0]
		}
		
		strcpy(GPS_Statement_Name, GPS_Term);			/* Copy term to variable */
 80028aa:	49ab      	ldr	r1, [pc, #684]	; (8002b58 <TM_GPS_INT_CheckTerm+0x320>)
 80028ac:	48af      	ldr	r0, [pc, #700]	; (8002b6c <TM_GPS_INT_CheckTerm+0x334>)
 80028ae:	f020 f869 	bl	8022984 <strcpy>
 80028b2:	f000 bd7b 	b.w	80033ac <TM_GPS_INT_CheckTerm+0xb74>
			}
		}
	}
#endif
	
	switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 80028b6:	4ba9      	ldr	r3, [pc, #676]	; (8002b5c <TM_GPS_INT_CheckTerm+0x324>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	015b      	lsls	r3, r3, #5
 80028bc:	4aa4      	ldr	r2, [pc, #656]	; (8002b50 <TM_GPS_INT_CheckTerm+0x318>)
 80028be:	7812      	ldrb	r2, [r2, #0]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	3b01      	subs	r3, #1
 80028c4:	2b62      	cmp	r3, #98	; 0x62
 80028c6:	f200 84d9 	bhi.w	800327c <TM_GPS_INT_CheckTerm+0xa44>
 80028ca:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <TM_GPS_INT_CheckTerm+0x98>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	08002dc1 	.word	0x08002dc1
 80028d4:	08002a5d 	.word	0x08002a5d
 80028d8:	08002b1d 	.word	0x08002b1d
 80028dc:	08002b81 	.word	0x08002b81
 80028e0:	08002c41 	.word	0x08002c41
 80028e4:	08002c89 	.word	0x08002c89
 80028e8:	08002c67 	.word	0x08002c67
 80028ec:	0800327d 	.word	0x0800327d
 80028f0:	08002cab 	.word	0x08002cab
 80028f4:	0800327d 	.word	0x0800327d
 80028f8:	0800327d 	.word	0x0800327d
 80028fc:	0800327d 	.word	0x0800327d
 8002900:	0800327d 	.word	0x0800327d
 8002904:	0800327d 	.word	0x0800327d
 8002908:	0800327d 	.word	0x0800327d
 800290c:	0800327d 	.word	0x0800327d
 8002910:	0800327d 	.word	0x0800327d
 8002914:	0800327d 	.word	0x0800327d
 8002918:	0800327d 	.word	0x0800327d
 800291c:	0800327d 	.word	0x0800327d
 8002920:	0800327d 	.word	0x0800327d
 8002924:	0800327d 	.word	0x0800327d
 8002928:	0800327d 	.word	0x0800327d
 800292c:	0800327d 	.word	0x0800327d
 8002930:	0800327d 	.word	0x0800327d
 8002934:	0800327d 	.word	0x0800327d
 8002938:	0800327d 	.word	0x0800327d
 800293c:	0800327d 	.word	0x0800327d
 8002940:	0800327d 	.word	0x0800327d
 8002944:	0800327d 	.word	0x0800327d
 8002948:	0800327d 	.word	0x0800327d
 800294c:	0800327d 	.word	0x0800327d
 8002950:	0800327d 	.word	0x0800327d
 8002954:	08002fc5 	.word	0x08002fc5
 8002958:	0800327d 	.word	0x0800327d
 800295c:	0800327d 	.word	0x0800327d
 8002960:	0800327d 	.word	0x0800327d
 8002964:	0800327d 	.word	0x0800327d
 8002968:	08002ea9 	.word	0x08002ea9
 800296c:	08002fe9 	.word	0x08002fe9
 8002970:	08002f2b 	.word	0x08002f2b
 8002974:	0800327d 	.word	0x0800327d
 8002978:	0800327d 	.word	0x0800327d
 800297c:	0800327d 	.word	0x0800327d
 8002980:	0800327d 	.word	0x0800327d
 8002984:	0800327d 	.word	0x0800327d
 8002988:	0800327d 	.word	0x0800327d
 800298c:	0800327d 	.word	0x0800327d
 8002990:	0800327d 	.word	0x0800327d
 8002994:	0800327d 	.word	0x0800327d
 8002998:	0800327d 	.word	0x0800327d
 800299c:	0800327d 	.word	0x0800327d
 80029a0:	0800327d 	.word	0x0800327d
 80029a4:	0800327d 	.word	0x0800327d
 80029a8:	0800327d 	.word	0x0800327d
 80029ac:	0800327d 	.word	0x0800327d
 80029b0:	0800327d 	.word	0x0800327d
 80029b4:	0800327d 	.word	0x0800327d
 80029b8:	0800327d 	.word	0x0800327d
 80029bc:	0800327d 	.word	0x0800327d
 80029c0:	0800327d 	.word	0x0800327d
 80029c4:	0800327d 	.word	0x0800327d
 80029c8:	0800327d 	.word	0x0800327d
 80029cc:	0800327d 	.word	0x0800327d
 80029d0:	0800327d 	.word	0x0800327d
 80029d4:	080031e9 	.word	0x080031e9
 80029d8:	0800320d 	.word	0x0800320d
 80029dc:	0800320d 	.word	0x0800320d
 80029e0:	0800320d 	.word	0x0800320d
 80029e4:	0800320d 	.word	0x0800320d
 80029e8:	0800320d 	.word	0x0800320d
 80029ec:	0800320d 	.word	0x0800320d
 80029f0:	0800320d 	.word	0x0800320d
 80029f4:	0800320d 	.word	0x0800320d
 80029f8:	0800320d 	.word	0x0800320d
 80029fc:	0800320d 	.word	0x0800320d
 8002a00:	0800320d 	.word	0x0800320d
 8002a04:	0800320d 	.word	0x0800320d
 8002a08:	080030dd 	.word	0x080030dd
 8002a0c:	08003063 	.word	0x08003063
 8002a10:	08003157 	.word	0x08003157
 8002a14:	0800327d 	.word	0x0800327d
 8002a18:	0800327d 	.word	0x0800327d
 8002a1c:	0800327d 	.word	0x0800327d
 8002a20:	0800327d 	.word	0x0800327d
 8002a24:	0800327d 	.word	0x0800327d
 8002a28:	0800327d 	.word	0x0800327d
 8002a2c:	0800327d 	.word	0x0800327d
 8002a30:	0800327d 	.word	0x0800327d
 8002a34:	0800327d 	.word	0x0800327d
 8002a38:	0800327d 	.word	0x0800327d
 8002a3c:	0800327d 	.word	0x0800327d
 8002a40:	0800327d 	.word	0x0800327d
 8002a44:	0800327d 	.word	0x0800327d
 8002a48:	0800327d 	.word	0x0800327d
 8002a4c:	0800327d 	.word	0x0800327d
 8002a50:	0800327d 	.word	0x0800327d
 8002a54:	0800327d 	.word	0x0800327d
 8002a58:	08003259 	.word	0x08003259
#ifndef GPS_DISABLE_GPGGA
		case GPS_POS_LATITUDE:	/* GPGGA */
			/* Convert latitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	4619      	mov	r1, r3
 8002a62:	483d      	ldr	r0, [pc, #244]	; (8002b58 <TM_GPS_INT_CheckTerm+0x320>)
 8002a64:	f000 fd89 	bl	800357a <TM_GPS_INT_Atoi>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude = temp / 100;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4a40      	ldr	r2, [pc, #256]	; (8002b70 <TM_GPS_INT_CheckTerm+0x338>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <TM_GPS_INT_CheckTerm+0x33c>)
 8002a80:	ed83 7b00 	vstr	d7, [r3]
			TM_GPS_INT_Data.Latitude += (float)(temp % 100) / (float)60;
 8002a84:	4b3b      	ldr	r3, [pc, #236]	; (8002b74 <TM_GPS_INT_CheckTerm+0x33c>)
 8002a86:	ed93 6b00 	vldr	d6, [r3]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <TM_GPS_INT_CheckTerm+0x338>)
 8002a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	2164      	movs	r1, #100	; 0x64
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002aa4:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002b78 <TM_GPS_INT_CheckTerm+0x340>
 8002aa8:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8002aac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ab0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002ab4:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <TM_GPS_INT_CheckTerm+0x33c>)
 8002ab6:	ed83 7b00 	vstr	d7, [r3]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	3301      	adds	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	4a25      	ldr	r2, [pc, #148]	; (8002b58 <TM_GPS_INT_CheckTerm+0x320>)
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f107 0208 	add.w	r2, r7, #8
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fd54 	bl	800357a <TM_GPS_INT_Atoi>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Latitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	ee07 3a90 	vmov	s15, r3
 8002adc:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	200a      	movs	r0, #10
 8002ae6:	f000 fd75 	bl	80035d4 <TM_GPS_INT_Pow>
 8002aea:	ee07 0a90 	vmov	s15, r0
 8002aee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002af2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8002b48 <TM_GPS_INT_CheckTerm+0x310>
 8002af6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002afa:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b00:	ed93 7b00 	vldr	d7, [r3]
 8002b04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b08:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b0a:	ed83 7b00 	vstr	d7, [r3]
			TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE);
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <TM_GPS_INT_CheckTerm+0x344>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	4a19      	ldr	r2, [pc, #100]	; (8002b7c <TM_GPS_INT_CheckTerm+0x344>)
 8002b18:	6013      	str	r3, [r2, #0]
			break;
 8002b1a:	e3b2      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_NS: /* GPGGA */
			if (GPS_Term[0] == 'S') {
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <TM_GPS_INT_CheckTerm+0x320>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b53      	cmp	r3, #83	; 0x53
 8002b22:	d107      	bne.n	8002b34 <TM_GPS_INT_CheckTerm+0x2fc>
				TM_GPS_INT_Data.Latitude = -TM_GPS_INT_Data.Latitude;	/* South has negative coordinate */
 8002b24:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b26:	ed93 7b00 	vldr	d7, [r3]
 8002b2a:	eeb1 7b47 	vneg.f64	d7, d7
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <TM_GPS_INT_CheckTerm+0x33c>)
 8002b30:	ed83 7b00 	vstr	d7, [r3]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_NS);
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <TM_GPS_INT_CheckTerm+0x344>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b3c:	4a0f      	ldr	r2, [pc, #60]	; (8002b7c <TM_GPS_INT_CheckTerm+0x344>)
 8002b3e:	6013      	str	r3, [r2, #0]
			break;
 8002b40:	e39f      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
 8002b42:	bf00      	nop
 8002b44:	f3af 8000 	nop.w
 8002b48:	00000000 	.word	0x00000000
 8002b4c:	404e0000 	.word	0x404e0000
 8002b50:	2400021f 	.word	0x2400021f
 8002b54:	0802325c 	.word	0x0802325c
 8002b58:	24000210 	.word	0x24000210
 8002b5c:	24000000 	.word	0x24000000
 8002b60:	08023264 	.word	0x08023264
 8002b64:	0802326c 	.word	0x0802326c
 8002b68:	08023274 	.word	0x08023274
 8002b6c:	2400035c 	.word	0x2400035c
 8002b70:	51eb851f 	.word	0x51eb851f
 8002b74:	24000230 	.word	0x24000230
 8002b78:	42700000 	.word	0x42700000
 8002b7c:	24000224 	.word	0x24000224
		case GPS_POS_LONGITUDE: /* GPGGA */
			/* Convert longitude */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002b80:	f107 0308 	add.w	r3, r7, #8
 8002b84:	4619      	mov	r1, r3
 8002b86:	48c0      	ldr	r0, [pc, #768]	; (8002e88 <TM_GPS_INT_CheckTerm+0x650>)
 8002b88:	f000 fcf7 	bl	800357a <TM_GPS_INT_Atoi>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude = temp / 100; /* Degrees */
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4abe      	ldr	r2, [pc, #760]	; (8002e8c <TM_GPS_INT_CheckTerm+0x654>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002ba2:	4bbb      	ldr	r3, [pc, #748]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002ba4:	ed83 7b02 	vstr	d7, [r3, #8]
			TM_GPS_INT_Data.Longitude += (float)(temp % 100) / (float)60;
 8002ba8:	4bb9      	ldr	r3, [pc, #740]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002baa:	ed93 6b02 	vldr	d6, [r3, #8]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	4bb6      	ldr	r3, [pc, #728]	; (8002e8c <TM_GPS_INT_CheckTerm+0x654>)
 8002bb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	2164      	movs	r1, #100	; 0x64
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	ee07 3a90 	vmov	s15, r3
 8002bc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bc8:	eddf 5ab2 	vldr	s11, [pc, #712]	; 8002e94 <TM_GPS_INT_CheckTerm+0x65c>
 8002bcc:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8002bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bd4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002bd8:	4bad      	ldr	r3, [pc, #692]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002bda:	ed83 7b02 	vstr	d7, [r3, #8]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	3301      	adds	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	4aa8      	ldr	r2, [pc, #672]	; (8002e88 <TM_GPS_INT_CheckTerm+0x650>)
 8002be8:	4413      	add	r3, r2
 8002bea:	f107 0208 	add.w	r2, r7, #8
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fcc2 	bl	800357a <TM_GPS_INT_Atoi>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Longitude += temp / (TM_GPS_INT_Pow(10, count) * 60.0);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	4619      	mov	r1, r3
 8002c08:	200a      	movs	r0, #10
 8002c0a:	f000 fce3 	bl	80035d4 <TM_GPS_INT_Pow>
 8002c0e:	ee07 0a90 	vmov	s15, r0
 8002c12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c16:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8002e80 <TM_GPS_INT_CheckTerm+0x648>
 8002c1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c1e:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002c22:	4b9b      	ldr	r3, [pc, #620]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002c24:	ed93 7b02 	vldr	d7, [r3, #8]
 8002c28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c2c:	4b98      	ldr	r3, [pc, #608]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002c2e:	ed83 7b02 	vstr	d7, [r3, #8]
			TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE);
 8002c32:	4b99      	ldr	r3, [pc, #612]	; (8002e98 <TM_GPS_INT_CheckTerm+0x660>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f043 0302 	orr.w	r3, r3, #2
 8002c3a:	4a97      	ldr	r2, [pc, #604]	; (8002e98 <TM_GPS_INT_CheckTerm+0x660>)
 8002c3c:	6013      	str	r3, [r2, #0]
			break;
 8002c3e:	e320      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_EW: /* GPGGA */
			if (GPS_Term[0] == 'W') {
 8002c40:	4b91      	ldr	r3, [pc, #580]	; (8002e88 <TM_GPS_INT_CheckTerm+0x650>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b57      	cmp	r3, #87	; 0x57
 8002c46:	d107      	bne.n	8002c58 <TM_GPS_INT_CheckTerm+0x420>
				TM_GPS_INT_Data.Longitude = -TM_GPS_INT_Data.Longitude;	/* West has negative coordinate */
 8002c48:	4b91      	ldr	r3, [pc, #580]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002c4a:	ed93 7b02 	vldr	d7, [r3, #8]
 8002c4e:	eeb1 7b47 	vneg.f64	d7, d7
 8002c52:	4b8f      	ldr	r3, [pc, #572]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002c54:	ed83 7b02 	vstr	d7, [r3, #8]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_EW);
 8002c58:	4b8f      	ldr	r3, [pc, #572]	; (8002e98 <TM_GPS_INT_CheckTerm+0x660>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f043 0320 	orr.w	r3, r3, #32
 8002c60:	4a8d      	ldr	r2, [pc, #564]	; (8002e98 <TM_GPS_INT_CheckTerm+0x660>)
 8002c62:	6013      	str	r3, [r2, #0]
			break;
 8002c64:	e30d      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_SATS: /* GPGGA */
			/* Satellites in use */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002c66:	f107 0308 	add.w	r3, r7, #8
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4886      	ldr	r0, [pc, #536]	; (8002e88 <TM_GPS_INT_CheckTerm+0x650>)
 8002c6e:	f000 fc84 	bl	800357a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Satellites = temp;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4b86      	ldr	r3, [pc, #536]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002c78:	751a      	strb	r2, [r3, #20]
			TM_GPS_INT_SetFlag(GPS_FLAG_SATS);
 8002c7a:	4b87      	ldr	r3, [pc, #540]	; (8002e98 <TM_GPS_INT_CheckTerm+0x660>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f043 0304 	orr.w	r3, r3, #4
 8002c82:	4a85      	ldr	r2, [pc, #532]	; (8002e98 <TM_GPS_INT_CheckTerm+0x660>)
 8002c84:	6013      	str	r3, [r2, #0]
			break;
 8002c86:	e2fc      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_FIX: /* GPGGA */
			/* GPS Fix */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002c88:	f107 0308 	add.w	r3, r7, #8
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	487e      	ldr	r0, [pc, #504]	; (8002e88 <TM_GPS_INT_CheckTerm+0x650>)
 8002c90:	f000 fc73 	bl	800357a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Fix = temp;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b7d      	ldr	r3, [pc, #500]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002c9a:	755a      	strb	r2, [r3, #21]
			TM_GPS_INT_SetFlag(GPS_FLAG_FIX);
 8002c9c:	4b7e      	ldr	r3, [pc, #504]	; (8002e98 <TM_GPS_INT_CheckTerm+0x660>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f043 0308 	orr.w	r3, r3, #8
 8002ca4:	4a7c      	ldr	r2, [pc, #496]	; (8002e98 <TM_GPS_INT_CheckTerm+0x660>)
 8002ca6:	6013      	str	r3, [r2, #0]
			break;
 8002ca8:	e2eb      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_ALTITUDE: /* GPGGA */
			/* Convert altitude above sea */
			if (GPS_Term[0] == '-') {
 8002caa:	4b77      	ldr	r3, [pc, #476]	; (8002e88 <TM_GPS_INT_CheckTerm+0x650>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b2d      	cmp	r3, #45	; 0x2d
 8002cb0:	d145      	bne.n	8002d3e <TM_GPS_INT_CheckTerm+0x506>
				count = TM_GPS_INT_Atoi(&GPS_Term[1], &temp);
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4878      	ldr	r0, [pc, #480]	; (8002e9c <TM_GPS_INT_CheckTerm+0x664>)
 8002cba:	f000 fc5e 	bl	800357a <TM_GPS_INT_Atoi>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ccc:	4b70      	ldr	r3, [pc, #448]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002cce:	edc3 7a04 	vstr	s15, [r3, #16]
				
				count++;
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	4a69      	ldr	r2, [pc, #420]	; (8002e88 <TM_GPS_INT_CheckTerm+0x650>)
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f107 0208 	add.w	r2, r7, #8
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fc45 	bl	800357a <TM_GPS_INT_Atoi>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	ee07 3a90 	vmov	s15, r3
 8002cfa:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	4619      	mov	r1, r3
 8002d02:	200a      	movs	r0, #10
 8002d04:	f000 fc66 	bl	80035d4 <TM_GPS_INT_Pow>
 8002d08:	ee07 0a90 	vmov	s15, r0
 8002d0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d10:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002d14:	4b5e      	ldr	r3, [pc, #376]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002d16:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002d1e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d26:	4b5a      	ldr	r3, [pc, #360]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002d28:	edc3 7a04 	vstr	s15, [r3, #16]
				
				TM_GPS_INT_Data.Altitude = -TM_GPS_INT_Data.Altitude;
 8002d2c:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002d2e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d32:	eef1 7a67 	vneg.f32	s15, s15
 8002d36:	4b56      	ldr	r3, [pc, #344]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002d38:	edc3 7a04 	vstr	s15, [r3, #16]
 8002d3c:	e039      	b.n	8002db2 <TM_GPS_INT_CheckTerm+0x57a>
			} else {
				count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002d3e:	f107 0308 	add.w	r3, r7, #8
 8002d42:	4619      	mov	r1, r3
 8002d44:	4850      	ldr	r0, [pc, #320]	; (8002e88 <TM_GPS_INT_CheckTerm+0x650>)
 8002d46:	f000 fc18 	bl	800357a <TM_GPS_INT_Atoi>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude = temp;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	ee07 3a90 	vmov	s15, r3
 8002d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d58:	4b4d      	ldr	r3, [pc, #308]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002d5a:	edc3 7a04 	vstr	s15, [r3, #16]
		
				count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	3301      	adds	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	4a48      	ldr	r2, [pc, #288]	; (8002e88 <TM_GPS_INT_CheckTerm+0x650>)
 8002d68:	4413      	add	r3, r2
 8002d6a:	f107 0208 	add.w	r2, r7, #8
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fc02 	bl	800357a <TM_GPS_INT_Atoi>
 8002d76:	4603      	mov	r3, r0
 8002d78:	73fb      	strb	r3, [r7, #15]
				TM_GPS_INT_Data.Altitude += temp / (TM_GPS_INT_Pow(10, count) * 1.0);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	ee07 3a90 	vmov	s15, r3
 8002d80:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	4619      	mov	r1, r3
 8002d88:	200a      	movs	r0, #10
 8002d8a:	f000 fc23 	bl	80035d4 <TM_GPS_INT_Pow>
 8002d8e:	ee07 0a90 	vmov	s15, r0
 8002d92:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002d96:	ee88 6b07 	vdiv.f64	d6, d8, d7
 8002d9a:	4b3d      	ldr	r3, [pc, #244]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002d9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002da0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002da4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002da8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002dac:	4b38      	ldr	r3, [pc, #224]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002dae:	edc3 7a04 	vstr	s15, [r3, #16]
			}
			TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE);
 8002db2:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <TM_GPS_INT_CheckTerm+0x660>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f043 0310 	orr.w	r3, r3, #16
 8002dba:	4a37      	ldr	r2, [pc, #220]	; (8002e98 <TM_GPS_INT_CheckTerm+0x660>)
 8002dbc:	6013      	str	r3, [r2, #0]
			break;
 8002dbe:	e260      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_TIME: /* GPGGA */
			/* Set time */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002dc0:	f107 0308 	add.w	r3, r7, #8
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4830      	ldr	r0, [pc, #192]	; (8002e88 <TM_GPS_INT_CheckTerm+0x650>)
 8002dc8:	f000 fbd7 	bl	800357a <TM_GPS_INT_Atoi>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Time.Seconds = temp % 100;
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <TM_GPS_INT_CheckTerm+0x654>)
 8002dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	2164      	movs	r1, #100	; 0x64
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002de6:	761a      	strb	r2, [r3, #24]
			TM_GPS_INT_Data.Time.Minutes = (int)(temp * (float) 0.01) % 100;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002ea0 <TM_GPS_INT_CheckTerm+0x668>
 8002df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dfe:	ee17 2a90 	vmov	r2, s15
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <TM_GPS_INT_CheckTerm+0x654>)
 8002e04:	fb83 1302 	smull	r1, r3, r3, r2
 8002e08:	1159      	asrs	r1, r3, #5
 8002e0a:	17d3      	asrs	r3, r2, #31
 8002e0c:	1acb      	subs	r3, r1, r3
 8002e0e:	2164      	movs	r1, #100	; 0x64
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002e1a:	75da      	strb	r2, [r3, #23]
			TM_GPS_INT_Data.Time.Hours = (int)(temp * (float)0.0001) % 100;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e26:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002ea4 <TM_GPS_INT_CheckTerm+0x66c>
 8002e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e32:	ee17 2a90 	vmov	r2, s15
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <TM_GPS_INT_CheckTerm+0x654>)
 8002e38:	fb83 1302 	smull	r1, r3, r3, r2
 8002e3c:	1159      	asrs	r1, r3, #5
 8002e3e:	17d3      	asrs	r3, r2, #31
 8002e40:	1acb      	subs	r3, r1, r3
 8002e42:	2164      	movs	r1, #100	; 0x64
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002e4e:	759a      	strb	r2, [r3, #22]
			/* Hundredths */
			TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	3301      	adds	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	4a0b      	ldr	r2, [pc, #44]	; (8002e88 <TM_GPS_INT_CheckTerm+0x650>)
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f107 0208 	add.w	r2, r7, #8
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fb89 	bl	800357a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Time.Hundredths = temp;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <TM_GPS_INT_CheckTerm+0x658>)
 8002e6e:	835a      	strh	r2, [r3, #26]
			TM_GPS_INT_SetFlag(GPS_FLAG_TIME);
 8002e70:	4b09      	ldr	r3, [pc, #36]	; (8002e98 <TM_GPS_INT_CheckTerm+0x660>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <TM_GPS_INT_CheckTerm+0x660>)
 8002e7a:	6013      	str	r3, [r2, #0]
			break;
 8002e7c:	e201      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
 8002e7e:	bf00      	nop
 8002e80:	00000000 	.word	0x00000000
 8002e84:	404e0000 	.word	0x404e0000
 8002e88:	24000210 	.word	0x24000210
 8002e8c:	51eb851f 	.word	0x51eb851f
 8002e90:	24000230 	.word	0x24000230
 8002e94:	42700000 	.word	0x42700000
 8002e98:	24000224 	.word	0x24000224
 8002e9c:	24000211 	.word	0x24000211
 8002ea0:	3c23d70a 	.word	0x3c23d70a
 8002ea4:	38d1b717 	.word	0x38d1b717
#endif
#ifndef GPS_DISABLE_GPRMC
		case GPS_POS_SPEED:	/* GPRMC */	
			/* Convert speed */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002ea8:	f107 0308 	add.w	r3, r7, #8
 8002eac:	4619      	mov	r1, r3
 8002eae:	48c8      	ldr	r0, [pc, #800]	; (80031d0 <TM_GPS_INT_CheckTerm+0x998>)
 8002eb0:	f000 fb63 	bl	800357a <TM_GPS_INT_Atoi>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed = (float)temp;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec2:	4bc4      	ldr	r3, [pc, #784]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 8002ec4:	edc3 7a08 	vstr	s15, [r3, #32]
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	4abf      	ldr	r2, [pc, #764]	; (80031d0 <TM_GPS_INT_CheckTerm+0x998>)
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f107 0208 	add.w	r2, r7, #8
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fb4d 	bl	800357a <TM_GPS_INT_Atoi>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Speed += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0));
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eee:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	200a      	movs	r0, #10
 8002ef8:	f000 fb6c 	bl	80035d4 <TM_GPS_INT_Pow>
 8002efc:	ee07 0a90 	vmov	s15, r0
 8002f00:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002f04:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8002f08:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002f0c:	4bb1      	ldr	r3, [pc, #708]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 8002f0e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f16:	4baf      	ldr	r3, [pc, #700]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 8002f18:	edc3 7a08 	vstr	s15, [r3, #32]
		
			/* Set flag */
			TM_GPS_INT_SetFlag(GPS_FLAG_SPEED);
 8002f1c:	4bae      	ldr	r3, [pc, #696]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f24:	4aac      	ldr	r2, [pc, #688]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 8002f26:	6013      	str	r3, [r2, #0]
			break;
 8002f28:	e1ab      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_DATE: /* GPRMC */	
			/* Set date */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002f2a:	f107 0308 	add.w	r3, r7, #8
 8002f2e:	4619      	mov	r1, r3
 8002f30:	48a7      	ldr	r0, [pc, #668]	; (80031d0 <TM_GPS_INT_CheckTerm+0x998>)
 8002f32:	f000 fb22 	bl	800357a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.Date.Year = temp % 100;
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	4ba8      	ldr	r3, [pc, #672]	; (80031dc <TM_GPS_INT_CheckTerm+0x9a4>)
 8002f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	2164      	movs	r1, #100	; 0x64
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4ba2      	ldr	r3, [pc, #648]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 8002f4c:	779a      	strb	r2, [r3, #30]
			TM_GPS_INT_Data.Date.Month = (int)(temp * 0.01f) % 100;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	ee07 3a90 	vmov	s15, r3
 8002f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f58:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80031e0 <TM_GPS_INT_CheckTerm+0x9a8>
 8002f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f64:	ee17 2a90 	vmov	r2, s15
 8002f68:	4b9c      	ldr	r3, [pc, #624]	; (80031dc <TM_GPS_INT_CheckTerm+0x9a4>)
 8002f6a:	fb83 1302 	smull	r1, r3, r3, r2
 8002f6e:	1159      	asrs	r1, r3, #5
 8002f70:	17d3      	asrs	r3, r2, #31
 8002f72:	1acb      	subs	r3, r1, r3
 8002f74:	2164      	movs	r1, #100	; 0x64
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b95      	ldr	r3, [pc, #596]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 8002f80:	775a      	strb	r2, [r3, #29]
			TM_GPS_INT_Data.Date.Date = (int)(temp * 0.0001f) % 100;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	ee07 3a90 	vmov	s15, r3
 8002f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8c:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80031e4 <TM_GPS_INT_CheckTerm+0x9ac>
 8002f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f98:	ee17 2a90 	vmov	r2, s15
 8002f9c:	4b8f      	ldr	r3, [pc, #572]	; (80031dc <TM_GPS_INT_CheckTerm+0x9a4>)
 8002f9e:	fb83 1302 	smull	r1, r3, r3, r2
 8002fa2:	1159      	asrs	r1, r3, #5
 8002fa4:	17d3      	asrs	r3, r2, #31
 8002fa6:	1acb      	subs	r3, r1, r3
 8002fa8:	2164      	movs	r1, #100	; 0x64
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4b88      	ldr	r3, [pc, #544]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 8002fb4:	771a      	strb	r2, [r3, #28]
			TM_GPS_INT_SetFlag(GPS_FLAG_DATE);
 8002fb6:	4b88      	ldr	r3, [pc, #544]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fbe:	4a86      	ldr	r2, [pc, #536]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 8002fc0:	6013      	str	r3, [r2, #0]
			break;
 8002fc2:	e15e      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_VALIDITY: /* GPRMC */	
			/* GPS valid status */
			TM_GPS_INT_Data.Validity = GPS_Term[0] == 'A';
 8002fc4:	4b82      	ldr	r3, [pc, #520]	; (80031d0 <TM_GPS_INT_CheckTerm+0x998>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b41      	cmp	r3, #65	; 0x41
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b7f      	ldr	r3, [pc, #508]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 8002fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY);
 8002fda:	4b7f      	ldr	r3, [pc, #508]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fe2:	4a7d      	ldr	r2, [pc, #500]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 8002fe4:	6013      	str	r3, [r2, #0]
			break;
 8002fe6:	e14c      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_DIRECTION: /* GPRMC */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8002fe8:	f107 0308 	add.w	r3, r7, #8
 8002fec:	4619      	mov	r1, r3
 8002fee:	4878      	ldr	r0, [pc, #480]	; (80031d0 <TM_GPS_INT_CheckTerm+0x998>)
 8002ff0:	f000 fac3 	bl	800357a <TM_GPS_INT_Atoi>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction = (float)temp;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003002:	4b74      	ldr	r3, [pc, #464]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 8003004:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	3301      	adds	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	4a6f      	ldr	r2, [pc, #444]	; (80031d0 <TM_GPS_INT_CheckTerm+0x998>)
 8003012:	4413      	add	r3, r2
 8003014:	f107 0208 	add.w	r2, r7, #8
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f000 faad 	bl	800357a <TM_GPS_INT_Atoi>
 8003020:	4603      	mov	r3, r0
 8003022:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.Direction += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	4619      	mov	r1, r3
 8003032:	200a      	movs	r0, #10
 8003034:	f000 face 	bl	80035d4 <TM_GPS_INT_Pow>
 8003038:	ee07 0a90 	vmov	s15, r0
 800303c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003040:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003044:	4b63      	ldr	r3, [pc, #396]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 8003046:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800304a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304e:	4b61      	ldr	r3, [pc, #388]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 8003050:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION);
 8003054:	4b60      	ldr	r3, [pc, #384]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305c:	4a5e      	ldr	r2, [pc, #376]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 800305e:	6013      	str	r3, [r2, #0]
			break;
 8003060:	e10f      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
#endif
#ifndef GPS_DISABLE_GPGSA
		case GPS_POS_HDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003062:	f107 0308 	add.w	r3, r7, #8
 8003066:	4619      	mov	r1, r3
 8003068:	4859      	ldr	r0, [pc, #356]	; (80031d0 <TM_GPS_INT_CheckTerm+0x998>)
 800306a:	f000 fa86 	bl	800357a <TM_GPS_INT_Atoi>
 800306e:	4603      	mov	r3, r0
 8003070:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP = (float)temp;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	ee07 3a90 	vmov	s15, r3
 8003078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800307c:	4b55      	ldr	r3, [pc, #340]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 800307e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	3301      	adds	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	4a51      	ldr	r2, [pc, #324]	; (80031d0 <TM_GPS_INT_CheckTerm+0x998>)
 800308c:	4413      	add	r3, r2
 800308e:	f107 0208 	add.w	r2, r7, #8
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fa70 	bl	800357a <TM_GPS_INT_Atoi>
 800309a:	4603      	mov	r3, r0
 800309c:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.HDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	ee07 3a90 	vmov	s15, r3
 80030a4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	4619      	mov	r1, r3
 80030ac:	200a      	movs	r0, #10
 80030ae:	f000 fa91 	bl	80035d4 <TM_GPS_INT_Pow>
 80030b2:	ee07 0a90 	vmov	s15, r0
 80030b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ba:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80030be:	4b45      	ldr	r3, [pc, #276]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 80030c0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80030c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c8:	4b42      	ldr	r3, [pc, #264]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 80030ca:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			TM_GPS_INT_SetFlag(GPS_FLAG_HDOP);
 80030ce:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030d6:	4a40      	ldr	r2, [pc, #256]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 80030d8:	6013      	str	r3, [r2, #0]
			break;
 80030da:	e0d2      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_PDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 80030dc:	f107 0308 	add.w	r3, r7, #8
 80030e0:	4619      	mov	r1, r3
 80030e2:	483b      	ldr	r0, [pc, #236]	; (80031d0 <TM_GPS_INT_CheckTerm+0x998>)
 80030e4:	f000 fa49 	bl	800357a <TM_GPS_INT_Atoi>
 80030e8:	4603      	mov	r3, r0
 80030ea:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP = (float)temp;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030f6:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 80030f8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	3301      	adds	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	4a32      	ldr	r2, [pc, #200]	; (80031d0 <TM_GPS_INT_CheckTerm+0x998>)
 8003106:	4413      	add	r3, r2
 8003108:	f107 0208 	add.w	r2, r7, #8
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fa33 	bl	800357a <TM_GPS_INT_Atoi>
 8003114:	4603      	mov	r3, r0
 8003116:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.PDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	4619      	mov	r1, r3
 8003126:	200a      	movs	r0, #10
 8003128:	f000 fa54 	bl	80035d4 <TM_GPS_INT_Pow>
 800312c:	ee07 0a90 	vmov	s15, r0
 8003130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003134:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8003138:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 800313a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800313e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003142:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 8003144:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			TM_GPS_INT_SetFlag(GPS_FLAG_PDOP);
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003150:	4a21      	ldr	r2, [pc, #132]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 8003152:	6013      	str	r3, [r2, #0]
			break;
 8003154:	e095      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_VDOP: /* GPGSA */
			count = TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003156:	f107 0308 	add.w	r3, r7, #8
 800315a:	4619      	mov	r1, r3
 800315c:	481c      	ldr	r0, [pc, #112]	; (80031d0 <TM_GPS_INT_CheckTerm+0x998>)
 800315e:	f000 fa0c 	bl	800357a <TM_GPS_INT_Atoi>
 8003162:	4603      	mov	r3, r0
 8003164:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP = (float)temp;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	ee07 3a90 	vmov	s15, r3
 800316c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003170:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 8003172:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		
			count = TM_GPS_INT_Atoi(&GPS_Term[++count], &temp);
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	3301      	adds	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <TM_GPS_INT_CheckTerm+0x998>)
 8003180:	4413      	add	r3, r2
 8003182:	f107 0208 	add.w	r2, r7, #8
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f000 f9f6 	bl	800357a <TM_GPS_INT_Atoi>
 800318e:	4603      	mov	r3, r0
 8003190:	73fb      	strb	r3, [r7, #15]
			TM_GPS_INT_Data.VDOP += (float)((float)temp / (TM_GPS_INT_Pow(10, count) * 1.0f));
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	4619      	mov	r1, r3
 80031a0:	200a      	movs	r0, #10
 80031a2:	f000 fa17 	bl	80035d4 <TM_GPS_INT_Pow>
 80031a6:	ee07 0a90 	vmov	s15, r0
 80031aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ae:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 80031b4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80031b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <TM_GPS_INT_CheckTerm+0x99c>)
 80031be:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			TM_GPS_INT_SetFlag(GPS_FLAG_VDOP);
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031ca:	4a03      	ldr	r2, [pc, #12]	; (80031d8 <TM_GPS_INT_CheckTerm+0x9a0>)
 80031cc:	6013      	str	r3, [r2, #0]
			break;
 80031ce:	e058      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
 80031d0:	24000210 	.word	0x24000210
 80031d4:	24000230 	.word	0x24000230
 80031d8:	24000224 	.word	0x24000224
 80031dc:	51eb851f 	.word	0x51eb851f
 80031e0:	3c23d70a 	.word	0x3c23d70a
 80031e4:	38d1b717 	.word	0x38d1b717
		case GPS_POS_FIXMODE: /* GPGSA */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 80031e8:	f107 0308 	add.w	r3, r7, #8
 80031ec:	4619      	mov	r1, r3
 80031ee:	4872      	ldr	r0, [pc, #456]	; (80033b8 <TM_GPS_INT_CheckTerm+0xb80>)
 80031f0:	f000 f9c3 	bl	800357a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.FixMode = temp;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	4b70      	ldr	r3, [pc, #448]	; (80033bc <TM_GPS_INT_CheckTerm+0xb84>)
 80031fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE);
 80031fe:	4b70      	ldr	r3, [pc, #448]	; (80033c0 <TM_GPS_INT_CheckTerm+0xb88>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003206:	4a6e      	ldr	r2, [pc, #440]	; (80033c0 <TM_GPS_INT_CheckTerm+0xb88>)
 8003208:	6013      	str	r3, [r2, #0]
			break;
 800320a:	e03a      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
		case GPS_POS_SAT9:
		case GPS_POS_SAT10:
		case GPS_POS_SAT11:
		case GPS_POS_SAT12:
			/* Satellite numbers */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	4619      	mov	r1, r3
 8003212:	4869      	ldr	r0, [pc, #420]	; (80033b8 <TM_GPS_INT_CheckTerm+0xb80>)
 8003214:	f000 f9b1 	bl	800357a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatelliteIDs[GPS_Term_Number - 3] = temp;
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	4b6a      	ldr	r3, [pc, #424]	; (80033c4 <TM_GPS_INT_CheckTerm+0xb8c>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	3b03      	subs	r3, #3
 8003220:	b2d1      	uxtb	r1, r2
 8003222:	4a66      	ldr	r2, [pc, #408]	; (80033bc <TM_GPS_INT_CheckTerm+0xb84>)
 8003224:	4413      	add	r3, r2
 8003226:	460a      	mov	r2, r1
 8003228:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			ids_count++;							/* Increase number of satellites found */
 800322c:	4b66      	ldr	r3, [pc, #408]	; (80033c8 <TM_GPS_INT_CheckTerm+0xb90>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	b2da      	uxtb	r2, r3
 8003234:	4b64      	ldr	r3, [pc, #400]	; (80033c8 <TM_GPS_INT_CheckTerm+0xb90>)
 8003236:	701a      	strb	r2, [r3, #0]
		
			if (ids_count == TM_GPS_INT_Data.Satellites) {
 8003238:	4b60      	ldr	r3, [pc, #384]	; (80033bc <TM_GPS_INT_CheckTerm+0xb84>)
 800323a:	7d1a      	ldrb	r2, [r3, #20]
 800323c:	4b62      	ldr	r3, [pc, #392]	; (80033c8 <TM_GPS_INT_CheckTerm+0xb90>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d11d      	bne.n	8003280 <TM_GPS_INT_CheckTerm+0xa48>
				ids_count = 0;						/* Reset count, we have all statements */
 8003244:	4b60      	ldr	r3, [pc, #384]	; (80033c8 <TM_GPS_INT_CheckTerm+0xb90>)
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 800324a:	4b5d      	ldr	r3, [pc, #372]	; (80033c0 <TM_GPS_INT_CheckTerm+0xb88>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003252:	4a5b      	ldr	r2, [pc, #364]	; (80033c0 <TM_GPS_INT_CheckTerm+0xb88>)
 8003254:	6013      	str	r3, [r2, #0]
			}
			break;
 8003256:	e013      	b.n	8003280 <TM_GPS_INT_CheckTerm+0xa48>
#endif
#ifndef GPS_DISABLE_GPGSV
		case GPS_POS_SATSINVIEW: /* GPGSV */
			/* Satellites in view */
			TM_GPS_INT_Atoi(GPS_Term, &temp);
 8003258:	f107 0308 	add.w	r3, r7, #8
 800325c:	4619      	mov	r1, r3
 800325e:	4856      	ldr	r0, [pc, #344]	; (80033b8 <TM_GPS_INT_CheckTerm+0xb80>)
 8003260:	f000 f98b 	bl	800357a <TM_GPS_INT_Atoi>
			TM_GPS_INT_Data.SatellitesInView = temp;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b54      	ldr	r3, [pc, #336]	; (80033bc <TM_GPS_INT_CheckTerm+0xb84>)
 800326a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW);
 800326e:	4b54      	ldr	r3, [pc, #336]	; (80033c0 <TM_GPS_INT_CheckTerm+0xb88>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003276:	4a52      	ldr	r2, [pc, #328]	; (80033c0 <TM_GPS_INT_CheckTerm+0xb88>)
 8003278:	6013      	str	r3, [r2, #0]
			break;
 800327a:	e002      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
#endif
		default: 
			break;
 800327c:	bf00      	nop
 800327e:	e000      	b.n	8003282 <TM_GPS_INT_CheckTerm+0xa4a>
			break;
 8003280:	bf00      	nop
	}
	
#ifndef GPS_DISABLE_GPGSV
	/* Check for GPGSV statement separatelly */
	if (TM_GPS_Statement == GPS_GPGSV) {	
 8003282:	4b52      	ldr	r3, [pc, #328]	; (80033cc <TM_GPS_INT_CheckTerm+0xb94>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b03      	cmp	r3, #3
 8003288:	f040 8090 	bne.w	80033ac <TM_GPS_INT_CheckTerm+0xb74>
		if (GPS_Term_Number == 1) {
 800328c:	4b4d      	ldr	r3, [pc, #308]	; (80033c4 <TM_GPS_INT_CheckTerm+0xb8c>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d109      	bne.n	80032a8 <TM_GPS_INT_CheckTerm+0xa70>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save number of GPGSV statements */
 8003294:	f107 0308 	add.w	r3, r7, #8
 8003298:	4619      	mov	r1, r3
 800329a:	4847      	ldr	r0, [pc, #284]	; (80033b8 <TM_GPS_INT_CheckTerm+0xb80>)
 800329c:	f000 f96d 	bl	800357a <TM_GPS_INT_Atoi>
			GPGSV_StatementsCount = temp;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b4a      	ldr	r3, [pc, #296]	; (80033d0 <TM_GPS_INT_CheckTerm+0xb98>)
 80032a6:	701a      	strb	r2, [r3, #0]
		}
		if (GPS_Term_Number == 2) {
 80032a8:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <TM_GPS_INT_CheckTerm+0xb8c>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d109      	bne.n	80032c4 <TM_GPS_INT_CheckTerm+0xa8c>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Save current of GPGSV statement number */
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	4619      	mov	r1, r3
 80032b6:	4840      	ldr	r0, [pc, #256]	; (80033b8 <TM_GPS_INT_CheckTerm+0xb80>)
 80032b8:	f000 f95f 	bl	800357a <TM_GPS_INT_Atoi>
			GPSGV_StatementNumber = temp;
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	4b44      	ldr	r3, [pc, #272]	; (80033d4 <TM_GPS_INT_CheckTerm+0xb9c>)
 80032c2:	701a      	strb	r2, [r3, #0]
		}
		
		/* Data */
		if (GPS_Term_Number >= 4) {
 80032c4:	4b3f      	ldr	r3, [pc, #252]	; (80033c4 <TM_GPS_INT_CheckTerm+0xb8c>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d96f      	bls.n	80033ac <TM_GPS_INT_CheckTerm+0xb74>
			TM_GPS_INT_Atoi(GPS_Term, &temp);			/* Convert to number */
 80032cc:	f107 0308 	add.w	r3, r7, #8
 80032d0:	4619      	mov	r1, r3
 80032d2:	4839      	ldr	r0, [pc, #228]	; (80033b8 <TM_GPS_INT_CheckTerm+0xb80>)
 80032d4:	f000 f951 	bl	800357a <TM_GPS_INT_Atoi>
			
			GPGSV_Term_Number = GPS_Term_Number - 4;	/* Get proper value */
 80032d8:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <TM_GPS_INT_CheckTerm+0xb8c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	3b04      	subs	r3, #4
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <TM_GPS_INT_CheckTerm+0xba0>)
 80032e2:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Mod = GPGSV_Term_Number % 4;
 80032e4:	4b3c      	ldr	r3, [pc, #240]	; (80033d8 <TM_GPS_INT_CheckTerm+0xba0>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <TM_GPS_INT_CheckTerm+0xba4>)
 80032f0:	701a      	strb	r2, [r3, #0]
			GPGSV_Term_Number = (GPSGV_StatementNumber - 1) * 4 + (GPGSV_Term_Number / 4);
 80032f2:	4b38      	ldr	r3, [pc, #224]	; (80033d4 <TM_GPS_INT_CheckTerm+0xb9c>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	333f      	adds	r3, #63	; 0x3f
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <TM_GPS_INT_CheckTerm+0xba0>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	b2db      	uxtb	r3, r3
 8003306:	4413      	add	r3, r2
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4b33      	ldr	r3, [pc, #204]	; (80033d8 <TM_GPS_INT_CheckTerm+0xba0>)
 800330c:	701a      	strb	r2, [r3, #0]
			
			if (GPGSV_Term_Number < GPS_MAX_SATS_IN_VIEW) {	/* If still memory available */
 800330e:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <TM_GPS_INT_CheckTerm+0xba0>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b17      	cmp	r3, #23
 8003314:	d84a      	bhi.n	80033ac <TM_GPS_INT_CheckTerm+0xb74>
				/* Check offset from 4 */
				if (GPGSV_Term_Mod == 0) {
 8003316:	4b31      	ldr	r3, [pc, #196]	; (80033dc <TM_GPS_INT_CheckTerm+0xba4>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10e      	bne.n	800333c <TM_GPS_INT_CheckTerm+0xb04>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].ID = temp;
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <TM_GPS_INT_CheckTerm+0xba0>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	4619      	mov	r1, r3
 8003326:	b2d0      	uxtb	r0, r2
 8003328:	4a24      	ldr	r2, [pc, #144]	; (80033bc <TM_GPS_INT_CheckTerm+0xb84>)
 800332a:	460b      	mov	r3, r1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	440b      	add	r3, r1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	3346      	adds	r3, #70	; 0x46
 8003336:	4602      	mov	r2, r0
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e037      	b.n	80033ac <TM_GPS_INT_CheckTerm+0xb74>
				} else if (GPGSV_Term_Mod == 1) {
 800333c:	4b27      	ldr	r3, [pc, #156]	; (80033dc <TM_GPS_INT_CheckTerm+0xba4>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10e      	bne.n	8003362 <TM_GPS_INT_CheckTerm+0xb2a>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Elevation = temp;
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	4b24      	ldr	r3, [pc, #144]	; (80033d8 <TM_GPS_INT_CheckTerm+0xba0>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	4619      	mov	r1, r3
 800334c:	b2d0      	uxtb	r0, r2
 800334e:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <TM_GPS_INT_CheckTerm+0xb84>)
 8003350:	460b      	mov	r3, r1
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	440b      	add	r3, r1
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	4413      	add	r3, r2
 800335a:	3347      	adds	r3, #71	; 0x47
 800335c:	4602      	mov	r2, r0
 800335e:	701a      	strb	r2, [r3, #0]
 8003360:	e024      	b.n	80033ac <TM_GPS_INT_CheckTerm+0xb74>
				} else if (GPGSV_Term_Mod == 2) {
 8003362:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <TM_GPS_INT_CheckTerm+0xba4>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d10e      	bne.n	8003388 <TM_GPS_INT_CheckTerm+0xb50>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].Azimuth = temp;
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <TM_GPS_INT_CheckTerm+0xba0>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	4619      	mov	r1, r3
 8003372:	b290      	uxth	r0, r2
 8003374:	4a11      	ldr	r2, [pc, #68]	; (80033bc <TM_GPS_INT_CheckTerm+0xb84>)
 8003376:	460b      	mov	r3, r1
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	440b      	add	r3, r1
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	3348      	adds	r3, #72	; 0x48
 8003382:	4602      	mov	r2, r0
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	e011      	b.n	80033ac <TM_GPS_INT_CheckTerm+0xb74>
				} else if (GPGSV_Term_Mod == 3) {
 8003388:	4b14      	ldr	r3, [pc, #80]	; (80033dc <TM_GPS_INT_CheckTerm+0xba4>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d10d      	bne.n	80033ac <TM_GPS_INT_CheckTerm+0xb74>
					TM_GPS_INT_Data.SatDesc[GPGSV_Term_Number].SNR = temp;
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <TM_GPS_INT_CheckTerm+0xba0>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	4619      	mov	r1, r3
 8003398:	b2d0      	uxtb	r0, r2
 800339a:	4a08      	ldr	r2, [pc, #32]	; (80033bc <TM_GPS_INT_CheckTerm+0xb84>)
 800339c:	460b      	mov	r3, r1
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	440b      	add	r3, r1
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	334a      	adds	r3, #74	; 0x4a
 80033a8:	4602      	mov	r2, r0
 80033aa:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	ecbd 8b02 	vpop	{d8}
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	24000210 	.word	0x24000210
 80033bc:	24000230 	.word	0x24000230
 80033c0:	24000224 	.word	0x24000224
 80033c4:	2400021f 	.word	0x2400021f
 80033c8:	24000367 	.word	0x24000367
 80033cc:	24000000 	.word	0x24000000
 80033d0:	24000363 	.word	0x24000363
 80033d4:	24000364 	.word	0x24000364
 80033d8:	24000365 	.word	0x24000365
 80033dc:	24000366 	.word	0x24000366

080033e0 <TM_GPS_INT_Return>:

TM_GPS_Result_t TM_GPS_INT_Return(TM_GPS_t* GPS_Data) {
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	if (TM_GPS_INT_FlagsOk(GPS_Data)) {
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f939 	bl	8003660 <TM_GPS_INT_FlagsOk>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 808d 	beq.w	8003510 <TM_GPS_INT_Return+0x130>
		TM_GPS_FirstTime = 0;							/* Clear first time */
 80033f6:	4b50      	ldr	r3, [pc, #320]	; (8003538 <TM_GPS_INT_Return+0x158>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
		
		/* Set data */
#ifndef GPS_DISABLE_GPGGA
		GPS_Data->Latitude = TM_GPS_INT_Data.Latitude;
 80033fc:	4b4f      	ldr	r3, [pc, #316]	; (800353c <TM_GPS_INT_Return+0x15c>)
 80033fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	e9c2 3400 	strd	r3, r4, [r2]
		GPS_Data->Longitude = TM_GPS_INT_Data.Longitude;
 8003408:	4b4c      	ldr	r3, [pc, #304]	; (800353c <TM_GPS_INT_Return+0x15c>)
 800340a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	e9c2 3402 	strd	r3, r4, [r2, #8]
		GPS_Data->Satellites = TM_GPS_INT_Data.Satellites;
 8003414:	4b49      	ldr	r3, [pc, #292]	; (800353c <TM_GPS_INT_Return+0x15c>)
 8003416:	7d1a      	ldrb	r2, [r3, #20]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	751a      	strb	r2, [r3, #20]
		GPS_Data->Fix = TM_GPS_INT_Data.Fix;
 800341c:	4b47      	ldr	r3, [pc, #284]	; (800353c <TM_GPS_INT_Return+0x15c>)
 800341e:	7d5a      	ldrb	r2, [r3, #21]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	755a      	strb	r2, [r3, #21]
		GPS_Data->Altitude = TM_GPS_INT_Data.Altitude;
 8003424:	4b45      	ldr	r3, [pc, #276]	; (800353c <TM_GPS_INT_Return+0x15c>)
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	611a      	str	r2, [r3, #16]
		GPS_Data->Time = TM_GPS_INT_Data.Time;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a43      	ldr	r2, [pc, #268]	; (800353c <TM_GPS_INT_Return+0x15c>)
 8003430:	3316      	adds	r3, #22
 8003432:	3216      	adds	r2, #22
 8003434:	6811      	ldr	r1, [r2, #0]
 8003436:	6019      	str	r1, [r3, #0]
 8003438:	8892      	ldrh	r2, [r2, #4]
 800343a:	809a      	strh	r2, [r3, #4]
#endif
#ifndef GPS_DISABLE_GPRMC
		GPS_Data->Speed = TM_GPS_INT_Data.Speed;
 800343c:	4b3f      	ldr	r3, [pc, #252]	; (800353c <TM_GPS_INT_Return+0x15c>)
 800343e:	6a1a      	ldr	r2, [r3, #32]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	621a      	str	r2, [r3, #32]
		GPS_Data->Date = TM_GPS_INT_Data.Date;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3d      	ldr	r2, [pc, #244]	; (800353c <TM_GPS_INT_Return+0x15c>)
 8003448:	331c      	adds	r3, #28
 800344a:	321c      	adds	r2, #28
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	4611      	mov	r1, r2
 8003450:	8019      	strh	r1, [r3, #0]
 8003452:	3302      	adds	r3, #2
 8003454:	0c12      	lsrs	r2, r2, #16
 8003456:	701a      	strb	r2, [r3, #0]
		GPS_Data->Validity = TM_GPS_INT_Data.Validity;
 8003458:	4b38      	ldr	r3, [pc, #224]	; (800353c <TM_GPS_INT_Return+0x15c>)
 800345a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		GPS_Data->Direction = TM_GPS_INT_Data.Direction;
 8003464:	4b35      	ldr	r3, [pc, #212]	; (800353c <TM_GPS_INT_Return+0x15c>)
 8003466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#ifndef GPS_DISABLE_GPGSA
		GPS_Data->HDOP = TM_GPS_INT_Data.HDOP;
 800346c:	4b33      	ldr	r3, [pc, #204]	; (800353c <TM_GPS_INT_Return+0x15c>)
 800346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c
		GPS_Data->VDOP = TM_GPS_INT_Data.VDOP;
 8003474:	4b31      	ldr	r3, [pc, #196]	; (800353c <TM_GPS_INT_Return+0x15c>)
 8003476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	635a      	str	r2, [r3, #52]	; 0x34
		GPS_Data->PDOP = TM_GPS_INT_Data.PDOP;
 800347c:	4b2f      	ldr	r3, [pc, #188]	; (800353c <TM_GPS_INT_Return+0x15c>)
 800347e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
		GPS_Data->FixMode = TM_GPS_INT_Data.FixMode;
 8003484:	4b2d      	ldr	r3, [pc, #180]	; (800353c <TM_GPS_INT_Return+0x15c>)
 8003486:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		for (i = 0; i < 12; i++) {
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	e00d      	b.n	80034b2 <TM_GPS_INT_Return+0xd2>
			GPS_Data->SatelliteIDs[i] = TM_GPS_INT_Data.SatelliteIDs[i];
 8003496:	7bfa      	ldrb	r2, [r7, #15]
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	4928      	ldr	r1, [pc, #160]	; (800353c <TM_GPS_INT_Return+0x15c>)
 800349c:	440a      	add	r2, r1
 800349e:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	460a      	mov	r2, r1
 80034a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		for (i = 0; i < 12; i++) {
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	3301      	adds	r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	2b0b      	cmp	r3, #11
 80034b6:	d9ee      	bls.n	8003496 <TM_GPS_INT_Return+0xb6>
		}
#endif
#ifndef GPS_DISABLE_GPGSV
		GPS_Data->SatellitesInView = TM_GPS_INT_Data.SatellitesInView;
 80034b8:	4b20      	ldr	r3, [pc, #128]	; (800353c <TM_GPS_INT_Return+0x15c>)
 80034ba:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]
 80034c8:	e019      	b.n	80034fe <TM_GPS_INT_Return+0x11e>
			GPS_Data->SatDesc[i] = TM_GPS_INT_Data.SatDesc[i];
 80034ca:	7bfa      	ldrb	r2, [r7, #15]
 80034cc:	7bf9      	ldrb	r1, [r7, #15]
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	440b      	add	r3, r1
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4403      	add	r3, r0
 80034da:	f103 0046 	add.w	r0, r3, #70	; 0x46
 80034de:	4917      	ldr	r1, [pc, #92]	; (800353c <TM_GPS_INT_Return+0x15c>)
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	440b      	add	r3, r1
 80034ea:	f103 0246 	add.w	r2, r3, #70	; 0x46
 80034ee:	4603      	mov	r3, r0
 80034f0:	6811      	ldr	r1, [r2, #0]
 80034f2:	6019      	str	r1, [r3, #0]
 80034f4:	8892      	ldrh	r2, [r2, #4]
 80034f6:	809a      	strh	r2, [r3, #4]
		for (i = 0; i < GPS_MAX_SATS_IN_VIEW; i++) {
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	3301      	adds	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	2b17      	cmp	r3, #23
 8003502:	d9e2      	bls.n	80034ca <TM_GPS_INT_Return+0xea>
		}
#endif
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_NewData);	/* Return new data */
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 800350c:	2300      	movs	r3, #0
 800350e:	e00e      	b.n	800352e <TM_GPS_INT_Return+0x14e>
	}
	
	if (TM_GPS_FirstTime) {
 8003510:	4b09      	ldr	r3, [pc, #36]	; (8003538 <TM_GPS_INT_Return+0x158>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <TM_GPS_INT_Return+0x144>
		TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_FirstDataWaiting);	/* We are first time */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 8003520:	2302      	movs	r3, #2
 8003522:	e004      	b.n	800352e <TM_GPS_INT_Return+0x14e>
	}
	TM_GPS_INT_ReturnWithStatus(GPS_Data, TM_GPS_Result_OldData);	/* Return old data */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
 800352c:	2301      	movs	r3, #1
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	bd90      	pop	{r4, r7, pc}
 8003536:	bf00      	nop
 8003538:	24000358 	.word	0x24000358
 800353c:	24000230 	.word	0x24000230

08003540 <TM_GPS_INT_StringStartsWith>:

uint8_t TM_GPS_INT_StringStartsWith(char* string, const char* str) {
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
	while (*str) {
 800354a:	e00b      	b.n	8003564 <TM_GPS_INT_StringStartsWith+0x24>
		if (*str++ != *string++) {
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	603a      	str	r2, [r7, #0]
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	1c59      	adds	r1, r3, #1
 8003558:	6079      	str	r1, [r7, #4]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <TM_GPS_INT_StringStartsWith+0x24>
			return 0;
 8003560:	2300      	movs	r3, #0
 8003562:	e004      	b.n	800356e <TM_GPS_INT_StringStartsWith+0x2e>
	while (*str) {
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ef      	bne.n	800354c <TM_GPS_INT_StringStartsWith+0xc>
		}
	}
	return 1;
 800356c:	2301      	movs	r3, #1
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <TM_GPS_INT_Atoi>:

uint8_t TM_GPS_INT_Atoi(char* str, uint32_t* val) {
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
	uint8_t count = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	73fb      	strb	r3, [r7, #15]
	*val = 0;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
	while (GPS_IS_DIGIT(*str)) {
 800358e:	e012      	b.n	80035b6 <TM_GPS_INT_Atoi+0x3c>
		*val = *val * 10 + GPS_C2N(*str++);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4619      	mov	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	440b      	add	r3, r1
 80035a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	601a      	str	r2, [r3, #0]
		count++;
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	3301      	adds	r3, #1
 80035b4:	73fb      	strb	r3, [r7, #15]
	while (GPS_IS_DIGIT(*str)) {
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b2f      	cmp	r3, #47	; 0x2f
 80035bc:	d903      	bls.n	80035c6 <TM_GPS_INT_Atoi+0x4c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b39      	cmp	r3, #57	; 0x39
 80035c4:	d9e4      	bls.n	8003590 <TM_GPS_INT_Atoi+0x16>
	}
	return count;
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <TM_GPS_INT_Pow>:

uint32_t TM_GPS_INT_Pow(uint8_t x, uint8_t y) {
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	460a      	mov	r2, r1
 80035de:	71fb      	strb	r3, [r7, #7]
 80035e0:	4613      	mov	r3, r2
 80035e2:	71bb      	strb	r3, [r7, #6]
	uint32_t ret = 1;
 80035e4:	2301      	movs	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
	while (y--) {
 80035e8:	e004      	b.n	80035f4 <TM_GPS_INT_Pow+0x20>
		ret *= x;
 80035ea:	79fa      	ldrb	r2, [r7, #7]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	60fb      	str	r3, [r7, #12]
	while (y--) {
 80035f4:	79bb      	ldrb	r3, [r7, #6]
 80035f6:	1e5a      	subs	r2, r3, #1
 80035f8:	71ba      	strb	r2, [r7, #6]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f5      	bne.n	80035ea <TM_GPS_INT_Pow+0x16>
	}
	return ret;
 80035fe:	68fb      	ldr	r3, [r7, #12]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <TM_GPS_INT_Hex2Dec>:

uint8_t TM_GPS_INT_Hex2Dec(char c) {
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') {
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	2b2f      	cmp	r3, #47	; 0x2f
 800361a:	d906      	bls.n	800362a <TM_GPS_INT_Hex2Dec+0x1e>
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	2b39      	cmp	r3, #57	; 0x39
 8003620:	d803      	bhi.n	800362a <TM_GPS_INT_Hex2Dec+0x1e>
		return c - '0';									/* 0 - 9 */
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	3b30      	subs	r3, #48	; 0x30
 8003626:	b2db      	uxtb	r3, r3
 8003628:	e014      	b.n	8003654 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'A' && c <= 'F') {
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d906      	bls.n	800363e <TM_GPS_INT_Hex2Dec+0x32>
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	2b46      	cmp	r3, #70	; 0x46
 8003634:	d803      	bhi.n	800363e <TM_GPS_INT_Hex2Dec+0x32>
		return c - 'A' + 10; 							/* 10 - 15 */
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	3b37      	subs	r3, #55	; 0x37
 800363a:	b2db      	uxtb	r3, r3
 800363c:	e00a      	b.n	8003654 <TM_GPS_INT_Hex2Dec+0x48>
	} else if (c >= 'a' && c <= 'f') {
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	2b60      	cmp	r3, #96	; 0x60
 8003642:	d906      	bls.n	8003652 <TM_GPS_INT_Hex2Dec+0x46>
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	2b66      	cmp	r3, #102	; 0x66
 8003648:	d803      	bhi.n	8003652 <TM_GPS_INT_Hex2Dec+0x46>
		return c - 'a' + 10; 							/* 10 - 15 */
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	3b57      	subs	r3, #87	; 0x57
 800364e:	b2db      	uxtb	r3, r3
 8003650:	e000      	b.n	8003654 <TM_GPS_INT_Hex2Dec+0x48>
	}
	return 0;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <TM_GPS_INT_FlagsOk>:

uint8_t TM_GPS_INT_FlagsOk(TM_GPS_t* GPS_Data) {
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
	if (GPS_Flags == GPS_Flags_OK) {					/* Check main flags */
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <TM_GPS_INT_FlagsOk+0x54>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <TM_GPS_INT_FlagsOk+0x58>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d118      	bne.n	80036a6 <TM_GPS_INT_FlagsOk+0x46>
		uint8_t i;
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003674:	2300      	movs	r3, #0
 8003676:	73fb      	strb	r3, [r7, #15]
 8003678:	e00d      	b.n	8003696 <TM_GPS_INT_FlagsOk+0x36>
			if (GPS_Data->CustomStatements[i]->Updated == 0) {	/* If not flag set */
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	333e      	adds	r3, #62	; 0x3e
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	7ddb      	ldrb	r3, [r3, #23]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <TM_GPS_INT_FlagsOk+0x30>
				return 0;								/* Return, flags not OK */
 800368c:	2300      	movs	r3, #0
 800368e:	e00b      	b.n	80036a8 <TM_GPS_INT_FlagsOk+0x48>
		for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Check custom terms */
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	3301      	adds	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d3eb      	bcc.n	800367a <TM_GPS_INT_FlagsOk+0x1a>
			}
		}
		return 1;										/* Flags valid */
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <TM_GPS_INT_FlagsOk+0x48>
	}
	return 0;											/* Not valid */
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	24000224 	.word	0x24000224
 80036b8:	24000228 	.word	0x24000228

080036bc <TM_GPS_INT_ClearFlags>:

void TM_GPS_INT_ClearFlags(TM_GPS_t* GPS_Data) {
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	GPS_Flags = 0;						/* Reset main flags */
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <TM_GPS_INT_ClearFlags+0x44>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 80036ca:	2300      	movs	r3, #0
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	e00a      	b.n	80036e6 <TM_GPS_INT_ClearFlags+0x2a>
		GPS_Data->CustomStatements[i]->Updated = 0;		/* If not flag set */
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	333e      	adds	r3, #62	; 0x3e
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	75da      	strb	r2, [r3, #23]
	for (i = 0; i < GPS_Data->CustomStatementsCount; i++) {	/* Clear custom terms */
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	3301      	adds	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d3ee      	bcc.n	80036d0 <TM_GPS_INT_ClearFlags+0x14>
	}
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	24000224 	.word	0x24000224

08003704 <TM_GPS_INT_CheckEmpty>:

void TM_GPS_INT_CheckEmpty(TM_GPS_t* GPS_Data) {
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	if (GPS_Term_Pos == 1) {
 800370c:	4baf      	ldr	r3, [pc, #700]	; (80039cc <TM_GPS_INT_CheckEmpty+0x2c8>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	f040 8151 	bne.w	80039b8 <TM_GPS_INT_CheckEmpty+0x2b4>
		switch (GPS_CONCAT(TM_GPS_Statement, GPS_Term_Number)) {
 8003716:	4bae      	ldr	r3, [pc, #696]	; (80039d0 <TM_GPS_INT_CheckEmpty+0x2cc>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	015b      	lsls	r3, r3, #5
 800371c:	4aad      	ldr	r2, [pc, #692]	; (80039d4 <TM_GPS_INT_CheckEmpty+0x2d0>)
 800371e:	7812      	ldrb	r2, [r2, #0]
 8003720:	4313      	orrs	r3, r2
 8003722:	3b01      	subs	r3, #1
 8003724:	2b62      	cmp	r3, #98	; 0x62
 8003726:	f200 8149 	bhi.w	80039bc <TM_GPS_INT_CheckEmpty+0x2b8>
 800372a:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <TM_GPS_INT_CheckEmpty+0x2c>)
 800372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003730:	0800391f 	.word	0x0800391f
 8003734:	080038bd 	.word	0x080038bd
 8003738:	080038cb 	.word	0x080038cb
 800373c:	080038d9 	.word	0x080038d9
 8003740:	080038e7 	.word	0x080038e7
 8003744:	08003903 	.word	0x08003903
 8003748:	080038f5 	.word	0x080038f5
 800374c:	080039bd 	.word	0x080039bd
 8003750:	08003911 	.word	0x08003911
 8003754:	080039bd 	.word	0x080039bd
 8003758:	080039bd 	.word	0x080039bd
 800375c:	080039bd 	.word	0x080039bd
 8003760:	080039bd 	.word	0x080039bd
 8003764:	080039bd 	.word	0x080039bd
 8003768:	080039bd 	.word	0x080039bd
 800376c:	080039bd 	.word	0x080039bd
 8003770:	080039bd 	.word	0x080039bd
 8003774:	080039bd 	.word	0x080039bd
 8003778:	080039bd 	.word	0x080039bd
 800377c:	080039bd 	.word	0x080039bd
 8003780:	080039bd 	.word	0x080039bd
 8003784:	080039bd 	.word	0x080039bd
 8003788:	080039bd 	.word	0x080039bd
 800378c:	080039bd 	.word	0x080039bd
 8003790:	080039bd 	.word	0x080039bd
 8003794:	080039bd 	.word	0x080039bd
 8003798:	080039bd 	.word	0x080039bd
 800379c:	080039bd 	.word	0x080039bd
 80037a0:	080039bd 	.word	0x080039bd
 80037a4:	080039bd 	.word	0x080039bd
 80037a8:	080039bd 	.word	0x080039bd
 80037ac:	080039bd 	.word	0x080039bd
 80037b0:	080039bd 	.word	0x080039bd
 80037b4:	08003949 	.word	0x08003949
 80037b8:	080039bd 	.word	0x080039bd
 80037bc:	080039bd 	.word	0x080039bd
 80037c0:	080039bd 	.word	0x080039bd
 80037c4:	080039bd 	.word	0x080039bd
 80037c8:	0800392d 	.word	0x0800392d
 80037cc:	08003957 	.word	0x08003957
 80037d0:	0800393b 	.word	0x0800393b
 80037d4:	080039bd 	.word	0x080039bd
 80037d8:	080039bd 	.word	0x080039bd
 80037dc:	080039bd 	.word	0x080039bd
 80037e0:	080039bd 	.word	0x080039bd
 80037e4:	080039bd 	.word	0x080039bd
 80037e8:	080039bd 	.word	0x080039bd
 80037ec:	080039bd 	.word	0x080039bd
 80037f0:	080039bd 	.word	0x080039bd
 80037f4:	080039bd 	.word	0x080039bd
 80037f8:	080039bd 	.word	0x080039bd
 80037fc:	080039bd 	.word	0x080039bd
 8003800:	080039bd 	.word	0x080039bd
 8003804:	080039bd 	.word	0x080039bd
 8003808:	080039bd 	.word	0x080039bd
 800380c:	080039bd 	.word	0x080039bd
 8003810:	080039bd 	.word	0x080039bd
 8003814:	080039bd 	.word	0x080039bd
 8003818:	080039bd 	.word	0x080039bd
 800381c:	080039bd 	.word	0x080039bd
 8003820:	080039bd 	.word	0x080039bd
 8003824:	080039bd 	.word	0x080039bd
 8003828:	080039bd 	.word	0x080039bd
 800382c:	080039bd 	.word	0x080039bd
 8003830:	080039bd 	.word	0x080039bd
 8003834:	0800398f 	.word	0x0800398f
 8003838:	0800399d 	.word	0x0800399d
 800383c:	0800399d 	.word	0x0800399d
 8003840:	0800399d 	.word	0x0800399d
 8003844:	0800399d 	.word	0x0800399d
 8003848:	0800399d 	.word	0x0800399d
 800384c:	0800399d 	.word	0x0800399d
 8003850:	0800399d 	.word	0x0800399d
 8003854:	0800399d 	.word	0x0800399d
 8003858:	0800399d 	.word	0x0800399d
 800385c:	0800399d 	.word	0x0800399d
 8003860:	0800399d 	.word	0x0800399d
 8003864:	0800399d 	.word	0x0800399d
 8003868:	08003973 	.word	0x08003973
 800386c:	08003965 	.word	0x08003965
 8003870:	08003981 	.word	0x08003981
 8003874:	080039bd 	.word	0x080039bd
 8003878:	080039bd 	.word	0x080039bd
 800387c:	080039bd 	.word	0x080039bd
 8003880:	080039bd 	.word	0x080039bd
 8003884:	080039bd 	.word	0x080039bd
 8003888:	080039bd 	.word	0x080039bd
 800388c:	080039bd 	.word	0x080039bd
 8003890:	080039bd 	.word	0x080039bd
 8003894:	080039bd 	.word	0x080039bd
 8003898:	080039bd 	.word	0x080039bd
 800389c:	080039bd 	.word	0x080039bd
 80038a0:	080039bd 	.word	0x080039bd
 80038a4:	080039bd 	.word	0x080039bd
 80038a8:	080039bd 	.word	0x080039bd
 80038ac:	080039bd 	.word	0x080039bd
 80038b0:	080039bd 	.word	0x080039bd
 80038b4:	080039bd 	.word	0x080039bd
 80038b8:	080039ab 	.word	0x080039ab
#ifndef GPS_DISABLE_GPGGA
			case GPS_POS_LATITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_LATITUDE); break;
 80038bc:	4b46      	ldr	r3, [pc, #280]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	4a44      	ldr	r2, [pc, #272]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	e079      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_NS: 		TM_GPS_INT_SetFlag(GPS_FLAG_NS); break;
 80038ca:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d2:	4a41      	ldr	r2, [pc, #260]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e072      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_LONGITUDE: TM_GPS_INT_SetFlag(GPS_FLAG_LONGITUDE); break;
 80038d8:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f043 0302 	orr.w	r3, r3, #2
 80038e0:	4a3d      	ldr	r2, [pc, #244]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	e06b      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_EW: 		TM_GPS_INT_SetFlag(GPS_FLAG_EW); break;
 80038e6:	4b3c      	ldr	r3, [pc, #240]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f043 0320 	orr.w	r3, r3, #32
 80038ee:	4a3a      	ldr	r2, [pc, #232]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e064      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SATS:		TM_GPS_INT_SetFlag(GPS_FLAG_SATS); break;
 80038f4:	4b38      	ldr	r3, [pc, #224]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f043 0304 	orr.w	r3, r3, #4
 80038fc:	4a36      	ldr	r2, [pc, #216]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	e05d      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIX: 		TM_GPS_INT_SetFlag(GPS_FLAG_FIX); break;
 8003902:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f043 0308 	orr.w	r3, r3, #8
 800390a:	4a33      	ldr	r2, [pc, #204]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	e056      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_ALTITUDE: 	TM_GPS_INT_SetFlag(GPS_FLAG_ALTITUDE); break;
 8003910:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f043 0310 	orr.w	r3, r3, #16
 8003918:	4a2f      	ldr	r2, [pc, #188]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	e04f      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_TIME: 		TM_GPS_INT_SetFlag(GPS_FLAG_TIME); break;
 800391e:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003926:	4a2c      	ldr	r2, [pc, #176]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e048      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPRMC
			case GPS_POS_SPEED: 	TM_GPS_INT_SetFlag(GPS_FLAG_SPEED); break;
 800392c:	4b2a      	ldr	r3, [pc, #168]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003934:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	e041      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DATE: 		TM_GPS_INT_SetFlag(GPS_FLAG_DATE); break;
 800393a:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003942:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e03a      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VALIDITY: 	TM_GPS_INT_SetFlag(GPS_FLAG_VALIDITY); break;
 8003948:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003950:	4a21      	ldr	r2, [pc, #132]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	e033      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_DIRECTION: TM_GPS_INT_SetFlag(GPS_FLAG_DIRECTION); break;
 8003956:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800395e:	4a1e      	ldr	r2, [pc, #120]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e02c      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSA
			case GPS_POS_HDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_HDOP); break;
 8003964:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800396c:	4a1a      	ldr	r2, [pc, #104]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	e025      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_PDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_PDOP); break;
 8003972:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800397a:	4a17      	ldr	r2, [pc, #92]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e01e      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_VDOP: 		TM_GPS_INT_SetFlag(GPS_FLAG_VDOP); break;
 8003980:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003988:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	e017      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_FIXMODE: 	TM_GPS_INT_SetFlag(GPS_FLAG_FIXMODE); break;
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003996:	4a10      	ldr	r2, [pc, #64]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	e010      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
			case GPS_POS_SAT8:
			case GPS_POS_SAT9:
			case GPS_POS_SAT10:
			case GPS_POS_SAT11:
			case GPS_POS_SAT12:
				TM_GPS_INT_SetFlag(GPS_FLAG_SATS1_12);
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a4:	4a0c      	ldr	r2, [pc, #48]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039a6:	6013      	str	r3, [r2, #0]
				break;
 80039a8:	e009      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
#ifndef GPS_DISABLE_GPGSV
			case GPS_POS_SATSINVIEW: TM_GPS_INT_SetFlag(GPS_FLAG_SATSINVIEW); break;
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b2:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <TM_GPS_INT_CheckEmpty+0x2d4>)
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e002      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
#endif
			default: 
				break;
		}
	}
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <TM_GPS_INT_CheckEmpty+0x2ba>
				break;
 80039bc:	bf00      	nop
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	24000220 	.word	0x24000220
 80039d0:	24000000 	.word	0x24000000
 80039d4:	2400021f 	.word	0x2400021f
 80039d8:	24000224 	.word	0x24000224

080039dc <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80039e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80039ea:	eef0 7ae7 	vabs.f32	s15, s15
 80039ee:	eeb0 0a67 	vmov.f32	s0, s15
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a0a:	fefa 7a67 	vrintp.f32	s15, s15
 8003a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a2a:	fefb 7a67 	vrintm.f32	s15, s15
 8003a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <_Z13rt_roundf_snff>:
//
#include "Second_att_control_codeblock_fly.h"
#include "Second_att_control_codeblock_fly_private.h"

real32_T rt_roundf_snf(real32_T u)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	ed87 0a01 	vstr	s0, [r7, #4]
  real32_T y;
  if (std::abs(u) < 8.388608E+6F) {
 8003a46:	ed97 0a01 	vldr	s0, [r7, #4]
 8003a4a:	f7ff ffc7 	bl	80039dc <_ZSt3absf>
 8003a4e:	eeb0 7a40 	vmov.f32	s14, s0
 8003a52:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003ae8 <_Z13rt_roundf_snff+0xac>
 8003a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5e:	bf4c      	ite	mi
 8003a60:	2301      	movmi	r3, #1
 8003a62:	2300      	movpl	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d034      	beq.n	8003ad4 <_Z13rt_roundf_snff+0x98>
    if (u >= 0.5F) {
 8003a6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7a:	db0c      	blt.n	8003a96 <_Z13rt_roundf_snff+0x5a>
      y = std::floor(u + 0.5F);
 8003a7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003a84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a88:	eeb0 0a67 	vmov.f32	s0, s15
 8003a8c:	f7ff ffc6 	bl	8003a1c <_ZSt5floorf>
 8003a90:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a94:	e020      	b.n	8003ad8 <_Z13rt_roundf_snff+0x9c>
    } else if (u > -0.5F) {
 8003a96:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a9a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa6:	dd08      	ble.n	8003aba <_Z13rt_roundf_snff+0x7e>
      y = u * 0.0F;
 8003aa8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aac:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003aec <_Z13rt_roundf_snff+0xb0>
 8003ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ab4:	edc7 7a03 	vstr	s15, [r7, #12]
 8003ab8:	e00e      	b.n	8003ad8 <_Z13rt_roundf_snff+0x9c>
    } else {
      y = std::ceil(u - 0.5F);
 8003aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8003abe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ac2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8003aca:	f7ff ff97 	bl	80039fc <_ZSt4ceilf>
 8003ace:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ad2:	e001      	b.n	8003ad8 <_Z13rt_roundf_snff+0x9c>
    }
  } else {
    y = u;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	60fb      	str	r3, [r7, #12]
  }

  return y;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	ee07 3a90 	vmov	s15, r3
}
 8003ade:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	4b000000 	.word	0x4b000000
 8003aec:	00000000 	.word	0x00000000

08003af0 <_ZN23px4_AlgorithmModelClass4stepEv>:

// Model step function
void px4_AlgorithmModelClass::step()
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  // DataTypeConversion: '<S3>/Data Type Conversion' incorporates:
  //   Inport: '<Root>/set_roll'

  Second_att_control_codeblock__B.DataTypeConversion =
    Second_att_control_codeblock__U.set_roll;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
  Second_att_control_codeblock__B.DataTypeConversion =
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	edc3 7a00 	vstr	s15, [r3]

  // Fcn: '<S3>/Fcn2'
  Second_att_control_codeblock__B.Fcn2 =
    (Second_att_control_codeblock__B.DataTypeConversion - 1500.0F) / 500.0F;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	edd3 7a00 	vldr	s15, [r3]
 8003b12:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8003da8 <_ZN23px4_AlgorithmModelClass4stepEv+0x2b8>
 8003b16:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003b1a:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8003dac <_ZN23px4_AlgorithmModelClass4stepEv+0x2bc>
 8003b1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock__B.Fcn2 =
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	edc3 7a01 	vstr	s15, [r3, #4]

  // Saturate: '<S3>/Saturation9'
  u0 = Second_att_control_codeblock__B.Fcn2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	613b      	str	r3, [r7, #16]
  u1 = Second_att_control_codeblock__P.Saturation9_LowerSat;
 8003b2e:	4ba0      	ldr	r3, [pc, #640]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	60fb      	str	r3, [r7, #12]
  u2 = Second_att_control_codeblock__P.Saturation9_UpperSat;
 8003b34:	4b9e      	ldr	r3, [pc, #632]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	60bb      	str	r3, [r7, #8]
  if (u0 > u2) {
 8003b3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4a:	dd03      	ble.n	8003b54 <_ZN23px4_AlgorithmModelClass4stepEv+0x64>
    Second_att_control_codeblock__B.Saturation9 = u2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	609a      	str	r2, [r3, #8]
 8003b52:	e00f      	b.n	8003b74 <_ZN23px4_AlgorithmModelClass4stepEv+0x84>
  } else if (u0 < u1) {
 8003b54:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b58:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b64:	d503      	bpl.n	8003b6e <_ZN23px4_AlgorithmModelClass4stepEv+0x7e>
    Second_att_control_codeblock__B.Saturation9 = u1;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	609a      	str	r2, [r3, #8]
 8003b6c:	e002      	b.n	8003b74 <_ZN23px4_AlgorithmModelClass4stepEv+0x84>
  } else {
    Second_att_control_codeblock__B.Saturation9 = u0;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	609a      	str	r2, [r3, #8]

  // DataTypeConversion: '<S3>/Data Type Conversion1' incorporates:
  //   Inport: '<Root>/set_pitch'

  Second_att_control_codeblock__B.DataTypeConversion1 =
    Second_att_control_codeblock__U.set_pitch;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
  Second_att_control_codeblock__B.DataTypeConversion1 =
 8003b7a:	ee07 3a90 	vmov	s15, r3
 8003b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	edc3 7a03 	vstr	s15, [r3, #12]

  // Fcn: '<S3>/Fcn5'
  Second_att_control_codeblock__B.Fcn5 =
    (Second_att_control_codeblock__B.DataTypeConversion1 - 1500.0F) / 500.0F;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b8e:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8003da8 <_ZN23px4_AlgorithmModelClass4stepEv+0x2b8>
 8003b92:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003b96:	eddf 6a85 	vldr	s13, [pc, #532]	; 8003dac <_ZN23px4_AlgorithmModelClass4stepEv+0x2bc>
 8003b9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock__B.Fcn5 =
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	edc3 7a04 	vstr	s15, [r3, #16]

  // Saturate: '<S3>/Saturation8'
  u0 = Second_att_control_codeblock__B.Fcn5;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	613b      	str	r3, [r7, #16]
  u1 = Second_att_control_codeblock__P.Saturation8_LowerSat;
 8003baa:	4b81      	ldr	r3, [pc, #516]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	60fb      	str	r3, [r7, #12]
  u2 = Second_att_control_codeblock__P.Saturation8_UpperSat;
 8003bb0:	4b7f      	ldr	r3, [pc, #508]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	60bb      	str	r3, [r7, #8]
  if (u0 > u2) {
 8003bb6:	ed97 7a04 	vldr	s14, [r7, #16]
 8003bba:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc6:	dd03      	ble.n	8003bd0 <_ZN23px4_AlgorithmModelClass4stepEv+0xe0>
    Second_att_control_codeblock__B.Saturation8 = u2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	615a      	str	r2, [r3, #20]
 8003bce:	e00f      	b.n	8003bf0 <_ZN23px4_AlgorithmModelClass4stepEv+0x100>
  } else if (u0 < u1) {
 8003bd0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003bd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be0:	d503      	bpl.n	8003bea <_ZN23px4_AlgorithmModelClass4stepEv+0xfa>
    Second_att_control_codeblock__B.Saturation8 = u1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	615a      	str	r2, [r3, #20]
 8003be8:	e002      	b.n	8003bf0 <_ZN23px4_AlgorithmModelClass4stepEv+0x100>
  } else {
    Second_att_control_codeblock__B.Saturation8 = u0;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	615a      	str	r2, [r3, #20]

  // End of Saturate: '<S3>/Saturation8'

  // Gain: '<S3>/Gain2'
  Second_att_control_codeblock__B.Gain2[0] =
    Second_att_control_codeblock__P.Gain2_Gain[0] *
 8003bf0:	4b6f      	ldr	r3, [pc, #444]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003bf2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    Second_att_control_codeblock__B.Saturation9;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	edd3 7a02 	vldr	s15, [r3, #8]
    Second_att_control_codeblock__P.Gain2_Gain[0] *
 8003bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain2[0] =
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	edc3 7a06 	vstr	s15, [r3, #24]
  Second_att_control_codeblock__B.Gain2[1] =
    Second_att_control_codeblock__P.Gain2_Gain[1] *
 8003c06:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003c08:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
    Second_att_control_codeblock__B.Saturation8;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	edd3 7a05 	vldr	s15, [r3, #20]
    Second_att_control_codeblock__P.Gain2_Gain[1] *
 8003c12:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain2[1] =
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	edc3 7a07 	vstr	s15, [r3, #28]

  // Gain: '<S3>/Gain'
  Second_att_control_codeblock__B.Gain[0] =
    Second_att_control_codeblock__P.Gain_Gain *
 8003c1c:	4b64      	ldr	r3, [pc, #400]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003c1e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    Second_att_control_codeblock__B.Gain2[0];
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	edd3 7a06 	vldr	s15, [r3, #24]
    Second_att_control_codeblock__P.Gain_Gain *
 8003c28:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain[0] =
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	edc3 7a08 	vstr	s15, [r3, #32]
  Second_att_control_codeblock__B.Gain[1] =
    Second_att_control_codeblock__P.Gain_Gain *
 8003c32:	4b5f      	ldr	r3, [pc, #380]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003c34:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    Second_att_control_codeblock__B.Gain2[1];
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	edd3 7a07 	vldr	s15, [r3, #28]
    Second_att_control_codeblock__P.Gain_Gain *
 8003c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain[1] =
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  // Sum: '<S5>/Sum' incorporates:
  //   Inport: '<Root>/Roll'

  Second_att_control_codeblock__B.pitchrollerror =
    Second_att_control_codeblock__B.Gain[0] -
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	ed93 7a08 	vldr	s14, [r3, #32]
    Second_att_control_codeblock__U.Roll;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
    Second_att_control_codeblock__B.Gain[0] -
 8003c54:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror =
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  // Gain: '<S5>/P_pr'
  Second_att_control_codeblock__B.P_pr =
    Second_att_control_codeblock__P.P_pr_Gain *
 8003c5e:	4b54      	ldr	r3, [pc, #336]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003c60:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    Second_att_control_codeblock__B.pitchrollerror;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    Second_att_control_codeblock__P.P_pr_Gain *
 8003c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr =
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  Second_att_control_codeblock__B.DiscreteTimeIntegrator =
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30

  // Gain: '<S5>/I_pr'
  Second_att_control_codeblock__B.I_pr =
    Second_att_control_codeblock__P.I_pr_Gain *
 8003c7e:	4b4c      	ldr	r3, [pc, #304]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003c80:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
    Second_att_control_codeblock__B.DiscreteTimeIntegrator;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
    Second_att_control_codeblock__P.I_pr_Gain *
 8003c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.I_pr =
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

  // Sum: '<S5>/Sum16'
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
    + Second_att_control_codeblock__B.I_pr;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_m = Second_att_control_codeblock__B.P_pr
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  // Sum: '<S6>/Sum' incorporates:
  //   Inport: '<Root>/p'

  Second_att_control_codeblock__B.pitchrollerror_b =
    Second_att_control_codeblock__B.P_pr_m - Second_att_control_codeblock__U.p;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8003cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_b =
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

  // Gain: '<S6>/P_pr'
  Second_att_control_codeblock__B.P_pr_b =
    Second_att_control_codeblock__P.P_pr_Gain_a *
 8003cc0:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003cc2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
    Second_att_control_codeblock__B.pitchrollerror_b;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
    Second_att_control_codeblock__P.P_pr_Gain_a *
 8003ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_b =
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

  // DiscreteIntegrator: '<S6>/Discrete-Time Integrator'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  Second_att_control_codeblock__B.DiscreteTimeIntegrator_h =
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	645a      	str	r2, [r3, #68]	; 0x44

  // Gain: '<S6>/I_pr'
  Second_att_control_codeblock__B.I_pr_d =
    Second_att_control_codeblock__P.I_pr_Gain_d *
 8003ce0:	4b33      	ldr	r3, [pc, #204]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003ce2:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    Second_att_control_codeblock__P.I_pr_Gain_d *
 8003cec:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.I_pr_d =
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
  //
  //  About '<S8>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp =
    Second_att_control_codeblock__B.pitchrollerror_b *
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
    Second_att_control_codeblock__P.TSamp_WtEt;
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003cfe:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
    Second_att_control_codeblock__B.pitchrollerror_b *
 8003d02:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp =
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1 =
    Second_att_control_codeblock_DW.UD_DSTATE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
  Second_att_control_codeblock__B.Uk1 =
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	651a      	str	r2, [r3, #80]	; 0x50
  //
  //  Block description for '<S8>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
    Second_att_control_codeblock__B.Uk1;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
  Second_att_control_codeblock__B.Diff = Second_att_control_codeblock__B.TSamp -
 8003d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

  // Gain: '<S6>/D_pr'
  Second_att_control_codeblock__B.D_pr =
    Second_att_control_codeblock__P.D_pr_Gain *
 8003d2c:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003d2e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
    Second_att_control_codeblock__B.Diff;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
    Second_att_control_codeblock__P.D_pr_Gain *
 8003d38:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.D_pr =
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  // Sum: '<S6>/Sum16'
  Second_att_control_codeblock__B.P_pr_d =
    (Second_att_control_codeblock__B.P_pr_b +
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
     Second_att_control_codeblock__B.I_pr_d) +
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    (Second_att_control_codeblock__B.P_pr_b +
 8003d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
     Second_att_control_codeblock__B.I_pr_d) +
 8003d58:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_d =
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

  // Saturate: '<S6>/Saturation'
  u0 = Second_att_control_codeblock__B.P_pr_d;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d66:	613b      	str	r3, [r7, #16]
  u1 = Second_att_control_codeblock__P.Saturation_LowerSat;
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	60fb      	str	r3, [r7, #12]
  u2 = Second_att_control_codeblock__P.Saturation_UpperSat;
 8003d6e:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c0>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	60bb      	str	r3, [r7, #8]
  if (u0 > u2) {
 8003d74:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d78:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d84:	dd03      	ble.n	8003d8e <_ZN23px4_AlgorithmModelClass4stepEv+0x29e>
    Second_att_control_codeblock__B.Saturation = u2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	661a      	str	r2, [r3, #96]	; 0x60
 8003d8c:	e015      	b.n	8003dba <_ZN23px4_AlgorithmModelClass4stepEv+0x2ca>
  } else if (u0 < u1) {
 8003d8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d92:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d9e:	d509      	bpl.n	8003db4 <_ZN23px4_AlgorithmModelClass4stepEv+0x2c4>
    Second_att_control_codeblock__B.Saturation = u1;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	661a      	str	r2, [r3, #96]	; 0x60
 8003da6:	e008      	b.n	8003dba <_ZN23px4_AlgorithmModelClass4stepEv+0x2ca>
 8003da8:	44bb8000 	.word	0x44bb8000
 8003dac:	43fa0000 	.word	0x43fa0000
 8003db0:	24000004 	.word	0x24000004
  } else {
    Second_att_control_codeblock__B.Saturation = u0;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	661a      	str	r2, [r3, #96]	; 0x60

  // End of Saturate: '<S6>/Saturation'

  // Gain: '<S6>/Gain'
  Second_att_control_codeblock__B.Gain_p =
    Second_att_control_codeblock__P.Gain_Gain_p *
 8003dba:	4bc3      	ldr	r3, [pc, #780]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8003dbc:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
    Second_att_control_codeblock__B.Saturation;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
    Second_att_control_codeblock__P.Gain_Gain_p *
 8003dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain_p =
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

  // Sum: '<S5>/Sum2' incorporates:
  //   Inport: '<Root>/Pitch'

  Second_att_control_codeblock__B.pitchrollerror_m =
    Second_att_control_codeblock__B.Gain[1] -
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    Second_att_control_codeblock__U.Pitch;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
    Second_att_control_codeblock__B.Gain[1] -
 8003ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_m =
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

  // Gain: '<S5>/P_pr1'
  Second_att_control_codeblock__B.P_pr1 =
    Second_att_control_codeblock__P.P_pr1_Gain *
 8003de6:	4bb8      	ldr	r3, [pc, #736]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8003de8:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
    Second_att_control_codeblock__B.pitchrollerror_m;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
    Second_att_control_codeblock__P.P_pr1_Gain *
 8003df2:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr1 =
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

  // DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1 =
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	671a      	str	r2, [r3, #112]	; 0x70

  // Gain: '<S5>/I_pr1'
  Second_att_control_codeblock__B.I_pr1 =
    Second_att_control_codeblock__P.I_pr1_Gain *
 8003e06:	4bb0      	ldr	r3, [pc, #704]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8003e08:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
    Second_att_control_codeblock__P.I_pr1_Gain *
 8003e12:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.I_pr1 =
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

  // Sum: '<S5>/Sum1'
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
    + Second_att_control_codeblock__B.I_pr1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8003e28:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_o = Second_att_control_codeblock__B.P_pr1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

  // Sum: '<S6>/Sum1' incorporates:
  //   Inport: '<Root>/q'

  Second_att_control_codeblock__B.pitchrollerror_i =
    Second_att_control_codeblock__B.P_pr_o - Second_att_control_codeblock__U.q;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8003e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.pitchrollerror_i =
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

  // Gain: '<S6>/P_pr1'
  Second_att_control_codeblock__B.P_pr1_p =
    Second_att_control_codeblock__P.P_pr1_Gain_n *
 8003e48:	4b9f      	ldr	r3, [pc, #636]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8003e4a:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
    Second_att_control_codeblock__B.pitchrollerror_i;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
    Second_att_control_codeblock__P.P_pr1_Gain_n *
 8003e54:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr1_p =
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

  // DiscreteIntegrator: '<S6>/Discrete-Time Integrator1'
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
    Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
  Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p =
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  // Gain: '<S6>/I_pr1'
  Second_att_control_codeblock__B.I_pr1_j =
    Second_att_control_codeblock__P.I_pr1_Gain_g *
 8003e6a:	4b97      	ldr	r3, [pc, #604]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8003e6c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
    Second_att_control_codeblock__P.I_pr1_Gain_g *
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.I_pr1_j =
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
  //
  //  About '<S9>/TSamp':
  //   y = u * K where K = 1 / ( w * Ts )

  Second_att_control_codeblock__B.TSamp_h =
    Second_att_control_codeblock__B.pitchrollerror_i *
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
    Second_att_control_codeblock__P.TSamp_WtEt_l;
 8003e86:	4b90      	ldr	r3, [pc, #576]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8003e88:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
    Second_att_control_codeblock__B.pitchrollerror_i *
 8003e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.TSamp_h =
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
  //  Block description for '<S9>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock__B.Uk1_i =
    Second_att_control_codeblock_DW.UD_DSTATE_e;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
  Second_att_control_codeblock__B.Uk1_i =
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  //  Block description for '<S9>/Diff':
  //
  //   Add in CPU

  Second_att_control_codeblock__B.Diff_l =
    Second_att_control_codeblock__B.TSamp_h -
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
    Second_att_control_codeblock__B.Uk1_i;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
    Second_att_control_codeblock__B.TSamp_h -
 8003eae:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Diff_l =
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

  // Gain: '<S6>/D_pr1'
  Second_att_control_codeblock__B.D_pr1 =
    Second_att_control_codeblock__P.D_pr1_Gain *
 8003eb8:	4b83      	ldr	r3, [pc, #524]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8003eba:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
    Second_att_control_codeblock__B.Diff_l;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
    Second_att_control_codeblock__P.D_pr1_Gain *
 8003ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.D_pr1 =
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

  // Sum: '<S6>/Sum2'
  Second_att_control_codeblock__B.P_pr_j =
    (Second_att_control_codeblock__B.P_pr1_p +
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
     Second_att_control_codeblock__B.I_pr1_j) +
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
    (Second_att_control_codeblock__B.P_pr1_p +
 8003eda:	ee37 7a27 	vadd.f32	s14, s14, s15
    Second_att_control_codeblock__B.D_pr1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
     Second_att_control_codeblock__B.I_pr1_j) +
 8003ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.P_pr_j =
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

  // Saturate: '<S6>/Saturation1'
  u0 = Second_att_control_codeblock__B.P_pr_j;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ef4:	613b      	str	r3, [r7, #16]
  u1 = Second_att_control_codeblock__P.Saturation1_LowerSat;
 8003ef6:	4b74      	ldr	r3, [pc, #464]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	60fb      	str	r3, [r7, #12]
  u2 = Second_att_control_codeblock__P.Saturation1_UpperSat;
 8003efe:	4b72      	ldr	r3, [pc, #456]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8003f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f04:	60bb      	str	r3, [r7, #8]
  if (u0 > u2) {
 8003f06:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f16:	dd04      	ble.n	8003f22 <_ZN23px4_AlgorithmModelClass4stepEv+0x432>
    Second_att_control_codeblock__B.Saturation1 = u2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8003f20:	e011      	b.n	8003f46 <_ZN23px4_AlgorithmModelClass4stepEv+0x456>
  } else if (u0 < u1) {
 8003f22:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f26:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f32:	d504      	bpl.n	8003f3e <_ZN23px4_AlgorithmModelClass4stepEv+0x44e>
    Second_att_control_codeblock__B.Saturation1 = u1;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8003f3c:	e003      	b.n	8003f46 <_ZN23px4_AlgorithmModelClass4stepEv+0x456>
  } else {
    Second_att_control_codeblock__B.Saturation1 = u0;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  // End of Saturate: '<S6>/Saturation1'

  // Gain: '<S6>/Gain1'
  Second_att_control_codeblock__B.Gain1 =
    Second_att_control_codeblock__P.Gain1_Gain *
 8003f46:	4b60      	ldr	r3, [pc, #384]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8003f48:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
    Second_att_control_codeblock__B.Saturation1;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
    Second_att_control_codeblock__P.Gain1_Gain *
 8003f52:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain1 =
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

  // DataTypeConversion: '<S3>/Data Type Conversion2' incorporates:
  //   Inport: '<Root>/set_yaw'

  Second_att_control_codeblock__B.DataTypeConversion2 =
    Second_att_control_codeblock__U.set_yaw;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8b3 3146 	ldrh.w	r3, [r3, #326]	; 0x146
  Second_att_control_codeblock__B.DataTypeConversion2 =
 8003f62:	ee07 3a90 	vmov	s15, r3
 8003f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

  // Fcn: '<S3>/Fcn7'
  Second_att_control_codeblock__B.Fcn7 =
    (Second_att_control_codeblock__B.DataTypeConversion2 - 1500.0F) / 500.0F;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8003f76:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80040cc <_ZN23px4_AlgorithmModelClass4stepEv+0x5dc>
 8003f7a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003f7e:	eddf 6a54 	vldr	s13, [pc, #336]	; 80040d0 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e0>
 8003f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock__B.Fcn7 =
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac

  // Saturate: '<S3>/Saturation7'
  u0 = Second_att_control_codeblock__B.Fcn7;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f92:	613b      	str	r3, [r7, #16]
  u1 = Second_att_control_codeblock__P.Saturation7_LowerSat;
 8003f94:	4b4c      	ldr	r3, [pc, #304]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8003f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f9a:	60fb      	str	r3, [r7, #12]
  u2 = Second_att_control_codeblock__P.Saturation7_UpperSat;
 8003f9c:	4b4a      	ldr	r3, [pc, #296]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8003f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fa2:	60bb      	str	r3, [r7, #8]
  if (u0 > u2) {
 8003fa4:	ed97 7a04 	vldr	s14, [r7, #16]
 8003fa8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb4:	dd04      	ble.n	8003fc0 <_ZN23px4_AlgorithmModelClass4stepEv+0x4d0>
    Second_att_control_codeblock__B.Saturation7 = u2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003fbe:	e011      	b.n	8003fe4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4f4>
  } else if (u0 < u1) {
 8003fc0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003fc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd0:	d504      	bpl.n	8003fdc <_ZN23px4_AlgorithmModelClass4stepEv+0x4ec>
    Second_att_control_codeblock__B.Saturation7 = u1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003fda:	e003      	b.n	8003fe4 <_ZN23px4_AlgorithmModelClass4stepEv+0x4f4>
  } else {
    Second_att_control_codeblock__B.Saturation7 = u0;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  // Sum: '<S7>/Sum' incorporates:
  //   Inport: '<Root>/r'

  Second_att_control_codeblock__B.Sum =
    Second_att_control_codeblock__B.Saturation7 -
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
    Second_att_control_codeblock__U.r;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
    Second_att_control_codeblock__B.Saturation7 -
 8003ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum =
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

  // Gain: '<S7>/Gain'
  Second_att_control_codeblock__B.Gain_f =
    Second_att_control_codeblock__P.Gain_Gain_j *
 8003ffa:	4b33      	ldr	r3, [pc, #204]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8003ffc:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
    Second_att_control_codeblock__B.Sum;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
    Second_att_control_codeblock__P.Gain_Gain_j *
 8004006:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.Gain_f =
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8

  // Gain: '<S47>/Proportional Gain'
  Second_att_control_codeblock__B.ProportionalGain =
    Second_att_control_codeblock__P.DiscretePIDController_P *
 8004010:	4b2d      	ldr	r3, [pc, #180]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8004012:	ed93 7a04 	vldr	s14, [r3, #16]
    Second_att_control_codeblock__B.Gain_f;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
    Second_att_control_codeblock__P.DiscretePIDController_P *
 800401c:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.ProportionalGain =
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

  // DiscreteIntegrator: '<S42>/Integrator'
  Second_att_control_codeblock__B.Integrator =
    Second_att_control_codeblock_DW.Integrator_DSTATE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
  Second_att_control_codeblock__B.Integrator =
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  // Sum: '<S51>/Sum'
  Second_att_control_codeblock__B.Sum_f =
    Second_att_control_codeblock__B.ProportionalGain +
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
    Second_att_control_codeblock__B.Integrator;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
    Second_att_control_codeblock__B.ProportionalGain +
 800403e:	ee77 7a27 	vadd.f32	s15, s14, s15
  Second_att_control_codeblock__B.Sum_f =
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

  // DataTypeConversion: '<S3>/Data Type Conversion3' incorporates:
  //   Inport: '<Root>/set_thrust'

  Second_att_control_codeblock__B.DataTypeConversion3 =
    Second_att_control_codeblock__U.set_thrust;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8b3 3140 	ldrh.w	r3, [r3, #320]	; 0x140
  Second_att_control_codeblock__B.DataTypeConversion3 =
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8

  // Fcn: '<S3>/Fcn6'
  Second_att_control_codeblock__B.Fcn6 =
    (Second_att_control_codeblock__B.DataTypeConversion3 - 1000.0F) / 1000.0F;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8004062:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80040d4 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 8004066:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800406a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80040d4 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 800406e:	eec7 7a26 	vdiv.f32	s15, s14, s13
  Second_att_control_codeblock__B.Fcn6 =
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc

  // Saturate: '<S3>/Saturation10'
  u0 = Second_att_control_codeblock__B.Fcn6;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800407e:	613b      	str	r3, [r7, #16]
  u1 = Second_att_control_codeblock__P.Saturation10_LowerSat;
 8004080:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 8004082:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004086:	60fb      	str	r3, [r7, #12]
  u2 = Second_att_control_codeblock__P.Saturation10_UpperSat;
 8004088:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5d8>)
 800408a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800408e:	60bb      	str	r3, [r7, #8]
  if (u0 > u2) {
 8004090:	ed97 7a04 	vldr	s14, [r7, #16]
 8004094:	edd7 7a02 	vldr	s15, [r7, #8]
 8004098:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800409c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a0:	dd04      	ble.n	80040ac <_ZN23px4_AlgorithmModelClass4stepEv+0x5bc>
    Second_att_control_codeblock__B.Saturation10 = u2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80040aa:	e01b      	b.n	80040e4 <_ZN23px4_AlgorithmModelClass4stepEv+0x5f4>
  } else if (u0 < u1) {
 80040ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80040b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80040b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040bc:	d50e      	bpl.n	80040dc <_ZN23px4_AlgorithmModelClass4stepEv+0x5ec>
    Second_att_control_codeblock__B.Saturation10 = u1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80040c6:	e00d      	b.n	80040e4 <_ZN23px4_AlgorithmModelClass4stepEv+0x5f4>
 80040c8:	24000004 	.word	0x24000004
 80040cc:	44bb8000 	.word	0x44bb8000
 80040d0:	43fa0000 	.word	0x43fa0000
 80040d4:	447a0000 	.word	0x447a0000
 80040d8:	47800000 	.word	0x47800000
  } else {
    Second_att_control_codeblock__B.Saturation10 = u0;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  }

  // End of Saturate: '<S3>/Saturation10'

  // MATLAB Function: '<S1>/pwm_out1'
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain_p -
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80040ea:	eeb1 7a67 	vneg.f32	s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain_p -
 80040f4:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock__B.Sum_f) *
 80040fe:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004102:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004106:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__B.Saturation10) * 1000.0F);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004110:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((-Second_att_control_codeblock__B.Gain_p -
 8004114:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 80040d4 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 8004118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800411c:	eeb0 0a67 	vmov.f32	s0, s15
 8004120:	f7ff fc8c 	bl	8003a3c <_Z13rt_roundf_snff>
 8004124:	ed87 0a04 	vstr	s0, [r7, #16]
  if (u0 < 65536.0F) {
 8004128:	edd7 7a04 	vldr	s15, [r7, #16]
 800412c:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 80040d8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e8>
 8004130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004138:	d511      	bpl.n	800415e <_ZN23px4_AlgorithmModelClass4stepEv+0x66e>
    if (u0 >= 0.0F) {
 800413a:	edd7 7a04 	vldr	s15, [r7, #16]
 800413e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	db07      	blt.n	8004158 <_ZN23px4_AlgorithmModelClass4stepEv+0x668>
      y = static_cast<uint16_T>(u0);
 8004148:	edd7 7a04 	vldr	s15, [r7, #16]
 800414c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004150:	ee17 3a90 	vmov	r3, s15
 8004154:	82fb      	strh	r3, [r7, #22]
 8004156:	e005      	b.n	8004164 <_ZN23px4_AlgorithmModelClass4stepEv+0x674>
    } else {
      y = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	82fb      	strh	r3, [r7, #22]
 800415c:	e002      	b.n	8004164 <_ZN23px4_AlgorithmModelClass4stepEv+0x674>
    }
  } else {
    y = MAX_uint16_T;
 800415e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004162:	82fb      	strh	r3, [r7, #22]
  }

  tmp = y + 1000U;
 8004164:	8afb      	ldrh	r3, [r7, #22]
 8004166:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800416a:	61bb      	str	r3, [r7, #24]
  if (tmp > 65535U) {
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004172:	d302      	bcc.n	800417a <_ZN23px4_AlgorithmModelClass4stepEv+0x68a>
    tmp = 65535U;
 8004174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004178:	61bb      	str	r3, [r7, #24]
  }

  Second_att_control_codeblock__B.M1 = static_cast<uint16_T>(tmp);
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	b29a      	uxth	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain_p +
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
                       Second_att_control_codeblock__B.Sum_f) *
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain_p +
 8004190:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock__B.Sum_f) *
 800419a:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 800419e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80041a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__B.Saturation10) * 1000.0F);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 80041ac:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf(((Second_att_control_codeblock__B.Gain_p +
 80041b0:	ed1f 7a38 	vldr	s14, [pc, #-224]	; 80040d4 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 80041b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041b8:	eeb0 0a67 	vmov.f32	s0, s15
 80041bc:	f7ff fc3e 	bl	8003a3c <_Z13rt_roundf_snff>
 80041c0:	ed87 0a04 	vstr	s0, [r7, #16]
  if (u0 < 65536.0F) {
 80041c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80041c8:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 80040d8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e8>
 80041cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d4:	d511      	bpl.n	80041fa <_ZN23px4_AlgorithmModelClass4stepEv+0x70a>
    if (u0 >= 0.0F) {
 80041d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80041da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e2:	db07      	blt.n	80041f4 <_ZN23px4_AlgorithmModelClass4stepEv+0x704>
      y = static_cast<uint16_T>(u0);
 80041e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80041e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ec:	ee17 3a90 	vmov	r3, s15
 80041f0:	82fb      	strh	r3, [r7, #22]
 80041f2:	e005      	b.n	8004200 <_ZN23px4_AlgorithmModelClass4stepEv+0x710>
    } else {
      y = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	82fb      	strh	r3, [r7, #22]
 80041f8:	e002      	b.n	8004200 <_ZN23px4_AlgorithmModelClass4stepEv+0x710>
    }
  } else {
    y = MAX_uint16_T;
 80041fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041fe:	82fb      	strh	r3, [r7, #22]
  }

  tmp = y + 1000U;
 8004200:	8afb      	ldrh	r3, [r7, #22]
 8004202:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004206:	61bb      	str	r3, [r7, #24]
  if (tmp > 65535U) {
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420e:	d302      	bcc.n	8004216 <_ZN23px4_AlgorithmModelClass4stepEv+0x726>
    tmp = 65535U;
 8004210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004214:	61bb      	str	r3, [r7, #24]
  }

  Second_att_control_codeblock__B.M2 = static_cast<uint16_T>(tmp);
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004226:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800422a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        Second_att_control_codeblock__B.Gain1) -
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004234:	ee37 7a27 	vadd.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
                        Second_att_control_codeblock__B.Gain1) -
 800423e:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock__B.Sum_f) *
 8004248:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 800424c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004250:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__B.Saturation10) * 1000.0F);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 800425a:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 800425e:	ed1f 7a63 	vldr	s14, [pc, #-396]	; 80040d4 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 8004262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004266:	eeb0 0a67 	vmov.f32	s0, s15
 800426a:	f7ff fbe7 	bl	8003a3c <_Z13rt_roundf_snff>
 800426e:	ed87 0a04 	vstr	s0, [r7, #16]
  if (u0 < 65536.0F) {
 8004272:	edd7 7a04 	vldr	s15, [r7, #16]
 8004276:	ed1f 7a68 	vldr	s14, [pc, #-416]	; 80040d8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e8>
 800427a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800427e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004282:	d511      	bpl.n	80042a8 <_ZN23px4_AlgorithmModelClass4stepEv+0x7b8>
    if (u0 >= 0.0F) {
 8004284:	edd7 7a04 	vldr	s15, [r7, #16]
 8004288:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800428c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004290:	db07      	blt.n	80042a2 <_ZN23px4_AlgorithmModelClass4stepEv+0x7b2>
      y = static_cast<uint16_T>(u0);
 8004292:	edd7 7a04 	vldr	s15, [r7, #16]
 8004296:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800429a:	ee17 3a90 	vmov	r3, s15
 800429e:	82fb      	strh	r3, [r7, #22]
 80042a0:	e005      	b.n	80042ae <_ZN23px4_AlgorithmModelClass4stepEv+0x7be>
    } else {
      y = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	82fb      	strh	r3, [r7, #22]
 80042a6:	e002      	b.n	80042ae <_ZN23px4_AlgorithmModelClass4stepEv+0x7be>
    }
  } else {
    y = MAX_uint16_T;
 80042a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042ac:	82fb      	strh	r3, [r7, #22]
  }

  tmp = y + 1000U;
 80042ae:	8afb      	ldrh	r3, [r7, #22]
 80042b0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80042b4:	61bb      	str	r3, [r7, #24]
  if (tmp > 65535U) {
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042bc:	d302      	bcc.n	80042c4 <_ZN23px4_AlgorithmModelClass4stepEv+0x7d4>
    tmp = 65535U;
 80042be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042c2:	61bb      	str	r3, [r7, #24]
  }

  Second_att_control_codeblock__B.M3 = static_cast<uint16_T>(tmp);
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 80042d4:	eeb1 7a67 	vneg.f32	s14, s15
                        Second_att_control_codeblock__B.Gain_p / 2.0F) +
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80042de:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80042e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 80042e6:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
                        Second_att_control_codeblock__B.Gain_p / 2.0F) +
 80042f0:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock__B.Sum_f) *
 80042fa:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 80042fe:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004302:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__B.Saturation10) * 1000.0F);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 800430c:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((-Second_att_control_codeblock__B.Gain1 -
 8004310:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 80040d4 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 8004314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004318:	eeb0 0a67 	vmov.f32	s0, s15
 800431c:	f7ff fb8e 	bl	8003a3c <_Z13rt_roundf_snff>
 8004320:	ed87 0a04 	vstr	s0, [r7, #16]
  if (u0 < 65536.0F) {
 8004324:	edd7 7a04 	vldr	s15, [r7, #16]
 8004328:	ed1f 7a95 	vldr	s14, [pc, #-596]	; 80040d8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e8>
 800432c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004334:	d511      	bpl.n	800435a <_ZN23px4_AlgorithmModelClass4stepEv+0x86a>
    if (u0 >= 0.0F) {
 8004336:	edd7 7a04 	vldr	s15, [r7, #16]
 800433a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800433e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004342:	db07      	blt.n	8004354 <_ZN23px4_AlgorithmModelClass4stepEv+0x864>
      y = static_cast<uint16_T>(u0);
 8004344:	edd7 7a04 	vldr	s15, [r7, #16]
 8004348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800434c:	ee17 3a90 	vmov	r3, s15
 8004350:	82fb      	strh	r3, [r7, #22]
 8004352:	e005      	b.n	8004360 <_ZN23px4_AlgorithmModelClass4stepEv+0x870>
    } else {
      y = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	82fb      	strh	r3, [r7, #22]
 8004358:	e002      	b.n	8004360 <_ZN23px4_AlgorithmModelClass4stepEv+0x870>
    }
  } else {
    y = MAX_uint16_T;
 800435a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800435e:	82fb      	strh	r3, [r7, #22]
  }

  tmp = y + 1000U;
 8004360:	8afb      	ldrh	r3, [r7, #22]
 8004362:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004366:	61bb      	str	r3, [r7, #24]
  if (tmp > 65535U) {
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436e:	d302      	bcc.n	8004376 <_ZN23px4_AlgorithmModelClass4stepEv+0x886>
    tmp = 65535U;
 8004370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004374:	61bb      	str	r3, [r7, #24]
  }

  Second_att_control_codeblock__B.M4 = static_cast<uint16_T>(tmp);
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	b29a      	uxth	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
                        Second_att_control_codeblock__B.Gain_p / 2.0F) +
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800438c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8004390:	eec6 7a86 	vdiv.f32	s15, s13, s12
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 8004394:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
                        Second_att_control_codeblock__B.Gain_p / 2.0F) +
 800439e:	ee37 7a27 	vadd.f32	s14, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock__B.Sum_f) *
 80043a8:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 80043ac:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80043b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__B.Saturation10) * 1000.0F);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 80043ba:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain1 -
 80043be:	ed1f 7abb 	vldr	s14, [pc, #-748]	; 80040d4 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e4>
 80043c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043c6:	eeb0 0a67 	vmov.f32	s0, s15
 80043ca:	f7ff fb37 	bl	8003a3c <_Z13rt_roundf_snff>
 80043ce:	ed87 0a04 	vstr	s0, [r7, #16]
  if (u0 < 65536.0F) {
 80043d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80043d6:	ed1f 7ac0 	vldr	s14, [pc, #-768]	; 80040d8 <_ZN23px4_AlgorithmModelClass4stepEv+0x5e8>
 80043da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e2:	d511      	bpl.n	8004408 <_ZN23px4_AlgorithmModelClass4stepEv+0x918>
    if (u0 >= 0.0F) {
 80043e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80043e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f0:	db07      	blt.n	8004402 <_ZN23px4_AlgorithmModelClass4stepEv+0x912>
      y = static_cast<uint16_T>(u0);
 80043f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80043f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043fa:	ee17 3a90 	vmov	r3, s15
 80043fe:	82fb      	strh	r3, [r7, #22]
 8004400:	e005      	b.n	800440e <_ZN23px4_AlgorithmModelClass4stepEv+0x91e>
    } else {
      y = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	82fb      	strh	r3, [r7, #22]
 8004406:	e002      	b.n	800440e <_ZN23px4_AlgorithmModelClass4stepEv+0x91e>
    }
  } else {
    y = MAX_uint16_T;
 8004408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800440c:	82fb      	strh	r3, [r7, #22]
  }

  tmp = y + 1000U;
 800440e:	8afb      	ldrh	r3, [r7, #22]
 8004410:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004414:	61bb      	str	r3, [r7, #24]
  if (tmp > 65535U) {
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d302      	bcc.n	8004424 <_ZN23px4_AlgorithmModelClass4stepEv+0x934>
    tmp = 65535U;
 800441e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004422:	61bb      	str	r3, [r7, #24]
  }

  Second_att_control_codeblock__B.M5 = static_cast<uint16_T>(tmp);
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	b29a      	uxth	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8004434:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004438:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                        -Second_att_control_codeblock__B.Gain1) -
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 8004442:	ee37 7a67 	vsub.f32	s14, s14, s15
                       Second_att_control_codeblock__B.Sum_f) *
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
                        -Second_att_control_codeblock__B.Gain1) -
 800444c:	ee37 7a67 	vsub.f32	s14, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                       Second_att_control_codeblock__B.Sum_f) *
 8004456:	ee67 7a27 	vmul.f32	s15, s14, s15
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 800445a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800445e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                      Second_att_control_codeblock__B.Saturation10) * 1000.0F);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
                      Second_att_control_codeblock__B.Saturation10 / 3.0F +
 8004468:	ee77 7a27 	vadd.f32	s15, s14, s15
  u0 = rt_roundf_snf((((Second_att_control_codeblock__B.Gain_p / 2.0F +
 800446c:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80046d8 <_ZN23px4_AlgorithmModelClass4stepEv+0xbe8>
 8004470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004474:	eeb0 0a67 	vmov.f32	s0, s15
 8004478:	f7ff fae0 	bl	8003a3c <_Z13rt_roundf_snff>
 800447c:	ed87 0a04 	vstr	s0, [r7, #16]
  if (u0 < 65536.0F) {
 8004480:	edd7 7a04 	vldr	s15, [r7, #16]
 8004484:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80046dc <_ZN23px4_AlgorithmModelClass4stepEv+0xbec>
 8004488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800448c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004490:	d511      	bpl.n	80044b6 <_ZN23px4_AlgorithmModelClass4stepEv+0x9c6>
    if (u0 >= 0.0F) {
 8004492:	edd7 7a04 	vldr	s15, [r7, #16]
 8004496:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800449a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449e:	db07      	blt.n	80044b0 <_ZN23px4_AlgorithmModelClass4stepEv+0x9c0>
      y = static_cast<uint16_T>(u0);
 80044a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80044a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044a8:	ee17 3a90 	vmov	r3, s15
 80044ac:	82fb      	strh	r3, [r7, #22]
 80044ae:	e005      	b.n	80044bc <_ZN23px4_AlgorithmModelClass4stepEv+0x9cc>
    } else {
      y = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	82fb      	strh	r3, [r7, #22]
 80044b4:	e002      	b.n	80044bc <_ZN23px4_AlgorithmModelClass4stepEv+0x9cc>
    }
  } else {
    y = MAX_uint16_T;
 80044b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044ba:	82fb      	strh	r3, [r7, #22]
  }

  tmp = y + 1000U;
 80044bc:	8afb      	ldrh	r3, [r7, #22]
 80044be:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80044c2:	61bb      	str	r3, [r7, #24]
  if (tmp > 65535U) {
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ca:	d302      	bcc.n	80044d2 <_ZN23px4_AlgorithmModelClass4stepEv+0x9e2>
    tmp = 65535U;
 80044cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044d0:	61bb      	str	r3, [r7, #24]
  }

  Second_att_control_codeblock__B.M6 = static_cast<uint16_T>(tmp);
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  // End of MATLAB Function: '<S1>/pwm_out1'

  // Switch: '<S1>/Switch' incorporates:
  //   Inport: '<Root>/Arm_cmd'

  if (Second_att_control_codeblock__U.Arm_cmd >
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8b3 2148 	ldrh.w	r2, [r3, #328]	; 0x148
      Second_att_control_codeblock__P.Switch_Threshold) {
 80044e2:	4b7f      	ldr	r3, [pc, #508]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 80044e4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
  if (Second_att_control_codeblock__U.Arm_cmd >
 80044e8:	429a      	cmp	r2, r3
 80044ea:	f240 80e2 	bls.w	80046b2 <_ZN23px4_AlgorithmModelClass4stepEv+0xbc2>
    // Saturate: '<S1>/Saturation'
    if (Second_att_control_codeblock__B.M1 >
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
        Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 80044f4:	4b7a      	ldr	r3, [pc, #488]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 80044f6:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
    if (Second_att_control_codeblock__B.M1 >
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d904      	bls.n	8004508 <_ZN23px4_AlgorithmModelClass4stepEv+0xa18>
      y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 80044fe:	4b78      	ldr	r3, [pc, #480]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004500:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004504:	82fb      	strh	r3, [r7, #22]
 8004506:	e010      	b.n	800452a <_ZN23px4_AlgorithmModelClass4stepEv+0xa3a>
    } else if (Second_att_control_codeblock__B.M1 <
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	; 0xf0
               Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 800450e:	4b74      	ldr	r3, [pc, #464]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004510:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
    } else if (Second_att_control_codeblock__B.M1 <
 8004514:	429a      	cmp	r2, r3
 8004516:	d204      	bcs.n	8004522 <_ZN23px4_AlgorithmModelClass4stepEv+0xa32>
      y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004518:	4b71      	ldr	r3, [pc, #452]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 800451a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800451e:	82fb      	strh	r3, [r7, #22]
 8004520:	e003      	b.n	800452a <_ZN23px4_AlgorithmModelClass4stepEv+0xa3a>
    } else {
      y = Second_att_control_codeblock__B.M1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8004528:	82fb      	strh	r3, [r7, #22]
    }

    Second_att_control_codeblock__B.Saturation_o[0] = y;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8afa      	ldrh	r2, [r7, #22]
 800452e:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
    if (Second_att_control_codeblock__B.M2 >
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
        Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004538:	4b69      	ldr	r3, [pc, #420]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 800453a:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
    if (Second_att_control_codeblock__B.M2 >
 800453e:	429a      	cmp	r2, r3
 8004540:	d904      	bls.n	800454c <_ZN23px4_AlgorithmModelClass4stepEv+0xa5c>
      y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004542:	4b67      	ldr	r3, [pc, #412]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004544:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004548:	82fb      	strh	r3, [r7, #22]
 800454a:	e010      	b.n	800456e <_ZN23px4_AlgorithmModelClass4stepEv+0xa7e>
    } else if (Second_att_control_codeblock__B.M2 <
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	; 0xf2
               Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004552:	4b63      	ldr	r3, [pc, #396]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004554:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
    } else if (Second_att_control_codeblock__B.M2 <
 8004558:	429a      	cmp	r2, r3
 800455a:	d204      	bcs.n	8004566 <_ZN23px4_AlgorithmModelClass4stepEv+0xa76>
      y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 800455c:	4b60      	ldr	r3, [pc, #384]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 800455e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004562:	82fb      	strh	r3, [r7, #22]
 8004564:	e003      	b.n	800456e <_ZN23px4_AlgorithmModelClass4stepEv+0xa7e>
    } else {
      y = Second_att_control_codeblock__B.M2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 800456c:	82fb      	strh	r3, [r7, #22]
    }

    Second_att_control_codeblock__B.Saturation_o[1] = y;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8afa      	ldrh	r2, [r7, #22]
 8004572:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
    if (Second_att_control_codeblock__B.M3 >
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
        Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 800457c:	4b58      	ldr	r3, [pc, #352]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 800457e:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
    if (Second_att_control_codeblock__B.M3 >
 8004582:	429a      	cmp	r2, r3
 8004584:	d904      	bls.n	8004590 <_ZN23px4_AlgorithmModelClass4stepEv+0xaa0>
      y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004586:	4b56      	ldr	r3, [pc, #344]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004588:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800458c:	82fb      	strh	r3, [r7, #22]
 800458e:	e010      	b.n	80045b2 <_ZN23px4_AlgorithmModelClass4stepEv+0xac2>
    } else if (Second_att_control_codeblock__B.M3 <
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
               Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004596:	4b52      	ldr	r3, [pc, #328]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004598:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
    } else if (Second_att_control_codeblock__B.M3 <
 800459c:	429a      	cmp	r2, r3
 800459e:	d204      	bcs.n	80045aa <_ZN23px4_AlgorithmModelClass4stepEv+0xaba>
      y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 80045a0:	4b4f      	ldr	r3, [pc, #316]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 80045a2:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80045a6:	82fb      	strh	r3, [r7, #22]
 80045a8:	e003      	b.n	80045b2 <_ZN23px4_AlgorithmModelClass4stepEv+0xac2>
    } else {
      y = Second_att_control_codeblock__B.M3;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 80045b0:	82fb      	strh	r3, [r7, #22]
    }

    Second_att_control_codeblock__B.Saturation_o[2] = y;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	8afa      	ldrh	r2, [r7, #22]
 80045b6:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
    if (Second_att_control_codeblock__B.M4 >
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
        Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 80045c0:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 80045c2:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
    if (Second_att_control_codeblock__B.M4 >
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d904      	bls.n	80045d4 <_ZN23px4_AlgorithmModelClass4stepEv+0xae4>
      y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 80045ca:	4b45      	ldr	r3, [pc, #276]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 80045cc:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80045d0:	82fb      	strh	r3, [r7, #22]
 80045d2:	e010      	b.n	80045f6 <_ZN23px4_AlgorithmModelClass4stepEv+0xb06>
    } else if (Second_att_control_codeblock__B.M4 <
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
               Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 80045da:	4b41      	ldr	r3, [pc, #260]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 80045dc:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
    } else if (Second_att_control_codeblock__B.M4 <
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d204      	bcs.n	80045ee <_ZN23px4_AlgorithmModelClass4stepEv+0xafe>
      y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 80045e4:	4b3e      	ldr	r3, [pc, #248]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 80045e6:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 80045ea:	82fb      	strh	r3, [r7, #22]
 80045ec:	e003      	b.n	80045f6 <_ZN23px4_AlgorithmModelClass4stepEv+0xb06>
    } else {
      y = Second_att_control_codeblock__B.M4;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 80045f4:	82fb      	strh	r3, [r7, #22]
    }

    Second_att_control_codeblock__B.Saturation_o[3] = y;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8afa      	ldrh	r2, [r7, #22]
 80045fa:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
    if (Second_att_control_codeblock__B.M5 >
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
        Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004604:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004606:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
    if (Second_att_control_codeblock__B.M5 >
 800460a:	429a      	cmp	r2, r3
 800460c:	d904      	bls.n	8004618 <_ZN23px4_AlgorithmModelClass4stepEv+0xb28>
      y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 800460e:	4b34      	ldr	r3, [pc, #208]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004610:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004614:	82fb      	strh	r3, [r7, #22]
 8004616:	e010      	b.n	800463a <_ZN23px4_AlgorithmModelClass4stepEv+0xb4a>
    } else if (Second_att_control_codeblock__B.M5 <
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
               Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 800461e:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004620:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
    } else if (Second_att_control_codeblock__B.M5 <
 8004624:	429a      	cmp	r2, r3
 8004626:	d204      	bcs.n	8004632 <_ZN23px4_AlgorithmModelClass4stepEv+0xb42>
      y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 8004628:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 800462a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 800462e:	82fb      	strh	r3, [r7, #22]
 8004630:	e003      	b.n	800463a <_ZN23px4_AlgorithmModelClass4stepEv+0xb4a>
    } else {
      y = Second_att_control_codeblock__B.M5;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8004638:	82fb      	strh	r3, [r7, #22]
    }

    Second_att_control_codeblock__B.Saturation_o[4] = y;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	8afa      	ldrh	r2, [r7, #22]
 800463e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    if (Second_att_control_codeblock__B.M6 >
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
        Second_att_control_codeblock__P.Saturation_UpperSat_d) {
 8004648:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 800464a:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
    if (Second_att_control_codeblock__B.M6 >
 800464e:	429a      	cmp	r2, r3
 8004650:	d904      	bls.n	800465c <_ZN23px4_AlgorithmModelClass4stepEv+0xb6c>
      y = Second_att_control_codeblock__P.Saturation_UpperSat_d;
 8004652:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004654:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8004658:	82fb      	strh	r3, [r7, #22]
 800465a:	e010      	b.n	800467e <_ZN23px4_AlgorithmModelClass4stepEv+0xb8e>
    } else if (Second_att_control_codeblock__B.M6 <
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
               Second_att_control_codeblock__P.Saturation_LowerSat_i) {
 8004662:	4b1f      	ldr	r3, [pc, #124]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 8004664:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
    } else if (Second_att_control_codeblock__B.M6 <
 8004668:	429a      	cmp	r2, r3
 800466a:	d204      	bcs.n	8004676 <_ZN23px4_AlgorithmModelClass4stepEv+0xb86>
      y = Second_att_control_codeblock__P.Saturation_LowerSat_i;
 800466c:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 800466e:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8004672:	82fb      	strh	r3, [r7, #22]
 8004674:	e003      	b.n	800467e <_ZN23px4_AlgorithmModelClass4stepEv+0xb8e>
    } else {
      y = Second_att_control_codeblock__B.M6;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 800467c:	82fb      	strh	r3, [r7, #22]
    }

    Second_att_control_codeblock__B.Saturation_o[5] = y;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8afa      	ldrh	r2, [r7, #22]
 8004682:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106

    // End of Saturate: '<S1>/Saturation'

    // Outport: '<Root>/PWM_OUT'
    for (i = 0; i < 6; i++) {
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	2b05      	cmp	r3, #5
 800468e:	dc29      	bgt.n	80046e4 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf4>
      Second_att_control_codeblock__Y.PWM_OUT[i] =
        Second_att_control_codeblock__B.Saturation_o[i];
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	337c      	adds	r3, #124	; 0x7c
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	4413      	add	r3, r2
 800469a:	8899      	ldrh	r1, [r3, #4]
      Second_att_control_codeblock__Y.PWM_OUT[i] =
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	33a4      	adds	r3, #164	; 0xa4
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4413      	add	r3, r2
 80046a6:	460a      	mov	r2, r1
 80046a8:	809a      	strh	r2, [r3, #4]
    for (i = 0; i < 6; i++) {
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3301      	adds	r3, #1
 80046ae:	61fb      	str	r3, [r7, #28]
 80046b0:	e7eb      	b.n	800468a <_ZN23px4_AlgorithmModelClass4stepEv+0xb9a>
    }
  } else {
    // Outport: '<Root>/PWM_OUT' incorporates:
    //   Constant: '<S1>/Constant'

    for (i = 0; i < 6; i++) {
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	dc13      	bgt.n	80046e4 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf4>
      Second_att_control_codeblock__Y.PWM_OUT[i] =
        Second_att_control_codeblock__P.Constant_Value;
 80046bc:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <_ZN23px4_AlgorithmModelClass4stepEv+0xbf0>)
 80046be:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
      Second_att_control_codeblock__Y.PWM_OUT[i] =
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	33a4      	adds	r3, #164	; 0xa4
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	4413      	add	r3, r2
 80046cc:	460a      	mov	r2, r1
 80046ce:	809a      	strh	r2, [r3, #4]
    for (i = 0; i < 6; i++) {
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	3301      	adds	r3, #1
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	e7ee      	b.n	80046b6 <_ZN23px4_AlgorithmModelClass4stepEv+0xbc6>
 80046d8:	447a0000 	.word	0x447a0000
 80046dc:	47800000 	.word	0x47800000
 80046e0:	24000004 	.word	0x24000004

  // End of Switch: '<S1>/Switch'

  // Delay: '<S6>/Delay'
  Second_att_control_codeblock__B.Delay =
    Second_att_control_codeblock_DW.Delay_DSTATE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
  Second_att_control_codeblock__B.Delay =
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

  // Gain: '<S6>/antiWU_Gain'
  Second_att_control_codeblock__B.antiWU_Gain =
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 80046f0:	4b53      	ldr	r3, [pc, #332]	; (8004840 <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 80046f2:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
    Second_att_control_codeblock__B.Delay;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
    Second_att_control_codeblock__P.antiWU_Gain_Gain *
 80046fc:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain =
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8

  // Sum: '<S6>/Add'
  Second_att_control_codeblock__B.Add =
    Second_att_control_codeblock__B.pitchrollerror_b -
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
    Second_att_control_codeblock__B.antiWU_Gain;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
    Second_att_control_codeblock__B.pitchrollerror_b -
 8004712:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add =
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc

  // Delay: '<S6>/Delay1'
  Second_att_control_codeblock__B.Delay1 =
    Second_att_control_codeblock_DW.Delay1_DSTATE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
  Second_att_control_codeblock__B.Delay1 =
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

  // Gain: '<S6>/antiWU_Gain1'
  Second_att_control_codeblock__B.antiWU_Gain1 =
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 8004728:	4b45      	ldr	r3, [pc, #276]	; (8004840 <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 800472a:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
    Second_att_control_codeblock__B.Delay1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
    Second_att_control_codeblock__P.antiWU_Gain1_Gain *
 8004734:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.antiWU_Gain1 =
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4

  // Sum: '<S6>/Add1'
  Second_att_control_codeblock__B.Add1 =
    Second_att_control_codeblock__B.pitchrollerror_i -
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
    Second_att_control_codeblock__B.antiWU_Gain1;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	edd3 7a39 	vldr	s15, [r3, #228]	; 0xe4
    Second_att_control_codeblock__B.pitchrollerror_i -
 800474a:	ee77 7a67 	vsub.f32	s15, s14, s15
  Second_att_control_codeblock__B.Add1 =
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8

  // Gain: '<S39>/Integral Gain'
  Second_att_control_codeblock__B.IntegralGain =
    Second_att_control_codeblock__P.DiscretePIDController_I *
 8004754:	4b3a      	ldr	r3, [pc, #232]	; (8004840 <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 8004756:	ed93 7a00 	vldr	s14, [r3]
    Second_att_control_codeblock__B.Gain_f;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
    Second_att_control_codeblock__P.DiscretePIDController_I *
 8004760:	ee67 7a27 	vmul.f32	s15, s14, s15
  Second_att_control_codeblock__B.IntegralGain =
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 8004770:	4b33      	ldr	r3, [pc, #204]	; (8004840 <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 8004772:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
    Second_att_control_codeblock__B.pitchrollerror;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainval *
 800477c:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE +=
 8004780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108

  // Update for DiscreteIntegrator: '<S6>/Discrete-Time Integrator'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	ed93 7a43 	vldr	s14, [r3, #268]	; 0x10c
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 8004790:	4b2b      	ldr	r3, [pc, #172]	; (8004840 <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 8004792:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
    Second_att_control_codeblock__B.Add;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_gainva_l *
 800479c:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k +=
 80047a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	edc3 7a43 	vstr	s15, [r3, #268]	; 0x10c
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__B.TSamp;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  Second_att_control_codeblock_DW.UD_DSTATE =
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  // Update for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	ed93 7a45 	vldr	s14, [r3, #276]	; 0x114
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 80047ba:	4b21      	ldr	r3, [pc, #132]	; (8004840 <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 80047bc:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
    Second_att_control_codeblock__B.pitchrollerror_m;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainval *
 80047c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE +=
 80047ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	edc3 7a45 	vstr	s15, [r3, #276]	; 0x114

  // Update for DiscreteIntegrator: '<S6>/Discrete-Time Integrator1'
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 80047da:	4b19      	ldr	r3, [pc, #100]	; (8004840 <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 80047dc:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
    Second_att_control_codeblock__B.Add1;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_gainv_k *
 80047e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d +=
 80047ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
  //  Block description for '<S9>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__B.TSamp_h;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  // Update for DiscreteIntegrator: '<S42>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
    Second_att_control_codeblock__P.Integrator_gainval *
 8004806:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <_ZN23px4_AlgorithmModelClass4stepEv+0xd50>)
 8004808:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
    Second_att_control_codeblock__B.IntegralGain;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
    Second_att_control_codeblock__P.Integrator_gainval *
 8004812:	ee66 7aa7 	vmul.f32	s15, s13, s15
  Second_att_control_codeblock_DW.Integrator_DSTATE +=
 8004816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120

  // Update for Delay: '<S6>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator_h;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  Second_att_control_codeblock_DW.Delay_DSTATE =
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

  // Update for Delay: '<S6>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__B.DiscreteTimeIntegrator1_p;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004836:	bf00      	nop
 8004838:	3720      	adds	r7, #32
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	24000004 	.word	0x24000004

08004844 <_ZN23px4_AlgorithmModelClass10initializeEv>:

// Model initialize function
void px4_AlgorithmModelClass::initialize()
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC;
 800484c:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 800484e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE =
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  // InitializeConditions for DiscreteIntegrator: '<S6>/Discrete-Time Integrator' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator_IC_k;
 8004856:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004858:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator_DSTATE_k =
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  //  Block description for '<S8>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE =
    Second_att_control_codeblock__P.DiscreteDerivative_ICPrevScaled;
 8004860:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004862:	685a      	ldr	r2, [r3, #4]
  Second_att_control_codeblock_DW.UD_DSTATE =
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  // InitializeConditions for DiscreteIntegrator: '<S5>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC;
 800486a:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 800486c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTATE =
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  // InitializeConditions for DiscreteIntegrator: '<S6>/Discrete-Time Integrator1' 
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
    Second_att_control_codeblock__P.DiscreteTimeIntegrator1_IC_j;
 8004874:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004876:	6fda      	ldr	r2, [r3, #124]	; 0x7c
  Second_att_control_codeblock_DW.DiscreteTimeIntegrator1_DSTAT_d =
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  //  Block description for '<S9>/UD':
  //
  //   Store in Global RAM

  Second_att_control_codeblock_DW.UD_DSTATE_e =
    Second_att_control_codeblock__P.DiscreteDerivative1_ICPrevScale;
 800487e:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004880:	689a      	ldr	r2, [r3, #8]
  Second_att_control_codeblock_DW.UD_DSTATE_e =
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  // InitializeConditions for DiscreteIntegrator: '<S42>/Integrator'
  Second_att_control_codeblock_DW.Integrator_DSTATE =
    Second_att_control_codeblock__P.DiscretePIDController_InitialCo;
 8004888:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 800488a:	68da      	ldr	r2, [r3, #12]
  Second_att_control_codeblock_DW.Integrator_DSTATE =
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  // InitializeConditions for Delay: '<S6>/Delay'
  Second_att_control_codeblock_DW.Delay_DSTATE =
    Second_att_control_codeblock__P.Delay_InitialCondition;
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 8004894:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  Second_att_control_codeblock_DW.Delay_DSTATE =
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

  // InitializeConditions for Delay: '<S6>/Delay1'
  Second_att_control_codeblock_DW.Delay1_DSTATE =
    Second_att_control_codeblock__P.Delay1_InitialCondition;
 800489e:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <_ZN23px4_AlgorithmModelClass10initializeEv+0x74>)
 80048a0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
  Second_att_control_codeblock_DW.Delay1_DSTATE =
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	24000004 	.word	0x24000004

080048bc <_ZN23px4_AlgorithmModelClassC1Ev>:
{
  // (no terminate code required)
}

// Constructor
px4_AlgorithmModelClass::px4_AlgorithmModelClass():
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  Second_att_control_codeblock__B()
  ,Second_att_control_codeblock_DW()
  ,Second_att_control_codeblock__U()
  ,Second_att_control_codeblock__Y()
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f44f 7384 	mov.w	r3, #264	; 0x108
 80048cc:	461a      	mov	r2, r3
 80048ce:	2100      	movs	r1, #0
 80048d0:	f01d fc5f 	bl	8022192 <memset>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80048da:	2224      	movs	r2, #36	; 0x24
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f01d fc57 	bl	8022192 <memset>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80048ea:	2220      	movs	r2, #32
 80048ec:	2100      	movs	r1, #0
 80048ee:	4618      	mov	r0, r3
 80048f0:	f01d fc4f 	bl	8022192 <memset>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	609a      	str	r2, [r3, #8]
{
  // Currently there is no constructor body generated.
}
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <_ZSt4asinf>:
  { return __builtin_asinf(__x); }
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	ed87 0a01 	vstr	s0, [r7, #4]
 8004916:	ed97 0a01 	vldr	s0, [r7, #4]
 800491a:	f01c fbb1 	bl	8021080 <asinf>
 800491e:	eef0 7a40 	vmov.f32	s15, s0
 8004922:	eeb0 0a67 	vmov.f32	s0, s15
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	ed87 0a01 	vstr	s0, [r7, #4]
 8004936:	edc7 0a00 	vstr	s1, [r7]
 800493a:	edd7 0a00 	vldr	s1, [r7]
 800493e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004942:	f01c fbf1 	bl	8021128 <atan2f>
 8004946:	eef0 7a40 	vmov.f32	s15, s0
 800494a:	eeb0 0a67 	vmov.f32	s0, s15
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	ed87 0a01 	vstr	s0, [r7, #4]
 800495e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004962:	f01c fbe5 	bl	8021130 <sqrtf>
 8004966:	eef0 7a40 	vmov.f32	s15, s0
 800496a:	eeb0 0a67 	vmov.f32	s0, s15
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>:
	 *  \return variable is updated(true), variable is not updated(false)
	 *
	 *  setFunction :
	 *  \param[in]		variable		msgBus data is changed to input data
	 */
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 8004974:	b4b0      	push	{r4, r5, r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800498e:	42a2      	cmp	r2, r4
 8004990:	bf08      	it	eq
 8004992:	4299      	cmpeq	r1, r3
 8004994:	d001      	beq.n	800499a <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE+0x26>
 8004996:	2301      	movs	r3, #1
 8004998:	73fb      	strb	r3, [r7, #15]
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4614      	mov	r4, r2
 80049a0:	461d      	mov	r5, r3
 80049a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80049aa:	e884 0003 	stmia.w	r4, {r0, r1}
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bcb0      	pop	{r4, r5, r7}
 80049b8:	4770      	bx	lr

080049ba <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 80049ba:	b4b0      	push	{r4, r5, r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	e9d3 1200 	ldrd	r1, r2, [r3]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80049d4:	42a2      	cmp	r2, r4
 80049d6:	bf08      	it	eq
 80049d8:	4299      	cmpeq	r1, r3
 80049da:	d001      	beq.n	80049e0 <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE+0x26>
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4615      	mov	r5, r2
 80049e6:	f103 0418 	add.w	r4, r3, #24
 80049ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bcb0      	pop	{r4, r5, r7}
 8004a00:	4770      	bx	lr

08004a02 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 8004a02:	b4b0      	push	{r4, r5, r7}
 8004a04:	b085      	sub	sp, #20
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	73fb      	strb	r3, [r7, #15]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004a1c:	42a2      	cmp	r2, r4
 8004a1e:	bf08      	it	eq
 8004a20:	4299      	cmpeq	r1, r3
 8004a22:	d001      	beq.n	8004a28 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE+0x26>
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4615      	mov	r5, r2
 8004a2e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8004a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bcb0      	pop	{r4, r5, r7}
 8004a48:	4770      	bx	lr

08004a4a <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
    
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 8004a4a:	b4b0      	push	{r4, r5, r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	6039      	str	r1, [r7, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8004a5c:	4615      	mov	r5, r2
 8004a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a66:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004a6a:	e884 0003 	stmia.w	r4, {r0, r1}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bcb0      	pop	{r4, r5, r7}
 8004a76:	4770      	bx	lr

08004a78 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>:
    SIMPLE_FUNC_IMPL(NedAccel, NedAccel, nedAccel)
 8004a78:	b4b0      	push	{r4, r5, r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8004a8a:	4615      	mov	r5, r2
 8004a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004a94:	e884 0003 	stmia.w	r4, {r0, r1}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bcb0      	pop	{r4, r5, r7}
 8004aa0:	4770      	bx	lr
	...

08004aa4 <_ZL11microsecondv>:
/* micro second counter timer */
#define USEC_TIMER &htim2

static uint32_t _timerOverflowCnt = 0;

static __inline uint64_t microsecond(){
 8004aa4:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8004aa8:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8004aaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <_ZL11microsecondv+0x40>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0b00 	mov.w	fp, #0
 8004ab8:	f04f 0c00 	mov.w	ip, #0
 8004abc:	468c      	mov	ip, r1
 8004abe:	f04f 0b00 	mov.w	fp, #0
 8004ac2:	4a09      	ldr	r2, [pc, #36]	; (8004ae8 <_ZL11microsecondv+0x44>)
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ac8:	4611      	mov	r1, r2
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	ea4b 0301 	orr.w	r3, fp, r1
 8004ad2:	ea4c 0402 	orr.w	r4, ip, r2
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	4621      	mov	r1, r4
 8004ada:	46bd      	mov	sp, r7
 8004adc:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	24000368 	.word	0x24000368
 8004ae8:	240094f4 	.word	0x240094f4

08004aec <_ZN2FC10ModuleAHRSC1Ev>:
#include "Lib/Matrix/matrix/Quaternion.hpp"
#include "cmath"

namespace FC{

ModuleAHRS::ModuleAHRS()
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	, lastUpdate{0}
	, beta{1.0f}
	, q0{1.0f}
	, q1{0.0f}
	, q2{0.0f}
	, q3{0.0f}
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	461a      	mov	r2, r3
 8004af8:	2300      	movs	r3, #0
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	6053      	str	r3, [r2, #4]
 8004afe:	6093      	str	r3, [r2, #8]
 8004b00:	60d3      	str	r3, [r2, #12]
 8004b02:	6113      	str	r3, [r2, #16]
 8004b04:	6153      	str	r3, [r2, #20]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3318      	adds	r3, #24
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	605a      	str	r2, [r3, #4]
 8004b10:	609a      	str	r2, [r3, #8]
 8004b12:	60da      	str	r2, [r3, #12]
 8004b14:	611a      	str	r2, [r3, #16]
 8004b16:	615a      	str	r2, [r3, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3330      	adds	r3, #48	; 0x30
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	609a      	str	r2, [r3, #8]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	611a      	str	r2, [r3, #16]
 8004b28:	615a      	str	r2, [r3, #20]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3348      	adds	r3, #72	; 0x48
 8004b2e:	2228      	movs	r2, #40	; 0x28
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f01d fb2d 	bl	8022192 <memset>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3370      	adds	r3, #112	; 0x70
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	611a      	str	r2, [r3, #16]
 8004b48:	615a      	str	r2, [r3, #20]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	f04f 0400 	mov.w	r4, #0
 8004b54:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004b5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004b68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
{

}
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd90      	pop	{r4, r7, pc}

08004b94 <_ZN2FC10ModuleAHRS7oneStepEv>:

void ModuleAHRS::oneStep(){
 8004b94:	b590      	push	{r4, r7, lr}
 8004b96:	b0a1      	sub	sp, #132	; 0x84
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	/* receive data */
	msgBus.getBodyAccel(&this->bodyAccelSub);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	481b      	ldr	r0, [pc, #108]	; (8004c10 <_ZN2FC10ModuleAHRS7oneStepEv+0x7c>)
 8004ba2:	f7ff fee7 	bl	8004974 <_ZN2FC6MsgBus12getBodyAccelEPNS_9BodyAccelE>
	msgBus.getBodyAngularVelocity(&this->bodyAngularVelocitySub);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3318      	adds	r3, #24
 8004baa:	4619      	mov	r1, r3
 8004bac:	4818      	ldr	r0, [pc, #96]	; (8004c10 <_ZN2FC10ModuleAHRS7oneStepEv+0x7c>)
 8004bae:	f7ff ff04 	bl	80049ba <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>

	/* mag data not valid */
	if(!msgBus.getBodyMag(&this->bodyMagSub))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3330      	adds	r3, #48	; 0x30
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4815      	ldr	r0, [pc, #84]	; (8004c10 <_ZN2FC10ModuleAHRS7oneStepEv+0x7c>)
 8004bba:	f7ff ff22 	bl	8004a02 <_ZN2FC6MsgBus10getBodyMagEPNS_7BodyMagE>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f083 0301 	eor.w	r3, r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d024      	beq.n	8004c14 <_ZN2FC10ModuleAHRS7oneStepEv+0x80>
	{
		MadgwickAHRSupdateIMU(bodyAngularVelocitySub.xyz[0],
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	edd3 7a08 	vldr	s15, [r3, #32]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	ed93 6a02 	vldr	s12, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	edd3 5a03 	vldr	s11, [r3, #12]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	ed93 5a04 	vldr	s10, [r3, #16]
 8004bee:	eef0 2a45 	vmov.f32	s5, s10
 8004bf2:	eeb0 2a65 	vmov.f32	s4, s11
 8004bf6:	eef0 1a46 	vmov.f32	s3, s12
 8004bfa:	eeb0 1a66 	vmov.f32	s2, s13
 8004bfe:	eef0 0a47 	vmov.f32	s1, s14
 8004c02:	eeb0 0a67 	vmov.f32	s0, s15
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f001 f89e 	bl	8005d48 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>
 8004c0c:	e02e      	b.n	8004c6c <_ZN2FC10ModuleAHRS7oneStepEv+0xd8>
 8004c0e:	bf00      	nop
 8004c10:	24000438 	.word	0x24000438
							  bodyAccelSub.xyz[1],
							  bodyAccelSub.xyz[2]);
	}
	/* mag data valid */
	else{
		MadgwickAHRSupdate(bodyAngularVelocitySub.xyz[0],
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	edd3 7a08 	vldr	s15, [r3, #32]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	ed93 6a02 	vldr	s12, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	edd3 5a03 	vldr	s11, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	ed93 5a04 	vldr	s10, [r3, #16]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	edd3 4a0e 	vldr	s9, [r3, #56]	; 0x38
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 8004c4a:	eeb0 3a64 	vmov.f32	s6, s9
 8004c4e:	eef0 2a45 	vmov.f32	s5, s10
 8004c52:	eeb0 2a65 	vmov.f32	s4, s11
 8004c56:	eef0 1a46 	vmov.f32	s3, s12
 8004c5a:	eeb0 1a66 	vmov.f32	s2, s13
 8004c5e:	eef0 0a47 	vmov.f32	s1, s14
 8004c62:	eeb0 0a67 	vmov.f32	s0, s15
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f956 	bl	8004f18 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>
						   bodyMagSub.xyz[2]);
	}

	/* calculate roll pitch yaw */
	float roll, pitch, yaw;
	roll = atan2(2.0f * (q0 * q1 + q2 * q3), q0 * q0- q1 * q1 - q2 * q2 + q3 * q3);		//roll
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c90:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004cc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce0:	eef0 0a67 	vmov.f32	s1, s15
 8004ce4:	eeb0 0a46 	vmov.f32	s0, s12
 8004ce8:	f7ff fe20 	bl	800492c <_ZSt5atan2ff>
 8004cec:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
	pitch = -asin(2.0f * (q1 * q3 - q0 * q2));												//pitch
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004d18:	eeb0 0a67 	vmov.f32	s0, s15
 8004d1c:	f7ff fdf6 	bl	800490c <_ZSt4asinf>
 8004d20:	eef0 7a40 	vmov.f32	s15, s0
 8004d24:	eef1 7a67 	vneg.f32	s15, s15
 8004d28:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	yaw = atan2(2.0f * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);		//yaw
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004d38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d50:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8004d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8004d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004da0:	eef0 0a67 	vmov.f32	s1, s15
 8004da4:	eeb0 0a46 	vmov.f32	s0, s12
 8004da8:	f7ff fdc0 	bl	800492c <_ZSt5atan2ff>
 8004dac:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74

	matrix::Quatf quat(q0, q1, q2, q3);		/* NED -> body quaternion */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 8004dc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004dcc:	eef0 1a46 	vmov.f32	s3, s12
 8004dd0:	eeb0 1a66 	vmov.f32	s2, s13
 8004dd4:	eef0 0a47 	vmov.f32	s1, s14
 8004dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 fb6a 	bl	80064b6 <_ZN6matrix10QuaternionIfEC1Effff>
	matrix::Dcmf dcm(quat.inversed());		/* body -> NED DCM */
 8004de2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004de6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004dea:	4611      	mov	r1, r2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f001 fb99 	bl	8006524 <_ZNK6matrix10QuaternionIfE8inversedEv>
 8004df2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 fc02 	bl	8006606 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>
	matrix::Vector3f tempBodyAccel(this->bodyAccelSub.xyz[0],
								   this->bodyAccelSub.xyz[1],
								   this->bodyAccelSub.xyz[2]);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	edd3 6a04 	vldr	s13, [r3, #16]
 8004e14:	f107 0318 	add.w	r3, r7, #24
 8004e18:	eeb0 1a66 	vmov.f32	s2, s13
 8004e1c:	eef0 0a47 	vmov.f32	s1, s14
 8004e20:	eeb0 0a67 	vmov.f32	s0, s15
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 fd37 	bl	8006898 <_ZN6matrix7Vector3IfEC1Efff>

	matrix::Vector3f tempNedAccel = dcm*tempBodyAccel;
 8004e2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004e2e:	f107 0218 	add.w	r2, r7, #24
 8004e32:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004e36:	4618      	mov	r0, r3
 8004e38:	f001 fd5b 	bl	80068f2 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>
 8004e3c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004e40:	f107 030c 	add.w	r3, r7, #12
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 fda4 	bl	8006994 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>

	attitudePub.timestamp = microsecond();
 8004e4c:	f7ff fe2a 	bl	8004aa4 <_ZL11microsecondv>
 8004e50:	4603      	mov	r3, r0
 8004e52:	460c      	mov	r4, r1
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	attitudePub.q[0] = this->q0;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	651a      	str	r2, [r3, #80]	; 0x50
	attitudePub.q[1] = this->q1;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
	attitudePub.q[2] = this->q2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	659a      	str	r2, [r3, #88]	; 0x58
	attitudePub.q[3] = this->q3;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	65da      	str	r2, [r3, #92]	; 0x5c
	attitudePub.roll = roll;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004e86:	661a      	str	r2, [r3, #96]	; 0x60
	attitudePub.pitch = pitch;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e8c:	665a      	str	r2, [r3, #100]	; 0x64
	attitudePub.yaw = yaw;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e92:	669a      	str	r2, [r3, #104]	; 0x68

	msgBus.setAttitude(attitudePub);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3348      	adds	r3, #72	; 0x48
 8004e98:	4619      	mov	r1, r3
 8004e9a:	481c      	ldr	r0, [pc, #112]	; (8004f0c <_ZN2FC10ModuleAHRS7oneStepEv+0x378>)
 8004e9c:	f7ff fdd5 	bl	8004a4a <_ZN2FC6MsgBus11setAttitudeERKNS_8AttitudeE>

	nedAccelPub.timestamp = microsecond();
 8004ea0:	f7ff fe00 	bl	8004aa4 <_ZL11microsecondv>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	nedAccelPub.xyz[0] = tempNedAccel(0);
 8004eae:	f107 030c 	add.w	r3, r7, #12
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f001 fd93 	bl	80069e0 <_ZN6matrix6VectorIfLj3EEclEj>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	679a      	str	r2, [r3, #120]	; 0x78
	nedAccelPub.xyz[1] = tempNedAccel(1);
 8004ec2:	f107 030c 	add.w	r3, r7, #12
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 fd89 	bl	80069e0 <_ZN6matrix6VectorIfLj3EEclEj>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	67da      	str	r2, [r3, #124]	; 0x7c
	nedAccelPub.xyz[2] = tempNedAccel(2);
 8004ed6:	f107 030c 	add.w	r3, r7, #12
 8004eda:	2102      	movs	r1, #2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 fd7f 	bl	80069e0 <_ZN6matrix6VectorIfLj3EEclEj>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	msgBus.setNedAccel(nedAccelPub);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3370      	adds	r3, #112	; 0x70
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4806      	ldr	r0, [pc, #24]	; (8004f0c <_ZN2FC10ModuleAHRS7oneStepEv+0x378>)
 8004ef4:	f7ff fdc0 	bl	8004a78 <_ZN2FC6MsgBus11setNedAccelERKNS_8NedAccelE>

	/* Freq class variable */
	freqCnt++;
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <_ZN2FC10ModuleAHRS7oneStepEv+0x37c>)
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	3301      	adds	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	4b03      	ldr	r3, [pc, #12]	; (8004f10 <_ZN2FC10ModuleAHRS7oneStepEv+0x37c>)
 8004f02:	801a      	strh	r2, [r3, #0]
}
 8004f04:	bf00      	nop
 8004f06:	3784      	adds	r7, #132	; 0x84
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd90      	pop	{r4, r7, pc}
 8004f0c:	24000438 	.word	0x24000438
 8004f10:	2400036c 	.word	0x2400036c
 8004f14:	00000000 	.word	0x00000000

08004f18 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff>:

void ModuleAHRS::MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz){
 8004f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f1a:	b0af      	sub	sp, #188	; 0xbc
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6278      	str	r0, [r7, #36]	; 0x24
 8004f20:	ed87 0a08 	vstr	s0, [r7, #32]
 8004f24:	edc7 0a07 	vstr	s1, [r7, #28]
 8004f28:	ed87 1a06 	vstr	s2, [r7, #24]
 8004f2c:	edc7 1a05 	vstr	s3, [r7, #20]
 8004f30:	ed87 2a04 	vstr	s4, [r7, #16]
 8004f34:	edc7 2a03 	vstr	s5, [r7, #12]
 8004f38:	ed87 3a02 	vstr	s6, [r7, #8]
 8004f3c:	edc7 3a01 	vstr	s7, [r7, #4]
 8004f40:	ed87 4a00 	vstr	s8, [r7]
//		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
//		return;
//	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8004f4a:	eeb1 7a67 	vneg.f32	s14, s15
 8004f4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8004f5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8004f6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f82:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8004f8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8004f9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8004fac:	edd7 7a07 	vldr	s15, [r7, #28]
 8004fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fc0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8004fca:	edd7 7a07 	vldr	s15, [r7, #28]
 8004fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8004fd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8004fdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fe0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8004fea:	edd7 7a08 	vldr	s15, [r7, #32]
 8004fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ff6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ffe:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005008:	edd7 7a06 	vldr	s15, [r7, #24]
 800500c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005016:	edd7 7a07 	vldr	s15, [r7, #28]
 800501a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800501e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005028:	edd7 7a08 	vldr	s15, [r7, #32]
 800502c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005034:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800503c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8005040:	ed97 7a05 	vldr	s14, [r7, #20]
 8005044:	edd7 7a05 	vldr	s15, [r7, #20]
 8005048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800504c:	edd7 6a04 	vldr	s13, [r7, #16]
 8005050:	edd7 7a04 	vldr	s15, [r7, #16]
 8005054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800505c:	edd7 6a03 	vldr	s13, [r7, #12]
 8005060:	edd7 7a03 	vldr	s15, [r7, #12]
 8005064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800506c:	eeb0 0a67 	vmov.f32	s0, s15
 8005070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005072:	f001 f9c3 	bl	80063fc <_ZN2FC10ModuleAHRS7invSqrtEf>
 8005076:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	ax *= recipNorm;
 800507a:	ed97 7a05 	vldr	s14, [r7, #20]
 800507e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005086:	edc7 7a05 	vstr	s15, [r7, #20]
	ay *= recipNorm;
 800508a:	ed97 7a04 	vldr	s14, [r7, #16]
 800508e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005096:	edc7 7a04 	vstr	s15, [r7, #16]
	az *= recipNorm;
 800509a:	ed97 7a03 	vldr	s14, [r7, #12]
 800509e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80050a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a6:	edc7 7a03 	vstr	s15, [r7, #12]

	// Normalise magnetometer measurement
	recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80050aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80050ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80050b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80050ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80050be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050c6:	edd7 6a00 	vldr	s13, [r7]
 80050ca:	edd7 7a00 	vldr	s15, [r7]
 80050ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050d6:	eeb0 0a67 	vmov.f32	s0, s15
 80050da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050dc:	f001 f98e 	bl	80063fc <_ZN2FC10ModuleAHRS7invSqrtEf>
 80050e0:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	mx *= recipNorm;
 80050e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80050e8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80050ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f0:	edc7 7a02 	vstr	s15, [r7, #8]
	my *= recipNorm;
 80050f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80050f8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80050fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005100:	edc7 7a01 	vstr	s15, [r7, #4]
	mz *= recipNorm;
 8005104:	ed97 7a00 	vldr	s14, [r7]
 8005108:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800510c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005110:	edc7 7a00 	vstr	s15, [r7]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0mx = 2.0f * q0 * mx;
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 800511a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800511e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005126:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	_2q0my = 2.0f * q0 * my;
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005130:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005134:	ed97 7a01 	vldr	s14, [r7, #4]
 8005138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	_2q0mz = 2.0f * q0 * mz;
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005146:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800514a:	ed97 7a00 	vldr	s14, [r7]
 800514e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005152:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	_2q1mx = 2.0f * q1 * mx;
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800515c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005160:	ed97 7a02 	vldr	s14, [r7, #8]
 8005164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005168:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	_2q0 = 2.0f * q0;
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005172:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005176:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	_2q1 = 2.0f * q1;
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005180:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005184:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	_2q2 = 2.0f * q2;
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800518e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005192:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	_2q3 = 2.0f * q3;
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800519c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051a0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	_2q0q2 = 2.0f * q0 * q2;
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80051aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80051b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	_2q2q3 = 2.0f * q2 * q3;
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80051c2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80051cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d0:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	q0q0 = q0 * q0;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80051e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	q0q1 = q0 * q1;
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80051f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	q0q2 = q0 * q2;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	q0q3 = q0 * q3;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800521c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005220:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	q1q1 = q1 * q1;
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005234:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	q1q2 = q1 * q2;
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005248:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	q1q3 = q1 * q3;
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	q2q2 = q2 * q2;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800526c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005270:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	q2q3 = q2 * q3;
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005284:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	q3q3 = q3 * q3;
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005298:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	// Reference direction of Earth's magnetic field
	hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800529c:	ed97 7a02 	vldr	s14, [r7, #8]
 80052a0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80052a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 80052ae:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80052b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80052c0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80052c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052cc:	edd7 6a02 	vldr	s13, [r7, #8]
 80052d0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80052d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052dc:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80052e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80052e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80052ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052f6:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80052fa:	edd7 7a00 	vldr	s15, [r7]
 80052fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800530c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005310:	edd7 6a02 	vldr	s13, [r7, #8]
 8005314:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800531c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005320:	edd7 6a02 	vldr	s13, [r7, #8]
 8005324:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800532c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005330:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800533a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800533e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005342:	edd7 6a01 	vldr	s13, [r7, #4]
 8005346:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800534a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800534e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005358:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800535c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005360:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 800536a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800536e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005372:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005376:	edd7 6a01 	vldr	s13, [r7, #4]
 800537a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800537e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005382:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005386:	edd7 6a01 	vldr	s13, [r7, #4]
 800538a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800538e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005396:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800539a:	edd7 7a00 	vldr	s15, [r7]
 800539e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80053a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053b0:	edd7 6a01 	vldr	s13, [r7, #4]
 80053b4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80053b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053c0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_2bx = sqrt(hx * hx + hy * hy);
 80053c4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80053c8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80053cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053d0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80053d4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80053d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053e0:	eeb0 0a67 	vmov.f32	s0, s15
 80053e4:	f7ff fab6 	bl	8004954 <_ZSt4sqrtf>
 80053e8:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80053ec:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053f0:	eeb1 7a67 	vneg.f32	s14, s15
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80053fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005404:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800540c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005410:	edd7 6a00 	vldr	s13, [r7]
 8005414:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800541c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005426:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800542a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800542e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005432:	edd7 6a00 	vldr	s13, [r7]
 8005436:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800543a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800543e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005442:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8005446:	edd7 7a01 	vldr	s15, [r7, #4]
 800544a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800545c:	edd7 6a00 	vldr	s13, [r7]
 8005460:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005468:	ee37 7a67 	vsub.f32	s14, s14, s15
 800546c:	edd7 6a00 	vldr	s13, [r7]
 8005470:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800547c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	_4bx = 2.0f * _2bx;
 8005480:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005484:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005488:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	_4bz = 2.0f * _2bz;
 800548c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005490:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005494:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	// Gradient decent algorithm corrective step
	s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8005498:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800549c:	eeb1 7a67 	vneg.f32	s14, s15
 80054a0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80054a4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80054a8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80054ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80054b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80054b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80054b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054bc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80054c0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80054c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80054c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80054cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80054d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80054d4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80054d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80054e6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80054ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80054ee:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80054f2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80054f6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80054fa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80054fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005502:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005506:	ee26 6a27 	vmul.f32	s12, s12, s15
 800550a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800550e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005512:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005516:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800551a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800551e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005522:	edd7 7a02 	vldr	s15, [r7, #8]
 8005526:	ee76 7a67 	vsub.f32	s15, s12, s15
 800552a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800552e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005532:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005536:	eef1 6a67 	vneg.f32	s13, s15
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005540:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 800554a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800554e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005552:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005556:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800555a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800555e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005562:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005566:	ee26 6a27 	vmul.f32	s12, s12, s15
 800556a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800556e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005572:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005576:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800557a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800557e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005582:	edd7 7a01 	vldr	s15, [r7, #4]
 8005586:	ee76 7a67 	vsub.f32	s15, s12, s15
 800558a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800558e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005598:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800559c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80055a0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80055a4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80055a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80055ac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80055b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80055b4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80055b8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80055bc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80055c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80055c4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80055c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80055cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80055d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80055d4:	edd7 7a00 	vldr	s15, [r7]
 80055d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80055dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055e4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80055e8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80055ec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80055f0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80055f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80055fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005600:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005608:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800560c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005610:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005614:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005618:	edd7 7a04 	vldr	s15, [r7, #16]
 800561c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005620:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005632:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005636:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800563a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800563e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005642:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005646:	ee36 6a67 	vsub.f32	s12, s12, s15
 800564a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800564e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005652:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005656:	edd7 7a03 	vldr	s15, [r7, #12]
 800565a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800565e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005662:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800566c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005670:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005674:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005678:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800567c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005680:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005684:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005688:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800568c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005690:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005694:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005698:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800569c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80056a0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80056a4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80056a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80056ac:	ee76 7a67 	vsub.f32	s15, s12, s15
 80056b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 80056be:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80056c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 80056cc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80056d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80056d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80056d8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80056dc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80056e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80056e4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80056e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80056ec:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80056f0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80056f4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80056f8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80056fc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005700:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005704:	edd7 7a01 	vldr	s15, [r7, #4]
 8005708:	ee76 7a67 	vsub.f32	s15, s12, s15
 800570c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005710:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800571a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800571e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 8005728:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800572c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005730:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005734:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005738:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800573c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005740:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005744:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005748:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800574c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005750:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005754:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005758:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800575c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005760:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005764:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005768:	edd7 7a00 	vldr	s15, [r7]
 800576c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005778:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800577c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005780:	eeb1 7a67 	vneg.f32	s14, s15
 8005784:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005788:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800578c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005790:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005794:	edd7 7a05 	vldr	s15, [r7, #20]
 8005798:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800579c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057a0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80057a4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80057a8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80057ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80057b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80057b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80057b8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80057bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80057ca:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80057ce:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80057d2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80057d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80057da:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80057de:	ee36 6a67 	vsub.f32	s12, s12, s15
 80057e2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80057e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80057ea:	ee36 6a67 	vsub.f32	s12, s12, s15
 80057ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80057f2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80057f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80057fe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005802:	eef1 6a67 	vneg.f32	s13, s15
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800580c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 8005816:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800581a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800581e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005822:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005826:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800582a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800582e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005832:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005836:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800583a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800583e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8005842:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005846:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800584a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800584e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005852:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005856:	edd7 7a02 	vldr	s15, [r7, #8]
 800585a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800585e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005862:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800586c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005870:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 800587a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800587e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005882:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005886:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800588a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800588e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005892:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005896:	ee26 6a27 	vmul.f32	s12, s12, s15
 800589a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800589e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80058a2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80058a6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80058aa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80058ae:	ee36 6a27 	vadd.f32	s12, s12, s15
 80058b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80058b6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80058ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 80058c8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80058cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 80058d6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80058da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80058de:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80058e2:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80058e6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80058ea:	ee36 6a27 	vadd.f32	s12, s12, s15
 80058ee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80058f2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80058f6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80058fa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80058fe:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005902:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005906:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800590a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800590e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005912:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005916:	edd7 7a00 	vldr	s15, [r7]
 800591a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800591e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005926:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800592a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800592e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005932:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005936:	ee37 7a67 	vsub.f32	s14, s14, s15
 800593a:	edd7 7a05 	vldr	s15, [r7, #20]
 800593e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005942:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005946:	ee27 7a27 	vmul.f32	s14, s14, s15
 800594a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800594e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005952:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005956:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800595a:	edd7 7a04 	vldr	s15, [r7, #16]
 800595e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005962:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800596a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800596e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005972:	eef1 6a67 	vneg.f32	s13, s15
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800597c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 8005986:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800598a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800598e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005992:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005996:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800599a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800599e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80059a2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80059a6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80059aa:	ee26 6a27 	vmul.f32	s12, s12, s15
 80059ae:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80059b2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80059b6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80059ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80059be:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80059c2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80059c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80059ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 80059ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059d6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80059da:	eef1 6a67 	vneg.f32	s13, s15
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80059e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 80059ee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80059f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80059f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80059fa:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80059fe:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005a02:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005a06:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005a0a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005a0e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8005a12:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005a16:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005a1a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005a1e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005a22:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005a26:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a2a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005a2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005a3c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005a40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005a44:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8005a48:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a4c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005a50:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005a54:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005a58:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005a5c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8005a60:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005a64:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005a68:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005a6c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005a70:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005a74:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005a78:	edd7 7a00 	vldr	s15, [r7]
 8005a7c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a88:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8005a8c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005a90:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a98:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005a9c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005aa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005aa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005aa8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005aac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005ab0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ab8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005abc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005ac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8005acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ace:	f000 fc95 	bl	80063fc <_ZN2FC10ModuleAHRS7invSqrtEf>
 8005ad2:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	s0 *= recipNorm;
 8005ad6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005ada:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	s1 *= recipNorm;
 8005ae6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005aea:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s2 *= recipNorm;
 8005af6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005afa:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b02:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s3 *= recipNorm;
 8005b06:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005b0a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b12:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	// Apply feedback step
	qDot1 -= beta * s0;
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005b1c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b24:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b2c:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 -= beta * s1;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005b36:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b46:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 -= beta * s2;
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005b50:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b58:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b60:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 -= beta * s3;
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8005b6a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b72:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8005b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b7a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8


	float dt = (microsecond() - this->lastUpdate)*1000000;	/*[second]*/
 8005b7e:	f7fe ff91 	bl	8004aa4 <_ZL11microsecondv>
 8005b82:	460a      	mov	r2, r1
 8005b84:	4601      	mov	r1, r0
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8005b8c:	1ac9      	subs	r1, r1, r3
 8005b8e:	eb62 0204 	sbc.w	r2, r2, r4
 8005b92:	460d      	mov	r5, r1
 8005b94:	4616      	mov	r6, r2
 8005b96:	462b      	mov	r3, r5
 8005b98:	4634      	mov	r4, r6
 8005b9a:	f04f 0100 	mov.w	r1, #0
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	0162      	lsls	r2, r4, #5
 8005ba4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005ba8:	0159      	lsls	r1, r3, #5
 8005baa:	460b      	mov	r3, r1
 8005bac:	4614      	mov	r4, r2
 8005bae:	1b5b      	subs	r3, r3, r5
 8005bb0:	eb64 0406 	sbc.w	r4, r4, r6
 8005bb4:	f04f 0100 	mov.w	r1, #0
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	0262      	lsls	r2, r4, #9
 8005bbe:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005bc2:	0259      	lsls	r1, r3, #9
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4614      	mov	r4, r2
 8005bc8:	195b      	adds	r3, r3, r5
 8005bca:	eb44 0406 	adc.w	r4, r4, r6
 8005bce:	f04f 0100 	mov.w	r1, #0
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	01a2      	lsls	r2, r4, #6
 8005bd8:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8005bdc:	0199      	lsls	r1, r3, #6
 8005bde:	1ac9      	subs	r1, r1, r3
 8005be0:	eb62 0204 	sbc.w	r2, r2, r4
 8005be4:	194b      	adds	r3, r1, r5
 8005be6:	eb42 0406 	adc.w	r4, r2, r6
 8005bea:	4618      	mov	r0, r3
 8005bec:	4621      	mov	r1, r4
 8005bee:	f7fa fc8f 	bl	8000510 <__aeabi_ul2f>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	62bb      	str	r3, [r7, #40]	; 0x28
	if(dt > 0.01) dt = 0.01;								/* saturation */
 8005bf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005bfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005bfe:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8005d38 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe20>
 8005c02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0a:	dd01      	ble.n	8005c10 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xcf8>
 8005c0c:	4b4c      	ldr	r3, [pc, #304]	; (8005d40 <_ZN2FC10ModuleAHRS18MadgwickAHRSupdateEfffffffff+0xe28>)
 8005c0e:	62bb      	str	r3, [r7, #40]	; 0x28
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005c16:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005c1a:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005c32:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005c36:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8005c4e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005c52:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8005c6a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005c6e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005cc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8005cd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cd2:	f000 fb93 	bl	80063fc <_ZN2FC10ModuleAHRS7invSqrtEf>
 8005cd6:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005ce0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005cf4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8005d08:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8005d1c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
}
 8005d2a:	bf00      	nop
 8005d2c:	37bc      	adds	r7, #188	; 0xbc
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d32:	bf00      	nop
 8005d34:	f3af 8000 	nop.w
 8005d38:	47ae147b 	.word	0x47ae147b
 8005d3c:	3f847ae1 	.word	0x3f847ae1
 8005d40:	3c23d70a 	.word	0x3c23d70a
 8005d44:	00000000 	.word	0x00000000

08005d48 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff>:

void ModuleAHRS::MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8005d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d4a:	b0a1      	sub	sp, #132	; 0x84
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	61f8      	str	r0, [r7, #28]
 8005d50:	ed87 0a06 	vstr	s0, [r7, #24]
 8005d54:	edc7 0a05 	vstr	s1, [r7, #20]
 8005d58:	ed87 1a04 	vstr	s2, [r7, #16]
 8005d5c:	edc7 1a03 	vstr	s3, [r7, #12]
 8005d60:	ed87 2a02 	vstr	s4, [r7, #8]
 8005d64:	edc7 2a01 	vstr	s5, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005d6e:	eeb1 7a67 	vneg.f32	s14, s15
 8005d72:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005d80:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005d92:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005da6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005db0:	edd7 7a06 	vldr	s15, [r7, #24]
 8005db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005dbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8005dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005dd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8005dd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ddc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005de4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8005df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005dfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8005e0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e22:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005e2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8005e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8005e4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e60:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	// Normalise accelerometer measurement
	recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8005e64:	ed97 7a03 	vldr	s14, [r7, #12]
 8005e68:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e70:	edd7 6a02 	vldr	s13, [r7, #8]
 8005e74:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e80:	edd7 6a01 	vldr	s13, [r7, #4]
 8005e84:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e90:	eeb0 0a67 	vmov.f32	s0, s15
 8005e94:	69f8      	ldr	r0, [r7, #28]
 8005e96:	f000 fab1 	bl	80063fc <_ZN2FC10ModuleAHRS7invSqrtEf>
 8005e9a:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	ax *= recipNorm;
 8005e9e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005ea2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eaa:	edc7 7a03 	vstr	s15, [r7, #12]
	ay *= recipNorm;
 8005eae:	ed97 7a02 	vldr	s14, [r7, #8]
 8005eb2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eba:	edc7 7a02 	vstr	s15, [r7, #8]
	az *= recipNorm;
 8005ebe:	ed97 7a01 	vldr	s14, [r7, #4]
 8005ec2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eca:	edc7 7a01 	vstr	s15, [r7, #4]

	// Auxiliary variables to avoid repeated arithmetic
	_2q0 = 2.0f * q0;
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005ed4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ed8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	_2q1 = 2.0f * q1;
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005ee2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ee6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	_2q2 = 2.0f * q2;
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005ef0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ef4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	_2q3 = 2.0f * q3;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005efe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f02:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	_4q0 = 4.0f * q0;
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005f0c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005f10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f14:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	_4q1 = 4.0f * q1;
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005f1e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f26:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	_4q2 = 4.0f * q2;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005f30:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f38:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	_8q1 = 8.0f * q1;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005f42:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f4a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	_8q2 = 8.0f * q2;
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005f54:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f5c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	q0q0 = q0 * q0;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8005f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f70:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	q1q1 = q1 * q1;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8005f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f84:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	q2q2 = q2 * q2;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8005f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f98:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	q3q3 = q3 * q3;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8005fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fac:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	// Gradient decent algorithm corrective step
	s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8005fb0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005fb4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fbc:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8005fc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fcc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005fd0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fdc:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8005fe0:	edd7 7a02 	vldr	s15, [r7, #8]
 8005fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fec:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8005ff0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005ff4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ffc:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8006000:	edd7 7a03 	vldr	s15, [r7, #12]
 8006004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006008:	ee37 7a67 	vsub.f32	s14, s14, s15
 800600c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006010:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006014:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800601e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006022:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006026:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800602a:	edd7 7a02 	vldr	s15, [r7, #8]
 800602e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006032:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006036:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800603a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800603e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8006042:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006046:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800604a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800604e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8006052:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800605a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800605e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8006062:	edd7 7a01 	vldr	s15, [r7, #4]
 8006066:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800606a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800606e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8006072:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006076:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800607a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8006084:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006088:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800608c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006094:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006098:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800609c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80060a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060a8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80060ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80060b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060b8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80060bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060c0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80060c4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80060c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060d0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80060d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80060d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060e0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80060e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80060e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060f0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80060f4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80060f8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80060fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800610a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800610e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006116:	ee37 7a67 	vsub.f32	s14, s14, s15
 800611a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800611e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8006122:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 800612c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006130:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006134:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8006138:	edd7 7a02 	vldr	s15, [r7, #8]
 800613c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006144:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8006148:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800614c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006154:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8006158:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800615c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006160:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006164:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006168:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800616c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006170:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006174:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8006178:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800617c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006184:	eeb0 0a67 	vmov.f32	s0, s15
 8006188:	69f8      	ldr	r0, [r7, #28]
 800618a:	f000 f937 	bl	80063fc <_ZN2FC10ModuleAHRS7invSqrtEf>
 800618e:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	s0 *= recipNorm;
 8006192:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006196:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800619a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	s1 *= recipNorm;
 80061a2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80061a6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80061aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ae:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	s2 *= recipNorm;
 80061b2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80061b6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80061ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	s3 *= recipNorm;
 80061c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80061c6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80061ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	// Apply feedback step
	qDot1 -= beta * s0;
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80061d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80061dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e0:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80061e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061e8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	qDot2 -= beta * s1;
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80061f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80061f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061fa:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80061fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006202:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	qDot3 -= beta * s2;
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800620c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006214:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8006218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800621c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot4 -= beta * s3;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8006226:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800622a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8006232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006236:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70

	float dt = (microsecond() - this->lastUpdate)*1000000;			/*[second]*/
 800623a:	f7fe fc33 	bl	8004aa4 <_ZL11microsecondv>
 800623e:	460a      	mov	r2, r1
 8006240:	4601      	mov	r1, r0
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8006248:	1ac9      	subs	r1, r1, r3
 800624a:	eb62 0204 	sbc.w	r2, r2, r4
 800624e:	460d      	mov	r5, r1
 8006250:	4616      	mov	r6, r2
 8006252:	462b      	mov	r3, r5
 8006254:	4634      	mov	r4, r6
 8006256:	f04f 0100 	mov.w	r1, #0
 800625a:	f04f 0200 	mov.w	r2, #0
 800625e:	0162      	lsls	r2, r4, #5
 8006260:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006264:	0159      	lsls	r1, r3, #5
 8006266:	460b      	mov	r3, r1
 8006268:	4614      	mov	r4, r2
 800626a:	1b5b      	subs	r3, r3, r5
 800626c:	eb64 0406 	sbc.w	r4, r4, r6
 8006270:	f04f 0100 	mov.w	r1, #0
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	0262      	lsls	r2, r4, #9
 800627a:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800627e:	0259      	lsls	r1, r3, #9
 8006280:	460b      	mov	r3, r1
 8006282:	4614      	mov	r4, r2
 8006284:	195b      	adds	r3, r3, r5
 8006286:	eb44 0406 	adc.w	r4, r4, r6
 800628a:	f04f 0100 	mov.w	r1, #0
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	01a2      	lsls	r2, r4, #6
 8006294:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8006298:	0199      	lsls	r1, r3, #6
 800629a:	1ac9      	subs	r1, r1, r3
 800629c:	eb62 0204 	sbc.w	r2, r2, r4
 80062a0:	194b      	adds	r3, r1, r5
 80062a2:	eb42 0406 	adc.w	r4, r2, r6
 80062a6:	4618      	mov	r0, r3
 80062a8:	4621      	mov	r1, r4
 80062aa:	f7fa f931 	bl	8000510 <__aeabi_ul2f>
 80062ae:	4603      	mov	r3, r0
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24
	if(dt > 0.01) dt = 0.01;
 80062b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80062b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80062ba:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80063f0 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x6a8>
 80062be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80062c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c6:	dd01      	ble.n	80062cc <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x584>
 80062c8:	4b4b      	ldr	r3, [pc, #300]	; (80063f8 <_ZN2FC10ModuleAHRS21MadgwickAHRSupdateIMUEffffff+0x6b0>)
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (dt);
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80062d2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80062d6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80062da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 += qDot2 * (dt);
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80062ee:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80062f2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80062f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 += qDot3 * (dt);
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 800630a:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800630e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 += qDot4 * (dt);
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8006326:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800632a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800632e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8006348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8006358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800635c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	edd3 6a27 	vldr	s13, [r3, #156]	; 0x9c
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800636c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8006380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006388:	eeb0 0a67 	vmov.f32	s0, s15
 800638c:	69f8      	ldr	r0, [r7, #28]
 800638e:	f000 f835 	bl	80063fc <_ZN2FC10ModuleAHRS7invSqrtEf>
 8006392:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	q0 *= recipNorm;
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800639c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80063a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	q1 *= recipNorm;
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 80063b0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80063b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
	q2 *= recipNorm;
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80063c4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80063c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	q3 *= recipNorm;
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80063d8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80063dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
}
 80063e6:	bf00      	nop
 80063e8:	3784      	adds	r7, #132	; 0x84
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ee:	bf00      	nop
 80063f0:	47ae147b 	.word	0x47ae147b
 80063f4:	3f847ae1 	.word	0x3f847ae1
 80063f8:	3c23d70a 	.word	0x3c23d70a

080063fc <_ZN2FC10ModuleAHRS7invSqrtEf>:

float ModuleAHRS::invSqrt(float x){
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	ed87 0a00 	vstr	s0, [r7]
	float halfx = 0.5f * x;
 8006408:	edd7 7a00 	vldr	s15, [r7]
 800640c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006414:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800641c:	f107 0310 	add.w	r3, r7, #16
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	105a      	asrs	r2, r3, #1
 8006428:	4b12      	ldr	r3, [pc, #72]	; (8006474 <_ZN2FC10ModuleAHRS7invSqrtEf+0x78>)
 800642a:	1a9b      	subs	r3, r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800642e:	f107 030c 	add.w	r3, r7, #12
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8006436:	ed97 7a04 	vldr	s14, [r7, #16]
 800643a:	edd7 7a05 	vldr	s15, [r7, #20]
 800643e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006442:	edd7 7a04 	vldr	s15, [r7, #16]
 8006446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800644a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800644e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006452:	edd7 7a04 	vldr	s15, [r7, #16]
 8006456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645a:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	ee07 3a90 	vmov	s15, r3
}
 8006464:	eeb0 0a67 	vmov.f32	s0, s15
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	5f3759df 	.word	0x5f3759df

08006478 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>:
                _data[i][j] = Type{};
            }
        }
    }
#else
    Matrix() = default;
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	461a      	mov	r2, r3
 8006484:	2300      	movs	r3, #0
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	6053      	str	r3, [r2, #4]
 800648a:	6093      	str	r3, [r2, #8]
 800648c:	60d3      	str	r3, [r2, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4618      	mov	r0, r3
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <_ZN6matrix6VectorIfLj4EEC1Ev>:
class Vector : public Matrix<Type, M, 1>
{
public:
    typedef Matrix<Type, M, 1> MatrixM1;

    Vector() = default;
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff ffe6 	bl	8006478 <_ZN6matrix6MatrixIfLj4ELj1EEC1Ev>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <_ZN6matrix10QuaternionIfEC1Effff>:
     * @param a set quaternion value 0
     * @param b set quaternion value 1
     * @param c set quaternion value 2
     * @param d set quaternion value 3
     */
    Quaternion(Type a, Type b, Type c, Type d)
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b088      	sub	sp, #32
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6178      	str	r0, [r7, #20]
 80064be:	ed87 0a04 	vstr	s0, [r7, #16]
 80064c2:	edc7 0a03 	vstr	s1, [r7, #12]
 80064c6:	ed87 1a02 	vstr	s2, [r7, #8]
 80064ca:	edc7 1a01 	vstr	s3, [r7, #4]
    {
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7ff ffe3 	bl	800649c <_ZN6matrix6VectorIfLj4EEC1Ev>
        Quaternion &q = *this;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	61fb      	str	r3, [r7, #28]
        q(0) = a;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fa9e 	bl	8006a20 <_ZN6matrix6VectorIfLj4EEclEj>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	6013      	str	r3, [r2, #0]
        q(1) = b;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	2101      	movs	r1, #1
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fa96 	bl	8006a20 <_ZN6matrix6VectorIfLj4EEclEj>
 80064f4:	4602      	mov	r2, r0
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6013      	str	r3, [r2, #0]
        q(2) = c;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	2102      	movs	r1, #2
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fa8e 	bl	8006a20 <_ZN6matrix6VectorIfLj4EEclEj>
 8006504:	4602      	mov	r2, r0
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6013      	str	r3, [r2, #0]
        q(3) = d;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	2103      	movs	r1, #3
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fa86 	bl	8006a20 <_ZN6matrix6VectorIfLj4EEclEj>
 8006514:	4602      	mov	r2, r0
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6013      	str	r3, [r2, #0]
    }
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	4618      	mov	r0, r3
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <_ZNK6matrix10QuaternionIfE8inversedEv>:
    /**
     * Invert quaternion
     *
     * @return inverted quaternion
     */
    Quaternion inversed() const
 8006524:	b580      	push	{r7, lr}
 8006526:	ed2d 8b04 	vpush	{d8-d9}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
    {
        const Quaternion &q = *this;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	60fb      	str	r3, [r7, #12]
        Type normSq = q.dot(q);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4611      	mov	r1, r2
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fa8f 	bl	8006a60 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE>
 8006542:	ed87 0a02 	vstr	s0, [r7, #8]
        return Quaternion(
                   q(0)/normSq,
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2100      	movs	r1, #0
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fabc 	bl	8006ac8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006550:	eeb0 7a40 	vmov.f32	s14, s0
                   -q(1)/normSq,
                   -q(2)/normSq,
                   -q(3)/normSq);
 8006554:	edd7 7a02 	vldr	s15, [r7, #8]
 8006558:	ee87 8a27 	vdiv.f32	s16, s14, s15
                   -q(1)/normSq,
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2101      	movs	r1, #1
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fab1 	bl	8006ac8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006566:	eef0 7a40 	vmov.f32	s15, s0
                   -q(3)/normSq);
 800656a:	eeb1 7a67 	vneg.f32	s14, s15
 800656e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006572:	eec7 8a27 	vdiv.f32	s17, s14, s15
                   -q(2)/normSq,
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2102      	movs	r1, #2
 800657a:	4618      	mov	r0, r3
 800657c:	f000 faa4 	bl	8006ac8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006580:	eef0 7a40 	vmov.f32	s15, s0
                   -q(3)/normSq);
 8006584:	eeb1 7a67 	vneg.f32	s14, s15
 8006588:	edd7 7a02 	vldr	s15, [r7, #8]
 800658c:	ee87 9a27 	vdiv.f32	s18, s14, s15
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2103      	movs	r1, #3
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fa97 	bl	8006ac8 <_ZNK6matrix6VectorIfLj4EEclEj>
 800659a:	eef0 7a40 	vmov.f32	s15, s0
 800659e:	eeb1 7a67 	vneg.f32	s14, s15
 80065a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80065a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80065aa:	eef0 1a66 	vmov.f32	s3, s13
 80065ae:	eeb0 1a49 	vmov.f32	s2, s18
 80065b2:	eef0 0a68 	vmov.f32	s1, s17
 80065b6:	eeb0 0a48 	vmov.f32	s0, s16
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff ff7b 	bl	80064b6 <_ZN6matrix10QuaternionIfEC1Effff>
    }
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	ecbd 8b04 	vpop	{d8-d9}
 80065ca:	bd80      	pop	{r7, pc}

080065cc <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>:
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4618      	mov	r0, r3
 80065d8:	2324      	movs	r3, #36	; 0x24
 80065da:	461a      	mov	r2, r3
 80065dc:	2100      	movs	r1, #0
 80065de:	f01b fdd8 	bl	8022192 <memset>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>:

template <typename Type, size_t  M>
class SquareMatrix : public Matrix<Type, M, M>
{
public:
    SquareMatrix() = default;
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff ffe8 	bl	80065cc <_ZN6matrix6MatrixIfLj3ELj3EEC1Ev>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <_ZN6matrix3DcmIfEC1ERKNS_10QuaternionIfEE>:
     * Instance is initialized from quaternion representing
     * coordinate transformation from frame 2 to frame 1.
     *
     * @param q quaternion to set dcm to
     */
    Dcm(const Quaternion<Type> &q)
 8006606:	b580      	push	{r7, lr}
 8006608:	ed2d 8b02 	vpush	{d8}
 800660c:	b092      	sub	sp, #72	; 0x48
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
    {
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4618      	mov	r0, r3
 8006618:	f7ff ffe8 	bl	80065ec <_ZN6matrix12SquareMatrixIfLj3EEC1Ev>
        Dcm &dcm = *this;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	647b      	str	r3, [r7, #68]	; 0x44
        const Type a = q(0);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2100      	movs	r1, #0
 8006624:	4618      	mov	r0, r3
 8006626:	f000 fa4f 	bl	8006ac8 <_ZNK6matrix6VectorIfLj4EEclEj>
 800662a:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        const Type b = q(1);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2101      	movs	r1, #1
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fa48 	bl	8006ac8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006638:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
        const Type c = q(2);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2102      	movs	r1, #2
 8006640:	4618      	mov	r0, r3
 8006642:	f000 fa41 	bl	8006ac8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006646:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
        const Type d = q(3);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2103      	movs	r1, #3
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fa3a 	bl	8006ac8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006654:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
        const Type aa = a * a;
 8006658:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800665c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006664:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        const Type ab = a * b;
 8006668:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800666c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006674:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        const Type ac = a * c;
 8006678:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800667c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006684:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        const Type ad = a * d;
 8006688:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800668c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006694:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        const Type bb = b * b;
 8006698:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800669c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80066a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a4:	edc7 7a08 	vstr	s15, [r7, #32]
        const Type bc = b * c;
 80066a8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80066ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80066b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b4:	edc7 7a07 	vstr	s15, [r7, #28]
        const Type bd = b * d;
 80066b8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80066bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80066c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c4:	edc7 7a06 	vstr	s15, [r7, #24]
        const Type cc = c * c;
 80066c8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80066cc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80066d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d4:	edc7 7a05 	vstr	s15, [r7, #20]
        const Type cd = c * d;
 80066d8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80066dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80066e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e4:	edc7 7a04 	vstr	s15, [r7, #16]
        const Type dd = d * d;
 80066e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80066ec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80066f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f4:	edc7 7a03 	vstr	s15, [r7, #12]
        dcm(0, 0) = aa + bb - cc - dd;
 80066f8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80066fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8006700:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006704:	edd7 7a05 	vldr	s15, [r7, #20]
 8006708:	ee37 8a67 	vsub.f32	s16, s14, s15
 800670c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800670e:	2200      	movs	r2, #0
 8006710:	2100      	movs	r1, #0
 8006712:	4618      	mov	r0, r3
 8006714:	f000 f9fa 	bl	8006b0c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006718:	4603      	mov	r3, r0
 800671a:	edd7 7a03 	vldr	s15, [r7, #12]
 800671e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8006722:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 1) = Type(2) * (bc - ad);
 8006726:	ed97 7a07 	vldr	s14, [r7, #28]
 800672a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800672e:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006734:	2201      	movs	r2, #1
 8006736:	2100      	movs	r1, #0
 8006738:	4618      	mov	r0, r3
 800673a:	f000 f9e7 	bl	8006b0c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 800673e:	4603      	mov	r3, r0
 8006740:	ee78 7a08 	vadd.f32	s15, s16, s16
 8006744:	edc3 7a00 	vstr	s15, [r3]
        dcm(0, 2) = Type(2) * (ac + bd);
 8006748:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800674c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006750:	ee37 8a27 	vadd.f32	s16, s14, s15
 8006754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006756:	2202      	movs	r2, #2
 8006758:	2100      	movs	r1, #0
 800675a:	4618      	mov	r0, r3
 800675c:	f000 f9d6 	bl	8006b0c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006760:	4603      	mov	r3, r0
 8006762:	ee78 7a08 	vadd.f32	s15, s16, s16
 8006766:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 0) = Type(2) * (bc + ad);
 800676a:	ed97 7a07 	vldr	s14, [r7, #28]
 800676e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006772:	ee37 8a27 	vadd.f32	s16, s14, s15
 8006776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006778:	2200      	movs	r2, #0
 800677a:	2101      	movs	r1, #1
 800677c:	4618      	mov	r0, r3
 800677e:	f000 f9c5 	bl	8006b0c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006782:	4603      	mov	r3, r0
 8006784:	ee78 7a08 	vadd.f32	s15, s16, s16
 8006788:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 1) = aa - bb + cc - dd;
 800678c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006790:	edd7 7a08 	vldr	s15, [r7, #32]
 8006794:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006798:	edd7 7a05 	vldr	s15, [r7, #20]
 800679c:	ee37 8a27 	vadd.f32	s16, s14, s15
 80067a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a2:	2201      	movs	r2, #1
 80067a4:	2101      	movs	r1, #1
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 f9b0 	bl	8006b0c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 80067ac:	4603      	mov	r3, r0
 80067ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80067b2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80067b6:	edc3 7a00 	vstr	s15, [r3]
        dcm(1, 2) = Type(2) * (cd - ab);
 80067ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80067be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80067c2:	ee37 8a67 	vsub.f32	s16, s14, s15
 80067c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067c8:	2202      	movs	r2, #2
 80067ca:	2101      	movs	r1, #1
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 f99d 	bl	8006b0c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 80067d2:	4603      	mov	r3, r0
 80067d4:	ee78 7a08 	vadd.f32	s15, s16, s16
 80067d8:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 0) = Type(2) * (bd - ac);
 80067dc:	ed97 7a06 	vldr	s14, [r7, #24]
 80067e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80067e4:	ee37 8a67 	vsub.f32	s16, s14, s15
 80067e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ea:	2200      	movs	r2, #0
 80067ec:	2102      	movs	r1, #2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f98c 	bl	8006b0c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 80067f4:	4603      	mov	r3, r0
 80067f6:	ee78 7a08 	vadd.f32	s15, s16, s16
 80067fa:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 1) = Type(2) * (ab + cd);
 80067fe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006802:	edd7 7a04 	vldr	s15, [r7, #16]
 8006806:	ee37 8a27 	vadd.f32	s16, s14, s15
 800680a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800680c:	2201      	movs	r2, #1
 800680e:	2102      	movs	r1, #2
 8006810:	4618      	mov	r0, r3
 8006812:	f000 f97b 	bl	8006b0c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006816:	4603      	mov	r3, r0
 8006818:	ee78 7a08 	vadd.f32	s15, s16, s16
 800681c:	edc3 7a00 	vstr	s15, [r3]
        dcm(2, 2) = aa - bb - cc + dd;
 8006820:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006824:	edd7 7a08 	vldr	s15, [r7, #32]
 8006828:	ee37 7a67 	vsub.f32	s14, s14, s15
 800682c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006830:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006836:	2202      	movs	r2, #2
 8006838:	2102      	movs	r1, #2
 800683a:	4618      	mov	r0, r3
 800683c:	f000 f966 	bl	8006b0c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>
 8006840:	4603      	mov	r3, r0
 8006842:	edd7 7a03 	vldr	s15, [r7, #12]
 8006846:	ee78 7a27 	vadd.f32	s15, s16, s15
 800684a:	edc3 7a00 	vstr	s15, [r3]
    }
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4618      	mov	r0, r3
 8006852:	3748      	adds	r7, #72	; 0x48
 8006854:	46bd      	mov	sp, r7
 8006856:	ecbd 8b02 	vpop	{d8}
 800685a:	bd80      	pop	{r7, pc}

0800685c <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>:
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	461a      	mov	r2, r3
 8006868:	2300      	movs	r3, #0
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	6053      	str	r3, [r2, #4]
 800686e:	6093      	str	r3, [r2, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4618      	mov	r0, r3
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <_ZN6matrix6VectorIfLj3EEC1Ev>:
 800687e:	b580      	push	{r7, lr}
 8006880:	b082      	sub	sp, #8
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff ffe7 	bl	800685c <_ZN6matrix6MatrixIfLj3ELj1EEC1Ev>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4618      	mov	r0, r3
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <_ZN6matrix7Vector3IfEC1Efff>:
    explicit Vector3(const Type data_[3]) :
        Vector<Type, 3>(data_)
    {
    }

    Vector3(Type x, Type y, Type z) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80068a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80068a8:	ed87 1a00 	vstr	s2, [r7]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff ffe5 	bl	800687e <_ZN6matrix6VectorIfLj3EEC1Ev>
        Vector3 &v(*this);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	617b      	str	r3, [r7, #20]
        v(0) = x;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2100      	movs	r1, #0
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 f88f 	bl	80069e0 <_ZN6matrix6VectorIfLj3EEclEj>
 80068c2:	4602      	mov	r2, r0
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	6013      	str	r3, [r2, #0]
        v(1) = y;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2101      	movs	r1, #1
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 f887 	bl	80069e0 <_ZN6matrix6VectorIfLj3EEclEj>
 80068d2:	4602      	mov	r2, r0
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6013      	str	r3, [r2, #0]
        v(2) = z;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2102      	movs	r1, #2
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 f87f 	bl	80069e0 <_ZN6matrix6VectorIfLj3EEclEj>
 80068e2:	4602      	mov	r2, r0
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	6013      	str	r3, [r2, #0]
    }
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4618      	mov	r0, r3
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_>:
    // this might use a lot of programming memory
    // since it instantiates a class for every
    // required mult pair, but it provides
    // compile time size_t checking
    template<size_t P>
    Matrix<Type, M, P> operator*(const Matrix<Type, N, P> &other) const
 80068f2:	b580      	push	{r7, lr}
 80068f4:	ed2d 8b02 	vpush	{d8}
 80068f8:	b088      	sub	sp, #32
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	60f8      	str	r0, [r7, #12]
 80068fe:	60b9      	str	r1, [r7, #8]
 8006900:	607a      	str	r2, [r7, #4]
    {
        const Matrix<Type, M, N> &self = *this;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	613b      	str	r3, [r7, #16]
        Matrix<Type, M, P> res;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	461a      	mov	r2, r3
 800690a:	2300      	movs	r3, #0
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	6053      	str	r3, [r2, #4]
 8006910:	6093      	str	r3, [r2, #8]
        res.setZero();
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 f928 	bl	8006b68 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>

        for (size_t i = 0; i < M; i++) {
 8006918:	2300      	movs	r3, #0
 800691a:	61fb      	str	r3, [r7, #28]
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	2b02      	cmp	r3, #2
 8006920:	d831      	bhi.n	8006986 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x94>
            for (size_t k = 0; k < P; k++) {
 8006922:	2300      	movs	r3, #0
 8006924:	61bb      	str	r3, [r7, #24]
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d128      	bne.n	800697e <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x8c>
                for (size_t j = 0; j < N; j++) {
 800692c:	2300      	movs	r3, #0
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d81f      	bhi.n	8006976 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x84>
                    res(i, k) += self(i, j) * other(j, k);
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	69f9      	ldr	r1, [r7, #28]
 800693a:	6938      	ldr	r0, [r7, #16]
 800693c:	f000 f94c 	bl	8006bd8 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>
 8006940:	eeb0 8a40 	vmov.f32	s16, s0
 8006944:	69ba      	ldr	r2, [r7, #24]
 8006946:	6979      	ldr	r1, [r7, #20]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f977 	bl	8006c3c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>
 800694e:	eef0 7a40 	vmov.f32	s15, s0
 8006952:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	69f9      	ldr	r1, [r7, #28]
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 f912 	bl	8006b84 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 8006960:	4603      	mov	r3, r0
 8006962:	edd3 7a00 	vldr	s15, [r3]
 8006966:	ee78 7a27 	vadd.f32	s15, s16, s15
 800696a:	edc3 7a00 	vstr	s15, [r3]
                for (size_t j = 0; j < N; j++) {
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	3301      	adds	r3, #1
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	e7dc      	b.n	8006930 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x3e>
            for (size_t k = 0; k < P; k++) {
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	3301      	adds	r3, #1
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	e7d3      	b.n	8006926 <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x34>
        for (size_t i = 0; i < M; i++) {
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	3301      	adds	r3, #1
 8006982:	61fb      	str	r3, [r7, #28]
 8006984:	e7ca      	b.n	800691c <_ZNK6matrix6MatrixIfLj3ELj3EEmlILj1EEENS0_IfLj3EXT_EEERKS3_+0x2a>
                }
            }
        }

        return res;
 8006986:	bf00      	nop
    }
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	ecbd 8b02 	vpop	{d8}
 8006992:	bd80      	pop	{r7, pc}

08006994 <_ZN6matrix7Vector3IfEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector3(const Matrix31 & other) :
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
        Vector<Type, 3>(other)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 f978 	bl	8006c98 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>
    }
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>:
    Matrix(const Matrix &other)
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]
    {
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	461a      	mov	r2, r3
 80069c0:	2300      	movs	r3, #0
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	6053      	str	r3, [r2, #4]
 80069c6:	6093      	str	r3, [r2, #8]
        memcpy(_data, other._data, sizeof(_data));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	220c      	movs	r2, #12
 80069ce:	4618      	mov	r0, r3
 80069d0:	f01b fbd4 	bl	802217c <memcpy>
    }
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <_ZN6matrix6VectorIfLj3EEclEj>:

        const MatrixM1 &v = *this;
        return v(i, 0);
    }

    inline Type &operator()(size_t i)
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
    {
        assert(i >= 0);
        assert(i < M);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d905      	bls.n	80069fc <_ZN6matrix6VectorIfLj3EEclEj+0x1c>
 80069f0:	4b08      	ldr	r3, [pc, #32]	; (8006a14 <_ZN6matrix6VectorIfLj3EEclEj+0x34>)
 80069f2:	4a09      	ldr	r2, [pc, #36]	; (8006a18 <_ZN6matrix6VectorIfLj3EEclEj+0x38>)
 80069f4:	2137      	movs	r1, #55	; 0x37
 80069f6:	4809      	ldr	r0, [pc, #36]	; (8006a1c <_ZN6matrix6VectorIfLj3EEclEj+0x3c>)
 80069f8:	f01b fb66 	bl	80220c8 <__assert_func>

        MatrixM1 &v = *this;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 8006a00:	2200      	movs	r2, #0
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f8bd 	bl	8006b84 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>
 8006a0a:	4603      	mov	r3, r0
    }
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	0802327c 	.word	0x0802327c
 8006a18:	08023950 	.word	0x08023950
 8006a1c:	08023284 	.word	0x08023284

08006a20 <_ZN6matrix6VectorIfLj4EEclEj>:
    inline Type &operator()(size_t i)
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
        assert(i < M);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d905      	bls.n	8006a3c <_ZN6matrix6VectorIfLj4EEclEj+0x1c>
 8006a30:	4b08      	ldr	r3, [pc, #32]	; (8006a54 <_ZN6matrix6VectorIfLj4EEclEj+0x34>)
 8006a32:	4a09      	ldr	r2, [pc, #36]	; (8006a58 <_ZN6matrix6VectorIfLj4EEclEj+0x38>)
 8006a34:	2137      	movs	r1, #55	; 0x37
 8006a36:	4809      	ldr	r0, [pc, #36]	; (8006a5c <_ZN6matrix6VectorIfLj4EEclEj+0x3c>)
 8006a38:	f01b fb46 	bl	80220c8 <__assert_func>
        MatrixM1 &v = *this;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 8006a40:	2200      	movs	r2, #0
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 f937 	bl	8006cb8 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>
 8006a4a:	4603      	mov	r3, r0
    }
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	0802327c 	.word	0x0802327c
 8006a58:	080234ec 	.word	0x080234ec
 8006a5c:	08023284 	.word	0x08023284

08006a60 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE>:

    Type dot(const MatrixM1 & b) const {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	ed2d 8b02 	vpush	{d8}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
        const Vector &a(*this);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60fb      	str	r3, [r7, #12]
        Type r(0);
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]
        for (size_t i = 0; i<M; i++) {
 8006a78:	2300      	movs	r3, #0
 8006a7a:	613b      	str	r3, [r7, #16]
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d818      	bhi.n	8006ab4 <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE+0x54>
            r += a(i)*b(i,0);
 8006a82:	6939      	ldr	r1, [r7, #16]
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f81f 	bl	8006ac8 <_ZNK6matrix6VectorIfLj4EEclEj>
 8006a8a:	eeb0 8a40 	vmov.f32	s16, s0
 8006a8e:	2200      	movs	r2, #0
 8006a90:	6939      	ldr	r1, [r7, #16]
 8006a92:	6838      	ldr	r0, [r7, #0]
 8006a94:	f000 f93a 	bl	8006d0c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 8006a98:	eef0 7a40 	vmov.f32	s15, s0
 8006a9c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006aa0:	ed97 7a05 	vldr	s14, [r7, #20]
 8006aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aa8:	edc7 7a05 	vstr	s15, [r7, #20]
        for (size_t i = 0; i<M; i++) {
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	613b      	str	r3, [r7, #16]
 8006ab2:	e7e3      	b.n	8006a7c <_ZNK6matrix6VectorIfLj4EE3dotERKNS_6MatrixIfLj4ELj1EEE+0x1c>
        }
        return r;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	ee07 3a90 	vmov	s15, r3
    }
 8006aba:	eeb0 0a67 	vmov.f32	s0, s15
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	ecbd 8b02 	vpop	{d8}
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <_ZNK6matrix6VectorIfLj4EEclEj>:
    inline Type operator()(size_t i) const
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
        assert(i < M);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d905      	bls.n	8006ae4 <_ZNK6matrix6VectorIfLj4EEclEj+0x1c>
 8006ad8:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <_ZNK6matrix6VectorIfLj4EEclEj+0x38>)
 8006ada:	4a0a      	ldr	r2, [pc, #40]	; (8006b04 <_ZNK6matrix6VectorIfLj4EEclEj+0x3c>)
 8006adc:	212e      	movs	r1, #46	; 0x2e
 8006ade:	480a      	ldr	r0, [pc, #40]	; (8006b08 <_ZNK6matrix6VectorIfLj4EEclEj+0x40>)
 8006ae0:	f01b faf2 	bl	80220c8 <__assert_func>
        const MatrixM1 &v = *this;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	60fb      	str	r3, [r7, #12]
        return v(i, 0);
 8006ae8:	2200      	movs	r2, #0
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 f90d 	bl	8006d0c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>
 8006af2:	eef0 7a40 	vmov.f32	s15, s0
    }
 8006af6:	eeb0 0a67 	vmov.f32	s0, s15
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	0802327c 	.word	0x0802327c
 8006b04:	08023688 	.word	0x08023688
 8006b08:	08023284 	.word	0x08023284

08006b0c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d905      	bls.n	8006b2a <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 8006b1e:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x4c>)
 8006b20:	4a0e      	ldr	r2, [pc, #56]	; (8006b5c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 8006b22:	216e      	movs	r1, #110	; 0x6e
 8006b24:	480e      	ldr	r0, [pc, #56]	; (8006b60 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 8006b26:	f01b facf 	bl	80220c8 <__assert_func>
        assert(j < N);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d905      	bls.n	8006b3c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 8006b30:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 8006b32:	4a0a      	ldr	r2, [pc, #40]	; (8006b5c <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x50>)
 8006b34:	2170      	movs	r1, #112	; 0x70
 8006b36:	480a      	ldr	r0, [pc, #40]	; (8006b60 <_ZN6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 8006b38:	f01b fac6 	bl	80220c8 <__assert_func>
        return _data[i][j];
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	4413      	add	r3, r2
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4413      	add	r3, r2
    }
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	0802327c 	.word	0x0802327c
 8006b5c:	08023700 	.word	0x08023700
 8006b60:	080232e0 	.word	0x080232e0
 8006b64:	0802333c 	.word	0x0802333c

08006b68 <_ZN6matrix6MatrixIfLj3ELj1EE7setZeroEv>:
    void setCol(size_t j, Type val)
    {
        slice<M,1>(0,j) = val;
    }

    void setZero()
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
    {
        memset(_data, 0, sizeof(_data));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	220c      	movs	r2, #12
 8006b74:	2100      	movs	r1, #0
 8006b76:	4618      	mov	r0, r3
 8006b78:	f01b fb0b 	bl	8022192 <memset>
    }
 8006b7c:	bf00      	nop
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d905      	bls.n	8006ba2 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 8006b96:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x44>)
 8006b98:	4a0c      	ldr	r2, [pc, #48]	; (8006bcc <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 8006b9a:	216e      	movs	r1, #110	; 0x6e
 8006b9c:	480c      	ldr	r0, [pc, #48]	; (8006bd0 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 8006b9e:	f01b fa93 	bl	80220c8 <__assert_func>
        assert(j < N);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 8006ba8:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 8006baa:	4a08      	ldr	r2, [pc, #32]	; (8006bcc <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x48>)
 8006bac:	2170      	movs	r1, #112	; 0x70
 8006bae:	4808      	ldr	r0, [pc, #32]	; (8006bd0 <_ZN6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 8006bb0:	f01b fa8a 	bl	80220c8 <__assert_func>
        return _data[i][j];
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	4413      	add	r3, r2
    }
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	0802327c 	.word	0x0802327c
 8006bcc:	080238c0 	.word	0x080238c0
 8006bd0:	080232e0 	.word	0x080232e0
 8006bd4:	0802333c 	.word	0x0802333c

08006bd8 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d905      	bls.n	8006bf6 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x1e>
 8006bea:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x54>)
 8006bec:	4a10      	ldr	r2, [pc, #64]	; (8006c30 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 8006bee:	2164      	movs	r1, #100	; 0x64
 8006bf0:	4810      	ldr	r0, [pc, #64]	; (8006c34 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 8006bf2:	f01b fa69 	bl	80220c8 <__assert_func>
        assert(j < N);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d905      	bls.n	8006c08 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x30>
 8006bfc:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x60>)
 8006bfe:	4a0c      	ldr	r2, [pc, #48]	; (8006c30 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x58>)
 8006c00:	2166      	movs	r1, #102	; 0x66
 8006c02:	480c      	ldr	r0, [pc, #48]	; (8006c34 <_ZNK6matrix6MatrixIfLj3ELj3EEclEjj+0x5c>)
 8006c04:	f01b fa60 	bl	80220c8 <__assert_func>
        return _data[i][j];
 8006c08:	68f9      	ldr	r1, [r7, #12]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	4413      	add	r3, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4413      	add	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	440b      	add	r3, r1
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	ee07 3a90 	vmov	s15, r3
    }
 8006c20:	eeb0 0a67 	vmov.f32	s0, s15
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	0802327c 	.word	0x0802327c
 8006c30:	08023790 	.word	0x08023790
 8006c34:	080232e0 	.word	0x080232e0
 8006c38:	0802333c 	.word	0x0802333c

08006c3c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d905      	bls.n	8006c5a <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x1e>
 8006c4e:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x4c>)
 8006c50:	4a0e      	ldr	r2, [pc, #56]	; (8006c8c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 8006c52:	2164      	movs	r1, #100	; 0x64
 8006c54:	480e      	ldr	r0, [pc, #56]	; (8006c90 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 8006c56:	f01b fa37 	bl	80220c8 <__assert_func>
        assert(j < N);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d005      	beq.n	8006c6c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x30>
 8006c60:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x58>)
 8006c62:	4a0a      	ldr	r2, [pc, #40]	; (8006c8c <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x50>)
 8006c64:	2166      	movs	r1, #102	; 0x66
 8006c66:	480a      	ldr	r0, [pc, #40]	; (8006c90 <_ZNK6matrix6MatrixIfLj3ELj1EEclEjj+0x54>)
 8006c68:	f01b fa2e 	bl	80220c8 <__assert_func>
        return _data[i][j];
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	68b9      	ldr	r1, [r7, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	440b      	add	r3, r1
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	ee07 3a90 	vmov	s15, r3
    }
 8006c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	0802327c 	.word	0x0802327c
 8006c8c:	08023828 	.word	0x08023828
 8006c90:	080232e0 	.word	0x080232e0
 8006c94:	0802333c 	.word	0x0802333c

08006c98 <_ZN6matrix6VectorIfLj3EEC1ERKNS_6MatrixIfLj3ELj1EEE>:
    Vector(const MatrixM1 & other) :
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
        MatrixM1(other)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7ff fe83 	bl	80069b2 <_ZN6matrix6MatrixIfLj3ELj1EEC1ERKS1_>
    }
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type &operator()(size_t i, size_t j)
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d905      	bls.n	8006cd6 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 8006cca:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x44>)
 8006ccc:	4a0c      	ldr	r2, [pc, #48]	; (8006d00 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 8006cce:	216e      	movs	r1, #110	; 0x6e
 8006cd0:	480c      	ldr	r0, [pc, #48]	; (8006d04 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 8006cd2:	f01b f9f9 	bl	80220c8 <__assert_func>
        assert(j < N);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d005      	beq.n	8006ce8 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 8006cde:	4a08      	ldr	r2, [pc, #32]	; (8006d00 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x48>)
 8006ce0:	2170      	movs	r1, #112	; 0x70
 8006ce2:	4808      	ldr	r0, [pc, #32]	; (8006d04 <_ZN6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 8006ce4:	f01b f9f0 	bl	80220c8 <__assert_func>
        return _data[i][j];
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4413      	add	r3, r2
    }
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	0802327c 	.word	0x0802327c
 8006d00:	08023560 	.word	0x08023560
 8006d04:	080232e0 	.word	0x080232e0
 8006d08:	0802333c 	.word	0x0802333c

08006d0c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj>:
    inline Type operator()(size_t i, size_t j) const
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
        assert(i < M);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d905      	bls.n	8006d2a <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x1e>
 8006d1e:	4b0e      	ldr	r3, [pc, #56]	; (8006d58 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x4c>)
 8006d20:	4a0e      	ldr	r2, [pc, #56]	; (8006d5c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 8006d22:	2164      	movs	r1, #100	; 0x64
 8006d24:	480e      	ldr	r0, [pc, #56]	; (8006d60 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 8006d26:	f01b f9cf 	bl	80220c8 <__assert_func>
        assert(j < N);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d005      	beq.n	8006d3c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x30>
 8006d30:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x58>)
 8006d32:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x50>)
 8006d34:	2166      	movs	r1, #102	; 0x66
 8006d36:	480a      	ldr	r0, [pc, #40]	; (8006d60 <_ZNK6matrix6MatrixIfLj4ELj1EEclEjj+0x54>)
 8006d38:	f01b f9c6 	bl	80220c8 <__assert_func>
        return _data[i][j];
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	440b      	add	r3, r1
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	ee07 3a90 	vmov	s15, r3
    }
 8006d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	0802327c 	.word	0x0802327c
 8006d5c:	080235f0 	.word	0x080235f0
 8006d60:	080232e0 	.word	0x080232e0
 8006d64:	0802333c 	.word	0x0802333c

08006d68 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 8006d68:	b490      	push	{r4, r7}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
 8006d72:	2300      	movs	r3, #0
 8006d74:	73fb      	strb	r3, [r7, #15]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	e9d3 1200 	ldrd	r1, r2, [r3]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8006d82:	42a2      	cmp	r2, r4
 8006d84:	bf08      	it	eq
 8006d86:	4299      	cmpeq	r1, r3
 8006d88:	d001      	beq.n	8006d8e <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE+0x26>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	73fb      	strb	r3, [r7, #15]
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4614      	mov	r4, r2
 8006d94:	33a0      	adds	r3, #160	; 0xa0
 8006d96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bc90      	pop	{r4, r7}
 8006da6:	4770      	bx	lr

08006da8 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>:
    SIMPLE_FUNC_IMPL(Attitude, Attitude, attitude)
 8006da8:	b4b0      	push	{r4, r5, r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	e9d3 342c 	ldrd	r3, r4, [r3, #176]	; 0xb0
 8006dc2:	42a2      	cmp	r2, r4
 8006dc4:	bf08      	it	eq
 8006dc6:	4299      	cmpeq	r1, r3
 8006dc8:	d001      	beq.n	8006dce <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE+0x26>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	73fb      	strb	r3, [r7, #15]
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4615      	mov	r5, r2
 8006dd4:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8006dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006de0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006de4:	e885 0003 	stmia.w	r5, {r0, r1}
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bcb0      	pop	{r4, r5, r7}
 8006df2:	4770      	bx	lr

08006df4 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>:

    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 8006df4:	b490      	push	{r4, r7}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	e9d3 1200 	ldrd	r1, r2, [r3]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	e9d3 343c 	ldrd	r3, r4, [r3, #240]	; 0xf0
 8006e0e:	42a2      	cmp	r2, r4
 8006e10:	bf08      	it	eq
 8006e12:	4299      	cmpeq	r1, r3
 8006e14:	d001      	beq.n	8006e1a <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE+0x26>
 8006e16:	2301      	movs	r3, #1
 8006e18:	73fb      	strb	r3, [r7, #15]
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4614      	mov	r4, r2
 8006e20:	33f0      	adds	r3, #240	; 0xf0
 8006e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc90      	pop	{r4, r7}
 8006e32:	4770      	bx	lr

08006e34 <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>:

    SIMPLE_FUNC_IMPL(Health, Health, health)

    SIMPLE_FUNC_IMPL(MotorPWM, MotorPWM, motorPWM)
 8006e34:	b4b0      	push	{r4, r5, r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8006e46:	4615      	mov	r5, r2
 8006e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006e50:	e884 0003 	stmia.w	r4, {r0, r1}
 8006e54:	bf00      	nop
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bcb0      	pop	{r4, r5, r7}
 8006e5c:	4770      	bx	lr

08006e5e <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>:
  ~px4_AlgorithmModelClass();

  // Root-level structure-based inputs set method

  // Root inports set method
  void setExternalInputs(const ExtU_Second_att_control_codeb_T
 8006e5e:	b4b0      	push	{r4, r5, r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
    * pExtU_Second_att_control_codeb_T)
  {
    Second_att_control_codeblock__U = *pExtU_Second_att_control_codeb_T;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 8006e70:	4615      	mov	r5, r2
 8006e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006e7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }
 8006e7e:	bf00      	nop
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bcb0      	pop	{r4, r5, r7}
 8006e86:	4770      	bx	lr

08006e88 <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>:

  // Root-level structure-based outputs get method

  // Root outports get method
  const px4_AlgorithmModelClass::ExtY_Second_att_control_codeb_T
    & getExternalOutputs() const
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  {
    return Second_att_control_codeblock__Y;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
  }
 8006e96:	4618      	mov	r0, r3
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
	...

08006ea4 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8006ea4:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8006ea8:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8006eaa:	4b0e      	ldr	r3, [pc, #56]	; (8006ee4 <_ZL11microsecondv+0x40>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	f04f 0b00 	mov.w	fp, #0
 8006eb8:	f04f 0c00 	mov.w	ip, #0
 8006ebc:	468c      	mov	ip, r1
 8006ebe:	f04f 0b00 	mov.w	fp, #0
 8006ec2:	4a09      	ldr	r2, [pc, #36]	; (8006ee8 <_ZL11microsecondv+0x44>)
 8006ec4:	6812      	ldr	r2, [r2, #0]
 8006ec6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ec8:	4611      	mov	r1, r2
 8006eca:	f04f 0200 	mov.w	r2, #0
 8006ece:	ea4b 0301 	orr.w	r3, fp, r1
 8006ed2:	ea4c 0402 	orr.w	r4, ip, r2
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	4621      	mov	r1, r4
 8006eda:	46bd      	mov	sp, r7
 8006edc:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	24000370 	.word	0x24000370
 8006ee8:	240094f4 	.word	0x240094f4

08006eec <_ZN2FC24ModuleAttitudeControllerC1Ev>:
#include <Module/ModuleAttitudeController.h>
#include "Usec.h"

namespace FC {

ModuleAttitudeController::ModuleAttitudeController(){
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fd fce0 	bl	80048bc <_ZN23px4_AlgorithmModelClassC1Ev>
	/* matlab codegen function */
	initialize();
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fd fca0 	bl	8004844 <_ZN23px4_AlgorithmModelClass10initializeEv>
}
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <_ZN2FC24ModuleAttitudeController7oneStepEv>:

void ModuleAttitudeController::oneStep(){
 8006f10:	b5b0      	push	{r4, r5, r7, lr}
 8006f12:	b092      	sub	sp, #72	; 0x48
 8006f14:	af04      	add	r7, sp, #16
 8006f16:	6078      	str	r0, [r7, #4]
	msgBus.getModeFlag(&modeFlagSub);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006f1e:	4619      	mov	r1, r3
 8006f20:	484d      	ldr	r0, [pc, #308]	; (8007058 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x148>)
 8006f22:	f7ff ff67 	bl	8006df4 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	if(modeFlagSub.armMode != Command::Arm){
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8006f2c:	2b06      	cmp	r3, #6
 8006f2e:	d016      	beq.n	8006f5e <_ZN2FC24ModuleAttitudeController7oneStepEv+0x4e>
		setMotor(1000, 1000, 1000, 1000, 1000, 1000);
 8006f30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f34:	9302      	str	r3, [sp, #8]
 8006f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f3a:	9301      	str	r3, [sp, #4]
 8006f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f88e 	bl	8007070 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>
		armFlag = false;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
 8006f5c:	e078      	b.n	8007050 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x140>
		return;
	}

	/* change disarm to arm -> initialize */
	if(armFlag == false){
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
 8006f64:	f083 0301 	eor.w	r3, r3, #1
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d007      	beq.n	8006f7e <_ZN2FC24ModuleAttitudeController7oneStepEv+0x6e>
		armFlag = true;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 21de 	strb.w	r2, [r3, #478]	; 0x1de
		initialize();
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fd fc63 	bl	8004844 <_ZN23px4_AlgorithmModelClass10initializeEv>
	}

	/* manual control */
	if(modeFlagSub.flightMode == Command::ControlAttitude){
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <_ZN2FC24ModuleAttitudeController7oneStepEv+0x7e>
//		setFromRC();
	}
	else{
		setFromPositionController();
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f867 	bl	800705c <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>
	}

	msgBus.getController(&controllerSub);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8006f94:	4619      	mov	r1, r3
 8006f96:	4830      	ldr	r0, [pc, #192]	; (8007058 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x148>)
 8006f98:	f7ff fee6 	bl	8006d68 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>

	ExtU_Second_att_control_codeb_T input;
	input.set_pitch = controllerSub.pitch;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8b3 31a2 	ldrh.w	r3, [r3, #418]	; 0x1a2
 8006fa2:	863b      	strh	r3, [r7, #48]	; 0x30
	input.set_roll = controllerSub.roll;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8b3 31a0 	ldrh.w	r3, [r3, #416]	; 0x1a0
 8006faa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	input.set_yaw = controllerSub.yaw;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
 8006fb2:	867b      	strh	r3, [r7, #50]	; 0x32
	input.set_thrust = controllerSub.throttle;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	; 0x1a6
 8006fba:	85bb      	strh	r3, [r7, #44]	; 0x2c
	//	input.set_pitch = targetPitch;
//	input.set_roll = targetRoll;
//	input.set_yaw = targetYawRate;
//	input.set_thrust = throttle;

	msgBus.getAttitude(&attitudeSub);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4824      	ldr	r0, [pc, #144]	; (8007058 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x148>)
 8006fc6:	f7ff feef 	bl	8006da8 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
	msgBus.getBodyAngularVelocity(&bodyAngularVelocitySub);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4821      	ldr	r0, [pc, #132]	; (8007058 <_ZN2FC24ModuleAttitudeController7oneStepEv+0x148>)
 8006fd4:	f7fd fcf1 	bl	80049ba <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>

	input.Roll = attitudeSub.roll;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8006fde:	61bb      	str	r3, [r7, #24]
	input.Pitch = attitudeSub.pitch;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8006fe6:	61fb      	str	r3, [r7, #28]
	input.p = bodyAngularVelocitySub.xyz[0];
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8006fee:	623b      	str	r3, [r7, #32]
	input.q = bodyAngularVelocitySub.xyz[1];
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
	input.r = bodyAngularVelocitySub.xyz[2];
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28
	input.Arm_cmd = 2000;
 8007000:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007004:	86bb      	strh	r3, [r7, #52]	; 0x34

	/* matlab codegen function */
	setExternalInputs(&input);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f107 0218 	add.w	r2, r7, #24
 800700c:	4611      	mov	r1, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff ff25 	bl	8006e5e <_ZN23px4_AlgorithmModelClass17setExternalInputsEPKNS_31ExtU_Second_att_control_codeb_TE>
	step();
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4618      	mov	r0, r3
 8007018:	f7fc fd6a 	bl	8003af0 <_ZN23px4_AlgorithmModelClass4stepEv>
	ExtY_Second_att_control_codeb_T output = getExternalOutputs();
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4618      	mov	r0, r3
 8007020:	f7ff ff32 	bl	8006e88 <_ZNK23px4_AlgorithmModelClass18getExternalOutputsEv>
 8007024:	4602      	mov	r2, r0
 8007026:	f107 030c 	add.w	r3, r7, #12
 800702a:	6810      	ldr	r0, [r2, #0]
 800702c:	6851      	ldr	r1, [r2, #4]
 800702e:	6892      	ldr	r2, [r2, #8]
 8007030:	c307      	stmia	r3!, {r0, r1, r2}

	/* set motor pwm */
	setMotor((uint16_t)output.PWM_OUT[0],
 8007032:	89b8      	ldrh	r0, [r7, #12]
			 (uint16_t)output.PWM_OUT[1],
 8007034:	89fc      	ldrh	r4, [r7, #14]
			 (uint16_t)output.PWM_OUT[2],
 8007036:	8a3d      	ldrh	r5, [r7, #16]
			 (uint16_t)output.PWM_OUT[3],
 8007038:	8a7b      	ldrh	r3, [r7, #18]
			 (uint16_t)output.PWM_OUT[4],
 800703a:	8aba      	ldrh	r2, [r7, #20]
			 (uint16_t)output.PWM_OUT[5]);
 800703c:	8af9      	ldrh	r1, [r7, #22]
	setMotor((uint16_t)output.PWM_OUT[0],
 800703e:	9102      	str	r1, [sp, #8]
 8007040:	9201      	str	r2, [sp, #4]
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	462b      	mov	r3, r5
 8007046:	4622      	mov	r2, r4
 8007048:	4601      	mov	r1, r0
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f810 	bl	8007070 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>
}
 8007050:	3738      	adds	r7, #56	; 0x38
 8007052:	46bd      	mov	sp, r7
 8007054:	bdb0      	pop	{r4, r5, r7, pc}
 8007056:	bf00      	nop
 8007058:	24000438 	.word	0x24000438

0800705c <_ZN2FC24ModuleAttitudeController25setFromPositionControllerEv>:

void ModuleAttitudeController::setFromPositionController(){
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
	//TODO make position control struct, and this function
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt>:
	targetPitch = -(controllerSub.pitch - 1500)/500;
	targetYawRate = (controllerSub.yaw - 1500)/500;
	throttle = controllerSub.throttle;
}

void ModuleAttitudeController::setMotor(uint16_t pwm1, uint16_t pwm2, uint16_t pwm3, uint16_t pwm4, uint16_t pwm5, uint16_t pwm6){
 8007070:	b590      	push	{r4, r7, lr}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	4608      	mov	r0, r1
 800707a:	4611      	mov	r1, r2
 800707c:	461a      	mov	r2, r3
 800707e:	4603      	mov	r3, r0
 8007080:	817b      	strh	r3, [r7, #10]
 8007082:	460b      	mov	r3, r1
 8007084:	813b      	strh	r3, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
	m1.setPWM(pwm1);
 800708a:	897b      	ldrh	r3, [r7, #10]
 800708c:	4619      	mov	r1, r3
 800708e:	4824      	ldr	r0, [pc, #144]	; (8007120 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb0>)
 8007090:	f7f9 fc80 	bl	8000994 <_ZN2FC5Motor6setPWMEt>
	m2.setPWM(pwm2);
 8007094:	893b      	ldrh	r3, [r7, #8]
 8007096:	4619      	mov	r1, r3
 8007098:	4822      	ldr	r0, [pc, #136]	; (8007124 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb4>)
 800709a:	f7f9 fc7b 	bl	8000994 <_ZN2FC5Motor6setPWMEt>
	m3.setPWM(pwm3);
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	4619      	mov	r1, r3
 80070a2:	4821      	ldr	r0, [pc, #132]	; (8007128 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xb8>)
 80070a4:	f7f9 fc76 	bl	8000994 <_ZN2FC5Motor6setPWMEt>
	m4.setPWM(pwm4);
 80070a8:	8c3b      	ldrh	r3, [r7, #32]
 80070aa:	4619      	mov	r1, r3
 80070ac:	481f      	ldr	r0, [pc, #124]	; (800712c <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xbc>)
 80070ae:	f7f9 fc71 	bl	8000994 <_ZN2FC5Motor6setPWMEt>
	m5.setPWM(pwm5);
 80070b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070b4:	4619      	mov	r1, r3
 80070b6:	481e      	ldr	r0, [pc, #120]	; (8007130 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc0>)
 80070b8:	f7f9 fc6c 	bl	8000994 <_ZN2FC5Motor6setPWMEt>
	m6.setPWM(pwm6);
 80070bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80070be:	4619      	mov	r1, r3
 80070c0:	481c      	ldr	r0, [pc, #112]	; (8007134 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc4>)
 80070c2:	f7f9 fc67 	bl	8000994 <_ZN2FC5Motor6setPWMEt>

	motorPwmSub.timestamp = microsecond();
 80070c6:	f7ff feed 	bl	8006ea4 <_ZL11microsecondv>
 80070ca:	4603      	mov	r3, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80070d4:	e9c2 3400 	strd	r3, r4, [r2]
	motorPwmSub.m1 = pwm1;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	897a      	ldrh	r2, [r7, #10]
 80070dc:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0
	motorPwmSub.m2 = pwm2;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	893a      	ldrh	r2, [r7, #8]
 80070e4:	f8a3 21c2 	strh.w	r2, [r3, #450]	; 0x1c2
	motorPwmSub.m3 = pwm3;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	88fa      	ldrh	r2, [r7, #6]
 80070ec:	f8a3 21c4 	strh.w	r2, [r3, #452]	; 0x1c4
	motorPwmSub.m4 = pwm4;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8c3a      	ldrh	r2, [r7, #32]
 80070f4:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
	motorPwmSub.m5 = pwm5;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070fc:	f8a3 21c8 	strh.w	r2, [r3, #456]	; 0x1c8
	motorPwmSub.m6 = pwm6;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007104:	f8a3 21ca 	strh.w	r2, [r3, #458]	; 0x1ca

	msgBus.setMotorPWM(motorPwmSub);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800710e:	4619      	mov	r1, r3
 8007110:	4809      	ldr	r0, [pc, #36]	; (8007138 <_ZN2FC24ModuleAttitudeController8setMotorEtttttt+0xc8>)
 8007112:	f7ff fe8f 	bl	8006e34 <_ZN2FC6MsgBus11setMotorPWMERKNS_8MotorPWME>
}
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	bd90      	pop	{r4, r7, pc}
 800711e:	bf00      	nop
 8007120:	24000164 	.word	0x24000164
 8007124:	24000170 	.word	0x24000170
 8007128:	2400017c 	.word	0x2400017c
 800712c:	24000188 	.word	0x24000188
 8007130:	24000194 	.word	0x24000194
 8007134:	240001a0 	.word	0x240001a0
 8007138:	24000438 	.word	0x24000438

0800713c <_ZN2FC12ModuleBuzzer4mainEv>:
	.mq_mem = &Buzzer_QueueBuffer,
	.mq_size = sizeof(Buzzer_QueueBuffer)
};


void ModuleBuzzer::main() {
 800713c:	b580      	push	{r7, lr}
 800713e:	b08e      	sub	sp, #56	; 0x38
 8007140:	af00      	add	r7, sp, #0
	 *  TIM4, TIM_CHANNEL_1
	 *  PCLK 100Mhz
	 *  Prescaler 0
	 *  Counter Period 10-1
	 */
	ModuleBuzzer buzzer(&htim4, TIM_CHANNEL_1, 100000000);
 8007142:	1d38      	adds	r0, r7, #4
 8007144:	4b12      	ldr	r3, [pc, #72]	; (8007190 <_ZN2FC12ModuleBuzzer4mainEv+0x54>)
 8007146:	2200      	movs	r2, #0
 8007148:	4912      	ldr	r1, [pc, #72]	; (8007194 <_ZN2FC12ModuleBuzzer4mainEv+0x58>)
 800714a:	f000 f827 	bl	800719c <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm>

	BuzzerCommand rcvResult;
	while(1){
		if(osMessageQueueGet(Buzzer_QueueHandle, (void*)&rcvResult, NULL, osWaitForever) == osOK){
 800714e:	4b12      	ldr	r3, [pc, #72]	; (8007198 <_ZN2FC12ModuleBuzzer4mainEv+0x5c>)
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	4639      	mov	r1, r7
 8007154:	f04f 33ff 	mov.w	r3, #4294967295
 8007158:	2200      	movs	r2, #0
 800715a:	f016 fb77 	bl	801d84c <osMessageQueueGet>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	bf0c      	ite	eq
 8007164:	2301      	moveq	r3, #1
 8007166:	2300      	movne	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d006      	beq.n	800717c <_ZN2FC12ModuleBuzzer4mainEv+0x40>
			buzzer.commandHandler(rcvResult);
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	1d3b      	adds	r3, r7, #4
 8007172:	4611      	mov	r1, r2
 8007174:	4618      	mov	r0, r3
 8007176:	f000 f881 	bl	800727c <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE>
 800717a:	e004      	b.n	8007186 <_ZN2FC12ModuleBuzzer4mainEv+0x4a>
//			osDelay(10);
		}
		else{
			osMessageQueueReset(Buzzer_QueueHandle);
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <_ZN2FC12ModuleBuzzer4mainEv+0x5c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4618      	mov	r0, r3
 8007182:	f016 fc1d 	bl	801d9c0 <osMessageQueueReset>
		}
		osDelay(10);
 8007186:	200a      	movs	r0, #10
 8007188:	f016 f866 	bl	801d258 <osDelay>
		if(osMessageQueueGet(Buzzer_QueueHandle, (void*)&rcvResult, NULL, osWaitForever) == osOK){
 800718c:	e7df      	b.n	800714e <_ZN2FC12ModuleBuzzer4mainEv+0x12>
 800718e:	bf00      	nop
 8007190:	05f5e100 	.word	0x05f5e100
 8007194:	24009378 	.word	0x24009378
 8007198:	24000374 	.word	0x24000374

0800719c <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm>:
	}
}

ModuleBuzzer::ModuleBuzzer(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t CLK)
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	603b      	str	r3, [r7, #0]
	: A{Z1, Z2, Z5, Z6}
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	330c      	adds	r3, #12
 80071ae:	2228      	movs	r2, #40	; 0x28
 80071b0:	2100      	movs	r1, #0
 80071b2:	4618      	mov	r0, r3
 80071b4:	f01a ffed 	bl	8022192 <memset>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4a17      	ldr	r2, [pc, #92]	; (8007218 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x7c>)
 80071bc:	60da      	str	r2, [r3, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4a16      	ldr	r2, [pc, #88]	; (800721c <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x80>)
 80071c2:	611a      	str	r2, [r3, #16]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4a16      	ldr	r2, [pc, #88]	; (8007220 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x84>)
 80071c8:	615a      	str	r2, [r3, #20]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4a15      	ldr	r2, [pc, #84]	; (8007224 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x88>)
 80071ce:	619a      	str	r2, [r3, #24]
{
	  /* creation of Buzzer_Queue */
	  Buzzer_QueueHandle = osMessageQueueNew (3, sizeof(BuzzerCommand), &Buzzer_Queue_attributes);
 80071d0:	4a15      	ldr	r2, [pc, #84]	; (8007228 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x8c>)
 80071d2:	2104      	movs	r1, #4
 80071d4:	2003      	movs	r0, #3
 80071d6:	f016 fa3f 	bl	801d658 <osMessageQueueNew>
 80071da:	4602      	mov	r2, r0
 80071dc:	4b13      	ldr	r3, [pc, #76]	; (800722c <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x90>)
 80071de:	601a      	str	r2, [r3, #0]

	  this->htim = htim;
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	601a      	str	r2, [r3, #0]
	  this->Channel = Channel;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	605a      	str	r2, [r3, #4]
	  this->CLK = CLK/10;		/* 10 : AutoReload Register+1 */
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	4a10      	ldr	r2, [pc, #64]	; (8007230 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x94>)
 80071f0:	fba2 2303 	umull	r2, r3, r2, r3
 80071f4:	08da      	lsrs	r2, r3, #3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_PRESCALER(htim, this->CLK / 4000);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	689a      	ldr	r2, [r3, #8]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	490c      	ldr	r1, [pc, #48]	; (8007234 <_ZN2FC12ModuleBuzzerC1EP17TIM_HandleTypeDefmm+0x98>)
 8007204:	fba1 1202 	umull	r1, r2, r1, r2
 8007208:	0a12      	lsrs	r2, r2, #8
 800720a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	0003f7a0 	.word	0x0003f7a0
 800721c:	00042e50 	.word	0x00042e50
 8007220:	00045948 	.word	0x00045948
 8007224:	0005cc60 	.word	0x0005cc60
 8007228:	080239c4 	.word	0x080239c4
 800722c:	24000374 	.word	0x24000374
 8007230:	cccccccd 	.word	0xcccccccd
 8007234:	10624dd3 	.word	0x10624dd3

08007238 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>:


bool ModuleBuzzer::sendCommand(BuzzerCommand cmd){
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Buzzer_QueueHandle) != 0){
 8007240:	4b0d      	ldr	r3, [pc, #52]	; (8007278 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4618      	mov	r0, r3
 8007246:	f016 fb73 	bl	801d930 <osMessageQueueGetSpace>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	bf14      	ite	ne
 8007250:	2301      	movne	r3, #1
 8007252:	2300      	moveq	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d008      	beq.n	800726c <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x34>
		osMessageQueuePut(Buzzer_QueueHandle, (void*)&cmd, 0, 0);
 800725a:	4b07      	ldr	r3, [pc, #28]	; (8007278 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x40>)
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	1d39      	adds	r1, r7, #4
 8007260:	2300      	movs	r3, #0
 8007262:	2200      	movs	r2, #0
 8007264:	f016 fa7e 	bl	801d764 <osMessageQueuePut>
		return true;
 8007268:	2301      	movs	r3, #1
 800726a:	e000      	b.n	800726e <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE+0x36>
	}
	return false;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	24000374 	.word	0x24000374

0800727c <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE>:

void ModuleBuzzer::commandHandler(BuzzerCommand result){
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
	switch(result){
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b03      	cmp	r3, #3
 800728a:	d81b      	bhi.n	80072c4 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
 800728c:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x18>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	080072a5 	.word	0x080072a5
 8007298:	080072ad 	.word	0x080072ad
 800729c:	080072b5 	.word	0x080072b5
 80072a0:	080072bd 	.word	0x080072bd
	case BuzzerCommand::Armed:
		armed();
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f811 	bl	80072cc <_ZN2FC12ModuleBuzzer5armedEv>
		break;
 80072aa:	e00b      	b.n	80072c4 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::DisArmed:
		disarmed();
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f817 	bl	80072e0 <_ZN2FC12ModuleBuzzer8disarmedEv>
		break;
 80072b2:	e007      	b.n	80072c4 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::Success:
		success();
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f827 	bl	8007308 <_ZN2FC12ModuleBuzzer7successEv>
		break;
 80072ba:	e003      	b.n	80072c4 <_ZN2FC12ModuleBuzzer14commandHandlerENS_13BuzzerCommandE+0x48>
	case BuzzerCommand::Denied:
		denied();
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f819 	bl	80072f4 <_ZN2FC12ModuleBuzzer6deniedEv>
		break;
 80072c2:	bf00      	nop
	}
}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <_ZN2FC12ModuleBuzzer5armedEv>:

void ModuleBuzzer::armed(){
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
	//TODO armed sound
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <_ZN2FC12ModuleBuzzer8disarmedEv>:

void ModuleBuzzer::disarmed(){
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	//TODO disarmed sound
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <_ZN2FC12ModuleBuzzer6deniedEv>:

void ModuleBuzzer::denied(){
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
	//TODO denied sound
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <_ZN2FC12ModuleBuzzer7successEv>:

void ModuleBuzzer::success(){
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
//
//		/* Make each note sound and cut 1 mileecond */
//		HAL_TIM_PWM_Stop(htim, Channel);
//		osDelay(10);
//	}
	HAL_TIM_PWM_Start(htim, Channel);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	4619      	mov	r1, r3
 800731a:	4610      	mov	r0, r2
 800731c:	f00e fe70 	bl	8016000 <HAL_TIM_PWM_Start>
	osDelay(2000);
 8007320:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007324:	f015 ff98 	bl	801d258 <osDelay>
	HAL_TIM_PWM_Stop(htim, Channel);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	4619      	mov	r1, r3
 8007332:	4610      	mov	r0, r2
 8007334:	f00e ff36 	bl	80161a4 <HAL_TIM_PWM_Stop>
}
 8007338:	bf00      	nop
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>:
    SIMPLE_FUNC_IMPL(ModeFlag, ModeFlag, modeFlag)
 8007340:	b490      	push	{r4, r7}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8007352:	4613      	mov	r3, r2
 8007354:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007356:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bc90      	pop	{r4, r7}
 8007362:	4770      	bx	lr

08007364 <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8007364:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8007368:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 800736a:	4b0e      	ldr	r3, [pc, #56]	; (80073a4 <_ZL11microsecondv+0x40>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4619      	mov	r1, r3
 8007370:	f04f 0200 	mov.w	r2, #0
 8007374:	f04f 0b00 	mov.w	fp, #0
 8007378:	f04f 0c00 	mov.w	ip, #0
 800737c:	468c      	mov	ip, r1
 800737e:	f04f 0b00 	mov.w	fp, #0
 8007382:	4a09      	ldr	r2, [pc, #36]	; (80073a8 <_ZL11microsecondv+0x44>)
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007388:	4611      	mov	r1, r2
 800738a:	f04f 0200 	mov.w	r2, #0
 800738e:	ea4b 0301 	orr.w	r3, fp, r1
 8007392:	ea4c 0402 	orr.w	r4, ip, r2
}
 8007396:	4618      	mov	r0, r3
 8007398:	4621      	mov	r1, r4
 800739a:	46bd      	mov	sp, r7
 800739c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	240003d4 	.word	0x240003d4
 80073a8:	240094f4 	.word	0x240094f4

080073ac <_ZN2FC15ModuleCommanderC1Ev>:
  .cb_size = sizeof(Commander_QueueControlBlock),
  .mq_mem = &Commander_QueueBuffer,
  .mq_size = sizeof(Commander_QueueBuffer)
};

ModuleCommander::ModuleCommander(){
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	461a      	mov	r2, r3
 80073b8:	2300      	movs	r3, #0
 80073ba:	6013      	str	r3, [r2, #0]
 80073bc:	6053      	str	r3, [r2, #4]
 80073be:	6093      	str	r3, [r2, #8]
 80073c0:	60d3      	str	r3, [r2, #12]
	  /* creation of Command_Queue */
	  Commander_QueueHandle = osMessageQueueNew (3, sizeof(Command), &Commander_Queue_attributes);
 80073c2:	4a06      	ldr	r2, [pc, #24]	; (80073dc <_ZN2FC15ModuleCommanderC1Ev+0x30>)
 80073c4:	2104      	movs	r1, #4
 80073c6:	2003      	movs	r0, #3
 80073c8:	f016 f946 	bl	801d658 <osMessageQueueNew>
 80073cc:	4602      	mov	r2, r0
 80073ce:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <_ZN2FC15ModuleCommanderC1Ev+0x34>)
 80073d0:	601a      	str	r2, [r3, #0]
}
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	080239dc 	.word	0x080239dc
 80073e0:	240003d8 	.word	0x240003d8

080073e4 <_ZN2FC15ModuleCommander4mainEv>:

void ModuleCommander::main(){
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
	ModuleCommander moduleCommander;
 80073ea:	f107 0308 	add.w	r3, r7, #8
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff ffdc 	bl	80073ac <_ZN2FC15ModuleCommanderC1Ev>

	while(1){
		Command rcvCommand;
		if(osMessageQueueGet(Commander_QueueHandle, (void*)&rcvCommand, NULL, osWaitForever) == osOK){
 80073f4:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <_ZN2FC15ModuleCommander4mainEv+0x40>)
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	1d39      	adds	r1, r7, #4
 80073fa:	f04f 33ff 	mov.w	r3, #4294967295
 80073fe:	2200      	movs	r2, #0
 8007400:	f016 fa24 	bl	801d84c <osMessageQueueGet>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	bf0c      	ite	eq
 800740a:	2301      	moveq	r3, #1
 800740c:	2300      	movne	r3, #0
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d0ef      	beq.n	80073f4 <_ZN2FC15ModuleCommander4mainEv+0x10>
			moduleCommander.commandHandler(rcvCommand);
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	f107 0308 	add.w	r3, r7, #8
 800741a:	4611      	mov	r1, r2
 800741c:	4618      	mov	r0, r3
 800741e:	f000 f825 	bl	800746c <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>
		}
	}
 8007422:	e7e7      	b.n	80073f4 <_ZN2FC15ModuleCommander4mainEv+0x10>
 8007424:	240003d8 	.word	0x240003d8

08007428 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>:
}

bool ModuleCommander::sendCommand(Command cmd){
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
	if(osMessageQueueGetSpace(Commander_QueueHandle) != 0){
 8007430:	4b0d      	ldr	r3, [pc, #52]	; (8007468 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4618      	mov	r0, r3
 8007436:	f016 fa7b 	bl	801d930 <osMessageQueueGetSpace>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	bf14      	ite	ne
 8007440:	2301      	movne	r3, #1
 8007442:	2300      	moveq	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d008      	beq.n	800745c <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x34>
		osMessageQueuePut(Commander_QueueHandle, (void*)&cmd, 0, 0);
 800744a:	4b07      	ldr	r3, [pc, #28]	; (8007468 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x40>)
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	1d39      	adds	r1, r7, #4
 8007450:	2300      	movs	r3, #0
 8007452:	2200      	movs	r2, #0
 8007454:	f016 f986 	bl	801d764 <osMessageQueuePut>
		return true;
 8007458:	2301      	movs	r3, #1
 800745a:	e000      	b.n	800745e <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE+0x36>
	}
	return false;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	240003d8 	.word	0x240003d8

0800746c <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE>:

bool ModuleCommander::commandHandler(Command cmd){
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
	switch(cmd){
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b08      	cmp	r3, #8
 800747a:	d842      	bhi.n	8007502 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x96>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x18>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	080074a9 	.word	0x080074a9
 8007488:	080074b3 	.word	0x080074b3
 800748c:	080074bd 	.word	0x080074bd
 8007490:	080074c7 	.word	0x080074c7
 8007494:	080074d1 	.word	0x080074d1
 8007498:	080074db 	.word	0x080074db
 800749c:	080074e5 	.word	0x080074e5
 80074a0:	080074ef 	.word	0x080074ef
 80074a4:	080074f9 	.word	0x080074f9
	case Command::ControlAttitude:
		return toAttitude();
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f82f 	bl	800750c <_ZN2FC15ModuleCommander10toAttitudeEv>
 80074ae:	4603      	mov	r3, r0
 80074b0:	e028      	b.n	8007504 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x98>
		break;
	case Command::ControlPosition:
		return toPosition();
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f835 	bl	8007522 <_ZN2FC15ModuleCommander10toPositionEv>
 80074b8:	4603      	mov	r3, r0
 80074ba:	e023      	b.n	8007504 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x98>
		break;
	case Command::AutoWaypoint:
		return toWaypoint();
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f83b 	bl	8007538 <_ZN2FC15ModuleCommander10toWaypointEv>
 80074c2:	4603      	mov	r3, r0
 80074c4:	e01e      	b.n	8007504 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x98>
		break;
	case Command::AutoRTL:
		return toRTL();
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f841 	bl	800754e <_ZN2FC15ModuleCommander5toRTLEv>
 80074cc:	4603      	mov	r3, r0
 80074ce:	e019      	b.n	8007504 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x98>
		break;
	case Command::AutoTakeoff:
		return toTakeoff();
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f847 	bl	8007564 <_ZN2FC15ModuleCommander9toTakeoffEv>
 80074d6:	4603      	mov	r3, r0
 80074d8:	e014      	b.n	8007504 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x98>
		break;
	case Command::AutoLand:
		return toLand();
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f84d 	bl	800757a <_ZN2FC15ModuleCommander6toLandEv>
 80074e0:	4603      	mov	r3, r0
 80074e2:	e00f      	b.n	8007504 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x98>
		break;

	case Command::Arm:
		return toArm();
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f853 	bl	8007590 <_ZN2FC15ModuleCommander5toArmEv>
 80074ea:	4603      	mov	r3, r0
 80074ec:	e00a      	b.n	8007504 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x98>
		break;
	case Command::DisArm:
		return toDisArm();
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f87c 	bl	80075ec <_ZN2FC15ModuleCommander8toDisArmEv>
 80074f4:	4603      	mov	r3, r0
 80074f6:	e005      	b.n	8007504 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x98>
		break;

	case Command::MotorCalibration:
		return toMotorCalibration();
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f899 	bl	8007630 <_ZN2FC15ModuleCommander18toMotorCalibrationEv>
 80074fe:	4603      	mov	r3, r0
 8007500:	e000      	b.n	8007504 <_ZN2FC15ModuleCommander14commandHandlerENS_7CommandE+0x98>
		break;
	}
	return false;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <_ZN2FC15ModuleCommander10toAttitudeEv>:

bool ModuleCommander::toAttitude(){
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
	//TODO change to attitude controll
	/*
	 * check condition of attitude control
	 */
}
 8007514:	bf00      	nop
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <_ZN2FC15ModuleCommander10toPositionEv>:

bool ModuleCommander::toPosition(){
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
	//TODO change to position controll
}
 800752a:	bf00      	nop
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <_ZN2FC15ModuleCommander10toWaypointEv>:
bool ModuleCommander::toWaypoint(){
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	//TODO change to waypoint autopilot
}
 8007540:	bf00      	nop
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <_ZN2FC15ModuleCommander5toRTLEv>:

bool ModuleCommander::toRTL(){
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
	//TODO change to auto RTL
}
 8007556:	bf00      	nop
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <_ZN2FC15ModuleCommander9toTakeoffEv>:
bool ModuleCommander::toTakeoff(){
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
	//TODO change to auto takeoff
}
 800756c:	bf00      	nop
 800756e:	4618      	mov	r0, r3
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <_ZN2FC15ModuleCommander6toLandEv>:

bool ModuleCommander::toLand(){
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
	//TODO change to auto land
}
 8007582:	bf00      	nop
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <_ZN2FC15ModuleCommander5toArmEv>:

bool ModuleCommander::toArm(){
 8007590:	b590      	push	{r4, r7, lr}
 8007592:	b08b      	sub	sp, #44	; 0x2c
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
	//TODO check arm condition
	struct Controller ctl;

	/* toArm condition */
	//TODO denied buzz
	msgBus.getController(&ctl);
 8007598:	f107 0318 	add.w	r3, r7, #24
 800759c:	4619      	mov	r1, r3
 800759e:	4812      	ldr	r0, [pc, #72]	; (80075e8 <_ZN2FC15ModuleCommander5toArmEv+0x58>)
 80075a0:	f7ff fbe2 	bl	8006d68 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
	if(ctl.throttle > 1050) return false; /* can't arm */
 80075a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075a6:	f240 421a 	movw	r2, #1050	; 0x41a
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d901      	bls.n	80075b2 <_ZN2FC15ModuleCommander5toArmEv+0x22>
 80075ae:	2300      	movs	r3, #0
 80075b0:	e016      	b.n	80075e0 <_ZN2FC15ModuleCommander5toArmEv+0x50>


	struct ModeFlag modeFlag;
	msgBus.getModeFlag(&modeFlag);
 80075b2:	f107 0308 	add.w	r3, r7, #8
 80075b6:	4619      	mov	r1, r3
 80075b8:	480b      	ldr	r0, [pc, #44]	; (80075e8 <_ZN2FC15ModuleCommander5toArmEv+0x58>)
 80075ba:	f7ff fc1b 	bl	8006df4 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	modeFlag.timestamp = microsecond();
 80075be:	f7ff fed1 	bl	8007364 <_ZL11microsecondv>
 80075c2:	4603      	mov	r3, r0
 80075c4:	460c      	mov	r4, r1
 80075c6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	modeFlag.armMode = Command::Arm;
 80075ca:	2306      	movs	r3, #6
 80075cc:	613b      	str	r3, [r7, #16]
	msgBus.setModeFlag(modeFlag);
 80075ce:	f107 0308 	add.w	r3, r7, #8
 80075d2:	4619      	mov	r1, r3
 80075d4:	4804      	ldr	r0, [pc, #16]	; (80075e8 <_ZN2FC15ModuleCommander5toArmEv+0x58>)
 80075d6:	f7ff feb3 	bl	8007340 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 80075da:	2002      	movs	r0, #2
 80075dc:	f7ff fe2c 	bl	8007238 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	372c      	adds	r7, #44	; 0x2c
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd90      	pop	{r4, r7, pc}
 80075e8:	24000438 	.word	0x24000438

080075ec <_ZN2FC15ModuleCommander8toDisArmEv>:

bool ModuleCommander::toDisArm(){
 80075ec:	b590      	push	{r4, r7, lr}
 80075ee:	b08d      	sub	sp, #52	; 0x34
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
//	   pwm.m4 > DISARM_PWM && pwm.m5 > DISARM_PWM && pwm.m6 > DISARM_PWM){
//		/* can't disarm */
//
//	}

	msgBus.getModeFlag(&modeFlag);
 80075f4:	f107 0320 	add.w	r3, r7, #32
 80075f8:	4619      	mov	r1, r3
 80075fa:	480c      	ldr	r0, [pc, #48]	; (800762c <_ZN2FC15ModuleCommander8toDisArmEv+0x40>)
 80075fc:	f7ff fbfa 	bl	8006df4 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	modeFlag.timestamp = microsecond();
 8007600:	f7ff feb0 	bl	8007364 <_ZL11microsecondv>
 8007604:	4603      	mov	r3, r0
 8007606:	460c      	mov	r4, r1
 8007608:	e9c7 3408 	strd	r3, r4, [r7, #32]
	modeFlag.armMode = Command::DisArm;
 800760c:	2307      	movs	r3, #7
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
	msgBus.setModeFlag(modeFlag);
 8007610:	f107 0320 	add.w	r3, r7, #32
 8007614:	4619      	mov	r1, r3
 8007616:	4805      	ldr	r0, [pc, #20]	; (800762c <_ZN2FC15ModuleCommander8toDisArmEv+0x40>)
 8007618:	f7ff fe92 	bl	8007340 <_ZN2FC6MsgBus11setModeFlagERKNS_8ModeFlagE>

	ModuleBuzzer::sendCommand(BuzzerCommand::Success);
 800761c:	2002      	movs	r0, #2
 800761e:	f7ff fe0b 	bl	8007238 <_ZN2FC12ModuleBuzzer11sendCommandENS_13BuzzerCommandE>
}
 8007622:	bf00      	nop
 8007624:	4618      	mov	r0, r3
 8007626:	3734      	adds	r7, #52	; 0x34
 8007628:	46bd      	mov	sp, r7
 800762a:	bd90      	pop	{r4, r7, pc}
 800762c:	24000438 	.word	0x24000438

08007630 <_ZN2FC15ModuleCommander18toMotorCalibrationEv>:

bool ModuleCommander::toMotorCalibration(){
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
	osKernelLock();
 8007638:	f015 fc12 	bl	801ce60 <osKernelLock>

	struct Controller ctl;

	while(1){
		msgBus.getController(&ctl);
 800763c:	f107 0308 	add.w	r3, r7, #8
 8007640:	4619      	mov	r1, r3
 8007642:	4811      	ldr	r0, [pc, #68]	; (8007688 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x58>)
 8007644:	f7ff fb90 	bl	8006d68 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>

		m1.setPWM(ctl.throttle);
 8007648:	8afb      	ldrh	r3, [r7, #22]
 800764a:	4619      	mov	r1, r3
 800764c:	480f      	ldr	r0, [pc, #60]	; (800768c <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x5c>)
 800764e:	f7f9 f9a1 	bl	8000994 <_ZN2FC5Motor6setPWMEt>
		m2.setPWM(ctl.throttle);
 8007652:	8afb      	ldrh	r3, [r7, #22]
 8007654:	4619      	mov	r1, r3
 8007656:	480e      	ldr	r0, [pc, #56]	; (8007690 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x60>)
 8007658:	f7f9 f99c 	bl	8000994 <_ZN2FC5Motor6setPWMEt>
		m3.setPWM(ctl.throttle);
 800765c:	8afb      	ldrh	r3, [r7, #22]
 800765e:	4619      	mov	r1, r3
 8007660:	480c      	ldr	r0, [pc, #48]	; (8007694 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x64>)
 8007662:	f7f9 f997 	bl	8000994 <_ZN2FC5Motor6setPWMEt>
		m4.setPWM(ctl.throttle);
 8007666:	8afb      	ldrh	r3, [r7, #22]
 8007668:	4619      	mov	r1, r3
 800766a:	480b      	ldr	r0, [pc, #44]	; (8007698 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x68>)
 800766c:	f7f9 f992 	bl	8000994 <_ZN2FC5Motor6setPWMEt>
		m5.setPWM(ctl.throttle);
 8007670:	8afb      	ldrh	r3, [r7, #22]
 8007672:	4619      	mov	r1, r3
 8007674:	4809      	ldr	r0, [pc, #36]	; (800769c <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x6c>)
 8007676:	f7f9 f98d 	bl	8000994 <_ZN2FC5Motor6setPWMEt>
		m6.setPWM(ctl.throttle);
 800767a:	8afb      	ldrh	r3, [r7, #22]
 800767c:	4619      	mov	r1, r3
 800767e:	4808      	ldr	r0, [pc, #32]	; (80076a0 <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0x70>)
 8007680:	f7f9 f988 	bl	8000994 <_ZN2FC5Motor6setPWMEt>
		msgBus.getController(&ctl);
 8007684:	e7da      	b.n	800763c <_ZN2FC15ModuleCommander18toMotorCalibrationEv+0xc>
 8007686:	bf00      	nop
 8007688:	24000438 	.word	0x24000438
 800768c:	24000164 	.word	0x24000164
 8007690:	24000170 	.word	0x24000170
 8007694:	2400017c 	.word	0x2400017c
 8007698:	24000188 	.word	0x24000188
 800769c:	24000194 	.word	0x24000194
 80076a0:	240001a0 	.word	0x240001a0

080076a4 <_ZN2FC6MsgBusC1Ev>:
	MsgBus()
 80076a4:	b590      	push	{r4, r7, lr}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
		, health{0}
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	461a      	mov	r2, r3
 80076b0:	2300      	movs	r3, #0
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	6053      	str	r3, [r2, #4]
 80076b6:	6093      	str	r3, [r2, #8]
 80076b8:	60d3      	str	r3, [r2, #12]
 80076ba:	6113      	str	r3, [r2, #16]
 80076bc:	6153      	str	r3, [r2, #20]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	3318      	adds	r3, #24
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	605a      	str	r2, [r3, #4]
 80076c8:	609a      	str	r2, [r3, #8]
 80076ca:	60da      	str	r2, [r3, #12]
 80076cc:	611a      	str	r2, [r3, #16]
 80076ce:	615a      	str	r2, [r3, #20]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3330      	adds	r3, #48	; 0x30
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	605a      	str	r2, [r3, #4]
 80076da:	609a      	str	r2, [r3, #8]
 80076dc:	60da      	str	r2, [r3, #12]
 80076de:	611a      	str	r2, [r3, #16]
 80076e0:	615a      	str	r2, [r3, #20]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3348      	adds	r3, #72	; 0x48
 80076e6:	2248      	movs	r2, #72	; 0x48
 80076e8:	2100      	movs	r1, #0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f01a fd51 	bl	8022192 <memset>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3390      	adds	r3, #144	; 0x90
 80076f4:	2200      	movs	r2, #0
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	605a      	str	r2, [r3, #4]
 80076fa:	609a      	str	r2, [r3, #8]
 80076fc:	60da      	str	r2, [r3, #12]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	33a0      	adds	r3, #160	; 0xa0
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	605a      	str	r2, [r3, #4]
 8007708:	609a      	str	r2, [r3, #8]
 800770a:	60da      	str	r2, [r3, #12]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	33b0      	adds	r3, #176	; 0xb0
 8007710:	2228      	movs	r2, #40	; 0x28
 8007712:	2100      	movs	r1, #0
 8007714:	4618      	mov	r0, r3
 8007716:	f01a fd3c 	bl	8022192 <memset>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	33d8      	adds	r3, #216	; 0xd8
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	605a      	str	r2, [r3, #4]
 8007724:	609a      	str	r2, [r3, #8]
 8007726:	60da      	str	r2, [r3, #12]
 8007728:	611a      	str	r2, [r3, #16]
 800772a:	615a      	str	r2, [r3, #20]
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	f04f 0300 	mov.w	r3, #0
 8007732:	f04f 0400 	mov.w	r4, #0
 8007736:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2207      	movs	r2, #7
 800773e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007750:	2220      	movs	r2, #32
 8007752:	2100      	movs	r1, #0
 8007754:	4618      	mov	r0, r3
 8007756:	f01a fd1c 	bl	8022192 <memset>
	{}
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	bd90      	pop	{r4, r7, pc}

08007764 <_Z41__static_initialization_and_destruction_0ii>:

namespace FC{

MsgBus msgBus;

}
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d107      	bne.n	8007784 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800777a:	4293      	cmp	r3, r2
 800777c:	d102      	bne.n	8007784 <_Z41__static_initialization_and_destruction_0ii+0x20>
MsgBus msgBus;
 800777e:	4803      	ldr	r0, [pc, #12]	; (800778c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8007780:	f7ff ff90 	bl	80076a4 <_ZN2FC6MsgBusC1Ev>
}
 8007784:	bf00      	nop
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	24000438 	.word	0x24000438

08007790 <_GLOBAL__sub_I__ZN2FC6msgBusE>:
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
 8007794:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007798:	2001      	movs	r0, #1
 800779a:	f7ff ffe3 	bl	8007764 <_Z41__static_initialization_and_destruction_0ii>
 800779e:	bd80      	pop	{r7, pc}

080077a0 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80077aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80077ae:	f019 fbe5 	bl	8020f7c <cosf>
 80077b2:	eef0 7a40 	vmov.f32	s15, s0
 80077b6:	eeb0 0a67 	vmov.f32	s0, s15
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80077ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80077ce:	f019 fc15 	bl	8020ffc <sinf>
 80077d2:	eef0 7a40 	vmov.f32	s15, s0
 80077d6:	eeb0 0a67 	vmov.f32	s0, s15
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <_bitCount64>:
#define SBUS_ERROR_FLAG_BIT_SIZE 64

/*
 *  count '1' from 64bit varible
 */
uint8_t _bitCount64(uint64_t flagBit){
 80077e0:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80077e4:	b085      	sub	sp, #20
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t cnt = 0;
 80077ec:	2300      	movs	r3, #0
 80077ee:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 80077f0:	2300      	movs	r3, #0
 80077f2:	60bb      	str	r3, [r7, #8]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b3f      	cmp	r3, #63	; 0x3f
 80077f8:	dc16      	bgt.n	8007828 <_bitCount64+0x48>
		if((flagBit & (1<<i))!=0) cnt++;
 80077fa:	2201      	movs	r2, #1
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007802:	4619      	mov	r1, r3
 8007804:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8007808:	e9d7 3400 	ldrd	r3, r4, [r7]
 800780c:	ea03 0b01 	and.w	fp, r3, r1
 8007810:	ea04 0c02 	and.w	ip, r4, r2
 8007814:	ea5b 030c 	orrs.w	r3, fp, ip
 8007818:	d002      	beq.n	8007820 <_bitCount64+0x40>
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	3301      	adds	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i < 64; i++){
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	3301      	adds	r3, #1
 8007824:	60bb      	str	r3, [r7, #8]
 8007826:	e7e5      	b.n	80077f4 <_bitCount64+0x14>
	}
	return cnt;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8007834:	4770      	bx	lr
	...

08007838 <SBUS_init>:
SBUS_t sbus;

static uint8_t _parserState = 0;		//for parsing
static uint8_t _curByte, _prevByte;

void SBUS_init(UART_HandleTypeDef *huart) {
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
	sbus.huart = huart;
 8007840:	4a12      	ldr	r2, [pc, #72]	; (800788c <SBUS_init+0x54>)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6013      	str	r3, [r2, #0]

	memset(sbus.dmaBuf, 0, sizeof(sbus.dmaBuf));
 8007846:	2219      	movs	r2, #25
 8007848:	2100      	movs	r1, #0
 800784a:	4811      	ldr	r0, [pc, #68]	; (8007890 <SBUS_init+0x58>)
 800784c:	f01a fca1 	bl	8022192 <memset>
	memset(sbus.rxBuf, 0, sizeof(sbus.rxBuf));
 8007850:	2219      	movs	r2, #25
 8007852:	2100      	movs	r1, #0
 8007854:	480f      	ldr	r0, [pc, #60]	; (8007894 <SBUS_init+0x5c>)
 8007856:	f01a fc9c 	bl	8022192 <memset>
	memset(sbus.rcValue, 0, sizeof(sbus.rcValue));
 800785a:	2224      	movs	r2, #36	; 0x24
 800785c:	2100      	movs	r1, #0
 800785e:	480e      	ldr	r0, [pc, #56]	; (8007898 <SBUS_init+0x60>)
 8007860:	f01a fc97 	bl	8022192 <memset>
	memset(sbus.compRcValue, 0, sizeof(sbus.compRcValue));
 8007864:	2224      	movs	r2, #36	; 0x24
 8007866:	2100      	movs	r1, #0
 8007868:	480c      	ldr	r0, [pc, #48]	; (800789c <SBUS_init+0x64>)
 800786a:	f01a fc92 	bl	8022192 <memset>
	sbus.state = SBUS_STATE_FAILSAFE;
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <SBUS_init+0x54>)
 8007870:	2200      	movs	r2, #0
 8007872:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	HAL_UART_Receive_DMA(sbus.huart, sbus.dmaBuf, SBUS_DMA_BUF_SIZE);
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <SBUS_init+0x54>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2219      	movs	r2, #25
 800787c:	4904      	ldr	r1, [pc, #16]	; (8007890 <SBUS_init+0x58>)
 800787e:	4618      	mov	r0, r3
 8007880:	f010 f946 	bl	8017b10 <HAL_UART_Receive_DMA>
}
 8007884:	bf00      	nop
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	240005f8 	.word	0x240005f8
 8007890:	240005fc 	.word	0x240005fc
 8007894:	24000615 	.word	0x24000615
 8007898:	2400062e 	.word	0x2400062e
 800789c:	24000652 	.word	0x24000652

080078a0 <SBUS_decoding>:

SBUS_Result_t SBUS_decoding() {
 80078a0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
	if(sbus.rxBuf[23] & SBUS_FAIL_SAFE){	/* failsafe frame */
 80078a8:	4b3a      	ldr	r3, [pc, #232]	; (8007994 <SBUS_decoding+0xf4>)
 80078aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078ae:	f003 0308 	and.w	r3, r3, #8
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d005      	beq.n	80078c2 <SBUS_decoding+0x22>
		sbus.state = SBUS_STATE_FAILSAFE;
 80078b6:	4b37      	ldr	r3, [pc, #220]	; (8007994 <SBUS_decoding+0xf4>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
		return SBUS_Result_OldData;
 80078be:	2300      	movs	r3, #0
 80078c0:	e1f6      	b.n	8007cb0 <SBUS_decoding+0x410>
	}

	/* handle bit flag  */
	if(++(sbus._bitPos) == SBUS_ERROR_FLAG_BIT_SIZE) sbus._bitPos = 0; /* bitPos over 64 */
 80078c2:	4b34      	ldr	r3, [pc, #208]	; (8007994 <SBUS_decoding+0xf4>)
 80078c4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80078c8:	3301      	adds	r3, #1
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	4b31      	ldr	r3, [pc, #196]	; (8007994 <SBUS_decoding+0xf4>)
 80078ce:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 80078d2:	4b30      	ldr	r3, [pc, #192]	; (8007994 <SBUS_decoding+0xf4>)
 80078d4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80078d8:	2b40      	cmp	r3, #64	; 0x40
 80078da:	bf0c      	ite	eq
 80078dc:	2301      	moveq	r3, #1
 80078de:	2300      	movne	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <SBUS_decoding+0x4e>
 80078e6:	4b2b      	ldr	r3, [pc, #172]	; (8007994 <SBUS_decoding+0xf4>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) sbus._errBit |= 1<<sbus._bitPos;	/* lost frame */
 80078ee:	4b29      	ldr	r3, [pc, #164]	; (8007994 <SBUS_decoding+0xf4>)
 80078f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d013      	beq.n	8007924 <SBUS_decoding+0x84>
 80078fc:	4b25      	ldr	r3, [pc, #148]	; (8007994 <SBUS_decoding+0xf4>)
 80078fe:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 8007902:	4b24      	ldr	r3, [pc, #144]	; (8007994 <SBUS_decoding+0xf4>)
 8007904:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007908:	4618      	mov	r0, r3
 800790a:	2301      	movs	r3, #1
 800790c:	4083      	lsls	r3, r0
 800790e:	469b      	mov	fp, r3
 8007910:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8007914:	ea4b 0301 	orr.w	r3, fp, r1
 8007918:	ea4c 0402 	orr.w	r4, ip, r2
 800791c:	4a1d      	ldr	r2, [pc, #116]	; (8007994 <SBUS_decoding+0xf4>)
 800791e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
 8007922:	e013      	b.n	800794c <SBUS_decoding+0xac>
	else sbus._errBit &= ~(1<<sbus._bitPos);	/* normal frame */
 8007924:	4b1b      	ldr	r3, [pc, #108]	; (8007994 <SBUS_decoding+0xf4>)
 8007926:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
 800792a:	4b1a      	ldr	r3, [pc, #104]	; (8007994 <SBUS_decoding+0xf4>)
 800792c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007930:	4618      	mov	r0, r3
 8007932:	2301      	movs	r3, #1
 8007934:	4083      	lsls	r3, r0
 8007936:	43db      	mvns	r3, r3
 8007938:	469b      	mov	fp, r3
 800793a:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 800793e:	ea0b 0301 	and.w	r3, fp, r1
 8007942:	ea0c 0402 	and.w	r4, ip, r2
 8007946:	4a13      	ldr	r2, [pc, #76]	; (8007994 <SBUS_decoding+0xf4>)
 8007948:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	sbus._errCnt = _bitCount64(sbus._errBit);	/* count error bit */
 800794c:	4b11      	ldr	r3, [pc, #68]	; (8007994 <SBUS_decoding+0xf4>)
 800794e:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8007952:	4618      	mov	r0, r3
 8007954:	4621      	mov	r1, r4
 8007956:	f7ff ff43 	bl	80077e0 <_bitCount64>
 800795a:	4603      	mov	r3, r0
 800795c:	461a      	mov	r2, r3
 800795e:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <SBUS_decoding+0xf4>)
 8007960:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

	/* handle sbus state */
	if(sbus._errCnt > SBUS_ERROR_THRESHHOLD) sbus.state = SBUS_STATE_LOSS; /* if error rate over the threshold */
 8007964:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <SBUS_decoding+0xf4>)
 8007966:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800796a:	2b14      	cmp	r3, #20
 800796c:	d904      	bls.n	8007978 <SBUS_decoding+0xd8>
 800796e:	4b09      	ldr	r3, [pc, #36]	; (8007994 <SBUS_decoding+0xf4>)
 8007970:	2201      	movs	r2, #1
 8007972:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8007976:	e003      	b.n	8007980 <SBUS_decoding+0xe0>
	else sbus.state = SBUS_STATE_STEADY;	/* sbus signal stable */
 8007978:	4b06      	ldr	r3, [pc, #24]	; (8007994 <SBUS_decoding+0xf4>)
 800797a:	2202      	movs	r2, #2
 800797c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

	if(sbus.rxBuf[23] & SBUS_LOST_FRAME) return SBUS_Result_OldData; /* if this frame is lost frame, not decode packet */
 8007980:	4b04      	ldr	r3, [pc, #16]	; (8007994 <SBUS_decoding+0xf4>)
 8007982:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007986:	f003 0304 	and.w	r3, r3, #4
 800798a:	2b00      	cmp	r3, #0
 800798c:	d004      	beq.n	8007998 <SBUS_decoding+0xf8>
 800798e:	2300      	movs	r3, #0
 8007990:	e18e      	b.n	8007cb0 <SBUS_decoding+0x410>
 8007992:	bf00      	nop
 8007994:	240005f8 	.word	0x240005f8

	/* decode packet */
	sbus.rcValue[0] = ((uint16_t)sbus.rxBuf[1] >> 0 | ((uint16_t)sbus.rxBuf[2] << 8)) & 0x07FF;
 8007998:	4ba7      	ldr	r3, [pc, #668]	; (8007c38 <SBUS_decoding+0x398>)
 800799a:	7f9b      	ldrb	r3, [r3, #30]
 800799c:	b21a      	sxth	r2, r3
 800799e:	4ba6      	ldr	r3, [pc, #664]	; (8007c38 <SBUS_decoding+0x398>)
 80079a0:	7fdb      	ldrb	r3, [r3, #31]
 80079a2:	021b      	lsls	r3, r3, #8
 80079a4:	b21b      	sxth	r3, r3
 80079a6:	4313      	orrs	r3, r2
 80079a8:	b21b      	sxth	r3, r3
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	4ba1      	ldr	r3, [pc, #644]	; (8007c38 <SBUS_decoding+0x398>)
 80079b4:	86da      	strh	r2, [r3, #54]	; 0x36
	sbus.rcValue[1] = ((uint16_t)sbus.rxBuf[2] >> 3 | ((uint16_t)sbus.rxBuf[3] << 5)) & 0x07FF;
 80079b6:	4ba0      	ldr	r3, [pc, #640]	; (8007c38 <SBUS_decoding+0x398>)
 80079b8:	7fdb      	ldrb	r3, [r3, #31]
 80079ba:	10db      	asrs	r3, r3, #3
 80079bc:	b21a      	sxth	r2, r3
 80079be:	4b9e      	ldr	r3, [pc, #632]	; (8007c38 <SBUS_decoding+0x398>)
 80079c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079c4:	015b      	lsls	r3, r3, #5
 80079c6:	b21b      	sxth	r3, r3
 80079c8:	4313      	orrs	r3, r2
 80079ca:	b21b      	sxth	r3, r3
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	4b98      	ldr	r3, [pc, #608]	; (8007c38 <SBUS_decoding+0x398>)
 80079d6:	871a      	strh	r2, [r3, #56]	; 0x38
	sbus.rcValue[2] = ((uint16_t)sbus.rxBuf[3] >> 6 | ((uint16_t)sbus.rxBuf[4] << 2) | (uint16_t)sbus.rxBuf[5] << 10) & 0x07FF;
 80079d8:	4b97      	ldr	r3, [pc, #604]	; (8007c38 <SBUS_decoding+0x398>)
 80079da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079de:	119b      	asrs	r3, r3, #6
 80079e0:	b21a      	sxth	r2, r3
 80079e2:	4b95      	ldr	r3, [pc, #596]	; (8007c38 <SBUS_decoding+0x398>)
 80079e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	b21b      	sxth	r3, r3
 80079ec:	4313      	orrs	r3, r2
 80079ee:	b21a      	sxth	r2, r3
 80079f0:	4b91      	ldr	r3, [pc, #580]	; (8007c38 <SBUS_decoding+0x398>)
 80079f2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80079f6:	029b      	lsls	r3, r3, #10
 80079f8:	b21b      	sxth	r3, r3
 80079fa:	4313      	orrs	r3, r2
 80079fc:	b21b      	sxth	r3, r3
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	4b8c      	ldr	r3, [pc, #560]	; (8007c38 <SBUS_decoding+0x398>)
 8007a08:	875a      	strh	r2, [r3, #58]	; 0x3a
	sbus.rcValue[3] = ((uint16_t)sbus.rxBuf[5] >> 1 | ((uint16_t)sbus.rxBuf[6] << 7)) & 0x07FF;
 8007a0a:	4b8b      	ldr	r3, [pc, #556]	; (8007c38 <SBUS_decoding+0x398>)
 8007a0c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007a10:	105b      	asrs	r3, r3, #1
 8007a12:	b21a      	sxth	r2, r3
 8007a14:	4b88      	ldr	r3, [pc, #544]	; (8007c38 <SBUS_decoding+0x398>)
 8007a16:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007a1a:	01db      	lsls	r3, r3, #7
 8007a1c:	b21b      	sxth	r3, r3
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	b21b      	sxth	r3, r3
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	4b83      	ldr	r3, [pc, #524]	; (8007c38 <SBUS_decoding+0x398>)
 8007a2c:	879a      	strh	r2, [r3, #60]	; 0x3c
	sbus.rcValue[4] = ((uint16_t)sbus.rxBuf[6] >> 4 | ((uint16_t)sbus.rxBuf[7] << 4)) & 0x07FF;
 8007a2e:	4b82      	ldr	r3, [pc, #520]	; (8007c38 <SBUS_decoding+0x398>)
 8007a30:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007a34:	111b      	asrs	r3, r3, #4
 8007a36:	b21a      	sxth	r2, r3
 8007a38:	4b7f      	ldr	r3, [pc, #508]	; (8007c38 <SBUS_decoding+0x398>)
 8007a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	b21b      	sxth	r3, r3
 8007a42:	4313      	orrs	r3, r2
 8007a44:	b21b      	sxth	r3, r3
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	4b7a      	ldr	r3, [pc, #488]	; (8007c38 <SBUS_decoding+0x398>)
 8007a50:	87da      	strh	r2, [r3, #62]	; 0x3e
	sbus.rcValue[5] = ((uint16_t)sbus.rxBuf[7] >> 7 | ((uint16_t)sbus.rxBuf[8] << 1) | (uint16_t)sbus.rxBuf[9] << 9) & 0x07FF;
 8007a52:	4b79      	ldr	r3, [pc, #484]	; (8007c38 <SBUS_decoding+0x398>)
 8007a54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a58:	11db      	asrs	r3, r3, #7
 8007a5a:	b21a      	sxth	r2, r3
 8007a5c:	4b76      	ldr	r3, [pc, #472]	; (8007c38 <SBUS_decoding+0x398>)
 8007a5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	b21b      	sxth	r3, r3
 8007a66:	4313      	orrs	r3, r2
 8007a68:	b21a      	sxth	r2, r3
 8007a6a:	4b73      	ldr	r3, [pc, #460]	; (8007c38 <SBUS_decoding+0x398>)
 8007a6c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007a70:	025b      	lsls	r3, r3, #9
 8007a72:	b21b      	sxth	r3, r3
 8007a74:	4313      	orrs	r3, r2
 8007a76:	b21b      	sxth	r3, r3
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	4b6d      	ldr	r3, [pc, #436]	; (8007c38 <SBUS_decoding+0x398>)
 8007a82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	sbus.rcValue[6] = ((uint16_t)sbus.rxBuf[9] >> 2 | ((uint16_t)sbus.rxBuf[10] << 6)) & 0x07FF;
 8007a86:	4b6c      	ldr	r3, [pc, #432]	; (8007c38 <SBUS_decoding+0x398>)
 8007a88:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007a8c:	109b      	asrs	r3, r3, #2
 8007a8e:	b21a      	sxth	r2, r3
 8007a90:	4b69      	ldr	r3, [pc, #420]	; (8007c38 <SBUS_decoding+0x398>)
 8007a92:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007a96:	019b      	lsls	r3, r3, #6
 8007a98:	b21b      	sxth	r3, r3
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	b21b      	sxth	r3, r3
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	4b64      	ldr	r3, [pc, #400]	; (8007c38 <SBUS_decoding+0x398>)
 8007aa8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	sbus.rcValue[7] = ((uint16_t)sbus.rxBuf[10] >> 5 | ((uint16_t)sbus.rxBuf[11] << 3)) & 0x07FF;
 8007aac:	4b62      	ldr	r3, [pc, #392]	; (8007c38 <SBUS_decoding+0x398>)
 8007aae:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8007ab2:	115b      	asrs	r3, r3, #5
 8007ab4:	b21a      	sxth	r2, r3
 8007ab6:	4b60      	ldr	r3, [pc, #384]	; (8007c38 <SBUS_decoding+0x398>)
 8007ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	b21b      	sxth	r3, r3
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	b21b      	sxth	r3, r3
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	4b5a      	ldr	r3, [pc, #360]	; (8007c38 <SBUS_decoding+0x398>)
 8007ace:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	sbus.rcValue[8] = ((uint16_t)sbus.rxBuf[12] << 0 | ((uint16_t)sbus.rxBuf[13] << 8)) & 0x07FF;
 8007ad2:	4b59      	ldr	r3, [pc, #356]	; (8007c38 <SBUS_decoding+0x398>)
 8007ad4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007ad8:	b21a      	sxth	r2, r3
 8007ada:	4b57      	ldr	r3, [pc, #348]	; (8007c38 <SBUS_decoding+0x398>)
 8007adc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8007ae0:	021b      	lsls	r3, r3, #8
 8007ae2:	b21b      	sxth	r3, r3
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	b21b      	sxth	r3, r3
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	4b51      	ldr	r3, [pc, #324]	; (8007c38 <SBUS_decoding+0x398>)
 8007af2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	sbus.rcValue[9] = ((uint16_t)sbus.rxBuf[13] >> 3 | ((uint16_t)sbus.rxBuf[14] << 5)) & 0x07FF;
 8007af6:	4b50      	ldr	r3, [pc, #320]	; (8007c38 <SBUS_decoding+0x398>)
 8007af8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8007afc:	10db      	asrs	r3, r3, #3
 8007afe:	b21a      	sxth	r2, r3
 8007b00:	4b4d      	ldr	r3, [pc, #308]	; (8007c38 <SBUS_decoding+0x398>)
 8007b02:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007b06:	015b      	lsls	r3, r3, #5
 8007b08:	b21b      	sxth	r3, r3
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	b21b      	sxth	r3, r3
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	4b48      	ldr	r3, [pc, #288]	; (8007c38 <SBUS_decoding+0x398>)
 8007b18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	sbus.rcValue[10] = ((uint16_t)sbus.rxBuf[14] >> 6 | ((uint16_t)sbus.rxBuf[15] << 2) | (uint16_t)sbus.rxBuf[16] << 10) & 0x07FF;
 8007b1c:	4b46      	ldr	r3, [pc, #280]	; (8007c38 <SBUS_decoding+0x398>)
 8007b1e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007b22:	119b      	asrs	r3, r3, #6
 8007b24:	b21a      	sxth	r2, r3
 8007b26:	4b44      	ldr	r3, [pc, #272]	; (8007c38 <SBUS_decoding+0x398>)
 8007b28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	b21b      	sxth	r3, r3
 8007b30:	4313      	orrs	r3, r2
 8007b32:	b21a      	sxth	r2, r3
 8007b34:	4b40      	ldr	r3, [pc, #256]	; (8007c38 <SBUS_decoding+0x398>)
 8007b36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b3a:	029b      	lsls	r3, r3, #10
 8007b3c:	b21b      	sxth	r3, r3
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	b21b      	sxth	r3, r3
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	4b3b      	ldr	r3, [pc, #236]	; (8007c38 <SBUS_decoding+0x398>)
 8007b4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	sbus.rcValue[11] = ((uint16_t)sbus.rxBuf[16] >> 1 | ((uint16_t)sbus.rxBuf[17] << 7)) & 0x07FF;
 8007b50:	4b39      	ldr	r3, [pc, #228]	; (8007c38 <SBUS_decoding+0x398>)
 8007b52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b56:	105b      	asrs	r3, r3, #1
 8007b58:	b21a      	sxth	r2, r3
 8007b5a:	4b37      	ldr	r3, [pc, #220]	; (8007c38 <SBUS_decoding+0x398>)
 8007b5c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007b60:	01db      	lsls	r3, r3, #7
 8007b62:	b21b      	sxth	r3, r3
 8007b64:	4313      	orrs	r3, r2
 8007b66:	b21b      	sxth	r3, r3
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	4b31      	ldr	r3, [pc, #196]	; (8007c38 <SBUS_decoding+0x398>)
 8007b72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	sbus.rcValue[12] = ((uint16_t)sbus.rxBuf[17] >> 4 | ((uint16_t)sbus.rxBuf[18] << 4)) & 0x07FF;
 8007b76:	4b30      	ldr	r3, [pc, #192]	; (8007c38 <SBUS_decoding+0x398>)
 8007b78:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007b7c:	111b      	asrs	r3, r3, #4
 8007b7e:	b21a      	sxth	r2, r3
 8007b80:	4b2d      	ldr	r3, [pc, #180]	; (8007c38 <SBUS_decoding+0x398>)
 8007b82:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007b86:	011b      	lsls	r3, r3, #4
 8007b88:	b21b      	sxth	r3, r3
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	b21b      	sxth	r3, r3
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	4b28      	ldr	r3, [pc, #160]	; (8007c38 <SBUS_decoding+0x398>)
 8007b98:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sbus.rcValue[13] = ((uint16_t)sbus.rxBuf[18] >> 7 | ((uint16_t)sbus.rxBuf[19] << 1) | (uint16_t)sbus.rxBuf[21] << 9) & 0x07FF;
 8007b9c:	4b26      	ldr	r3, [pc, #152]	; (8007c38 <SBUS_decoding+0x398>)
 8007b9e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ba2:	11db      	asrs	r3, r3, #7
 8007ba4:	b21a      	sxth	r2, r3
 8007ba6:	4b24      	ldr	r3, [pc, #144]	; (8007c38 <SBUS_decoding+0x398>)
 8007ba8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	b21b      	sxth	r3, r3
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	b21a      	sxth	r2, r3
 8007bb4:	4b20      	ldr	r3, [pc, #128]	; (8007c38 <SBUS_decoding+0x398>)
 8007bb6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007bba:	025b      	lsls	r3, r3, #9
 8007bbc:	b21b      	sxth	r3, r3
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	b21b      	sxth	r3, r3
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	4b1b      	ldr	r3, [pc, #108]	; (8007c38 <SBUS_decoding+0x398>)
 8007bcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sbus.rcValue[14] = ((uint16_t)sbus.rxBuf[20] >> 2 | ((uint16_t)sbus.rxBuf[21] << 6)) & 0x07FF;
 8007bd0:	4b19      	ldr	r3, [pc, #100]	; (8007c38 <SBUS_decoding+0x398>)
 8007bd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007bd6:	109b      	asrs	r3, r3, #2
 8007bd8:	b21a      	sxth	r2, r3
 8007bda:	4b17      	ldr	r3, [pc, #92]	; (8007c38 <SBUS_decoding+0x398>)
 8007bdc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007be0:	019b      	lsls	r3, r3, #6
 8007be2:	b21b      	sxth	r3, r3
 8007be4:	4313      	orrs	r3, r2
 8007be6:	b21b      	sxth	r3, r3
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	4b11      	ldr	r3, [pc, #68]	; (8007c38 <SBUS_decoding+0x398>)
 8007bf2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	sbus.rcValue[15] = ((uint16_t)sbus.rxBuf[21] >> 5 | ((uint16_t)sbus.rxBuf[22] << 3)) & 0x07FF;
 8007bf6:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <SBUS_decoding+0x398>)
 8007bf8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007bfc:	115b      	asrs	r3, r3, #5
 8007bfe:	b21a      	sxth	r2, r3
 8007c00:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <SBUS_decoding+0x398>)
 8007c02:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	b21b      	sxth	r3, r3
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	b21b      	sxth	r3, r3
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	4b08      	ldr	r3, [pc, #32]	; (8007c38 <SBUS_decoding+0x398>)
 8007c18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	if (((uint16_t)sbus.rxBuf[23]) & 0x0001)       sbus.rcValue[16] = 2000; else sbus.rcValue[16] = 1000;
 8007c1c:	4b06      	ldr	r3, [pc, #24]	; (8007c38 <SBUS_decoding+0x398>)
 8007c1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d008      	beq.n	8007c3c <SBUS_decoding+0x39c>
 8007c2a:	4b03      	ldr	r3, [pc, #12]	; (8007c38 <SBUS_decoding+0x398>)
 8007c2c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007c30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8007c34:	e007      	b.n	8007c46 <SBUS_decoding+0x3a6>
 8007c36:	bf00      	nop
 8007c38:	240005f8 	.word	0x240005f8
 8007c3c:	4b1f      	ldr	r3, [pc, #124]	; (8007cbc <SBUS_decoding+0x41c>)
 8007c3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	if (((uint16_t)sbus.rxBuf[23] >> 1) & 0x0001)  sbus.rcValue[17] = 2000; else sbus.rcValue[17] = 1000;
 8007c46:	4b1d      	ldr	r3, [pc, #116]	; (8007cbc <SBUS_decoding+0x41c>)
 8007c48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c4c:	f003 0302 	and.w	r3, r3, #2
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <SBUS_decoding+0x3c0>
 8007c54:	4b19      	ldr	r3, [pc, #100]	; (8007cbc <SBUS_decoding+0x41c>)
 8007c56:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007c5a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8007c5e:	e004      	b.n	8007c6a <SBUS_decoding+0x3ca>
 8007c60:	4b16      	ldr	r3, [pc, #88]	; (8007cbc <SBUS_decoding+0x41c>)
 8007c62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c66:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	607b      	str	r3, [r7, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b11      	cmp	r3, #17
 8007c72:	dc1c      	bgt.n	8007cae <SBUS_decoding+0x40e>
		sbus.compRcValue[i] = (sbus.rcValue[i]) * 5 / 8 + 880;
 8007c74:	4a11      	ldr	r2, [pc, #68]	; (8007cbc <SBUS_decoding+0x41c>)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3318      	adds	r3, #24
 8007c7a:	005b      	lsls	r3, r3, #1
 8007c7c:	4413      	add	r3, r2
 8007c7e:	88db      	ldrh	r3, [r3, #6]
 8007c80:	461a      	mov	r2, r3
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	da00      	bge.n	8007c8e <SBUS_decoding+0x3ee>
 8007c8c:	3307      	adds	r3, #7
 8007c8e:	10db      	asrs	r3, r3, #3
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8007c96:	b299      	uxth	r1, r3
 8007c98:	4a08      	ldr	r2, [pc, #32]	; (8007cbc <SBUS_decoding+0x41c>)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	332c      	adds	r3, #44	; 0x2c
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	4413      	add	r3, r2
 8007ca2:	460a      	mov	r2, r1
 8007ca4:	805a      	strh	r2, [r3, #2]
	for (int i = 0; i < SBUS_CHANNEL_NUMBER; i++) {
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	607b      	str	r3, [r7, #4]
 8007cac:	e7df      	b.n	8007c6e <SBUS_decoding+0x3ce>
	}

//	if(sbus_comp_rcValue[0]<SBUS_FAILSAFE && sbus_comp_rcValue[1]<SBUS_FAILSAFE
//	&& sbus_comp_rcValue[2]<SBUS_FAILSAFE && sbus_comp_rcValue[3]<SBUS_FAILSAFE) return; // failsafe
	return SBUS_Result_NewData;
 8007cae:	2301      	movs	r3, #1
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007cba:	bf00      	nop
 8007cbc:	240005f8 	.word	0x240005f8

08007cc0 <SBUS_uartRxCpltCallback>:


SBUS_Result_t SBUS_uartRxCpltCallback(){// must call this function on HAL_UART_RxCpltCallback
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
	static uint8_t i=0;
	SBUS_Result_t result = SBUS_Result_OldData;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 8007cca:	4b37      	ldr	r3, [pc, #220]	; (8007da8 <SBUS_uartRxCpltCallback+0xe8>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	701a      	strb	r2, [r3, #0]
 8007cd0:	4b35      	ldr	r3, [pc, #212]	; (8007da8 <SBUS_uartRxCpltCallback+0xe8>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b18      	cmp	r3, #24
 8007cd6:	d862      	bhi.n	8007d9e <SBUS_uartRxCpltCallback+0xde>
		_curByte = sbus.dmaBuf[i];
 8007cd8:	4b33      	ldr	r3, [pc, #204]	; (8007da8 <SBUS_uartRxCpltCallback+0xe8>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4b33      	ldr	r3, [pc, #204]	; (8007dac <SBUS_uartRxCpltCallback+0xec>)
 8007ce0:	4413      	add	r3, r2
 8007ce2:	791a      	ldrb	r2, [r3, #4]
 8007ce4:	4b32      	ldr	r3, [pc, #200]	; (8007db0 <SBUS_uartRxCpltCallback+0xf0>)
 8007ce6:	701a      	strb	r2, [r3, #0]
		if (_parserState == 0) {
 8007ce8:	4b32      	ldr	r3, [pc, #200]	; (8007db4 <SBUS_uartRxCpltCallback+0xf4>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d120      	bne.n	8007d32 <SBUS_uartRxCpltCallback+0x72>
			if ((_curByte == SBUS_HEADER) && ((_prevByte == SBUS_FOOTER) || ((_prevByte & SBUS2MASK) == SBUS_FOOTER))) {
 8007cf0:	4b2f      	ldr	r3, [pc, #188]	; (8007db0 <SBUS_uartRxCpltCallback+0xf0>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b0f      	cmp	r3, #15
 8007cf6:	d118      	bne.n	8007d2a <SBUS_uartRxCpltCallback+0x6a>
 8007cf8:	4b2f      	ldr	r3, [pc, #188]	; (8007db8 <SBUS_uartRxCpltCallback+0xf8>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <SBUS_uartRxCpltCallback+0x4c>
 8007d00:	4b2d      	ldr	r3, [pc, #180]	; (8007db8 <SBUS_uartRxCpltCallback+0xf8>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	f003 030f 	and.w	r3, r3, #15
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10e      	bne.n	8007d2a <SBUS_uartRxCpltCallback+0x6a>
				sbus.rxBuf[_parserState] = _curByte;
 8007d0c:	4b29      	ldr	r3, [pc, #164]	; (8007db4 <SBUS_uartRxCpltCallback+0xf4>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	4619      	mov	r1, r3
 8007d12:	4b27      	ldr	r3, [pc, #156]	; (8007db0 <SBUS_uartRxCpltCallback+0xf0>)
 8007d14:	781a      	ldrb	r2, [r3, #0]
 8007d16:	4b25      	ldr	r3, [pc, #148]	; (8007dac <SBUS_uartRxCpltCallback+0xec>)
 8007d18:	440b      	add	r3, r1
 8007d1a:	775a      	strb	r2, [r3, #29]
				_parserState++;
 8007d1c:	4b25      	ldr	r3, [pc, #148]	; (8007db4 <SBUS_uartRxCpltCallback+0xf4>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	3301      	adds	r3, #1
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	4b23      	ldr	r3, [pc, #140]	; (8007db4 <SBUS_uartRxCpltCallback+0xf4>)
 8007d26:	701a      	strb	r2, [r3, #0]
 8007d28:	e02e      	b.n	8007d88 <SBUS_uartRxCpltCallback+0xc8>
			} else {
				_parserState = 0;
 8007d2a:	4b22      	ldr	r3, [pc, #136]	; (8007db4 <SBUS_uartRxCpltCallback+0xf4>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	e02a      	b.n	8007d88 <SBUS_uartRxCpltCallback+0xc8>
			}
		}
		else {
			// strip off the data
			if ((_parserState) < SBUS_BUF_SIZE) {
 8007d32:	4b20      	ldr	r3, [pc, #128]	; (8007db4 <SBUS_uartRxCpltCallback+0xf4>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	2b18      	cmp	r3, #24
 8007d38:	d80d      	bhi.n	8007d56 <SBUS_uartRxCpltCallback+0x96>
				sbus.rxBuf[_parserState] = _curByte;
 8007d3a:	4b1e      	ldr	r3, [pc, #120]	; (8007db4 <SBUS_uartRxCpltCallback+0xf4>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4b1b      	ldr	r3, [pc, #108]	; (8007db0 <SBUS_uartRxCpltCallback+0xf0>)
 8007d42:	781a      	ldrb	r2, [r3, #0]
 8007d44:	4b19      	ldr	r3, [pc, #100]	; (8007dac <SBUS_uartRxCpltCallback+0xec>)
 8007d46:	440b      	add	r3, r1
 8007d48:	775a      	strb	r2, [r3, #29]
				_parserState++;
 8007d4a:	4b1a      	ldr	r3, [pc, #104]	; (8007db4 <SBUS_uartRxCpltCallback+0xf4>)
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	4b18      	ldr	r3, [pc, #96]	; (8007db4 <SBUS_uartRxCpltCallback+0xf4>)
 8007d54:	701a      	strb	r2, [r3, #0]
			}
			// check the end byte
			if ((_parserState) == SBUS_BUF_SIZE) {
 8007d56:	4b17      	ldr	r3, [pc, #92]	; (8007db4 <SBUS_uartRxCpltCallback+0xf4>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	2b19      	cmp	r3, #25
 8007d5c:	d114      	bne.n	8007d88 <SBUS_uartRxCpltCallback+0xc8>
				if ((_curByte == SBUS_FOOTER) || ((_curByte & SBUS2MASK) == SBUS_FOOTER)) {
 8007d5e:	4b14      	ldr	r3, [pc, #80]	; (8007db0 <SBUS_uartRxCpltCallback+0xf0>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d005      	beq.n	8007d72 <SBUS_uartRxCpltCallback+0xb2>
 8007d66:	4b12      	ldr	r3, [pc, #72]	; (8007db0 <SBUS_uartRxCpltCallback+0xf0>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d107      	bne.n	8007d82 <SBUS_uartRxCpltCallback+0xc2>
					_parserState = 0;
 8007d72:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <SBUS_uartRxCpltCallback+0xf4>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
					result = SBUS_decoding();
 8007d78:	f7ff fd92 	bl	80078a0 <SBUS_decoding>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	71fb      	strb	r3, [r7, #7]
 8007d80:	e002      	b.n	8007d88 <SBUS_uartRxCpltCallback+0xc8>
				}
				else {
					_parserState = 0;
 8007d82:	4b0c      	ldr	r3, [pc, #48]	; (8007db4 <SBUS_uartRxCpltCallback+0xf4>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		_prevByte = _curByte;
 8007d88:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <SBUS_uartRxCpltCallback+0xf0>)
 8007d8a:	781a      	ldrb	r2, [r3, #0]
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <SBUS_uartRxCpltCallback+0xf8>)
 8007d8e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<SBUS_DMA_BUF_SIZE;i++){
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <SBUS_uartRxCpltCallback+0xe8>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	4b03      	ldr	r3, [pc, #12]	; (8007da8 <SBUS_uartRxCpltCallback+0xe8>)
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	e798      	b.n	8007cd0 <SBUS_uartRxCpltCallback+0x10>
	}
	return result;
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	2400068b 	.word	0x2400068b
 8007dac:	240005f8 	.word	0x240005f8
 8007db0:	24000689 	.word	0x24000689
 8007db4:	24000688 	.word	0x24000688
 8007db8:	2400068a 	.word	0x2400068a

08007dbc <SBUS_getChannel>:
		printf("%d \t", sbus.compRcValue[i]);
	}
	printf("\r\n");
}

uint16_t SBUS_getChannel(uint8_t chan) { // start from 1
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	71fb      	strb	r3, [r7, #7]
	return sbus.compRcValue[chan - 1];
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	4a05      	ldr	r2, [pc, #20]	; (8007de0 <SBUS_getChannel+0x24>)
 8007dcc:	332c      	adds	r3, #44	; 0x2c
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	4413      	add	r3, r2
 8007dd2:	885b      	ldrh	r3, [r3, #2]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	240005f8 	.word	0x240005f8

08007de4 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>:
    SIMPLE_FUNC_IMPL(BodyAccel, BodyAccel, bodyAccel)
 8007de4:	b4b0      	push	{r4, r5, r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	4614      	mov	r4, r2
 8007df4:	461d      	mov	r5, r3
 8007df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dfa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007dfe:	e884 0003 	stmia.w	r4, {r0, r1}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bcb0      	pop	{r4, r5, r7}
 8007e0a:	4770      	bx	lr

08007e0c <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>:
    SIMPLE_FUNC_IMPL(BodyAngularVelocity, BodyAngularVelocity, bodyAngularVelocity)
 8007e0c:	b4b0      	push	{r4, r5, r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	f103 0418 	add.w	r4, r3, #24
 8007e1e:	4615      	mov	r5, r2
 8007e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e28:	e884 0003 	stmia.w	r4, {r0, r1}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bcb0      	pop	{r4, r5, r7}
 8007e34:	4770      	bx	lr

08007e36 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>:
    SIMPLE_FUNC_IMPL(BodyMag, BodyMag, bodyMag)
 8007e36:	b4b0      	push	{r4, r5, r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	6039      	str	r1, [r7, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8007e48:	4615      	mov	r5, r2
 8007e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e52:	e884 0003 	stmia.w	r4, {r0, r1}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bcb0      	pop	{r4, r5, r7}
 8007e5e:	4770      	bx	lr

08007e60 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>:
    SIMPLE_FUNC_IMPL(GPS, GPS, gps)
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	3348      	adds	r3, #72	; 0x48
 8007e70:	4611      	mov	r1, r2
 8007e72:	2248      	movs	r2, #72	; 0x48
 8007e74:	4618      	mov	r0, r3
 8007e76:	f01a f981 	bl	802217c <memcpy>
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>:
    SIMPLE_FUNC_IMPL(Barometer, Barometer, barometer)
 8007e82:	b490      	push	{r4, r7}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	6039      	str	r1, [r7, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8007e94:	4613      	mov	r3, r2
 8007e96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007e98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bc90      	pop	{r4, r7}
 8007ea4:	4770      	bx	lr

08007ea6 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>:
    SIMPLE_FUNC_IMPL(Controller, Controller, controller)
 8007ea6:	b490      	push	{r4, r7}
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	6039      	str	r1, [r7, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8007eb8:	4613      	mov	r3, r2
 8007eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bc90      	pop	{r4, r7}
 8007ec8:	4770      	bx	lr

08007eca <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>:
    SIMPLE_FUNC_IMPL(Health, Health, health)
 8007eca:	b4b0      	push	{r4, r5, r7}
 8007ecc:	b085      	sub	sp, #20
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	73fb      	strb	r3, [r7, #15]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	e9d3 1200 	ldrd	r1, r2, [r3]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007ee4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ee8:	42a2      	cmp	r2, r4
 8007eea:	bf08      	it	eq
 8007eec:	4299      	cmpeq	r1, r3
 8007eee:	d001      	beq.n	8007ef4 <_ZN2FC6MsgBus9getHealthEPNS_6HealthE+0x2a>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	73fb      	strb	r3, [r7, #15]
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4615      	mov	r5, r2
 8007efa:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8007efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007f06:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bcb0      	pop	{r4, r5, r7}
 8007f14:	4770      	bx	lr

08007f16 <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>:
 8007f16:	b4b0      	push	{r4, r5, r7}
 8007f18:	b083      	sub	sp, #12
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	6039      	str	r1, [r7, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8007f28:	4615      	mov	r5, r2
 8007f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007f32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bcb0      	pop	{r4, r5, r7}
 8007f3e:	4770      	bx	lr

08007f40 <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME>:
    SIMPLE_FUNC_IMPL(MotorPWM, MotorPWM, motorPWM)
 8007f40:	b4b0      	push	{r4, r5, r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	e9d3 1200 	ldrd	r1, r2, [r3]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8007f5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f5e:	42a2      	cmp	r2, r4
 8007f60:	bf08      	it	eq
 8007f62:	4299      	cmpeq	r1, r3
 8007f64:	d001      	beq.n	8007f6a <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME+0x2a>
 8007f66:	2301      	movs	r3, #1
 8007f68:	73fb      	strb	r3, [r7, #15]
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4615      	mov	r5, r2
 8007f70:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8007f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	4618      	mov	r0, r3
 8007f84:	3714      	adds	r7, #20
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bcb0      	pop	{r4, r5, r7}
 8007f8a:	4770      	bx	lr

08007f8c <_ZL11microsecondv>:
static __inline uint64_t microsecond(){
 8007f8c:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8007f90:	af00      	add	r7, sp, #0
	return ((uint64_t)_timerOverflowCnt<<32) | (__HAL_TIM_GetCounter(USEC_TIMER));
 8007f92:	4b0e      	ldr	r3, [pc, #56]	; (8007fcc <_ZL11microsecondv+0x40>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4619      	mov	r1, r3
 8007f98:	f04f 0200 	mov.w	r2, #0
 8007f9c:	f04f 0b00 	mov.w	fp, #0
 8007fa0:	f04f 0c00 	mov.w	ip, #0
 8007fa4:	468c      	mov	ip, r1
 8007fa6:	f04f 0b00 	mov.w	fp, #0
 8007faa:	4a09      	ldr	r2, [pc, #36]	; (8007fd0 <_ZL11microsecondv+0x44>)
 8007fac:	6812      	ldr	r2, [r2, #0]
 8007fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	ea4b 0301 	orr.w	r3, fp, r1
 8007fba:	ea4c 0402 	orr.w	r4, ip, r2
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	24000908 	.word	0x24000908
 8007fd0:	240094f4 	.word	0x240094f4

08007fd4 <_ZL11millisecondv>:

static __inline uint32_t millisecond(){
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8007fd8:	f003 f8aa 	bl	800b130 <HAL_GetTick>
 8007fdc:	4603      	mov	r3, r0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	bd80      	pop	{r7, pc}
	...

08007fe4 <_ZN2FC24ModuleAttitudeController4mainEv>:
	AC_fromAHRS = 0x1
};

class ModuleAttitudeController : public px4_AlgorithmModelClass, public Freq<ModuleAttitudeController>{
public:
	static void main(){
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b0f8      	sub	sp, #480	; 0x1e0
 8007fe8:	af00      	add	r7, sp, #0
		ModuleAttitudeController attitudeController;
 8007fea:	463b      	mov	r3, r7
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe ff7d 	bl	8006eec <_ZN2FC24ModuleAttitudeControllerC1Ev>
		while(1){
			/* wait AHRS set */
			osThreadFlagsWait(AC_fromAHRS, osFlagsWaitAny, osWaitForever);
 8007ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	f015 f899 	bl	801d130 <osThreadFlagsWait>
			attitudeController.oneStep();
 8007ffe:	463b      	mov	r3, r7
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe ff85 	bl	8006f10 <_ZN2FC24ModuleAttitudeController7oneStepEv>
			freqCnt++;
 8008006:	4b03      	ldr	r3, [pc, #12]	; (8008014 <_ZN2FC24ModuleAttitudeController4mainEv+0x30>)
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	3301      	adds	r3, #1
 800800c:	b29a      	uxth	r2, r3
 800800e:	4b01      	ldr	r3, [pc, #4]	; (8008014 <_ZN2FC24ModuleAttitudeController4mainEv+0x30>)
 8008010:	801a      	strh	r2, [r3, #0]
			osThreadFlagsWait(AC_fromAHRS, osFlagsWaitAny, osWaitForever);
 8008012:	e7ee      	b.n	8007ff2 <_ZN2FC24ModuleAttitudeController4mainEv+0xe>
 8008014:	24000a24 	.word	0x24000a24

08008018 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>:
		}
	}

	void oneStep();

	static inline void setSignal(enum AcSignal signal){
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	4603      	mov	r3, r0
 8008020:	71fb      	strb	r3, [r7, #7]
		if(signal == AC_fromAHRS) osThreadFlagsSet(AC_TaskHandle, AC_fromAHRS);
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d105      	bne.n	8008034 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE+0x1c>
 8008028:	4b04      	ldr	r3, [pc, #16]	; (800803c <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE+0x24>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2101      	movs	r1, #1
 800802e:	4618      	mov	r0, r3
 8008030:	f015 f81c 	bl	801d06c <osThreadFlagsSet>
	}
 8008034:	bf00      	nop
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	24007e28 	.word	0x24007e28

08008040 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>:

    /*
     *  signal to AHRS main function
     *  this function is called by SensorAccel, SensorGyro (peripheral interface)
     */
    static inline void setSignal(enum AhrsSignal signal){
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	4603      	mov	r3, r0
 8008048:	71fb      	strb	r3, [r7, #7]
    	switch(signal){
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d002      	beq.n	8008056 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x16>
 8008050:	2b02      	cmp	r3, #2
 8008052:	d008      	beq.n	8008066 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x26>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
        	break;
    	case AHRS_fromGyro:
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
    	}
    }
 8008054:	e00d      	b.n	8008072 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromAccel);
 8008056:	4b09      	ldr	r3, [pc, #36]	; (800807c <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2101      	movs	r1, #1
 800805c:	4618      	mov	r0, r3
 800805e:	f015 f805 	bl	801d06c <osThreadFlagsSet>
        	break;
 8008062:	bf00      	nop
    }
 8008064:	e005      	b.n	8008072 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x32>
        	osThreadFlagsSet(AHRS_TaskHandle, AHRS_fromGyro);
 8008066:	4b05      	ldr	r3, [pc, #20]	; (800807c <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE+0x3c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2102      	movs	r1, #2
 800806c:	4618      	mov	r0, r3
 800806e:	f014 fffd 	bl	801d06c <osThreadFlagsSet>
    }
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	24008288 	.word	0x24008288

08008080 <_ZN2FC10ModuleAHRS4mainEv>:
	/*
	 *  ModuleAHRS main function
	 *  this function is called by CMSIS task function
	 *	wait signal from accelerometer and gyrometer
	 */
    static void main(){
 8008080:	b580      	push	{r7, lr}
 8008082:	b0aa      	sub	sp, #168	; 0xa8
 8008084:	af00      	add	r7, sp, #0
    	ModuleAHRS moduleAHRS;
 8008086:	463b      	mov	r3, r7
 8008088:	4618      	mov	r0, r3
 800808a:	f7fc fd2f 	bl	8004aec <_ZN2FC10ModuleAHRSC1Ev>
    	while(1){
    		/* wait accel, gyro value set */
    		osThreadFlagsWait(0x3U, osFlagsWaitAll, osWaitForever);
 800808e:	f04f 32ff 	mov.w	r2, #4294967295
 8008092:	2101      	movs	r1, #1
 8008094:	2003      	movs	r0, #3
 8008096:	f015 f84b 	bl	801d130 <osThreadFlagsWait>
    		moduleAHRS.oneStep();
 800809a:	463b      	mov	r3, r7
 800809c:	4618      	mov	r0, r3
 800809e:	f7fc fd79 	bl	8004b94 <_ZN2FC10ModuleAHRS7oneStepEv>
    		ModuleAttitudeController::setSignal(AC_fromAHRS);
 80080a2:	2001      	movs	r0, #1
 80080a4:	f7ff ffb8 	bl	8008018 <_ZN2FC24ModuleAttitudeController9setSignalENS_8AcSignalE>
    		osThreadFlagsWait(0x3U, osFlagsWaitAll, osWaitForever);
 80080a8:	e7f1      	b.n	800808e <_ZN2FC10ModuleAHRS4mainEv+0xe>
	...

080080ac <_ZN2FC11SensorAccel8setAccelEfff>:
private:
    struct BodyAccel bodyAccel{};
};


void SensorAccel::setAccel(float x, float y, float z){
 80080ac:	b590      	push	{r4, r7, lr}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80080b8:	edc7 0a01 	vstr	s1, [r7, #4]
 80080bc:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 80080c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80080c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80080c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080cc:	d10d      	bne.n	80080ea <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 80080ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80080d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80080d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080da:	d106      	bne.n	80080ea <_ZN2FC11SensorAccel8setAccelEfff+0x3e>
 80080dc:	edd7 7a00 	vldr	s15, [r7]
 80080e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80080e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e8:	d01e      	beq.n	8008128 <_ZN2FC11SensorAccel8setAccelEfff+0x7c>
	this->bodyAccel.timestamp = microsecond();
 80080ea:	f7ff ff4f 	bl	8007f8c <_ZL11microsecondv>
 80080ee:	4603      	mov	r3, r0
 80080f0:	460c      	mov	r4, r1
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAccel.xyz[0] = x;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	609a      	str	r2, [r3, #8]
	this->bodyAccel.xyz[1] = y;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	60da      	str	r2, [r3, #12]
	this->bodyAccel.xyz[2] = z;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	611a      	str	r2, [r3, #16]
	msgBus.setBodyAccel(this->bodyAccel);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4619      	mov	r1, r3
 800810e:	4808      	ldr	r0, [pc, #32]	; (8008130 <_ZN2FC11SensorAccel8setAccelEfff+0x84>)
 8008110:	f7ff fe68 	bl	8007de4 <_ZN2FC6MsgBus12setBodyAccelERKNS_9BodyAccelE>
	ModuleAHRS::setSignal(AHRS_fromAccel);
 8008114:	2001      	movs	r0, #1
 8008116:	f7ff ff93 	bl	8008040 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	/* Freq class variable */
	freqCnt++;
 800811a:	4b06      	ldr	r3, [pc, #24]	; (8008134 <_ZN2FC11SensorAccel8setAccelEfff+0x88>)
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	3301      	adds	r3, #1
 8008120:	b29a      	uxth	r2, r3
 8008122:	4b04      	ldr	r3, [pc, #16]	; (8008134 <_ZN2FC11SensorAccel8setAccelEfff+0x88>)
 8008124:	801a      	strh	r2, [r3, #0]
 8008126:	e000      	b.n	800812a <_ZN2FC11SensorAccel8setAccelEfff+0x7e>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 8008128:	bf00      	nop
}
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	bd90      	pop	{r4, r7, pc}
 8008130:	24000438 	.word	0x24000438
 8008134:	24000a26 	.word	0x24000a26

08008138 <_ZN2FC10SensorGyro7setGyroEfff>:
    void setGyro(float x, float y, float z);
private:
    struct BodyAngularVelocity bodyAngularVelocity;
};

void SensorGyro::setGyro(float x, float y, float z){
 8008138:	b590      	push	{r4, r7, lr}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	ed87 0a02 	vstr	s0, [r7, #8]
 8008144:	edc7 0a01 	vstr	s1, [r7, #4]
 8008148:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 800814c:	edd7 7a02 	vldr	s15, [r7, #8]
 8008150:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008158:	d10d      	bne.n	8008176 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 800815a:	edd7 7a01 	vldr	s15, [r7, #4]
 800815e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008166:	d106      	bne.n	8008176 <_ZN2FC10SensorGyro7setGyroEfff+0x3e>
 8008168:	edd7 7a00 	vldr	s15, [r7]
 800816c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008174:	d01e      	beq.n	80081b4 <_ZN2FC10SensorGyro7setGyroEfff+0x7c>
	this->bodyAngularVelocity.timestamp = microsecond();
 8008176:	f7ff ff09 	bl	8007f8c <_ZL11microsecondv>
 800817a:	4603      	mov	r3, r0
 800817c:	460c      	mov	r4, r1
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyAngularVelocity.xyz[0] = x;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	609a      	str	r2, [r3, #8]
	this->bodyAngularVelocity.xyz[1] = y;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	60da      	str	r2, [r3, #12]
	this->bodyAngularVelocity.xyz[2] = z;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	611a      	str	r2, [r3, #16]
	msgBus.setBodyAngularVelocity(this->bodyAngularVelocity);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4619      	mov	r1, r3
 800819a:	4808      	ldr	r0, [pc, #32]	; (80081bc <_ZN2FC10SensorGyro7setGyroEfff+0x84>)
 800819c:	f7ff fe36 	bl	8007e0c <_ZN2FC6MsgBus22setBodyAngularVelocityERKNS_19BodyAngularVelocityE>
	ModuleAHRS::setSignal(AHRS_fromGyro);
 80081a0:	2002      	movs	r0, #2
 80081a2:	f7ff ff4d 	bl	8008040 <_ZN2FC10ModuleAHRS9setSignalENS_10AhrsSignalE>

	freqCnt++;
 80081a6:	4b06      	ldr	r3, [pc, #24]	; (80081c0 <_ZN2FC10SensorGyro7setGyroEfff+0x88>)
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	3301      	adds	r3, #1
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	4b04      	ldr	r3, [pc, #16]	; (80081c0 <_ZN2FC10SensorGyro7setGyroEfff+0x88>)
 80081b0:	801a      	strh	r2, [r3, #0]
 80081b2:	e000      	b.n	80081b6 <_ZN2FC10SensorGyro7setGyroEfff+0x7e>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 80081b4:	bf00      	nop
}
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd90      	pop	{r4, r7, pc}
 80081bc:	24000438 	.word	0x24000438
 80081c0:	24000a28 	.word	0x24000a28

080081c4 <_ZN2FC9SensorMag6setMagEfff>:
    float bias[3];
    float scale[3];
};


void SensorMag::setMag(float x, float y, float z){
 80081c4:	b590      	push	{r4, r7, lr}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80081d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80081d4:	ed87 1a00 	vstr	s2, [r7]
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 80081d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80081dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80081e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e4:	d10d      	bne.n	8008202 <_ZN2FC9SensorMag6setMagEfff+0x3e>
 80081e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80081ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80081ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f2:	d106      	bne.n	8008202 <_ZN2FC9SensorMag6setMagEfff+0x3e>
 80081f4:	edd7 7a00 	vldr	s15, [r7]
 80081f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80081fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008200:	d01b      	beq.n	800823a <_ZN2FC9SensorMag6setMagEfff+0x76>
	this->bodyMag.timestamp = microsecond();
 8008202:	f7ff fec3 	bl	8007f8c <_ZL11microsecondv>
 8008206:	4603      	mov	r3, r0
 8008208:	460c      	mov	r4, r1
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	e9c2 3400 	strd	r3, r4, [r2]
	this->bodyMag.xyz[0] = x;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	609a      	str	r2, [r3, #8]
	this->bodyMag.xyz[1] = y;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	60da      	str	r2, [r3, #12]
	this->bodyMag.xyz[2] = z;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	611a      	str	r2, [r3, #16]
	msgBus.setBodyMag(this->bodyMag);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	4619      	mov	r1, r3
 8008226:	4807      	ldr	r0, [pc, #28]	; (8008244 <_ZN2FC9SensorMag6setMagEfff+0x80>)
 8008228:	f7ff fe05 	bl	8007e36 <_ZN2FC6MsgBus10setBodyMagERKNS_7BodyMagE>

	/* Freq class variable */
	freqCnt++;
 800822c:	4b06      	ldr	r3, [pc, #24]	; (8008248 <_ZN2FC9SensorMag6setMagEfff+0x84>)
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	3301      	adds	r3, #1
 8008232:	b29a      	uxth	r2, r3
 8008234:	4b04      	ldr	r3, [pc, #16]	; (8008248 <_ZN2FC9SensorMag6setMagEfff+0x84>)
 8008236:	801a      	strh	r2, [r3, #0]
 8008238:	e000      	b.n	800823c <_ZN2FC9SensorMag6setMagEfff+0x78>
	if((x == 0.0f) && (y == 0.0f) && (z == 0.0f)) return;	/* invalid value */
 800823a:	bf00      	nop
}
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	bd90      	pop	{r4, r7, pc}
 8008242:	bf00      	nop
 8008244:	24000438 	.word	0x24000438
 8008248:	24000a2a 	.word	0x24000a2a
 800824c:	00000000 	.word	0x00000000

08008250 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>:


void SensorGPS::setGPS(double lat, double lon, float alt,
        			   float vel, float direction, float hdop, float vdop,
					   uint8_t numSat, uint8_t fixType, uint64_t UtcUsec)
{
 8008250:	b590      	push	{r4, r7, lr}
 8008252:	b091      	sub	sp, #68	; 0x44
 8008254:	af00      	add	r7, sp, #0
 8008256:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008258:	ed87 0b08 	vstr	d0, [r7, #32]
 800825c:	ed87 1b06 	vstr	d1, [r7, #24]
 8008260:	ed87 2a0a 	vstr	s4, [r7, #40]	; 0x28
 8008264:	edc7 2a05 	vstr	s5, [r7, #20]
 8008268:	ed87 3a04 	vstr	s6, [r7, #16]
 800826c:	edc7 3a03 	vstr	s7, [r7, #12]
 8008270:	ed87 4a02 	vstr	s8, [r7, #8]
 8008274:	460b      	mov	r3, r1
 8008276:	71fb      	strb	r3, [r7, #7]
 8008278:	4613      	mov	r3, r2
 800827a:	71bb      	strb	r3, [r7, #6]

	/* calculate velocity NED  */
	float radDirection = direction*M_PI/180.0;
 800827c:	edd7 7a04 	vldr	s15, [r7, #16]
 8008280:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008284:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8008358 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x108>
 8008288:	ee27 6b06 	vmul.f64	d6, d7, d6
 800828c:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8008360 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x110>
 8008290:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008294:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008298:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float velN = std::cos(radDirection)*vel;
 800829c:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80082a0:	f7ff fa7e 	bl	80077a0 <_ZSt3cosf>
 80082a4:	eeb0 7a40 	vmov.f32	s14, s0
 80082a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80082ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80082b0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float velE = std::sin(radDirection)*vel;
 80082b4:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80082b8:	f7ff fa82 	bl	80077c0 <_ZSt3sinf>
 80082bc:	eeb0 7a40 	vmov.f32	s14, s0
 80082c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80082c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80082c8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	this->gps.timestamp = microsecond();
 80082cc:	f7ff fe5e 	bl	8007f8c <_ZL11microsecondv>
 80082d0:	4603      	mov	r3, r0
 80082d2:	460c      	mov	r4, r1
 80082d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082d6:	e9c2 3400 	strd	r3, r4, [r2]
	this->gps.timestampUTC = UtcUsec;
 80082da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082dc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80082e0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	this->gps.lat = lat;
 80082e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082e6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80082ea:	e9c2 3404 	strd	r3, r4, [r2, #16]
	this->gps.lon = lon;
 80082ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082f0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80082f4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	this->gps.alt = alt;
 80082f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082fc:	621a      	str	r2, [r3, #32]

	this->gps.vel = vel;
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	625a      	str	r2, [r3, #36]	; 0x24
	this->gps.velN = velN;
 8008304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008308:	629a      	str	r2, [r3, #40]	; 0x28
	this->gps.velE = velE;
 800830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800830e:	62da      	str	r2, [r3, #44]	; 0x2c
	this->gps.velD = 0; /* ??? */
 8008310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008312:	f04f 0200 	mov.w	r2, #0
 8008316:	631a      	str	r2, [r3, #48]	; 0x30
	this->gps.direction = radDirection;
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800831c:	635a      	str	r2, [r3, #52]	; 0x34
	this->gps.hdop = hdop;
 800831e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	639a      	str	r2, [r3, #56]	; 0x38
	this->gps.vdop = vdop;
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	63da      	str	r2, [r3, #60]	; 0x3c

	this->gps.numSatellites = numSat;
 800832a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832c:	79fa      	ldrb	r2, [r7, #7]
 800832e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	this->gps.fixType = fixType;
 8008332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008334:	79ba      	ldrb	r2, [r7, #6]
 8008336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	msgBus.setGPS(this->gps);
 800833a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833c:	4619      	mov	r1, r3
 800833e:	480a      	ldr	r0, [pc, #40]	; (8008368 <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x118>)
 8008340:	f7ff fd8e 	bl	8007e60 <_ZN2FC6MsgBus6setGPSERKNS_3GPSE>

	/* Freq class variable */
	freqCnt++;
 8008344:	4b09      	ldr	r3, [pc, #36]	; (800836c <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x11c>)
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	3301      	adds	r3, #1
 800834a:	b29a      	uxth	r2, r3
 800834c:	4b07      	ldr	r3, [pc, #28]	; (800836c <_ZN2FC9SensorGPS6setGPSEddfffffhhy+0x11c>)
 800834e:	801a      	strh	r2, [r3, #0]

}
 8008350:	bf00      	nop
 8008352:	3744      	adds	r7, #68	; 0x44
 8008354:	46bd      	mov	sp, r7
 8008356:	bd90      	pop	{r4, r7, pc}
 8008358:	54442d18 	.word	0x54442d18
 800835c:	400921fb 	.word	0x400921fb
 8008360:	00000000 	.word	0x00000000
 8008364:	40668000 	.word	0x40668000
 8008368:	24000438 	.word	0x24000438
 800836c:	24000a2c 	.word	0x24000a2c

08008370 <_ZN2FC10SensorBaro7setBaroEff>:
private:
    struct Barometer barometer;
};


void SensorBaro::setBaro(float pressure, float temperature){
 8008370:	b590      	push	{r4, r7, lr}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	ed87 0a02 	vstr	s0, [r7, #8]
 800837c:	edc7 0a01 	vstr	s1, [r7, #4]
	this->barometer.timestamp = microsecond();
 8008380:	f7ff fe04 	bl	8007f8c <_ZL11microsecondv>
 8008384:	4603      	mov	r3, r0
 8008386:	460c      	mov	r4, r1
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	e9c2 3400 	strd	r3, r4, [r2]
	this->barometer.pressure = pressure;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	609a      	str	r2, [r3, #8]
	this->barometer.temperature = temperature;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	60da      	str	r2, [r3, #12]

	msgBus.setBarometer(this->barometer);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	4619      	mov	r1, r3
 800839e:	4806      	ldr	r0, [pc, #24]	; (80083b8 <_ZN2FC10SensorBaro7setBaroEff+0x48>)
 80083a0:	f7ff fd6f 	bl	8007e82 <_ZN2FC6MsgBus12setBarometerERKNS_9BarometerE>

	/* Freq class variable */
	freqCnt++;
 80083a4:	4b05      	ldr	r3, [pc, #20]	; (80083bc <_ZN2FC10SensorBaro7setBaroEff+0x4c>)
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	3301      	adds	r3, #1
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	4b03      	ldr	r3, [pc, #12]	; (80083bc <_ZN2FC10SensorBaro7setBaroEff+0x4c>)
 80083ae:	801a      	strh	r2, [r3, #0]
}
 80083b0:	bf00      	nop
 80083b2:	3714      	adds	r7, #20
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd90      	pop	{r4, r7, pc}
 80083b8:	24000438 	.word	0x24000438
 80083bc:	24000a2e 	.word	0x24000a2e

080083c0 <_ZN2FC2RCC1Ev>:

#define ARMING_THRESHOLD 1500

class RC : public Freq<RC>{
public:
	RC() : start(false) {}
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	751a      	strb	r2, [r3, #20]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <_ZN2FC2RC5setRCEttttttttt>:

void RC::setRC(uint16_t roll, uint16_t pitch, uint16_t yaw, uint16_t throttle,
    		   uint16_t armming,
			   uint16_t mode, uint16_t subMode,
			   uint16_t calibration, uint16_t calibration_sub)
{
 80083dc:	b590      	push	{r4, r7, lr}
 80083de:	b08b      	sub	sp, #44	; 0x2c
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	4608      	mov	r0, r1
 80083e6:	4611      	mov	r1, r2
 80083e8:	461a      	mov	r2, r3
 80083ea:	4603      	mov	r3, r0
 80083ec:	817b      	strh	r3, [r7, #10]
 80083ee:	460b      	mov	r3, r1
 80083f0:	813b      	strh	r3, [r7, #8]
 80083f2:	4613      	mov	r3, r2
 80083f4:	80fb      	strh	r3, [r7, #6]
	if(start == false && throttle > MOTOR_CALIBRATION_THROTLE){
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	7d1b      	ldrb	r3, [r3, #20]
 80083fa:	f083 0301 	eor.w	r3, r3, #1
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	d007      	beq.n	8008414 <_ZN2FC2RC5setRCEttttttttt+0x38>
 8008404:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008406:	f240 729e 	movw	r2, #1950	; 0x79e
 800840a:	4293      	cmp	r3, r2
 800840c:	d902      	bls.n	8008414 <_ZN2FC2RC5setRCEttttttttt+0x38>
		ModuleCommander::sendCommand(Command::MotorCalibration);
 800840e:	2008      	movs	r0, #8
 8008410:	f7ff f80a 	bl	8007428 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
	}
	start = true;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2201      	movs	r2, #1
 8008418:	751a      	strb	r2, [r3, #20]

	/* cotnroller publish */
	this->controllerPub.timestamp = microsecond();
 800841a:	f7ff fdb7 	bl	8007f8c <_ZL11microsecondv>
 800841e:	4603      	mov	r3, r0
 8008420:	460c      	mov	r4, r1
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	e9c2 3400 	strd	r3, r4, [r2]
	this->controllerPub.roll = roll;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	897a      	ldrh	r2, [r7, #10]
 800842c:	811a      	strh	r2, [r3, #8]
	this->controllerPub.pitch = pitch;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	893a      	ldrh	r2, [r7, #8]
 8008432:	815a      	strh	r2, [r3, #10]
	this->controllerPub.yaw = yaw;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	88fa      	ldrh	r2, [r7, #6]
 8008438:	819a      	strh	r2, [r3, #12]
	this->controllerPub.throttle = throttle;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800843e:	81da      	strh	r2, [r3, #14]
	msgBus.setController(this->controllerPub);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4619      	mov	r1, r3
 8008444:	481a      	ldr	r0, [pc, #104]	; (80084b0 <_ZN2FC2RC5setRCEttttttttt+0xd4>)
 8008446:	f7ff fd2e 	bl	8007ea6 <_ZN2FC6MsgBus13setControllerERKNS_10ControllerE>

	/* arming */
	struct ModeFlag modeFlag;
	msgBus.getModeFlag(&modeFlag);							/* current arm mode */
 800844a:	f107 0310 	add.w	r3, r7, #16
 800844e:	4619      	mov	r1, r3
 8008450:	4817      	ldr	r0, [pc, #92]	; (80084b0 <_ZN2FC2RC5setRCEttttttttt+0xd4>)
 8008452:	f7fe fccf 	bl	8006df4 <_ZN2FC6MsgBus11getModeFlagEPNS_8ModeFlagE>
	Command rcvArmFlag = Command::DisArm;						/* request arm mode */
 8008456:	2307      	movs	r3, #7
 8008458:	627b      	str	r3, [r7, #36]	; 0x24
	if( armming > ARMING_THRESHOLD ) rcvArmFlag = Command::Arm;
 800845a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800845c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008460:	4293      	cmp	r3, r2
 8008462:	d901      	bls.n	8008468 <_ZN2FC2RC5setRCEttttttttt+0x8c>
 8008464:	2306      	movs	r3, #6
 8008466:	627b      	str	r3, [r7, #36]	; 0x24
	if(modeFlag.armMode != rcvArmFlag && millisecond()-lastArmReq > 500){
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846c:	429a      	cmp	r2, r3
 800846e:	d00a      	beq.n	8008486 <_ZN2FC2RC5setRCEttttttttt+0xaa>
 8008470:	f7ff fdb0 	bl	8007fd4 <_ZL11millisecondv>
 8008474:	4602      	mov	r2, r0
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008480:	d901      	bls.n	8008486 <_ZN2FC2RC5setRCEttttttttt+0xaa>
 8008482:	2301      	movs	r3, #1
 8008484:	e000      	b.n	8008488 <_ZN2FC2RC5setRCEttttttttt+0xac>
 8008486:	2300      	movs	r3, #0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d007      	beq.n	800849c <_ZN2FC2RC5setRCEttttttttt+0xc0>
		ModuleCommander::sendCommand(rcvArmFlag); /* send command */
 800848c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800848e:	f7fe ffcb 	bl	8007428 <_ZN2FC15ModuleCommander11sendCommandENS_7CommandE>
		lastArmReq = millisecond();
 8008492:	f7ff fd9f 	bl	8007fd4 <_ZL11millisecondv>
 8008496:	4602      	mov	r2, r0
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	611a      	str	r2, [r3, #16]
	}


	/* Freq class variable */
	freqCnt++;
 800849c:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <_ZN2FC2RC5setRCEttttttttt+0xd8>)
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	3301      	adds	r3, #1
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	4b03      	ldr	r3, [pc, #12]	; (80084b4 <_ZN2FC2RC5setRCEttttttttt+0xd8>)
 80084a6:	801a      	strh	r2, [r3, #0]
}
 80084a8:	bf00      	nop
 80084aa:	372c      	adds	r7, #44	; 0x2c
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd90      	pop	{r4, r7, pc}
 80084b0:	24000438 	.word	0x24000438
 80084b4:	24000a30 	.word	0x24000a30

080084b8 <_ZN2FC12ModuleHealth4mainEv>:

namespace FC {

class ModuleHealth {
public:
	static void main(){
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08a      	sub	sp, #40	; 0x28
 80084bc:	af00      	add	r7, sp, #0
		uint32_t tick;
		tick = osKernelGetTickCount();
 80084be:	f014 fd07 	bl	801ced0 <osKernelGetTickCount>
 80084c2:	6278      	str	r0, [r7, #36]	; 0x24

		struct Health health;
		while(1){
			tick += 1000;
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
			osDelayUntil(tick);
 80084cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084ce:	f014 fef1 	bl	801d2b4 <osDelayUntil>

			health.accel = SensorAccel::checkFreq();
 80084d2:	f000 fb41 	bl	8008b58 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>
 80084d6:	4603      	mov	r3, r0
 80084d8:	813b      	strh	r3, [r7, #8]
			health.gyro = SensorGyro::checkFreq();
 80084da:	f000 fb4f 	bl	8008b7c <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>
 80084de:	4603      	mov	r3, r0
 80084e0:	817b      	strh	r3, [r7, #10]
			health.mag = SensorMag::checkFreq();
 80084e2:	f000 fb5d 	bl	8008ba0 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>
 80084e6:	4603      	mov	r3, r0
 80084e8:	81bb      	strh	r3, [r7, #12]
			health.baro = SensorBaro::checkFreq();
 80084ea:	f000 fb6b 	bl	8008bc4 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>
 80084ee:	4603      	mov	r3, r0
 80084f0:	81fb      	strh	r3, [r7, #14]
			health.gps = SensorGPS::checkFreq();
 80084f2:	f000 fb79 	bl	8008be8 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>
 80084f6:	4603      	mov	r3, r0
 80084f8:	823b      	strh	r3, [r7, #16]
			health.rc = RC::checkFreq();
 80084fa:	f000 fb87 	bl	8008c0c <_ZN2FC4FreqINS_2RCEE9checkFreqEv>
 80084fe:	4603      	mov	r3, r0
 8008500:	827b      	strh	r3, [r7, #18]

			health.ahrs = ModuleAHRS::checkFreq();
 8008502:	f000 fb95 	bl	8008c30 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>
 8008506:	4603      	mov	r3, r0
 8008508:	82bb      	strh	r3, [r7, #20]

			//TODO ins, attitude, position, auto
			health.ins = 0;
 800850a:	2300      	movs	r3, #0
 800850c:	82fb      	strh	r3, [r7, #22]

			health.attitudeController = ModuleAttitudeController::checkFreq();
 800850e:	f000 fba1 	bl	8008c54 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>
 8008512:	4603      	mov	r3, r0
 8008514:	833b      	strh	r3, [r7, #24]
			health.positionController = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	837b      	strh	r3, [r7, #26]
			health.autoController = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	83bb      	strh	r3, [r7, #28]

			msgBus.setHealth(health);
 800851e:	463b      	mov	r3, r7
 8008520:	4619      	mov	r1, r3
 8008522:	4802      	ldr	r0, [pc, #8]	; (800852c <_ZN2FC12ModuleHealth4mainEv+0x74>)
 8008524:	f7ff fcf7 	bl	8007f16 <_ZN2FC6MsgBus9setHealthERKNS_6HealthE>
			tick += 1000;
 8008528:	e7cc      	b.n	80084c4 <_ZN2FC12ModuleHealth4mainEv+0xc>
 800852a:	bf00      	nop
 800852c:	24000438 	.word	0x24000438

08008530 <_ZN2FC8ModuleSD4mainEv>:

class ModuleSD {
public:
	ModuleSD() = default;

	static void main(){
 8008530:	b5b0      	push	{r4, r5, r7, lr}
 8008532:	b0e4      	sub	sp, #400	; 0x190
 8008534:	af00      	add	r7, sp, #0
		BSP_SD_Init();
 8008536:	f011 ff09 	bl	801a34c <BSP_SD_Init>
		char buf[256];
		uint32_t bw;
		int len = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
		f_mount(&SDFatFS ,&SDPath[0],1);
 8008540:	2201      	movs	r2, #1
 8008542:	4922      	ldr	r1, [pc, #136]	; (80085cc <_ZN2FC8ModuleSD4mainEv+0x9c>)
 8008544:	4822      	ldr	r0, [pc, #136]	; (80085d0 <_ZN2FC8ModuleSD4mainEv+0xa0>)
 8008546:	f013 fecf 	bl	801c2e8 <f_mount>
		printf("f_mount result: %d",retSD);
 800854a:	4b22      	ldr	r3, [pc, #136]	; (80085d4 <_ZN2FC8ModuleSD4mainEv+0xa4>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	4619      	mov	r1, r3
 8008550:	4821      	ldr	r0, [pc, #132]	; (80085d8 <_ZN2FC8ModuleSD4mainEv+0xa8>)
 8008552:	f01a f8ed 	bl	8022730 <iprintf>
//		}
//		else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);

		while(1){
			/* sdopen */
			f_open(&SDFile,"log.txt", FA_OPEN_EXISTING | FA_WRITE );
 8008556:	2202      	movs	r2, #2
 8008558:	4920      	ldr	r1, [pc, #128]	; (80085dc <_ZN2FC8ModuleSD4mainEv+0xac>)
 800855a:	4821      	ldr	r0, [pc, #132]	; (80085e0 <_ZN2FC8ModuleSD4mainEv+0xb0>)
 800855c:	f013 ff28 	bl	801c3b0 <f_open>
			printf("f_open result: %d",retSD);
 8008560:	4b1c      	ldr	r3, [pc, #112]	; (80085d4 <_ZN2FC8ModuleSD4mainEv+0xa4>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	4619      	mov	r1, r3
 8008566:	481f      	ldr	r0, [pc, #124]	; (80085e4 <_ZN2FC8ModuleSD4mainEv+0xb4>)
 8008568:	f01a f8e2 	bl	8022730 <iprintf>
//
//			if(retSD==FR_OK){
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//			}
//			else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
			len=sprintf(buf,"hello fucking world\n");
 800856c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008570:	4a1d      	ldr	r2, [pc, #116]	; (80085e8 <_ZN2FC8ModuleSD4mainEv+0xb8>)
 8008572:	461c      	mov	r4, r3
 8008574:	4615      	mov	r5, r2
 8008576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800857a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800857e:	6020      	str	r0, [r4, #0]
 8008580:	3404      	adds	r4, #4
 8008582:	7021      	strb	r1, [r4, #0]
 8008584:	2314      	movs	r3, #20
 8008586:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
			retSD=f_write(&SDFile, buf, len, (UINT*)&bw);
 800858a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800858e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008592:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8008596:	4812      	ldr	r0, [pc, #72]	; (80085e0 <_ZN2FC8ModuleSD4mainEv+0xb0>)
 8008598:	f014 f8cf 	bl	801c73a <f_write>
 800859c:	4603      	mov	r3, r0
 800859e:	461a      	mov	r2, r3
 80085a0:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <_ZN2FC8ModuleSD4mainEv+0xa4>)
 80085a2:	701a      	strb	r2, [r3, #0]

			printf("f_close result: %d",retSD);
 80085a4:	4b0b      	ldr	r3, [pc, #44]	; (80085d4 <_ZN2FC8ModuleSD4mainEv+0xa4>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	4619      	mov	r1, r3
 80085aa:	4810      	ldr	r0, [pc, #64]	; (80085ec <_ZN2FC8ModuleSD4mainEv+0xbc>)
 80085ac:	f01a f8c0 	bl	8022730 <iprintf>
			printf("f_write result: %d",retSD);
 80085b0:	4b08      	ldr	r3, [pc, #32]	; (80085d4 <_ZN2FC8ModuleSD4mainEv+0xa4>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	4619      	mov	r1, r3
 80085b6:	480e      	ldr	r0, [pc, #56]	; (80085f0 <_ZN2FC8ModuleSD4mainEv+0xc0>)
 80085b8:	f01a f8ba 	bl	8022730 <iprintf>
			f_close(&SDFile);
 80085bc:	4808      	ldr	r0, [pc, #32]	; (80085e0 <_ZN2FC8ModuleSD4mainEv+0xb0>)
 80085be:	f014 fae9 	bl	801cb94 <f_close>


			osDelay(5);			/* 10hz */
 80085c2:	2005      	movs	r0, #5
 80085c4:	f014 fe48 	bl	801d258 <osDelay>
		}
 80085c8:	e7c5      	b.n	8008556 <_ZN2FC8ModuleSD4mainEv+0x26>
 80085ca:	bf00      	nop
 80085cc:	24009cbc 	.word	0x24009cbc
 80085d0:	24009ef0 	.word	0x24009ef0
 80085d4:	24009cb8 	.word	0x24009cb8
 80085d8:	08023370 	.word	0x08023370
 80085dc:	08023384 	.word	0x08023384
 80085e0:	24009cc0 	.word	0x24009cc0
 80085e4:	0802338c 	.word	0x0802338c
 80085e8:	080233a0 	.word	0x080233a0
 80085ec:	080233b8 	.word	0x080233b8
 80085f0:	080233cc 	.word	0x080233cc

080085f4 <Health_StartTask>:
	HAL_UART_Transmit(&huart2, p, len, 10);
	return len;
}


void Health_StartTask(void *argument){
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
	ModuleHealth::main();
 80085fc:	f7ff ff5c 	bl	80084b8 <_ZN2FC12ModuleHealth4mainEv>
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <Debug_StartTask>:
void Debug_StartTask(void *argument){
 8008608:	b580      	push	{r7, lr}
 800860a:	b0a4      	sub	sp, #144	; 0x90
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	struct MotorPWM pwm;
	struct Attitude att;
	struct Controller ctl;
	struct BodyAngularVelocity ang;
	while(1){
		msgBus.getHealth(&health);
 8008610:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008614:	4619      	mov	r1, r3
 8008616:	483f      	ldr	r0, [pc, #252]	; (8008714 <Debug_StartTask+0x10c>)
 8008618:	f7ff fc57 	bl	8007eca <_ZN2FC6MsgBus9getHealthEPNS_6HealthE>
		hzAccel = health.accel;
 800861c:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8008620:	4b3d      	ldr	r3, [pc, #244]	; (8008718 <Debug_StartTask+0x110>)
 8008622:	801a      	strh	r2, [r3, #0]
		hzBaro = health.baro;
 8008624:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8008628:	4b3c      	ldr	r3, [pc, #240]	; (800871c <Debug_StartTask+0x114>)
 800862a:	801a      	strh	r2, [r3, #0]
		hzGyro = health.gyro;
 800862c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008630:	4b3b      	ldr	r3, [pc, #236]	; (8008720 <Debug_StartTask+0x118>)
 8008632:	801a      	strh	r2, [r3, #0]
		hzGPS = health.gps;
 8008634:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8008638:	4b3a      	ldr	r3, [pc, #232]	; (8008724 <Debug_StartTask+0x11c>)
 800863a:	801a      	strh	r2, [r3, #0]
		hzMag = health.mag;
 800863c:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8008640:	4b39      	ldr	r3, [pc, #228]	; (8008728 <Debug_StartTask+0x120>)
 8008642:	801a      	strh	r2, [r3, #0]
		hzAHRS = health.ahrs;
 8008644:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8008648:	4b38      	ldr	r3, [pc, #224]	; (800872c <Debug_StartTask+0x124>)
 800864a:	801a      	strh	r2, [r3, #0]
		hzRC = health.rc;
 800864c:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8008650:	4b37      	ldr	r3, [pc, #220]	; (8008730 <Debug_StartTask+0x128>)
 8008652:	801a      	strh	r2, [r3, #0]
		hzAtti = health.attitudeController;
 8008654:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8008658:	4b36      	ldr	r3, [pc, #216]	; (8008734 <Debug_StartTask+0x12c>)
 800865a:	801a      	strh	r2, [r3, #0]
		test++;
 800865c:	4b36      	ldr	r3, [pc, #216]	; (8008738 <Debug_StartTask+0x130>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3301      	adds	r3, #1
 8008662:	4a35      	ldr	r2, [pc, #212]	; (8008738 <Debug_StartTask+0x130>)
 8008664:	6013      	str	r3, [r2, #0]
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

		msgBus.getMotorPWM(&pwm);
 8008666:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800866a:	4619      	mov	r1, r3
 800866c:	4829      	ldr	r0, [pc, #164]	; (8008714 <Debug_StartTask+0x10c>)
 800866e:	f7ff fc67 	bl	8007f40 <_ZN2FC6MsgBus11getMotorPWMEPNS_8MotorPWME>
		pwm1 = pwm.m1;
 8008672:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8008676:	4b31      	ldr	r3, [pc, #196]	; (800873c <Debug_StartTask+0x134>)
 8008678:	801a      	strh	r2, [r3, #0]
		pwm2 = pwm.m2;
 800867a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800867e:	4b30      	ldr	r3, [pc, #192]	; (8008740 <Debug_StartTask+0x138>)
 8008680:	801a      	strh	r2, [r3, #0]
		pwm3 = pwm.m3;
 8008682:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8008686:	4b2f      	ldr	r3, [pc, #188]	; (8008744 <Debug_StartTask+0x13c>)
 8008688:	801a      	strh	r2, [r3, #0]
		pwm4 = pwm.m4;
 800868a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800868e:	4b2e      	ldr	r3, [pc, #184]	; (8008748 <Debug_StartTask+0x140>)
 8008690:	801a      	strh	r2, [r3, #0]
		pwm5 = pwm.m5;
 8008692:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8008696:	4b2d      	ldr	r3, [pc, #180]	; (800874c <Debug_StartTask+0x144>)
 8008698:	801a      	strh	r2, [r3, #0]
		pwm6 = pwm.m6;
 800869a:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 800869e:	4b2c      	ldr	r3, [pc, #176]	; (8008750 <Debug_StartTask+0x148>)
 80086a0:	801a      	strh	r2, [r3, #0]

		msgBus.getAttitude(&att);
 80086a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086a6:	4619      	mov	r1, r3
 80086a8:	481a      	ldr	r0, [pc, #104]	; (8008714 <Debug_StartTask+0x10c>)
 80086aa:	f7fe fb7d 	bl	8006da8 <_ZN2FC6MsgBus11getAttitudeEPNS_8AttitudeE>
		att_roll = att.roll;
 80086ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b0:	4a28      	ldr	r2, [pc, #160]	; (8008754 <Debug_StartTask+0x14c>)
 80086b2:	6013      	str	r3, [r2, #0]
		att_pitch = att.pitch;
 80086b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b6:	4a28      	ldr	r2, [pc, #160]	; (8008758 <Debug_StartTask+0x150>)
 80086b8:	6013      	str	r3, [r2, #0]
		att_yaw = att.yaw;
 80086ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086bc:	4a27      	ldr	r2, [pc, #156]	; (800875c <Debug_StartTask+0x154>)
 80086be:	6013      	str	r3, [r2, #0]

		msgBus.getController(&ctl);
 80086c0:	f107 0320 	add.w	r3, r7, #32
 80086c4:	4619      	mov	r1, r3
 80086c6:	4813      	ldr	r0, [pc, #76]	; (8008714 <Debug_StartTask+0x10c>)
 80086c8:	f7fe fb4e 	bl	8006d68 <_ZN2FC6MsgBus13getControllerEPNS_10ControllerE>
		ctl_roll = ctl.roll;
 80086cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80086ce:	4b24      	ldr	r3, [pc, #144]	; (8008760 <Debug_StartTask+0x158>)
 80086d0:	801a      	strh	r2, [r3, #0]
		ctl_pitch = ctl.pitch;
 80086d2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80086d4:	4b23      	ldr	r3, [pc, #140]	; (8008764 <Debug_StartTask+0x15c>)
 80086d6:	801a      	strh	r2, [r3, #0]
		ctl_yaw = ctl.yaw;
 80086d8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80086da:	4b23      	ldr	r3, [pc, #140]	; (8008768 <Debug_StartTask+0x160>)
 80086dc:	801a      	strh	r2, [r3, #0]
		ctl_throtle = ctl.throttle;
 80086de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80086e0:	4b22      	ldr	r3, [pc, #136]	; (800876c <Debug_StartTask+0x164>)
 80086e2:	801a      	strh	r2, [r3, #0]

		msgBus.getBodyAngularVelocity(&ang);
 80086e4:	f107 0308 	add.w	r3, r7, #8
 80086e8:	4619      	mov	r1, r3
 80086ea:	480a      	ldr	r0, [pc, #40]	; (8008714 <Debug_StartTask+0x10c>)
 80086ec:	f7fc f965 	bl	80049ba <_ZN2FC6MsgBus22getBodyAngularVelocityEPNS_19BodyAngularVelocityE>
		att_p = ang.xyz[0];
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	4a1f      	ldr	r2, [pc, #124]	; (8008770 <Debug_StartTask+0x168>)
 80086f4:	6013      	str	r3, [r2, #0]
		att_q = ang.xyz[1];
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	4a1e      	ldr	r2, [pc, #120]	; (8008774 <Debug_StartTask+0x16c>)
 80086fa:	6013      	str	r3, [r2, #0]
		att_r = ang.xyz[2];
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	4a1e      	ldr	r2, [pc, #120]	; (8008778 <Debug_StartTask+0x170>)
 8008700:	6013      	str	r3, [r2, #0]

		channel = m1.Channel;
 8008702:	4b1e      	ldr	r3, [pc, #120]	; (800877c <Debug_StartTask+0x174>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a1e      	ldr	r2, [pc, #120]	; (8008780 <Debug_StartTask+0x178>)
 8008708:	6013      	str	r3, [r2, #0]

		osDelay(5);
 800870a:	2005      	movs	r0, #5
 800870c:	f014 fda4 	bl	801d258 <osDelay>
		msgBus.getHealth(&health);
 8008710:	e77e      	b.n	8008610 <Debug_StartTask+0x8>
 8008712:	bf00      	nop
 8008714:	24000438 	.word	0x24000438
 8008718:	240009e0 	.word	0x240009e0
 800871c:	240009e2 	.word	0x240009e2
 8008720:	240009e4 	.word	0x240009e4
 8008724:	240009e6 	.word	0x240009e6
 8008728:	240009e8 	.word	0x240009e8
 800872c:	240009ea 	.word	0x240009ea
 8008730:	240009ec 	.word	0x240009ec
 8008734:	240009ee 	.word	0x240009ee
 8008738:	24000a20 	.word	0x24000a20
 800873c:	240009f0 	.word	0x240009f0
 8008740:	240009f2 	.word	0x240009f2
 8008744:	240009f4 	.word	0x240009f4
 8008748:	240009f6 	.word	0x240009f6
 800874c:	240009f8 	.word	0x240009f8
 8008750:	240009fa 	.word	0x240009fa
 8008754:	240009fc 	.word	0x240009fc
 8008758:	24000a00 	.word	0x24000a00
 800875c:	24000a04 	.word	0x24000a04
 8008760:	24000a08 	.word	0x24000a08
 8008764:	24000a0a 	.word	0x24000a0a
 8008768:	24000a0c 	.word	0x24000a0c
 800876c:	24000a0e 	.word	0x24000a0e
 8008770:	24000a10 	.word	0x24000a10
 8008774:	24000a14 	.word	0x24000a14
 8008778:	24000a18 	.word	0x24000a18
 800877c:	24000164 	.word	0x24000164
 8008780:	24000a1c 	.word	0x24000a1c

08008784 <MPU9250_StartTask>:
	}
}

void MPU9250_StartTask(void *argument){
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
	uint32_t tick;
	tick = osKernelGetTickCount();
 800878c:	f014 fba0 	bl	801ced0 <osKernelGetTickCount>
 8008790:	60f8      	str	r0, [r7, #12]
	while(1){
		tick += 5;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3305      	adds	r3, #5
 8008796:	60fb      	str	r3, [r7, #12]
		osDelayUntil(tick);
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f014 fd8b 	bl	801d2b4 <osDelayUntil>
		MPU9250_updateDMA();
 800879e:	f7f8 fc27 	bl	8000ff0 <MPU9250_updateDMA>
		tick += 5;
 80087a2:	e7f6      	b.n	8008792 <MPU9250_StartTask+0xe>

080087a4 <BME280_StartTask>:
//		osDelay(5);				/* 200hz */
	}
}
void BME280_StartTask(void *argument){
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
	while(1){
		BME280_readIT();
 80087ac:	f7f9 fb1c 	bl	8001de8 <BME280_readIT>
		osDelay(20); 			/* 50hz */
 80087b0:	2014      	movs	r0, #20
 80087b2:	f014 fd51 	bl	801d258 <osDelay>
		BME280_readIT();
 80087b6:	e7f9      	b.n	80087ac <BME280_StartTask+0x8>

080087b8 <IST8310_StartTask>:
	}
}
void IST8310_StartTask(void *argument){
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
	while(1){
		IST8310_updataIT();
 80087c0:	f7f8 f9a0 	bl	8000b04 <IST8310_updataIT>
		osDelay(10); 			/* 100hz */
 80087c4:	200a      	movs	r0, #10
 80087c6:	f014 fd47 	bl	801d258 <osDelay>
		IST8310_updataIT();
 80087ca:	e7f9      	b.n	80087c0 <IST8310_StartTask+0x8>

080087cc <SD_StartTask>:
	}
}
void SD_StartTask(void *argument){
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
	ModuleSD::main();
 80087d4:	f7ff feac 	bl	8008530 <_ZN2FC8ModuleSD4mainEv>
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <AHRS_StartTask>:

void AHRS_StartTask(void *argument){
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
	ModuleAHRS::main();
 80087e8:	f7ff fc4a 	bl	8008080 <_ZN2FC10ModuleAHRS4mainEv>
}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <Commander_StartTask>:

void Commander_StartTask(void *argument){
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
	ModuleCommander::main();
 80087fc:	f7fe fdf2 	bl	80073e4 <_ZN2FC15ModuleCommander4mainEv>
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <Buzzer_StartTask>:

void Buzzer_StartTask(void *argument){
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
	ModuleBuzzer::main();
 8008810:	f7fe fc94 	bl	800713c <_ZN2FC12ModuleBuzzer4mainEv>
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <AC_StartTask>:

void AC_StartTask(void *argument){
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
	ModuleAttitudeController::main();
 8008824:	f7ff fbde 	bl	8007fe4 <_ZN2FC24ModuleAttitudeController4mainEv>
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <cppMain>:
/*
 *  LED signal
 *  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 */

void cppMain(){
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af04      	add	r7, sp, #16
    setvbuf(stdout, NULL, _IONBF, 0);
 8008836:	4b22      	ldr	r3, [pc, #136]	; (80088c0 <cppMain+0x90>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6898      	ldr	r0, [r3, #8]
 800883c:	2300      	movs	r3, #0
 800883e:	2202      	movs	r2, #2
 8008840:	2100      	movs	r1, #0
 8008842:	f019 fff1 	bl	8022828 <setvbuf>
    printf("test\r\n");
 8008846:	481f      	ldr	r0, [pc, #124]	; (80088c4 <cppMain+0x94>)
 8008848:	f019 ffe6 	bl	8022818 <puts>


    /* micro second timer start */
	HAL_TIM_Base_Start_IT(&htim2);
 800884c:	481e      	ldr	r0, [pc, #120]	; (80088c8 <cppMain+0x98>)
 800884e:	f00d fb49 	bl	8015ee4 <HAL_TIM_Base_Start_IT>
	 * \setting		i2c1
	 * 				fastmode
	 * 				using global interrupt
	 * 				using dma_rx
	 */
	MPU9250(&hi2c1);
 8008852:	481e      	ldr	r0, [pc, #120]	; (80088cc <cppMain+0x9c>)
 8008854:	f7f8 fb3c 	bl	8000ed0 <MPU9250>
	 * RMS Noise : 0.3Pa/2.5cm
	 * Data output rate : 83hz
	 * Filter bandwidth : 1.75 Hz
	 * response time : 0.3s
	 */
	BME280_init(&hi2c2, P_OSR_04, H_OSR_00, T_OSR_01, normal, BW0_021ODR,t_00_5ms);
 8008858:	2300      	movs	r3, #0
 800885a:	9302      	str	r3, [sp, #8]
 800885c:	2304      	movs	r3, #4
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	2303      	movs	r3, #3
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	2301      	movs	r3, #1
 8008866:	2201      	movs	r2, #1
 8008868:	2103      	movs	r1, #3
 800886a:	4819      	ldr	r0, [pc, #100]	; (80088d0 <cppMain+0xa0>)
 800886c:	f7f9 f9ce 	bl	8001c0c <BME280_init>
	 * \setting		i2c2
	 * 				fastmode
	 * 				using global interrupt
	 * 	magnetometer in gps module
	 */
	IST8310(&hi2c2);
 8008870:	4817      	ldr	r0, [pc, #92]	; (80088d0 <cppMain+0xa0>)
 8008872:	f7f8 f933 	bl	8000adc <IST8310>
	/*
	 *  \setting		uart8
	 *  				baudrate		38400
	 *  				rx_dma(circular)
	 */
    TM_GPS_Init(&huart8);
 8008876:	4817      	ldr	r0, [pc, #92]	; (80088d4 <cppMain+0xa4>)
 8008878:	f7f9 fd66 	bl	8002348 <TM_GPS_Init>
     *  				word length			9bits
     *  				parity				even
     *  				stop_bits			2
     *  				rx_dma(circular)
     */
	SBUS_init(&huart7);
 800887c:	4816      	ldr	r0, [pc, #88]	; (80088d8 <cppMain+0xa8>)
 800887e:	f7fe ffdb 	bl	8007838 <SBUS_init>

	Lidar1D_init(&htim15, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8008882:	2204      	movs	r2, #4
 8008884:	2100      	movs	r1, #0
 8008886:	4815      	ldr	r0, [pc, #84]	; (80088dc <cppMain+0xac>)
 8008888:	f7f8 fa5a 	bl	8000d40 <Lidar1D_init>
	Lidar1D_run();
 800888c:	f7f8 fad4 	bl	8000e38 <Lidar1D_run>

	m1.start();
 8008890:	4813      	ldr	r0, [pc, #76]	; (80088e0 <cppMain+0xb0>)
 8008892:	f7f8 f86a 	bl	800096a <_ZN2FC5Motor5startEv>
	m2.start();
 8008896:	4813      	ldr	r0, [pc, #76]	; (80088e4 <cppMain+0xb4>)
 8008898:	f7f8 f867 	bl	800096a <_ZN2FC5Motor5startEv>
	m3.start();
 800889c:	4812      	ldr	r0, [pc, #72]	; (80088e8 <cppMain+0xb8>)
 800889e:	f7f8 f864 	bl	800096a <_ZN2FC5Motor5startEv>
	m4.start();
 80088a2:	4812      	ldr	r0, [pc, #72]	; (80088ec <cppMain+0xbc>)
 80088a4:	f7f8 f861 	bl	800096a <_ZN2FC5Motor5startEv>
	m5.start();
 80088a8:	4811      	ldr	r0, [pc, #68]	; (80088f0 <cppMain+0xc0>)
 80088aa:	f7f8 f85e 	bl	800096a <_ZN2FC5Motor5startEv>
	m6.start();
 80088ae:	4811      	ldr	r0, [pc, #68]	; (80088f4 <cppMain+0xc4>)
 80088b0:	f7f8 f85b 	bl	800096a <_ZN2FC5Motor5startEv>

    std::printf("boot complete\r\n");
 80088b4:	4810      	ldr	r0, [pc, #64]	; (80088f8 <cppMain+0xc8>)
 80088b6:	f019 ffaf 	bl	8022818 <puts>
}
 80088ba:	bf00      	nop
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	240000e4 	.word	0x240000e4
 80088c4:	080233e0 	.word	0x080233e0
 80088c8:	240094f4 	.word	0x240094f4
 80088cc:	24009150 	.word	0x24009150
 80088d0:	2400919c 	.word	0x2400919c
 80088d4:	24009794 	.word	0x24009794
 80088d8:	2400958c 	.word	0x2400958c
 80088dc:	240093c4 	.word	0x240093c4
 80088e0:	24000164 	.word	0x24000164
 80088e4:	24000170 	.word	0x24000170
 80088e8:	2400017c 	.word	0x2400017c
 80088ec:	24000188 	.word	0x24000188
 80088f0:	24000194 	.word	0x24000194
 80088f4:	240001a0 	.word	0x240001a0
 80088f8:	080233e8 	.word	0x080233e8

080088fc <HAL_I2C_MemRxCpltCallback>:

//callback
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
//#ifdef USE_MPU9250
	if(hi2c->Instance == mpu9250.hi2c->Instance){
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	4b3a      	ldr	r3, [pc, #232]	; (80089f4 <HAL_I2C_MemRxCpltCallback+0xf8>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	429a      	cmp	r2, r3
 8008910:	d12b      	bne.n	800896a <HAL_I2C_MemRxCpltCallback+0x6e>
		switch(MPU9250_i2cRxCpltCallback()){
 8008912:	f7f8 fb8d 	bl	8001030 <MPU9250_i2cRxCpltCallback>
 8008916:	4603      	mov	r3, r0
 8008918:	2b01      	cmp	r3, #1
 800891a:	d001      	beq.n	8008920 <HAL_I2C_MemRxCpltCallback+0x24>
 800891c:	2b02      	cmp	r3, #2
			sensorAccel.setAccel(mpu9250.accel[0], mpu9250.accel[1], mpu9250.accel[2]);
			sensorGyro.setGyro(mpu9250.gyro[0], mpu9250.gyro[1], mpu9250.gyro[2]);
			break;
		case 2:
	//		sensorMag.setMag(mpu9250.mag[0], mpu9250.mag[1], mpu9250.mag[2]);
			break;
 800891e:	e024      	b.n	800896a <HAL_I2C_MemRxCpltCallback+0x6e>
			sensorAccel.setAccel(mpu9250.accel[0], mpu9250.accel[1], mpu9250.accel[2]);
 8008920:	4b34      	ldr	r3, [pc, #208]	; (80089f4 <HAL_I2C_MemRxCpltCallback+0xf8>)
 8008922:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8008926:	4b33      	ldr	r3, [pc, #204]	; (80089f4 <HAL_I2C_MemRxCpltCallback+0xf8>)
 8008928:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800892c:	4b31      	ldr	r3, [pc, #196]	; (80089f4 <HAL_I2C_MemRxCpltCallback+0xf8>)
 800892e:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8008932:	eeb0 1a66 	vmov.f32	s2, s13
 8008936:	eef0 0a47 	vmov.f32	s1, s14
 800893a:	eeb0 0a67 	vmov.f32	s0, s15
 800893e:	482e      	ldr	r0, [pc, #184]	; (80089f8 <HAL_I2C_MemRxCpltCallback+0xfc>)
 8008940:	f7ff fbb4 	bl	80080ac <_ZN2FC11SensorAccel8setAccelEfff>
			sensorGyro.setGyro(mpu9250.gyro[0], mpu9250.gyro[1], mpu9250.gyro[2]);
 8008944:	4b2b      	ldr	r3, [pc, #172]	; (80089f4 <HAL_I2C_MemRxCpltCallback+0xf8>)
 8008946:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800894a:	4b2a      	ldr	r3, [pc, #168]	; (80089f4 <HAL_I2C_MemRxCpltCallback+0xf8>)
 800894c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8008950:	4b28      	ldr	r3, [pc, #160]	; (80089f4 <HAL_I2C_MemRxCpltCallback+0xf8>)
 8008952:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8008956:	eeb0 1a66 	vmov.f32	s2, s13
 800895a:	eef0 0a47 	vmov.f32	s1, s14
 800895e:	eeb0 0a67 	vmov.f32	s0, s15
 8008962:	4826      	ldr	r0, [pc, #152]	; (80089fc <HAL_I2C_MemRxCpltCallback+0x100>)
 8008964:	f7ff fbe8 	bl	8008138 <_ZN2FC10SensorGyro7setGyroEfff>
			break;
 8008968:	bf00      	nop
		}
	}

	if(hi2c->Instance == ist8310.hi2c->Instance){
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	4b24      	ldr	r3, [pc, #144]	; (8008a00 <HAL_I2C_MemRxCpltCallback+0x104>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	429a      	cmp	r2, r3
 8008976:	d11b      	bne.n	80089b0 <HAL_I2C_MemRxCpltCallback+0xb4>
		if(IST8310_i2cRxCpltCallback())
 8008978:	f7f8 f8e6 	bl	8000b48 <IST8310_i2cRxCpltCallback>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	bf14      	ite	ne
 8008982:	2301      	movne	r3, #1
 8008984:	2300      	moveq	r3, #0
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d011      	beq.n	80089b0 <HAL_I2C_MemRxCpltCallback+0xb4>
			sensorMag.setMag(ist8310.raw[0], ist8310.raw[1], ist8310.raw[2]);
 800898c:	4b1c      	ldr	r3, [pc, #112]	; (8008a00 <HAL_I2C_MemRxCpltCallback+0x104>)
 800898e:	edd3 7a04 	vldr	s15, [r3, #16]
 8008992:	4b1b      	ldr	r3, [pc, #108]	; (8008a00 <HAL_I2C_MemRxCpltCallback+0x104>)
 8008994:	ed93 7a05 	vldr	s14, [r3, #20]
 8008998:	4b19      	ldr	r3, [pc, #100]	; (8008a00 <HAL_I2C_MemRxCpltCallback+0x104>)
 800899a:	edd3 6a06 	vldr	s13, [r3, #24]
 800899e:	eeb0 1a66 	vmov.f32	s2, s13
 80089a2:	eef0 0a47 	vmov.f32	s1, s14
 80089a6:	eeb0 0a67 	vmov.f32	s0, s15
 80089aa:	4816      	ldr	r0, [pc, #88]	; (8008a04 <HAL_I2C_MemRxCpltCallback+0x108>)
 80089ac:	f7ff fc0a 	bl	80081c4 <_ZN2FC9SensorMag6setMagEfff>
	}

	if(hi2c->Instance == bme280.hi2c->Instance){
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	4b14      	ldr	r3, [pc, #80]	; (8008a08 <HAL_I2C_MemRxCpltCallback+0x10c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d116      	bne.n	80089ec <HAL_I2C_MemRxCpltCallback+0xf0>
		if(BME280_i2cRxCpltCallback())
 80089be:	f7f9 fa33 	bl	8001e28 <BME280_i2cRxCpltCallback>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	bf14      	ite	ne
 80089c8:	2301      	movne	r3, #1
 80089ca:	2300      	moveq	r3, #0
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00c      	beq.n	80089ec <HAL_I2C_MemRxCpltCallback+0xf0>
			sensorBaro.setBaro(bme280.P, bme280.T);
 80089d2:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <HAL_I2C_MemRxCpltCallback+0x10c>)
 80089d4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80089d8:	4b0b      	ldr	r3, [pc, #44]	; (8008a08 <HAL_I2C_MemRxCpltCallback+0x10c>)
 80089da:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 80089de:	eef0 0a47 	vmov.f32	s1, s14
 80089e2:	eeb0 0a67 	vmov.f32	s0, s15
 80089e6:	4809      	ldr	r0, [pc, #36]	; (8008a0c <HAL_I2C_MemRxCpltCallback+0x110>)
 80089e8:	f7ff fcc2 	bl	8008370 <_ZN2FC10SensorBaro7setBaroEff>
	}
}
 80089ec:	bf00      	nop
 80089ee:	3708      	adds	r7, #8
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	24000570 	.word	0x24000570
 80089f8:	24000940 	.word	0x24000940
 80089fc:	24000958 	.word	0x24000958
 8008a00:	240008e8 	.word	0x240008e8
 8008a04:	24000910 	.word	0x24000910
 8008a08:	240001c4 	.word	0x240001c4
 8008a0c:	24000970 	.word	0x24000970

08008a10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a14:	ed2d 8b06 	vpush	{d8-d10}
 8008a18:	b088      	sub	sp, #32
 8008a1a:	af06      	add	r7, sp, #24
 8008a1c:	6078      	str	r0, [r7, #4]
	if(huart->Instance == sbus.huart->Instance){
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	4b43      	ldr	r3, [pc, #268]	; (8008b30 <HAL_UART_RxCpltCallback+0x120>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d132      	bne.n	8008a92 <HAL_UART_RxCpltCallback+0x82>
		if(SBUS_uartRxCpltCallback() == SBUS_Result_NewData){
 8008a2c:	f7ff f948 	bl	8007cc0 <SBUS_uartRxCpltCallback>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	bf0c      	ite	eq
 8008a36:	2301      	moveq	r3, #1
 8008a38:	2300      	movne	r3, #0
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d028      	beq.n	8008a92 <HAL_UART_RxCpltCallback+0x82>
			rc.setRC(SBUS_getChannel(2),	/* roll */
 8008a40:	2002      	movs	r0, #2
 8008a42:	f7ff f9bb 	bl	8007dbc <SBUS_getChannel>
 8008a46:	4603      	mov	r3, r0
 8008a48:	461d      	mov	r5, r3
 8008a4a:	2003      	movs	r0, #3
 8008a4c:	f7ff f9b6 	bl	8007dbc <SBUS_getChannel>
 8008a50:	4603      	mov	r3, r0
 8008a52:	461e      	mov	r6, r3
 8008a54:	2004      	movs	r0, #4
 8008a56:	f7ff f9b1 	bl	8007dbc <SBUS_getChannel>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	4698      	mov	r8, r3
 8008a5e:	2001      	movs	r0, #1
 8008a60:	f7ff f9ac 	bl	8007dbc <SBUS_getChannel>
 8008a64:	4603      	mov	r3, r0
 8008a66:	461c      	mov	r4, r3
 8008a68:	200b      	movs	r0, #11
 8008a6a:	f7ff f9a7 	bl	8007dbc <SBUS_getChannel>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	461a      	mov	r2, r3
 8008a72:	2300      	movs	r3, #0
 8008a74:	9305      	str	r3, [sp, #20]
 8008a76:	2300      	movs	r3, #0
 8008a78:	9304      	str	r3, [sp, #16]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9303      	str	r3, [sp, #12]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	9302      	str	r3, [sp, #8]
 8008a82:	9201      	str	r2, [sp, #4]
 8008a84:	9400      	str	r4, [sp, #0]
 8008a86:	4643      	mov	r3, r8
 8008a88:	4632      	mov	r2, r6
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	4829      	ldr	r0, [pc, #164]	; (8008b34 <HAL_UART_RxCpltCallback+0x124>)
 8008a8e:	f7ff fca5 	bl	80083dc <_ZN2FC2RC5setRCEttttttttt>
					 SBUS_getChannel(1),	/* throttle */
					 SBUS_getChannel(11));
		}
	}

	if(TM_GPS_Update(huart) == TM_GPS_Result_NewData && gpsUart.gpsData.Fix != 0 /* gps must fixed */){
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7f9 fcf2 	bl	800247c <TM_GPS_Update>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d105      	bne.n	8008aaa <HAL_UART_RxCpltCallback+0x9a>
 8008a9e:	4b26      	ldr	r3, [pc, #152]	; (8008b38 <HAL_UART_RxCpltCallback+0x128>)
 8008aa0:	7d5b      	ldrb	r3, [r3, #21]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <HAL_UART_RxCpltCallback+0x9a>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e000      	b.n	8008aac <HAL_UART_RxCpltCallback+0x9c>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d037      	beq.n	8008b20 <HAL_UART_RxCpltCallback+0x110>
		sensorGPS.setGPS(gpsUart.gpsData.Latitude, gpsUart.gpsData.Longitude, gpsUart.gpsData.Altitude,
 8008ab0:	4b21      	ldr	r3, [pc, #132]	; (8008b38 <HAL_UART_RxCpltCallback+0x128>)
 8008ab2:	ed93 8b00 	vldr	d8, [r3]
 8008ab6:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <HAL_UART_RxCpltCallback+0x128>)
 8008ab8:	ed93 9b02 	vldr	d9, [r3, #8]
 8008abc:	4b1e      	ldr	r3, [pc, #120]	; (8008b38 <HAL_UART_RxCpltCallback+0x128>)
 8008abe:	ed93 aa04 	vldr	s20, [r3, #16]
 8008ac2:	4b1d      	ldr	r3, [pc, #116]	; (8008b38 <HAL_UART_RxCpltCallback+0x128>)
 8008ac4:	edd3 7a08 	vldr	s15, [r3, #32]
 8008ac8:	2001      	movs	r0, #1
 8008aca:	eeb0 0a67 	vmov.f32	s0, s15
 8008ace:	f7f9 fd13 	bl	80024f8 <TM_GPS_ConvertSpeed>
 8008ad2:	eeb0 6a40 	vmov.f32	s12, s0
 8008ad6:	4b18      	ldr	r3, [pc, #96]	; (8008b38 <HAL_UART_RxCpltCallback+0x128>)
 8008ad8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008adc:	4b16      	ldr	r3, [pc, #88]	; (8008b38 <HAL_UART_RxCpltCallback+0x128>)
 8008ade:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8008ae2:	4b15      	ldr	r3, [pc, #84]	; (8008b38 <HAL_UART_RxCpltCallback+0x128>)
 8008ae4:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8008ae8:	4b13      	ldr	r3, [pc, #76]	; (8008b38 <HAL_UART_RxCpltCallback+0x128>)
 8008aea:	7d19      	ldrb	r1, [r3, #20]
 8008aec:	4b12      	ldr	r3, [pc, #72]	; (8008b38 <HAL_UART_RxCpltCallback+0x128>)
 8008aee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8008af2:	f04f 0300 	mov.w	r3, #0
 8008af6:	f04f 0400 	mov.w	r4, #0
 8008afa:	e9cd 3400 	strd	r3, r4, [sp]
 8008afe:	eeb0 4a66 	vmov.f32	s8, s13
 8008b02:	eef0 3a47 	vmov.f32	s7, s14
 8008b06:	eeb0 3a67 	vmov.f32	s6, s15
 8008b0a:	eef0 2a46 	vmov.f32	s5, s12
 8008b0e:	eeb0 2a4a 	vmov.f32	s4, s20
 8008b12:	eeb0 1b49 	vmov.f64	d1, d9
 8008b16:	eeb0 0b48 	vmov.f64	d0, d8
 8008b1a:	4808      	ldr	r0, [pc, #32]	; (8008b3c <HAL_UART_RxCpltCallback+0x12c>)
 8008b1c:	f7ff fb98 	bl	8008250 <_ZN2FC9SensorGPS6setGPSEddfffffhhy>
//			sensorGPS.setGPS(gpsUart.gpsData.Latitude, gpsUart.gpsData.Longitude, gpsUart.gpsData.Altitude,
//							 TM_GPS_ConvertSpeed(gpsUart.gpsData.Speed, TM_GPS_Speed_MeterPerSecond), gpsUart.gpsData.Direction, gpsUart.gpsData.HDOP, gpsUart.gpsData.VDOP,
//							 gpsUart.gpsData.Satellites, gpsUart.gpsData.FixMode, 0/* UTC in microsecond */);
//		}
//	}
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	ecbd 8b06 	vpop	{d8-d10}
 8008b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2e:	bf00      	nop
 8008b30:	240005f8 	.word	0x240005f8
 8008b34:	240009c8 	.word	0x240009c8
 8008b38:	24000690 	.word	0x24000690
 8008b3c:	24000980 	.word	0x24000980

08008b40 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
	Lidar1D_CaptureCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7f8 f997 	bl	8000e7c <Lidar1D_CaptureCallback>
}
 8008b4e:	bf00      	nop
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv>:
template<typename T>
class Freq {
public:
	static uint16_t freqCnt;

	static uint16_t checkFreq(){
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8008b5e:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8008b64:	4b04      	ldr	r3, [pc, #16]	; (8008b78 <_ZN2FC4FreqINS_11SensorAccelEE9checkFreqEv+0x20>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	801a      	strh	r2, [r3, #0]
		return res;
 8008b6a:	88fb      	ldrh	r3, [r7, #6]
	}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	24000a26 	.word	0x24000a26

08008b7c <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8008b82:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8008b88:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <_ZN2FC4FreqINS_10SensorGyroEE9checkFreqEv+0x20>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	801a      	strh	r2, [r3, #0]
		return res;
 8008b8e:	88fb      	ldrh	r3, [r7, #6]
	}
 8008b90:	4618      	mov	r0, r3
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	24000a28 	.word	0x24000a28

08008ba0 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8008ba6:	4b06      	ldr	r3, [pc, #24]	; (8008bc0 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8008bac:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <_ZN2FC4FreqINS_9SensorMagEE9checkFreqEv+0x20>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	801a      	strh	r2, [r3, #0]
		return res;
 8008bb2:	88fb      	ldrh	r3, [r7, #6]
	}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	24000a2a 	.word	0x24000a2a

08008bc4 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8008bca:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8008bd0:	4b04      	ldr	r3, [pc, #16]	; (8008be4 <_ZN2FC4FreqINS_10SensorBaroEE9checkFreqEv+0x20>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	801a      	strh	r2, [r3, #0]
		return res;
 8008bd6:	88fb      	ldrh	r3, [r7, #6]
	}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	24000a2e 	.word	0x24000a2e

08008be8 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8008bee:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8008bf4:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <_ZN2FC4FreqINS_9SensorGPSEE9checkFreqEv+0x20>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	801a      	strh	r2, [r3, #0]
		return res;
 8008bfa:	88fb      	ldrh	r3, [r7, #6]
	}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	24000a2c 	.word	0x24000a2c

08008c0c <_ZN2FC4FreqINS_2RCEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8008c12:	4b06      	ldr	r3, [pc, #24]	; (8008c2c <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8008c18:	4b04      	ldr	r3, [pc, #16]	; (8008c2c <_ZN2FC4FreqINS_2RCEE9checkFreqEv+0x20>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	801a      	strh	r2, [r3, #0]
		return res;
 8008c1e:	88fb      	ldrh	r3, [r7, #6]
	}
 8008c20:	4618      	mov	r0, r3
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	24000a30 	.word	0x24000a30

08008c30 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8008c36:	4b06      	ldr	r3, [pc, #24]	; (8008c50 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8008c3c:	4b04      	ldr	r3, [pc, #16]	; (8008c50 <_ZN2FC4FreqINS_10ModuleAHRSEE9checkFreqEv+0x20>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	801a      	strh	r2, [r3, #0]
		return res;
 8008c42:	88fb      	ldrh	r3, [r7, #6]
	}
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	2400036c 	.word	0x2400036c

08008c54 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv>:
	static uint16_t checkFreq(){
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
		uint16_t res = freqCnt;
 8008c5a:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	80fb      	strh	r3, [r7, #6]
		freqCnt = 0;
 8008c60:	4b04      	ldr	r3, [pc, #16]	; (8008c74 <_ZN2FC4FreqINS_24ModuleAttitudeControllerEE9checkFreqEv+0x20>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	801a      	strh	r2, [r3, #0]
		return res;
 8008c66:	88fb      	ldrh	r3, [r7, #6]
	}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	24000a24 	.word	0x24000a24

08008c78 <_Z41__static_initialization_and_destruction_0ii>:
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d107      	bne.n	8008c98 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d102      	bne.n	8008c98 <_Z41__static_initialization_and_destruction_0ii+0x20>
RC rc;
 8008c92:	4803      	ldr	r0, [pc, #12]	; (8008ca0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8008c94:	f7ff fb94 	bl	80083c0 <_ZN2FC2RCC1Ev>
}
 8008c98:	bf00      	nop
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	240009c8 	.word	0x240009c8

08008ca4 <_GLOBAL__sub_I_mpu9250>:
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008cac:	2001      	movs	r0, #1
 8008cae:	f7ff ffe3 	bl	8008c78 <_Z41__static_initialization_and_destruction_0ii>
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8008cba:	1d3b      	adds	r3, r7, #4
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	605a      	str	r2, [r3, #4]
 8008cc2:	609a      	str	r2, [r3, #8]
 8008cc4:	60da      	str	r2, [r3, #12]
 8008cc6:	611a      	str	r2, [r3, #16]
 8008cc8:	615a      	str	r2, [r3, #20]
 8008cca:	619a      	str	r2, [r3, #24]

  /** Common config
  */
  hadc3.Instance = ADC3;
 8008ccc:	4b28      	ldr	r3, [pc, #160]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008cce:	4a29      	ldr	r2, [pc, #164]	; (8008d74 <MX_ADC3_Init+0xc0>)
 8008cd0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8008cd2:	4b27      	ldr	r3, [pc, #156]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8008cd8:	4b25      	ldr	r3, [pc, #148]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8008cde:	4b24      	ldr	r3, [pc, #144]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008ce4:	4b22      	ldr	r3, [pc, #136]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008ce6:	2204      	movs	r2, #4
 8008ce8:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8008cea:	4b21      	ldr	r3, [pc, #132]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8008cf0:	4b1f      	ldr	r3, [pc, #124]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8008cf6:	4b1e      	ldr	r3, [pc, #120]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8008cfc:	4b1c      	ldr	r3, [pc, #112]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008d02:	4b1b      	ldr	r3, [pc, #108]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008d08:	4b19      	ldr	r3, [pc, #100]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8008d0e:	4b18      	ldr	r3, [pc, #96]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008d14:	4b16      	ldr	r3, [pc, #88]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8008d1a:	4b15      	ldr	r3, [pc, #84]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8008d20:	4b13      	ldr	r3, [pc, #76]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8008d28:	4811      	ldr	r0, [pc, #68]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008d2a:	f002 fbdd 	bl	800b4e8 <HAL_ADC_Init>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8008d34:	f000 fcfa 	bl	800972c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008d38:	4b0f      	ldr	r3, [pc, #60]	; (8008d78 <MX_ADC3_Init+0xc4>)
 8008d3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008d3c:	2306      	movs	r3, #6
 8008d3e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8008d40:	2300      	movs	r3, #0
 8008d42:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8008d44:	4b0d      	ldr	r3, [pc, #52]	; (8008d7c <MX_ADC3_Init+0xc8>)
 8008d46:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008d48:	2304      	movs	r3, #4
 8008d4a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8008d50:	2300      	movs	r3, #0
 8008d52:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8008d54:	1d3b      	adds	r3, r7, #4
 8008d56:	4619      	mov	r1, r3
 8008d58:	4805      	ldr	r0, [pc, #20]	; (8008d70 <MX_ADC3_Init+0xbc>)
 8008d5a:	f002 fd65 	bl	800b828 <HAL_ADC_ConfigChannel>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8008d64:	f000 fce2 	bl	800972c <Error_Handler>
  }

}
 8008d68:	bf00      	nop
 8008d6a:	3720      	adds	r7, #32
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	24005384 	.word	0x24005384
 8008d74:	58026000 	.word	0x58026000
 8008d78:	04300002 	.word	0x04300002
 8008d7c:	47ff0000 	.word	0x47ff0000

08008d80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a18      	ldr	r2, [pc, #96]	; (8008df0 <HAL_ADC_MspInit+0x70>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d129      	bne.n	8008de6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8008d92:	4b18      	ldr	r3, [pc, #96]	; (8008df4 <HAL_ADC_MspInit+0x74>)
 8008d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d98:	4a16      	ldr	r2, [pc, #88]	; (8008df4 <HAL_ADC_MspInit+0x74>)
 8008d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008da2:	4b14      	ldr	r3, [pc, #80]	; (8008df4 <HAL_ADC_MspInit+0x74>)
 8008da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008dac:	60fb      	str	r3, [r7, #12]
 8008dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008db0:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <HAL_ADC_MspInit+0x74>)
 8008db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008db6:	4a0f      	ldr	r2, [pc, #60]	; (8008df4 <HAL_ADC_MspInit+0x74>)
 8008db8:	f043 0304 	orr.w	r3, r3, #4
 8008dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008dc0:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <HAL_ADC_MspInit+0x74>)
 8008dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008dc6:	f003 0304 	and.w	r3, r3, #4
 8008dca:	60bb      	str	r3, [r7, #8]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8008dce:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8008dd2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8008dd6:	f002 f9e5 	bl	800b1a4 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8008dda:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8008dde:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8008de2:	f002 f9df 	bl	800b1a4 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8008de6:	bf00      	nop
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	58026000 	.word	0x58026000
 8008df4:	58024400 	.word	0x58024400

08008df8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008dfe:	4b15      	ldr	r3, [pc, #84]	; (8008e54 <MX_DMA_Init+0x5c>)
 8008e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008e04:	4a13      	ldr	r2, [pc, #76]	; (8008e54 <MX_DMA_Init+0x5c>)
 8008e06:	f043 0301 	orr.w	r3, r3, #1
 8008e0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008e0e:	4b11      	ldr	r3, [pc, #68]	; (8008e54 <MX_DMA_Init+0x5c>)
 8008e10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008e14:	f003 0301 	and.w	r3, r3, #1
 8008e18:	607b      	str	r3, [r7, #4]
 8008e1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 10, 0);
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	210a      	movs	r1, #10
 8008e20:	200b      	movs	r0, #11
 8008e22:	f003 f9c5 	bl	800c1b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8008e26:	200b      	movs	r0, #11
 8008e28:	f003 f9dc 	bl	800c1e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	210a      	movs	r1, #10
 8008e30:	200c      	movs	r0, #12
 8008e32:	f003 f9bd 	bl	800c1b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8008e36:	200c      	movs	r0, #12
 8008e38:	f003 f9d4 	bl	800c1e4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	2105      	movs	r1, #5
 8008e40:	200d      	movs	r0, #13
 8008e42:	f003 f9b5 	bl	800c1b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8008e46:	200d      	movs	r0, #13
 8008e48:	f003 f9cc 	bl	800c1e4 <HAL_NVIC_EnableIRQ>

}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	58024400 	.word	0x58024400

08008e58 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8008e5c:	4a2c      	ldr	r2, [pc, #176]	; (8008f10 <MX_FREERTOS_Init+0xb8>)
 8008e5e:	2100      	movs	r1, #0
 8008e60:	482c      	ldr	r0, [pc, #176]	; (8008f14 <MX_FREERTOS_Init+0xbc>)
 8008e62:	f014 f85d 	bl	801cf20 <osThreadNew>
 8008e66:	4602      	mov	r2, r0
 8008e68:	4b2b      	ldr	r3, [pc, #172]	; (8008f18 <MX_FREERTOS_Init+0xc0>)
 8008e6a:	601a      	str	r2, [r3, #0]

  /* creation of MPU9250_Task */
  MPU9250_TaskHandle = osThreadNew(MPU9250_StartTask, NULL, &MPU9250_Task_attributes);
 8008e6c:	4a2b      	ldr	r2, [pc, #172]	; (8008f1c <MX_FREERTOS_Init+0xc4>)
 8008e6e:	2100      	movs	r1, #0
 8008e70:	482b      	ldr	r0, [pc, #172]	; (8008f20 <MX_FREERTOS_Init+0xc8>)
 8008e72:	f014 f855 	bl	801cf20 <osThreadNew>
 8008e76:	4602      	mov	r2, r0
 8008e78:	4b2a      	ldr	r3, [pc, #168]	; (8008f24 <MX_FREERTOS_Init+0xcc>)
 8008e7a:	601a      	str	r2, [r3, #0]

  /* creation of BME280_Task */
  BME280_TaskHandle = osThreadNew(BME280_StartTask, NULL, &BME280_Task_attributes);
 8008e7c:	4a2a      	ldr	r2, [pc, #168]	; (8008f28 <MX_FREERTOS_Init+0xd0>)
 8008e7e:	2100      	movs	r1, #0
 8008e80:	482a      	ldr	r0, [pc, #168]	; (8008f2c <MX_FREERTOS_Init+0xd4>)
 8008e82:	f014 f84d 	bl	801cf20 <osThreadNew>
 8008e86:	4602      	mov	r2, r0
 8008e88:	4b29      	ldr	r3, [pc, #164]	; (8008f30 <MX_FREERTOS_Init+0xd8>)
 8008e8a:	601a      	str	r2, [r3, #0]

  /* creation of IST8310_Task */
  IST8310_TaskHandle = osThreadNew(IST8310_StartTask, NULL, &IST8310_Task_attributes);
 8008e8c:	4a29      	ldr	r2, [pc, #164]	; (8008f34 <MX_FREERTOS_Init+0xdc>)
 8008e8e:	2100      	movs	r1, #0
 8008e90:	4829      	ldr	r0, [pc, #164]	; (8008f38 <MX_FREERTOS_Init+0xe0>)
 8008e92:	f014 f845 	bl	801cf20 <osThreadNew>
 8008e96:	4602      	mov	r2, r0
 8008e98:	4b28      	ldr	r3, [pc, #160]	; (8008f3c <MX_FREERTOS_Init+0xe4>)
 8008e9a:	601a      	str	r2, [r3, #0]

  /* creation of SD_Task */
  SD_TaskHandle = osThreadNew(SD_StartTask, NULL, &SD_Task_attributes);
 8008e9c:	4a28      	ldr	r2, [pc, #160]	; (8008f40 <MX_FREERTOS_Init+0xe8>)
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	4828      	ldr	r0, [pc, #160]	; (8008f44 <MX_FREERTOS_Init+0xec>)
 8008ea2:	f014 f83d 	bl	801cf20 <osThreadNew>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	4b27      	ldr	r3, [pc, #156]	; (8008f48 <MX_FREERTOS_Init+0xf0>)
 8008eaa:	601a      	str	r2, [r3, #0]

  /* creation of AHRS_Task */
  AHRS_TaskHandle = osThreadNew(AHRS_StartTask, NULL, &AHRS_Task_attributes);
 8008eac:	4a27      	ldr	r2, [pc, #156]	; (8008f4c <MX_FREERTOS_Init+0xf4>)
 8008eae:	2100      	movs	r1, #0
 8008eb0:	4827      	ldr	r0, [pc, #156]	; (8008f50 <MX_FREERTOS_Init+0xf8>)
 8008eb2:	f014 f835 	bl	801cf20 <osThreadNew>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	4b26      	ldr	r3, [pc, #152]	; (8008f54 <MX_FREERTOS_Init+0xfc>)
 8008eba:	601a      	str	r2, [r3, #0]

  /* creation of Commander_Task */
  Commander_TaskHandle = osThreadNew(Commander_StartTask, NULL, &Commander_Task_attributes);
 8008ebc:	4a26      	ldr	r2, [pc, #152]	; (8008f58 <MX_FREERTOS_Init+0x100>)
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4826      	ldr	r0, [pc, #152]	; (8008f5c <MX_FREERTOS_Init+0x104>)
 8008ec2:	f014 f82d 	bl	801cf20 <osThreadNew>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	4b25      	ldr	r3, [pc, #148]	; (8008f60 <MX_FREERTOS_Init+0x108>)
 8008eca:	601a      	str	r2, [r3, #0]

  /* creation of Debug_Task */
  Debug_TaskHandle = osThreadNew(Debug_StartTask, NULL, &Debug_Task_attributes);
 8008ecc:	4a25      	ldr	r2, [pc, #148]	; (8008f64 <MX_FREERTOS_Init+0x10c>)
 8008ece:	2100      	movs	r1, #0
 8008ed0:	4825      	ldr	r0, [pc, #148]	; (8008f68 <MX_FREERTOS_Init+0x110>)
 8008ed2:	f014 f825 	bl	801cf20 <osThreadNew>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	4b24      	ldr	r3, [pc, #144]	; (8008f6c <MX_FREERTOS_Init+0x114>)
 8008eda:	601a      	str	r2, [r3, #0]

  /* creation of Buzzer_Task */
  Buzzer_TaskHandle = osThreadNew(Buzzer_StartTask, NULL, &Buzzer_Task_attributes);
 8008edc:	4a24      	ldr	r2, [pc, #144]	; (8008f70 <MX_FREERTOS_Init+0x118>)
 8008ede:	2100      	movs	r1, #0
 8008ee0:	4824      	ldr	r0, [pc, #144]	; (8008f74 <MX_FREERTOS_Init+0x11c>)
 8008ee2:	f014 f81d 	bl	801cf20 <osThreadNew>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	4b23      	ldr	r3, [pc, #140]	; (8008f78 <MX_FREERTOS_Init+0x120>)
 8008eea:	601a      	str	r2, [r3, #0]

  /* creation of Health_Task */
  Health_TaskHandle = osThreadNew(Health_StartTask, NULL, &Health_Task_attributes);
 8008eec:	4a23      	ldr	r2, [pc, #140]	; (8008f7c <MX_FREERTOS_Init+0x124>)
 8008eee:	2100      	movs	r1, #0
 8008ef0:	4823      	ldr	r0, [pc, #140]	; (8008f80 <MX_FREERTOS_Init+0x128>)
 8008ef2:	f014 f815 	bl	801cf20 <osThreadNew>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	4b22      	ldr	r3, [pc, #136]	; (8008f84 <MX_FREERTOS_Init+0x12c>)
 8008efa:	601a      	str	r2, [r3, #0]

  /* creation of AC_Task */
  AC_TaskHandle = osThreadNew(AC_StartTask, NULL, &AC_Task_attributes);
 8008efc:	4a22      	ldr	r2, [pc, #136]	; (8008f88 <MX_FREERTOS_Init+0x130>)
 8008efe:	2100      	movs	r1, #0
 8008f00:	4822      	ldr	r0, [pc, #136]	; (8008f8c <MX_FREERTOS_Init+0x134>)
 8008f02:	f014 f80d 	bl	801cf20 <osThreadNew>
 8008f06:	4602      	mov	r2, r0
 8008f08:	4b21      	ldr	r3, [pc, #132]	; (8008f90 <MX_FREERTOS_Init+0x138>)
 8008f0a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8008f0c:	bf00      	nop
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	080239f4 	.word	0x080239f4
 8008f14:	08008f95 	.word	0x08008f95
 8008f18:	240053e8 	.word	0x240053e8
 8008f1c:	08023a18 	.word	0x08023a18
 8008f20:	08008785 	.word	0x08008785
 8008f24:	24007e24 	.word	0x24007e24
 8008f28:	08023a3c 	.word	0x08023a3c
 8008f2c:	080087a5 	.word	0x080087a5
 8008f30:	240082ec 	.word	0x240082ec
 8008f34:	08023a60 	.word	0x08023a60
 8008f38:	080087b9 	.word	0x080087b9
 8008f3c:	240057ec 	.word	0x240057ec
 8008f40:	08023a84 	.word	0x08023a84
 8008f44:	080087cd 	.word	0x080087cd
 8008f48:	240077f0 	.word	0x240077f0
 8008f4c:	08023aa8 	.word	0x08023aa8
 8008f50:	080087e1 	.word	0x080087e1
 8008f54:	24008288 	.word	0x24008288
 8008f58:	08023acc 	.word	0x08023acc
 8008f5c:	080087f5 	.word	0x080087f5
 8008f60:	240079f4 	.word	0x240079f4
 8008f64:	08023af0 	.word	0x08023af0
 8008f68:	08008609 	.word	0x08008609
 8008f6c:	24007cb0 	.word	0x24007cb0
 8008f70:	08023b14 	.word	0x08023b14
 8008f74:	08008809 	.word	0x08008809
 8008f78:	240082e8 	.word	0x240082e8
 8008f7c:	08023b38 	.word	0x08023b38
 8008f80:	080085f5 	.word	0x080085f5
 8008f84:	240082f0 	.word	0x240082f0
 8008f88:	08023b5c 	.word	0x08023b5c
 8008f8c:	0800881d 	.word	0x0800881d
 8008f90:	24007e28 	.word	0x24007e28

08008f94 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	f014 f95b 	bl	801d258 <osDelay>
 8008fa2:	e7fb      	b.n	8008f9c <StartDefaultTask+0x8>

08008fa4 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08e      	sub	sp, #56	; 0x38
 8008fa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fae:	2200      	movs	r2, #0
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	605a      	str	r2, [r3, #4]
 8008fb4:	609a      	str	r2, [r3, #8]
 8008fb6:	60da      	str	r2, [r3, #12]
 8008fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008fba:	4b84      	ldr	r3, [pc, #528]	; (80091cc <MX_GPIO_Init+0x228>)
 8008fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fc0:	4a82      	ldr	r2, [pc, #520]	; (80091cc <MX_GPIO_Init+0x228>)
 8008fc2:	f043 0310 	orr.w	r3, r3, #16
 8008fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008fca:	4b80      	ldr	r3, [pc, #512]	; (80091cc <MX_GPIO_Init+0x228>)
 8008fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fd0:	f003 0310 	and.w	r3, r3, #16
 8008fd4:	623b      	str	r3, [r7, #32]
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008fd8:	4b7c      	ldr	r3, [pc, #496]	; (80091cc <MX_GPIO_Init+0x228>)
 8008fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fde:	4a7b      	ldr	r2, [pc, #492]	; (80091cc <MX_GPIO_Init+0x228>)
 8008fe0:	f043 0304 	orr.w	r3, r3, #4
 8008fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008fe8:	4b78      	ldr	r3, [pc, #480]	; (80091cc <MX_GPIO_Init+0x228>)
 8008fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fee:	f003 0304 	and.w	r3, r3, #4
 8008ff2:	61fb      	str	r3, [r7, #28]
 8008ff4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008ff6:	4b75      	ldr	r3, [pc, #468]	; (80091cc <MX_GPIO_Init+0x228>)
 8008ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ffc:	4a73      	ldr	r2, [pc, #460]	; (80091cc <MX_GPIO_Init+0x228>)
 8008ffe:	f043 0320 	orr.w	r3, r3, #32
 8009002:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009006:	4b71      	ldr	r3, [pc, #452]	; (80091cc <MX_GPIO_Init+0x228>)
 8009008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800900c:	f003 0320 	and.w	r3, r3, #32
 8009010:	61bb      	str	r3, [r7, #24]
 8009012:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009014:	4b6d      	ldr	r3, [pc, #436]	; (80091cc <MX_GPIO_Init+0x228>)
 8009016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800901a:	4a6c      	ldr	r2, [pc, #432]	; (80091cc <MX_GPIO_Init+0x228>)
 800901c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009024:	4b69      	ldr	r3, [pc, #420]	; (80091cc <MX_GPIO_Init+0x228>)
 8009026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800902a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800902e:	617b      	str	r3, [r7, #20]
 8009030:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009032:	4b66      	ldr	r3, [pc, #408]	; (80091cc <MX_GPIO_Init+0x228>)
 8009034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009038:	4a64      	ldr	r2, [pc, #400]	; (80091cc <MX_GPIO_Init+0x228>)
 800903a:	f043 0301 	orr.w	r3, r3, #1
 800903e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009042:	4b62      	ldr	r3, [pc, #392]	; (80091cc <MX_GPIO_Init+0x228>)
 8009044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	613b      	str	r3, [r7, #16]
 800904e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009050:	4b5e      	ldr	r3, [pc, #376]	; (80091cc <MX_GPIO_Init+0x228>)
 8009052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009056:	4a5d      	ldr	r2, [pc, #372]	; (80091cc <MX_GPIO_Init+0x228>)
 8009058:	f043 0302 	orr.w	r3, r3, #2
 800905c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009060:	4b5a      	ldr	r3, [pc, #360]	; (80091cc <MX_GPIO_Init+0x228>)
 8009062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800906e:	4b57      	ldr	r3, [pc, #348]	; (80091cc <MX_GPIO_Init+0x228>)
 8009070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009074:	4a55      	ldr	r2, [pc, #340]	; (80091cc <MX_GPIO_Init+0x228>)
 8009076:	f043 0308 	orr.w	r3, r3, #8
 800907a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800907e:	4b53      	ldr	r3, [pc, #332]	; (80091cc <MX_GPIO_Init+0x228>)
 8009080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009084:	f003 0308 	and.w	r3, r3, #8
 8009088:	60bb      	str	r3, [r7, #8]
 800908a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800908c:	4b4f      	ldr	r3, [pc, #316]	; (80091cc <MX_GPIO_Init+0x228>)
 800908e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009092:	4a4e      	ldr	r2, [pc, #312]	; (80091cc <MX_GPIO_Init+0x228>)
 8009094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009098:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800909c:	4b4b      	ldr	r3, [pc, #300]	; (80091cc <MX_GPIO_Init+0x228>)
 800909e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80090a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a6:	607b      	str	r3, [r7, #4]
 80090a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, WINCH_CONTROL1_Pin|WINCH_CONTROL2_Pin, GPIO_PIN_RESET);
 80090aa:	2200      	movs	r2, #0
 80090ac:	210c      	movs	r1, #12
 80090ae:	4848      	ldr	r0, [pc, #288]	; (80091d0 <MX_GPIO_Init+0x22c>)
 80090b0:	f005 fda4 	bl	800ebfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED1_Pin|LED2_Pin|LED3_Pin|EXTERNAL_LED_CONTROL_Pin, GPIO_PIN_RESET);
 80090b4:	2200      	movs	r2, #0
 80090b6:	f241 011c 	movw	r1, #4124	; 0x101c
 80090ba:	4846      	ldr	r0, [pc, #280]	; (80091d4 <MX_GPIO_Init+0x230>)
 80090bc:	f005 fd9e 	bl	800ebfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80090c0:	2200      	movs	r2, #0
 80090c2:	2101      	movs	r1, #1
 80090c4:	4844      	ldr	r0, [pc, #272]	; (80091d8 <MX_GPIO_Init+0x234>)
 80090c6:	f005 fd99 	bl	800ebfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80090ca:	2200      	movs	r2, #0
 80090cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80090d0:	4842      	ldr	r0, [pc, #264]	; (80091dc <MX_GPIO_Init+0x238>)
 80090d2:	f005 fd93 	bl	800ebfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = WINCH_CONTROL1_Pin|WINCH_CONTROL2_Pin;
 80090d6:	230c      	movs	r3, #12
 80090d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090da:	2301      	movs	r3, #1
 80090dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090e2:	2300      	movs	r3, #0
 80090e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80090e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090ea:	4619      	mov	r1, r3
 80090ec:	4838      	ldr	r0, [pc, #224]	; (80091d0 <MX_GPIO_Init+0x22c>)
 80090ee:	f005 fbbd 	bl	800e86c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|SD_DETECTION_Pin;
 80090f2:	f242 0320 	movw	r3, #8224	; 0x2020
 80090f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090f8:	2300      	movs	r3, #0
 80090fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090fc:	2300      	movs	r3, #0
 80090fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009104:	4619      	mov	r1, r3
 8009106:	4836      	ldr	r0, [pc, #216]	; (80091e0 <MX_GPIO_Init+0x23c>)
 8009108:	f005 fbb0 	bl	800e86c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|EXTERNAL_LED_CONTROL_Pin;
 800910c:	f241 031c 	movw	r3, #4124	; 0x101c
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009112:	2301      	movs	r3, #1
 8009114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009116:	2300      	movs	r3, #0
 8009118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800911a:	2300      	movs	r3, #0
 800911c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800911e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009122:	4619      	mov	r1, r3
 8009124:	482b      	ldr	r0, [pc, #172]	; (80091d4 <MX_GPIO_Init+0x230>)
 8009126:	f005 fba1 	bl	800e86c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800912a:	2301      	movs	r3, #1
 800912c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800912e:	2301      	movs	r3, #1
 8009130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009132:	2300      	movs	r3, #0
 8009134:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009136:	2300      	movs	r3, #0
 8009138:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800913a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800913e:	4619      	mov	r1, r3
 8009140:	4825      	ldr	r0, [pc, #148]	; (80091d8 <MX_GPIO_Init+0x234>)
 8009142:	f005 fb93 	bl	800e86c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8009146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800914a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800914c:	2301      	movs	r3, #1
 800914e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009150:	2300      	movs	r3, #0
 8009152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009154:	2300      	movs	r3, #0
 8009156:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8009158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800915c:	4619      	mov	r1, r3
 800915e:	481f      	ldr	r0, [pc, #124]	; (80091dc <MX_GPIO_Init+0x238>)
 8009160:	f005 fb84 	bl	800e86c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DETECTIONG3_Pin;
 8009164:	2308      	movs	r3, #8
 8009166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009168:	2300      	movs	r3, #0
 800916a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800916c:	2300      	movs	r3, #0
 800916e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DETECTIONG3_GPIO_Port, &GPIO_InitStruct);
 8009170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009174:	4619      	mov	r1, r3
 8009176:	481b      	ldr	r0, [pc, #108]	; (80091e4 <MX_GPIO_Init+0x240>)
 8009178:	f005 fb78 	bl	800e86c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800917c:	2380      	movs	r3, #128	; 0x80
 800917e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009180:	4b19      	ldr	r3, [pc, #100]	; (80091e8 <MX_GPIO_Init+0x244>)
 8009182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009184:	2300      	movs	r3, #0
 8009186:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8009188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800918c:	4619      	mov	r1, r3
 800918e:	4815      	ldr	r0, [pc, #84]	; (80091e4 <MX_GPIO_Init+0x240>)
 8009190:	f005 fb6c 	bl	800e86c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAFETY_SWITCH_Pin;
 8009194:	2380      	movs	r3, #128	; 0x80
 8009196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009198:	2300      	movs	r3, #0
 800919a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800919c:	2300      	movs	r3, #0
 800919e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SAFETY_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80091a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091a4:	4619      	mov	r1, r3
 80091a6:	480d      	ldr	r0, [pc, #52]	; (80091dc <MX_GPIO_Init+0x238>)
 80091a8:	f005 fb60 	bl	800e86c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU9250_INT_Pin;
 80091ac:	2320      	movs	r3, #32
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091b0:	2300      	movs	r3, #0
 80091b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091b4:	2300      	movs	r3, #0
 80091b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MPU9250_INT_GPIO_Port, &GPIO_InitStruct);
 80091b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091bc:	4619      	mov	r1, r3
 80091be:	4806      	ldr	r0, [pc, #24]	; (80091d8 <MX_GPIO_Init+0x234>)
 80091c0:	f005 fb54 	bl	800e86c <HAL_GPIO_Init>

}
 80091c4:	bf00      	nop
 80091c6:	3738      	adds	r7, #56	; 0x38
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	58024400 	.word	0x58024400
 80091d0:	58021000 	.word	0x58021000
 80091d4:	58021400 	.word	0x58021400
 80091d8:	58020400 	.word	0x58020400
 80091dc:	58020c00 	.word	0x58020c00
 80091e0:	58020800 	.word	0x58020800
 80091e4:	58021800 	.word	0x58021800
 80091e8:	11110000 	.word	0x11110000

080091ec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80091f0:	4b1b      	ldr	r3, [pc, #108]	; (8009260 <MX_I2C1_Init+0x74>)
 80091f2:	4a1c      	ldr	r2, [pc, #112]	; (8009264 <MX_I2C1_Init+0x78>)
 80091f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80091f6:	4b1a      	ldr	r3, [pc, #104]	; (8009260 <MX_I2C1_Init+0x74>)
 80091f8:	4a1b      	ldr	r2, [pc, #108]	; (8009268 <MX_I2C1_Init+0x7c>)
 80091fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80091fc:	4b18      	ldr	r3, [pc, #96]	; (8009260 <MX_I2C1_Init+0x74>)
 80091fe:	2200      	movs	r2, #0
 8009200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009202:	4b17      	ldr	r3, [pc, #92]	; (8009260 <MX_I2C1_Init+0x74>)
 8009204:	2201      	movs	r2, #1
 8009206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009208:	4b15      	ldr	r3, [pc, #84]	; (8009260 <MX_I2C1_Init+0x74>)
 800920a:	2200      	movs	r2, #0
 800920c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800920e:	4b14      	ldr	r3, [pc, #80]	; (8009260 <MX_I2C1_Init+0x74>)
 8009210:	2200      	movs	r2, #0
 8009212:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009214:	4b12      	ldr	r3, [pc, #72]	; (8009260 <MX_I2C1_Init+0x74>)
 8009216:	2200      	movs	r2, #0
 8009218:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800921a:	4b11      	ldr	r3, [pc, #68]	; (8009260 <MX_I2C1_Init+0x74>)
 800921c:	2200      	movs	r2, #0
 800921e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009220:	4b0f      	ldr	r3, [pc, #60]	; (8009260 <MX_I2C1_Init+0x74>)
 8009222:	2200      	movs	r2, #0
 8009224:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009226:	480e      	ldr	r0, [pc, #56]	; (8009260 <MX_I2C1_Init+0x74>)
 8009228:	f005 fd02 	bl	800ec30 <HAL_I2C_Init>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8009232:	f000 fa7b 	bl	800972c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009236:	2100      	movs	r1, #0
 8009238:	4809      	ldr	r0, [pc, #36]	; (8009260 <MX_I2C1_Init+0x74>)
 800923a:	f008 f8cb 	bl	80113d4 <HAL_I2CEx_ConfigAnalogFilter>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8009244:	f000 fa72 	bl	800972c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8009248:	2100      	movs	r1, #0
 800924a:	4805      	ldr	r0, [pc, #20]	; (8009260 <MX_I2C1_Init+0x74>)
 800924c:	f008 f90d 	bl	801146a <HAL_I2CEx_ConfigDigitalFilter>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d001      	beq.n	800925a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8009256:	f000 fa69 	bl	800972c <Error_Handler>
  }

}
 800925a:	bf00      	nop
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	24009150 	.word	0x24009150
 8009264:	40005400 	.word	0x40005400
 8009268:	00b03fdb 	.word	0x00b03fdb

0800926c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8009270:	4b1b      	ldr	r3, [pc, #108]	; (80092e0 <MX_I2C2_Init+0x74>)
 8009272:	4a1c      	ldr	r2, [pc, #112]	; (80092e4 <MX_I2C2_Init+0x78>)
 8009274:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8009276:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <MX_I2C2_Init+0x74>)
 8009278:	4a1b      	ldr	r2, [pc, #108]	; (80092e8 <MX_I2C2_Init+0x7c>)
 800927a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800927c:	4b18      	ldr	r3, [pc, #96]	; (80092e0 <MX_I2C2_Init+0x74>)
 800927e:	2200      	movs	r2, #0
 8009280:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009282:	4b17      	ldr	r3, [pc, #92]	; (80092e0 <MX_I2C2_Init+0x74>)
 8009284:	2201      	movs	r2, #1
 8009286:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009288:	4b15      	ldr	r3, [pc, #84]	; (80092e0 <MX_I2C2_Init+0x74>)
 800928a:	2200      	movs	r2, #0
 800928c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800928e:	4b14      	ldr	r3, [pc, #80]	; (80092e0 <MX_I2C2_Init+0x74>)
 8009290:	2200      	movs	r2, #0
 8009292:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009294:	4b12      	ldr	r3, [pc, #72]	; (80092e0 <MX_I2C2_Init+0x74>)
 8009296:	2200      	movs	r2, #0
 8009298:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800929a:	4b11      	ldr	r3, [pc, #68]	; (80092e0 <MX_I2C2_Init+0x74>)
 800929c:	2200      	movs	r2, #0
 800929e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80092a0:	4b0f      	ldr	r3, [pc, #60]	; (80092e0 <MX_I2C2_Init+0x74>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80092a6:	480e      	ldr	r0, [pc, #56]	; (80092e0 <MX_I2C2_Init+0x74>)
 80092a8:	f005 fcc2 	bl	800ec30 <HAL_I2C_Init>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80092b2:	f000 fa3b 	bl	800972c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80092b6:	2100      	movs	r1, #0
 80092b8:	4809      	ldr	r0, [pc, #36]	; (80092e0 <MX_I2C2_Init+0x74>)
 80092ba:	f008 f88b 	bl	80113d4 <HAL_I2CEx_ConfigAnalogFilter>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80092c4:	f000 fa32 	bl	800972c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80092c8:	2100      	movs	r1, #0
 80092ca:	4805      	ldr	r0, [pc, #20]	; (80092e0 <MX_I2C2_Init+0x74>)
 80092cc:	f008 f8cd 	bl	801146a <HAL_I2CEx_ConfigDigitalFilter>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80092d6:	f000 fa29 	bl	800972c <Error_Handler>
  }

}
 80092da:	bf00      	nop
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	2400919c 	.word	0x2400919c
 80092e4:	40005800 	.word	0x40005800
 80092e8:	00b03fdb 	.word	0x00b03fdb

080092ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08c      	sub	sp, #48	; 0x30
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092f4:	f107 031c 	add.w	r3, r7, #28
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	605a      	str	r2, [r3, #4]
 80092fe:	609a      	str	r2, [r3, #8]
 8009300:	60da      	str	r2, [r3, #12]
 8009302:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a5b      	ldr	r2, [pc, #364]	; (8009478 <HAL_I2C_MspInit+0x18c>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d16c      	bne.n	80093e8 <HAL_I2C_MspInit+0xfc>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800930e:	4b5b      	ldr	r3, [pc, #364]	; (800947c <HAL_I2C_MspInit+0x190>)
 8009310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009314:	4a59      	ldr	r2, [pc, #356]	; (800947c <HAL_I2C_MspInit+0x190>)
 8009316:	f043 0302 	orr.w	r3, r3, #2
 800931a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800931e:	4b57      	ldr	r3, [pc, #348]	; (800947c <HAL_I2C_MspInit+0x190>)
 8009320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	61bb      	str	r3, [r7, #24]
 800932a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU9250_SCL_Pin|MPU9250_SDA_Pin;
 800932c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8009330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009332:	2312      	movs	r3, #18
 8009334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009336:	2300      	movs	r3, #0
 8009338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800933a:	2300      	movs	r3, #0
 800933c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800933e:	2304      	movs	r3, #4
 8009340:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009342:	f107 031c 	add.w	r3, r7, #28
 8009346:	4619      	mov	r1, r3
 8009348:	484d      	ldr	r0, [pc, #308]	; (8009480 <HAL_I2C_MspInit+0x194>)
 800934a:	f005 fa8f 	bl	800e86c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800934e:	4b4b      	ldr	r3, [pc, #300]	; (800947c <HAL_I2C_MspInit+0x190>)
 8009350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009354:	4a49      	ldr	r2, [pc, #292]	; (800947c <HAL_I2C_MspInit+0x190>)
 8009356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800935a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800935e:	4b47      	ldr	r3, [pc, #284]	; (800947c <HAL_I2C_MspInit+0x190>)
 8009360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009368:	617b      	str	r3, [r7, #20]
 800936a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 800936c:	4b45      	ldr	r3, [pc, #276]	; (8009484 <HAL_I2C_MspInit+0x198>)
 800936e:	4a46      	ldr	r2, [pc, #280]	; (8009488 <HAL_I2C_MspInit+0x19c>)
 8009370:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8009372:	4b44      	ldr	r3, [pc, #272]	; (8009484 <HAL_I2C_MspInit+0x198>)
 8009374:	2221      	movs	r2, #33	; 0x21
 8009376:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009378:	4b42      	ldr	r3, [pc, #264]	; (8009484 <HAL_I2C_MspInit+0x198>)
 800937a:	2200      	movs	r2, #0
 800937c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800937e:	4b41      	ldr	r3, [pc, #260]	; (8009484 <HAL_I2C_MspInit+0x198>)
 8009380:	2200      	movs	r2, #0
 8009382:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009384:	4b3f      	ldr	r3, [pc, #252]	; (8009484 <HAL_I2C_MspInit+0x198>)
 8009386:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800938a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800938c:	4b3d      	ldr	r3, [pc, #244]	; (8009484 <HAL_I2C_MspInit+0x198>)
 800938e:	2200      	movs	r2, #0
 8009390:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009392:	4b3c      	ldr	r3, [pc, #240]	; (8009484 <HAL_I2C_MspInit+0x198>)
 8009394:	2200      	movs	r2, #0
 8009396:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8009398:	4b3a      	ldr	r3, [pc, #232]	; (8009484 <HAL_I2C_MspInit+0x198>)
 800939a:	2200      	movs	r2, #0
 800939c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800939e:	4b39      	ldr	r3, [pc, #228]	; (8009484 <HAL_I2C_MspInit+0x198>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80093a4:	4b37      	ldr	r3, [pc, #220]	; (8009484 <HAL_I2C_MspInit+0x198>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80093aa:	4836      	ldr	r0, [pc, #216]	; (8009484 <HAL_I2C_MspInit+0x198>)
 80093ac:	f002 ff28 	bl	800c200 <HAL_DMA_Init>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80093b6:	f000 f9b9 	bl	800972c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a31      	ldr	r2, [pc, #196]	; (8009484 <HAL_I2C_MspInit+0x198>)
 80093be:	63da      	str	r2, [r3, #60]	; 0x3c
 80093c0:	4a30      	ldr	r2, [pc, #192]	; (8009484 <HAL_I2C_MspInit+0x198>)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80093c6:	2200      	movs	r2, #0
 80093c8:	2105      	movs	r1, #5
 80093ca:	201f      	movs	r0, #31
 80093cc:	f002 fef0 	bl	800c1b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80093d0:	201f      	movs	r0, #31
 80093d2:	f002 ff07 	bl	800c1e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80093d6:	2200      	movs	r2, #0
 80093d8:	2105      	movs	r1, #5
 80093da:	2020      	movs	r0, #32
 80093dc:	f002 fee8 	bl	800c1b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80093e0:	2020      	movs	r0, #32
 80093e2:	f002 feff 	bl	800c1e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80093e6:	e042      	b.n	800946e <HAL_I2C_MspInit+0x182>
  else if(i2cHandle->Instance==I2C2)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a27      	ldr	r2, [pc, #156]	; (800948c <HAL_I2C_MspInit+0x1a0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d13d      	bne.n	800946e <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80093f2:	4b22      	ldr	r3, [pc, #136]	; (800947c <HAL_I2C_MspInit+0x190>)
 80093f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093f8:	4a20      	ldr	r2, [pc, #128]	; (800947c <HAL_I2C_MspInit+0x190>)
 80093fa:	f043 0320 	orr.w	r3, r3, #32
 80093fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009402:	4b1e      	ldr	r3, [pc, #120]	; (800947c <HAL_I2C_MspInit+0x190>)
 8009404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009408:	f003 0320 	and.w	r3, r3, #32
 800940c:	613b      	str	r3, [r7, #16]
 800940e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009410:	2303      	movs	r3, #3
 8009412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009414:	2312      	movs	r3, #18
 8009416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009418:	2300      	movs	r3, #0
 800941a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800941c:	2300      	movs	r3, #0
 800941e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009420:	2304      	movs	r3, #4
 8009422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009424:	f107 031c 	add.w	r3, r7, #28
 8009428:	4619      	mov	r1, r3
 800942a:	4819      	ldr	r0, [pc, #100]	; (8009490 <HAL_I2C_MspInit+0x1a4>)
 800942c:	f005 fa1e 	bl	800e86c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009430:	4b12      	ldr	r3, [pc, #72]	; (800947c <HAL_I2C_MspInit+0x190>)
 8009432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009436:	4a11      	ldr	r2, [pc, #68]	; (800947c <HAL_I2C_MspInit+0x190>)
 8009438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800943c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009440:	4b0e      	ldr	r3, [pc, #56]	; (800947c <HAL_I2C_MspInit+0x190>)
 8009442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800944a:	60fb      	str	r3, [r7, #12]
 800944c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 6, 0);
 800944e:	2200      	movs	r2, #0
 8009450:	2106      	movs	r1, #6
 8009452:	2021      	movs	r0, #33	; 0x21
 8009454:	f002 feac 	bl	800c1b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8009458:	2021      	movs	r0, #33	; 0x21
 800945a:	f002 fec3 	bl	800c1e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 6, 0);
 800945e:	2200      	movs	r2, #0
 8009460:	2106      	movs	r1, #6
 8009462:	2022      	movs	r0, #34	; 0x22
 8009464:	f002 fea4 	bl	800c1b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8009468:	2022      	movs	r0, #34	; 0x22
 800946a:	f002 febb 	bl	800c1e4 <HAL_NVIC_EnableIRQ>
}
 800946e:	bf00      	nop
 8009470:	3730      	adds	r7, #48	; 0x30
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	40005400 	.word	0x40005400
 800947c:	58024400 	.word	0x58024400
 8009480:	58020400 	.word	0x58020400
 8009484:	240091e8 	.word	0x240091e8
 8009488:	40020040 	.word	0x40020040
 800948c:	40005800 	.word	0x40005800
 8009490:	58021400 	.word	0x58021400

08009494 <msOverFlow>:

static __inline void msOverFlow(){
 8009494:	b480      	push	{r7}
 8009496:	af00      	add	r7, sp, #0
	_timerOverflowCnt++;
 8009498:	4b04      	ldr	r3, [pc, #16]	; (80094ac <msOverFlow+0x18>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3301      	adds	r3, #1
 800949e:	4a03      	ldr	r2, [pc, #12]	; (80094ac <msOverFlow+0x18>)
 80094a0:	6013      	str	r3, [r2, #0]
}
 80094a2:	bf00      	nop
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	24000a34 	.word	0x24000a34

080094b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80094b4:	f001 fdec 	bl	800b090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80094b8:	f000 f832 	bl	8009520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80094bc:	f7ff fd72 	bl	8008fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 80094c0:	f7ff fc9a 	bl	8008df8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80094c4:	f001 fb60 	bl	800ab88 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80094c8:	f001 fd2e 	bl	800af28 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80094cc:	f7ff fe8e 	bl	80091ec <MX_I2C1_Init>
  MX_I2C2_Init();
 80094d0:	f7ff fecc 	bl	800926c <MX_I2C2_Init>
  MX_SDMMC1_SD_Init();
 80094d4:	f000 f932 	bl	800973c <MX_SDMMC1_SD_Init>
  MX_TIM1_Init();
 80094d8:	f000 fc26 	bl	8009d28 <MX_TIM1_Init>
  MX_TIM3_Init();
 80094dc:	f000 fd42 	bl	8009f64 <MX_TIM3_Init>
  MX_TIM4_Init();
 80094e0:	f000 fdce 	bl	800a080 <MX_TIM4_Init>
  MX_TIM12_Init();
 80094e4:	f000 ff6a 	bl	800a3bc <MX_TIM12_Init>
  MX_UART7_Init();
 80094e8:	f001 fa64 	bl	800a9b4 <MX_UART7_Init>
  MX_UART8_Init();
 80094ec:	f001 fab2 	bl	800aa54 <MX_UART8_Init>
  MX_USART2_UART_Init();
 80094f0:	f001 fafc 	bl	800aaec <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80094f4:	f010 ff10 	bl	801a318 <MX_FATFS_Init>
  MX_ADC3_Init();
 80094f8:	f7ff fbdc 	bl	8008cb4 <MX_ADC3_Init>
  MX_TIM8_Init();
 80094fc:	f000 fece 	bl	800a29c <MX_TIM8_Init>
  MX_TIM15_Init();
 8009500:	f000 ffac 	bl	800a45c <MX_TIM15_Init>
  MX_TIM5_Init();
 8009504:	f000 fe54 	bl	800a1b0 <MX_TIM5_Init>
  MX_TIM2_Init();
 8009508:	f000 fcde 	bl	8009ec8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  cppMain();
 800950c:	f7ff f990 	bl	8008830 <cppMain>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8009510:	f013 fc1a 	bl	801cd48 <osKernelInitialize>
  MX_FREERTOS_Init();
 8009514:	f7ff fca0 	bl	8008e58 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8009518:	f013 fc6c 	bl	801cdf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800951c:	e7fe      	b.n	800951c <main+0x6c>
	...

08009520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b0cc      	sub	sp, #304	; 0x130
 8009524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009526:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800952a:	224c      	movs	r2, #76	; 0x4c
 800952c:	2100      	movs	r1, #0
 800952e:	4618      	mov	r0, r3
 8009530:	f018 fe2f 	bl	8022192 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009534:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009538:	2220      	movs	r2, #32
 800953a:	2100      	movs	r1, #0
 800953c:	4618      	mov	r0, r3
 800953e:	f018 fe28 	bl	8022192 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009542:	f107 0308 	add.w	r3, r7, #8
 8009546:	4618      	mov	r0, r3
 8009548:	23bc      	movs	r3, #188	; 0xbc
 800954a:	461a      	mov	r2, r3
 800954c:	2100      	movs	r1, #0
 800954e:	f018 fe20 	bl	8022192 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8009552:	2002      	movs	r0, #2
 8009554:	f008 f91e 	bl	8011794 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8009558:	1d3b      	adds	r3, r7, #4
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	4b65      	ldr	r3, [pc, #404]	; (80096f4 <SystemClock_Config+0x1d4>)
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	4a64      	ldr	r2, [pc, #400]	; (80096f4 <SystemClock_Config+0x1d4>)
 8009564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009568:	6193      	str	r3, [r2, #24]
 800956a:	4b62      	ldr	r3, [pc, #392]	; (80096f4 <SystemClock_Config+0x1d4>)
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8009572:	1d3b      	adds	r3, r7, #4
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	4b60      	ldr	r3, [pc, #384]	; (80096f8 <SystemClock_Config+0x1d8>)
 8009578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957a:	4a5f      	ldr	r2, [pc, #380]	; (80096f8 <SystemClock_Config+0x1d8>)
 800957c:	f043 0301 	orr.w	r3, r3, #1
 8009580:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009582:	4b5d      	ldr	r3, [pc, #372]	; (80096f8 <SystemClock_Config+0x1d8>)
 8009584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009586:	f003 0201 	and.w	r2, r3, #1
 800958a:	1d3b      	adds	r3, r7, #4
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	1d3b      	adds	r3, r7, #4
 8009590:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8009592:	bf00      	nop
 8009594:	4b57      	ldr	r3, [pc, #348]	; (80096f4 <SystemClock_Config+0x1d4>)
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800959c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095a0:	d1f8      	bne.n	8009594 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80095a2:	4b56      	ldr	r3, [pc, #344]	; (80096fc <SystemClock_Config+0x1dc>)
 80095a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a6:	f023 0303 	bic.w	r3, r3, #3
 80095aa:	4a54      	ldr	r2, [pc, #336]	; (80096fc <SystemClock_Config+0x1dc>)
 80095ac:	f043 0302 	orr.w	r3, r3, #2
 80095b0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80095b2:	2301      	movs	r3, #1
 80095b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80095b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80095bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80095c0:	2302      	movs	r3, #2
 80095c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80095c6:	2302      	movs	r3, #2
 80095c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80095cc:	2301      	movs	r3, #1
 80095ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 80095d2:	2378      	movs	r3, #120	; 0x78
 80095d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80095d8:	2302      	movs	r3, #2
 80095da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80095de:	2314      	movs	r3, #20
 80095e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80095e4:	2302      	movs	r3, #2
 80095e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80095ea:	230c      	movs	r3, #12
 80095ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80095f0:	2300      	movs	r3, #0
 80095f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80095fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009600:	4618      	mov	r0, r3
 8009602:	f008 f911 	bl	8011828 <HAL_RCC_OscConfig>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800960c:	f000 f88e 	bl	800972c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009610:	233f      	movs	r3, #63	; 0x3f
 8009612:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009616:	2303      	movs	r3, #3
 8009618:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800961c:	2300      	movs	r3, #0
 800961e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8009622:	2308      	movs	r3, #8
 8009624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8009628:	2340      	movs	r3, #64	; 0x40
 800962a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800962e:	2340      	movs	r3, #64	; 0x40
 8009630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8009634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009638:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800963c:	2340      	movs	r3, #64	; 0x40
 800963e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009642:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009646:	2104      	movs	r1, #4
 8009648:	4618      	mov	r0, r3
 800964a:	f008 fcfd 	bl	8012048 <HAL_RCC_ClockConfig>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8009654:	f000 f86a 	bl	800972c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8009658:	f107 0308 	add.w	r3, r7, #8
 800965c:	4a28      	ldr	r2, [pc, #160]	; (8009700 <SystemClock_Config+0x1e0>)
 800965e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8009660:	f107 0308 	add.w	r3, r7, #8
 8009664:	2201      	movs	r2, #1
 8009666:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8009668:	f107 0308 	add.w	r3, r7, #8
 800966c:	2213      	movs	r2, #19
 800966e:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8009670:	f107 0308 	add.w	r3, r7, #8
 8009674:	2202      	movs	r2, #2
 8009676:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8009678:	f107 0308 	add.w	r3, r7, #8
 800967c:	2202      	movs	r2, #2
 800967e:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8009680:	f107 0308 	add.w	r3, r7, #8
 8009684:	2202      	movs	r2, #2
 8009686:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8009688:	f107 0308 	add.w	r3, r7, #8
 800968c:	22c0      	movs	r2, #192	; 0xc0
 800968e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8009690:	f107 0308 	add.w	r3, r7, #8
 8009694:	2220      	movs	r2, #32
 8009696:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8009698:	f107 0308 	add.w	r3, r7, #8
 800969c:	2200      	movs	r2, #0
 800969e:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80096a0:	f107 0308 	add.w	r3, r7, #8
 80096a4:	2200      	movs	r2, #0
 80096a6:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80096a8:	f107 0308 	add.w	r3, r7, #8
 80096ac:	2200      	movs	r2, #0
 80096ae:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80096b0:	f107 0308 	add.w	r3, r7, #8
 80096b4:	2200      	movs	r2, #0
 80096b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80096ba:	f107 0308 	add.w	r3, r7, #8
 80096be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80096c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80096c6:	f107 0308 	add.w	r3, r7, #8
 80096ca:	2200      	movs	r2, #0
 80096cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80096d0:	f107 0308 	add.w	r3, r7, #8
 80096d4:	4618      	mov	r0, r3
 80096d6:	f009 f87d 	bl	80127d4 <HAL_RCCEx_PeriphCLKConfig>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <SystemClock_Config+0x1c4>
  {
    Error_Handler();
 80096e0:	f000 f824 	bl	800972c <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80096e4:	f008 f890 	bl	8011808 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80096e8:	bf00      	nop
 80096ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	58024800 	.word	0x58024800
 80096f8:	58000400 	.word	0x58000400
 80096fc:	58024400 	.word	0x58024400
 8009700:	000d000a 	.word	0x000d000a

08009704 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	msOverFlow();
 800970c:	f7ff fec2 	bl	8009494 <msOverFlow>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a04      	ldr	r2, [pc, #16]	; (8009728 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d101      	bne.n	800971e <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 800971a:	f001 fcf5 	bl	800b108 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800971e:	bf00      	nop
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	40001000 	.word	0x40001000

0800972c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800972c:	b480      	push	{r7}
 800972e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009730:	bf00      	nop
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
	...

0800973c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 800973c:	b480      	push	{r7}
 800973e:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8009740:	4b0d      	ldr	r3, [pc, #52]	; (8009778 <MX_SDMMC1_SD_Init+0x3c>)
 8009742:	4a0e      	ldr	r2, [pc, #56]	; (800977c <MX_SDMMC1_SD_Init+0x40>)
 8009744:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8009746:	4b0c      	ldr	r3, [pc, #48]	; (8009778 <MX_SDMMC1_SD_Init+0x3c>)
 8009748:	2200      	movs	r2, #0
 800974a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800974c:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <MX_SDMMC1_SD_Init+0x3c>)
 800974e:	2200      	movs	r2, #0
 8009750:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8009752:	4b09      	ldr	r3, [pc, #36]	; (8009778 <MX_SDMMC1_SD_Init+0x3c>)
 8009754:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009758:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800975a:	4b07      	ldr	r3, [pc, #28]	; (8009778 <MX_SDMMC1_SD_Init+0x3c>)
 800975c:	2200      	movs	r2, #0
 800975e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8009760:	4b05      	ldr	r3, [pc, #20]	; (8009778 <MX_SDMMC1_SD_Init+0x3c>)
 8009762:	2200      	movs	r2, #0
 8009764:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8009766:	4b04      	ldr	r3, [pc, #16]	; (8009778 <MX_SDMMC1_SD_Init+0x3c>)
 8009768:	2201      	movs	r2, #1
 800976a:	619a      	str	r2, [r3, #24]

}
 800976c:	bf00      	nop
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	24009260 	.word	0x24009260
 800977c:	52007000 	.word	0x52007000

08009780 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b08a      	sub	sp, #40	; 0x28
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009788:	f107 0314 	add.w	r3, r7, #20
 800978c:	2200      	movs	r2, #0
 800978e:	601a      	str	r2, [r3, #0]
 8009790:	605a      	str	r2, [r3, #4]
 8009792:	609a      	str	r2, [r3, #8]
 8009794:	60da      	str	r2, [r3, #12]
 8009796:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a36      	ldr	r2, [pc, #216]	; (8009878 <HAL_SD_MspInit+0xf8>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d166      	bne.n	8009870 <HAL_SD_MspInit+0xf0>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80097a2:	4b36      	ldr	r3, [pc, #216]	; (800987c <HAL_SD_MspInit+0xfc>)
 80097a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80097a8:	4a34      	ldr	r2, [pc, #208]	; (800987c <HAL_SD_MspInit+0xfc>)
 80097aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ae:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80097b2:	4b32      	ldr	r3, [pc, #200]	; (800987c <HAL_SD_MspInit+0xfc>)
 80097b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80097b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097bc:	613b      	str	r3, [r7, #16]
 80097be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097c0:	4b2e      	ldr	r3, [pc, #184]	; (800987c <HAL_SD_MspInit+0xfc>)
 80097c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097c6:	4a2d      	ldr	r2, [pc, #180]	; (800987c <HAL_SD_MspInit+0xfc>)
 80097c8:	f043 0304 	orr.w	r3, r3, #4
 80097cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80097d0:	4b2a      	ldr	r3, [pc, #168]	; (800987c <HAL_SD_MspInit+0xfc>)
 80097d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097d6:	f003 0304 	and.w	r3, r3, #4
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80097de:	4b27      	ldr	r3, [pc, #156]	; (800987c <HAL_SD_MspInit+0xfc>)
 80097e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097e4:	4a25      	ldr	r2, [pc, #148]	; (800987c <HAL_SD_MspInit+0xfc>)
 80097e6:	f043 0308 	orr.w	r3, r3, #8
 80097ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80097ee:	4b23      	ldr	r3, [pc, #140]	; (800987c <HAL_SD_MspInit+0xfc>)
 80097f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80097f4:	f003 0308 	and.w	r3, r3, #8
 80097f8:	60bb      	str	r3, [r7, #8]
 80097fa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80097fc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8009800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009802:	2302      	movs	r3, #2
 8009804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009806:	2301      	movs	r3, #1
 8009808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800980a:	2303      	movs	r3, #3
 800980c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800980e:	230c      	movs	r3, #12
 8009810:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009812:	f107 0314 	add.w	r3, r7, #20
 8009816:	4619      	mov	r1, r3
 8009818:	4819      	ldr	r0, [pc, #100]	; (8009880 <HAL_SD_MspInit+0x100>)
 800981a:	f005 f827 	bl	800e86c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800981e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009824:	2302      	movs	r3, #2
 8009826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009828:	2300      	movs	r3, #0
 800982a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800982c:	2303      	movs	r3, #3
 800982e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8009830:	230c      	movs	r3, #12
 8009832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009834:	f107 0314 	add.w	r3, r7, #20
 8009838:	4619      	mov	r1, r3
 800983a:	4811      	ldr	r0, [pc, #68]	; (8009880 <HAL_SD_MspInit+0x100>)
 800983c:	f005 f816 	bl	800e86c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009840:	2304      	movs	r3, #4
 8009842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009844:	2302      	movs	r3, #2
 8009846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009848:	2301      	movs	r3, #1
 800984a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800984c:	2303      	movs	r3, #3
 800984e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8009850:	230c      	movs	r3, #12
 8009852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009854:	f107 0314 	add.w	r3, r7, #20
 8009858:	4619      	mov	r1, r3
 800985a:	480a      	ldr	r0, [pc, #40]	; (8009884 <HAL_SD_MspInit+0x104>)
 800985c:	f005 f806 	bl	800e86c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8009860:	2200      	movs	r2, #0
 8009862:	2100      	movs	r1, #0
 8009864:	2031      	movs	r0, #49	; 0x31
 8009866:	f002 fca3 	bl	800c1b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800986a:	2031      	movs	r0, #49	; 0x31
 800986c:	f002 fcba 	bl	800c1e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8009870:	bf00      	nop
 8009872:	3728      	adds	r7, #40	; 0x28
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	52007000 	.word	0x52007000
 800987c:	58024400 	.word	0x58024400
 8009880:	58020800 	.word	0x58020800
 8009884:	58020c00 	.word	0x58020c00

08009888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800988e:	4b0a      	ldr	r3, [pc, #40]	; (80098b8 <HAL_MspInit+0x30>)
 8009890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009894:	4a08      	ldr	r2, [pc, #32]	; (80098b8 <HAL_MspInit+0x30>)
 8009896:	f043 0302 	orr.w	r3, r3, #2
 800989a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800989e:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <HAL_MspInit+0x30>)
 80098a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	607b      	str	r3, [r7, #4]
 80098aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	58024400 	.word	0x58024400

080098bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08e      	sub	sp, #56	; 0x38
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80098cc:	2200      	movs	r2, #0
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	2036      	movs	r0, #54	; 0x36
 80098d2:	f002 fc6d 	bl	800c1b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80098d6:	2036      	movs	r0, #54	; 0x36
 80098d8:	f002 fc84 	bl	800c1e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80098dc:	4b21      	ldr	r3, [pc, #132]	; (8009964 <HAL_InitTick+0xa8>)
 80098de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098e2:	4a20      	ldr	r2, [pc, #128]	; (8009964 <HAL_InitTick+0xa8>)
 80098e4:	f043 0310 	orr.w	r3, r3, #16
 80098e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80098ec:	4b1d      	ldr	r3, [pc, #116]	; (8009964 <HAL_InitTick+0xa8>)
 80098ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098f2:	f003 0310 	and.w	r3, r3, #16
 80098f6:	60bb      	str	r3, [r7, #8]
 80098f8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80098fa:	f107 020c 	add.w	r2, r7, #12
 80098fe:	f107 0310 	add.w	r3, r7, #16
 8009902:	4611      	mov	r1, r2
 8009904:	4618      	mov	r0, r3
 8009906:	f008 ff23 	bl	8012750 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800990a:	f008 fef5 	bl	80126f8 <HAL_RCC_GetPCLK1Freq>
 800990e:	4603      	mov	r3, r0
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009916:	4a14      	ldr	r2, [pc, #80]	; (8009968 <HAL_InitTick+0xac>)
 8009918:	fba2 2303 	umull	r2, r3, r2, r3
 800991c:	0c9b      	lsrs	r3, r3, #18
 800991e:	3b01      	subs	r3, #1
 8009920:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8009922:	4b12      	ldr	r3, [pc, #72]	; (800996c <HAL_InitTick+0xb0>)
 8009924:	4a12      	ldr	r2, [pc, #72]	; (8009970 <HAL_InitTick+0xb4>)
 8009926:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8009928:	4b10      	ldr	r3, [pc, #64]	; (800996c <HAL_InitTick+0xb0>)
 800992a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800992e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8009930:	4a0e      	ldr	r2, [pc, #56]	; (800996c <HAL_InitTick+0xb0>)
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8009936:	4b0d      	ldr	r3, [pc, #52]	; (800996c <HAL_InitTick+0xb0>)
 8009938:	2200      	movs	r2, #0
 800993a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800993c:	4b0b      	ldr	r3, [pc, #44]	; (800996c <HAL_InitTick+0xb0>)
 800993e:	2200      	movs	r2, #0
 8009940:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8009942:	480a      	ldr	r0, [pc, #40]	; (800996c <HAL_InitTick+0xb0>)
 8009944:	f00c fa76 	bl	8015e34 <HAL_TIM_Base_Init>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d104      	bne.n	8009958 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800994e:	4807      	ldr	r0, [pc, #28]	; (800996c <HAL_InitTick+0xb0>)
 8009950:	f00c fac8 	bl	8015ee4 <HAL_TIM_Base_Start_IT>
 8009954:	4603      	mov	r3, r0
 8009956:	e000      	b.n	800995a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
}
 800995a:	4618      	mov	r0, r3
 800995c:	3738      	adds	r7, #56	; 0x38
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	58024400 	.word	0x58024400
 8009968:	431bde83 	.word	0x431bde83
 800996c:	240092e0 	.word	0x240092e0
 8009970:	40001000 	.word	0x40001000

08009974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009974:	b480      	push	{r7}
 8009976:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009978:	bf00      	nop
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009982:	b480      	push	{r7}
 8009984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009986:	e7fe      	b.n	8009986 <HardFault_Handler+0x4>

08009988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009988:	b480      	push	{r7}
 800998a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800998c:	e7fe      	b.n	800998c <MemManage_Handler+0x4>

0800998e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800998e:	b480      	push	{r7}
 8009990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009992:	e7fe      	b.n	8009992 <BusFault_Handler+0x4>

08009994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009994:	b480      	push	{r7}
 8009996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009998:	e7fe      	b.n	8009998 <UsageFault_Handler+0x4>

0800999a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800999a:	b480      	push	{r7}
 800999c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800999e:	bf00      	nop
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80099ac:	4802      	ldr	r0, [pc, #8]	; (80099b8 <DMA1_Stream0_IRQHandler+0x10>)
 80099ae:	f003 fc31 	bl	800d214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80099b2:	bf00      	nop
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	2400971c 	.word	0x2400971c

080099bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80099c0:	4802      	ldr	r0, [pc, #8]	; (80099cc <DMA1_Stream1_IRQHandler+0x10>)
 80099c2:	f003 fc27 	bl	800d214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80099c6:	bf00      	nop
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	240096a4 	.word	0x240096a4

080099d0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80099d4:	4802      	ldr	r0, [pc, #8]	; (80099e0 <DMA1_Stream2_IRQHandler+0x10>)
 80099d6:	f003 fc1d 	bl	800d214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80099da:	bf00      	nop
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	240091e8 	.word	0x240091e8

080099e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80099e8:	4802      	ldr	r0, [pc, #8]	; (80099f4 <I2C1_EV_IRQHandler+0x10>)
 80099ea:	f005 fd6d 	bl	800f4c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80099ee:	bf00      	nop
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	24009150 	.word	0x24009150

080099f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80099fc:	4802      	ldr	r0, [pc, #8]	; (8009a08 <I2C1_ER_IRQHandler+0x10>)
 80099fe:	f005 fd7d 	bl	800f4fc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8009a02:	bf00      	nop
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	24009150 	.word	0x24009150

08009a0c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8009a10:	4802      	ldr	r0, [pc, #8]	; (8009a1c <I2C2_EV_IRQHandler+0x10>)
 8009a12:	f005 fd59 	bl	800f4c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8009a16:	bf00      	nop
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	2400919c 	.word	0x2400919c

08009a20 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8009a24:	4802      	ldr	r0, [pc, #8]	; (8009a30 <I2C2_ER_IRQHandler+0x10>)
 8009a26:	f005 fd69 	bl	800f4fc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8009a2a:	bf00      	nop
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	2400919c 	.word	0x2400919c

08009a34 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8009a38:	4802      	ldr	r0, [pc, #8]	; (8009a44 <SDMMC1_IRQHandler+0x10>)
 8009a3a:	f00b f803 	bl	8014a44 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8009a3e:	bf00      	nop
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	24009260 	.word	0x24009260

08009a48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009a4c:	4802      	ldr	r0, [pc, #8]	; (8009a58 <TIM6_DAC_IRQHandler+0x10>)
 8009a4e:	f00c fd9f 	bl	8016590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009a52:	bf00      	nop
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	240092e0 	.word	0x240092e0

08009a5c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8009a60:	4802      	ldr	r0, [pc, #8]	; (8009a6c <UART7_IRQHandler+0x10>)
 8009a62:	f00e f8dd 	bl	8017c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8009a66:	bf00      	nop
 8009a68:	bd80      	pop	{r7, pc}
 8009a6a:	bf00      	nop
 8009a6c:	2400958c 	.word	0x2400958c

08009a70 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8009a74:	4802      	ldr	r0, [pc, #8]	; (8009a80 <UART8_IRQHandler+0x10>)
 8009a76:	f00e f8d3 	bl	8017c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8009a7a:	bf00      	nop
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	24009794 	.word	0x24009794

08009a84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009a84:	b480      	push	{r7}
 8009a86:	af00      	add	r7, sp, #0
	return 1;
 8009a88:	2301      	movs	r3, #1
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <_kill>:

int _kill(int pid, int sig)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009a9e:	f018 fb31 	bl	8022104 <__errno>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	2316      	movs	r3, #22
 8009aa6:	6013      	str	r3, [r2, #0]
	return -1;
 8009aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <_exit>:

void _exit (int status)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009abc:	f04f 31ff 	mov.w	r1, #4294967295
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff ffe7 	bl	8009a94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009ac6:	e7fe      	b.n	8009ac6 <_exit+0x12>

08009ac8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	617b      	str	r3, [r7, #20]
 8009ad8:	e00a      	b.n	8009af0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009ada:	f3af 8000 	nop.w
 8009ade:	4601      	mov	r1, r0
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	60ba      	str	r2, [r7, #8]
 8009ae6:	b2ca      	uxtb	r2, r1
 8009ae8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	3301      	adds	r3, #1
 8009aee:	617b      	str	r3, [r7, #20]
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	dbf0      	blt.n	8009ada <_read+0x12>
	}

return len;
 8009af8:	687b      	ldr	r3, [r7, #4]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3718      	adds	r7, #24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b086      	sub	sp, #24
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	60b9      	str	r1, [r7, #8]
 8009b0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009b0e:	2300      	movs	r3, #0
 8009b10:	617b      	str	r3, [r7, #20]
 8009b12:	e009      	b.n	8009b28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	60ba      	str	r2, [r7, #8]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	3301      	adds	r3, #1
 8009b26:	617b      	str	r3, [r7, #20]
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	dbf1      	blt.n	8009b14 <_write+0x12>
	}
	return len;
 8009b30:	687b      	ldr	r3, [r7, #4]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3718      	adds	r7, #24
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <_close>:

int _close(int file)
{
 8009b3a:	b480      	push	{r7}
 8009b3c:	b083      	sub	sp, #12
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
	return -1;
 8009b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009b62:	605a      	str	r2, [r3, #4]
	return 0;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <_isatty>:

int _isatty(int file)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
	return 1;
 8009b7a:	2301      	movs	r3, #1
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
	return 0;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
	...

08009ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009bac:	4a14      	ldr	r2, [pc, #80]	; (8009c00 <_sbrk+0x5c>)
 8009bae:	4b15      	ldr	r3, [pc, #84]	; (8009c04 <_sbrk+0x60>)
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009bb8:	4b13      	ldr	r3, [pc, #76]	; (8009c08 <_sbrk+0x64>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d102      	bne.n	8009bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009bc0:	4b11      	ldr	r3, [pc, #68]	; (8009c08 <_sbrk+0x64>)
 8009bc2:	4a12      	ldr	r2, [pc, #72]	; (8009c0c <_sbrk+0x68>)
 8009bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009bc6:	4b10      	ldr	r3, [pc, #64]	; (8009c08 <_sbrk+0x64>)
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4413      	add	r3, r2
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d207      	bcs.n	8009be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009bd4:	f018 fa96 	bl	8022104 <__errno>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	230c      	movs	r3, #12
 8009bdc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8009bde:	f04f 33ff 	mov.w	r3, #4294967295
 8009be2:	e009      	b.n	8009bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009be4:	4b08      	ldr	r3, [pc, #32]	; (8009c08 <_sbrk+0x64>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009bea:	4b07      	ldr	r3, [pc, #28]	; (8009c08 <_sbrk+0x64>)
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	4a05      	ldr	r2, [pc, #20]	; (8009c08 <_sbrk+0x64>)
 8009bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	24080000 	.word	0x24080000
 8009c04:	00000400 	.word	0x00000400
 8009c08:	24000a38 	.word	0x24000a38
 8009c0c:	2400a168 	.word	0x2400a168

08009c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009c14:	4b39      	ldr	r3, [pc, #228]	; (8009cfc <SystemInit+0xec>)
 8009c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c1a:	4a38      	ldr	r2, [pc, #224]	; (8009cfc <SystemInit+0xec>)
 8009c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009c24:	4b36      	ldr	r3, [pc, #216]	; (8009d00 <SystemInit+0xf0>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 030f 	and.w	r3, r3, #15
 8009c2c:	2b06      	cmp	r3, #6
 8009c2e:	d807      	bhi.n	8009c40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009c30:	4b33      	ldr	r3, [pc, #204]	; (8009d00 <SystemInit+0xf0>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f023 030f 	bic.w	r3, r3, #15
 8009c38:	4a31      	ldr	r2, [pc, #196]	; (8009d00 <SystemInit+0xf0>)
 8009c3a:	f043 0307 	orr.w	r3, r3, #7
 8009c3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009c40:	4b30      	ldr	r3, [pc, #192]	; (8009d04 <SystemInit+0xf4>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a2f      	ldr	r2, [pc, #188]	; (8009d04 <SystemInit+0xf4>)
 8009c46:	f043 0301 	orr.w	r3, r3, #1
 8009c4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009c4c:	4b2d      	ldr	r3, [pc, #180]	; (8009d04 <SystemInit+0xf4>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009c52:	4b2c      	ldr	r3, [pc, #176]	; (8009d04 <SystemInit+0xf4>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	492b      	ldr	r1, [pc, #172]	; (8009d04 <SystemInit+0xf4>)
 8009c58:	4b2b      	ldr	r3, [pc, #172]	; (8009d08 <SystemInit+0xf8>)
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009c5e:	4b28      	ldr	r3, [pc, #160]	; (8009d00 <SystemInit+0xf0>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f003 030f 	and.w	r3, r3, #15
 8009c66:	2b07      	cmp	r3, #7
 8009c68:	d907      	bls.n	8009c7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009c6a:	4b25      	ldr	r3, [pc, #148]	; (8009d00 <SystemInit+0xf0>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f023 030f 	bic.w	r3, r3, #15
 8009c72:	4a23      	ldr	r2, [pc, #140]	; (8009d00 <SystemInit+0xf0>)
 8009c74:	f043 0307 	orr.w	r3, r3, #7
 8009c78:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8009c7a:	4b22      	ldr	r3, [pc, #136]	; (8009d04 <SystemInit+0xf4>)
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8009c80:	4b20      	ldr	r3, [pc, #128]	; (8009d04 <SystemInit+0xf4>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8009c86:	4b1f      	ldr	r3, [pc, #124]	; (8009d04 <SystemInit+0xf4>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8009c8c:	4b1d      	ldr	r3, [pc, #116]	; (8009d04 <SystemInit+0xf4>)
 8009c8e:	4a1f      	ldr	r2, [pc, #124]	; (8009d0c <SystemInit+0xfc>)
 8009c90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8009c92:	4b1c      	ldr	r3, [pc, #112]	; (8009d04 <SystemInit+0xf4>)
 8009c94:	4a1e      	ldr	r2, [pc, #120]	; (8009d10 <SystemInit+0x100>)
 8009c96:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009c98:	4b1a      	ldr	r3, [pc, #104]	; (8009d04 <SystemInit+0xf4>)
 8009c9a:	4a1e      	ldr	r2, [pc, #120]	; (8009d14 <SystemInit+0x104>)
 8009c9c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009c9e:	4b19      	ldr	r3, [pc, #100]	; (8009d04 <SystemInit+0xf4>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8009ca4:	4b17      	ldr	r3, [pc, #92]	; (8009d04 <SystemInit+0xf4>)
 8009ca6:	4a1b      	ldr	r2, [pc, #108]	; (8009d14 <SystemInit+0x104>)
 8009ca8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009caa:	4b16      	ldr	r3, [pc, #88]	; (8009d04 <SystemInit+0xf4>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8009cb0:	4b14      	ldr	r3, [pc, #80]	; (8009d04 <SystemInit+0xf4>)
 8009cb2:	4a18      	ldr	r2, [pc, #96]	; (8009d14 <SystemInit+0x104>)
 8009cb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009cb6:	4b13      	ldr	r3, [pc, #76]	; (8009d04 <SystemInit+0xf4>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009cbc:	4b11      	ldr	r3, [pc, #68]	; (8009d04 <SystemInit+0xf4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a10      	ldr	r2, [pc, #64]	; (8009d04 <SystemInit+0xf4>)
 8009cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009cc8:	4b0e      	ldr	r3, [pc, #56]	; (8009d04 <SystemInit+0xf4>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009cce:	4b12      	ldr	r3, [pc, #72]	; (8009d18 <SystemInit+0x108>)
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <SystemInit+0x10c>)
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cda:	d202      	bcs.n	8009ce2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009cdc:	4b10      	ldr	r3, [pc, #64]	; (8009d20 <SystemInit+0x110>)
 8009cde:	2201      	movs	r2, #1
 8009ce0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8009ce2:	4b10      	ldr	r3, [pc, #64]	; (8009d24 <SystemInit+0x114>)
 8009ce4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8009ce8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009cea:	4b04      	ldr	r3, [pc, #16]	; (8009cfc <SystemInit+0xec>)
 8009cec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009cf0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8009cf2:	bf00      	nop
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	e000ed00 	.word	0xe000ed00
 8009d00:	52002000 	.word	0x52002000
 8009d04:	58024400 	.word	0x58024400
 8009d08:	eaf6ed7f 	.word	0xeaf6ed7f
 8009d0c:	02020200 	.word	0x02020200
 8009d10:	01ff0000 	.word	0x01ff0000
 8009d14:	01010280 	.word	0x01010280
 8009d18:	5c001000 	.word	0x5c001000
 8009d1c:	ffff0000 	.word	0xffff0000
 8009d20:	51008108 	.word	0x51008108
 8009d24:	52004000 	.word	0x52004000

08009d28 <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b09a      	sub	sp, #104	; 0x68
 8009d2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009d2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
 8009d36:	605a      	str	r2, [r3, #4]
 8009d38:	609a      	str	r2, [r3, #8]
 8009d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d3c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009d40:	2200      	movs	r2, #0
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	605a      	str	r2, [r3, #4]
 8009d46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009d48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	605a      	str	r2, [r3, #4]
 8009d52:	609a      	str	r2, [r3, #8]
 8009d54:	60da      	str	r2, [r3, #12]
 8009d56:	611a      	str	r2, [r3, #16]
 8009d58:	615a      	str	r2, [r3, #20]
 8009d5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009d5c:	1d3b      	adds	r3, r7, #4
 8009d5e:	222c      	movs	r2, #44	; 0x2c
 8009d60:	2100      	movs	r1, #0
 8009d62:	4618      	mov	r0, r3
 8009d64:	f018 fa15 	bl	8022192 <memset>

  htim1.Instance = TIM1;
 8009d68:	4b55      	ldr	r3, [pc, #340]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009d6a:	4a56      	ldr	r2, [pc, #344]	; (8009ec4 <MX_TIM1_Init+0x19c>)
 8009d6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009d6e:	4b54      	ldr	r3, [pc, #336]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d74:	4b52      	ldr	r3, [pc, #328]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8009d7a:	4b51      	ldr	r3, [pc, #324]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d82:	4b4f      	ldr	r3, [pc, #316]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009d88:	4b4d      	ldr	r3, [pc, #308]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009d8e:	4b4c      	ldr	r3, [pc, #304]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009d90:	2280      	movs	r2, #128	; 0x80
 8009d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009d94:	484a      	ldr	r0, [pc, #296]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009d96:	f00c f84d 	bl	8015e34 <HAL_TIM_Base_Init>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d001      	beq.n	8009da4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8009da0:	f7ff fcc4 	bl	800972c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009da8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009daa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009dae:	4619      	mov	r1, r3
 8009db0:	4843      	ldr	r0, [pc, #268]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009db2:	f00c feb1 	bl	8016b18 <HAL_TIM_ConfigClockSource>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8009dbc:	f7ff fcb6 	bl	800972c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009dc0:	483f      	ldr	r0, [pc, #252]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009dc2:	f00c f8c5 	bl	8015f50 <HAL_TIM_PWM_Init>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8009dcc:	f7ff fcae 	bl	800972c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009ddc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009de0:	4619      	mov	r1, r3
 8009de2:	4837      	ldr	r0, [pc, #220]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009de4:	f00d fd20 	bl	8017828 <HAL_TIMEx_MasterConfigSynchronization>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8009dee:	f7ff fc9d 	bl	800972c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009df2:	2360      	movs	r3, #96	; 0x60
 8009df4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009e02:	2300      	movs	r3, #0
 8009e04:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009e06:	2300      	movs	r3, #0
 8009e08:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009e0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e12:	2200      	movs	r2, #0
 8009e14:	4619      	mov	r1, r3
 8009e16:	482a      	ldr	r0, [pc, #168]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009e18:	f00c fd6e 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8009e22:	f7ff fc83 	bl	800972c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009e26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e2a:	2204      	movs	r2, #4
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	4824      	ldr	r0, [pc, #144]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009e30:	f00c fd62 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8009e3a:	f7ff fc77 	bl	800972c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009e3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e42:	2208      	movs	r2, #8
 8009e44:	4619      	mov	r1, r3
 8009e46:	481e      	ldr	r0, [pc, #120]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009e48:	f00c fd56 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8009e52:	f7ff fc6b 	bl	800972c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009e56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e5a:	220c      	movs	r2, #12
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4818      	ldr	r0, [pc, #96]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009e60:	f00c fd4a 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8009e6a:	f7ff fc5f 	bl	800972c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009e72:	2300      	movs	r3, #0
 8009e74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009e76:	2300      	movs	r3, #0
 8009e78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009e90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e94:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009e9e:	1d3b      	adds	r3, r7, #4
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	4807      	ldr	r0, [pc, #28]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009ea4:	f00d fd48 	bl	8017938 <HAL_TIMEx_ConfigBreakDeadTime>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8009eae:	f7ff fc3d 	bl	800972c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8009eb2:	4803      	ldr	r0, [pc, #12]	; (8009ec0 <MX_TIM1_Init+0x198>)
 8009eb4:	f000 fc38 	bl	800a728 <HAL_TIM_MspPostInit>

}
 8009eb8:	bf00      	nop
 8009eba:	3768      	adds	r7, #104	; 0x68
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	240094a8 	.word	0x240094a8
 8009ec4:	40010000 	.word	0x40010000

08009ec8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b088      	sub	sp, #32
 8009ecc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009ece:	f107 0310 	add.w	r3, r7, #16
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	605a      	str	r2, [r3, #4]
 8009ed8:	609a      	str	r2, [r3, #8]
 8009eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009edc:	1d3b      	adds	r3, r7, #4
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	605a      	str	r2, [r3, #4]
 8009ee4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8009ee6:	4b1e      	ldr	r3, [pc, #120]	; (8009f60 <MX_TIM2_Init+0x98>)
 8009ee8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009eec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8009eee:	4b1c      	ldr	r3, [pc, #112]	; (8009f60 <MX_TIM2_Init+0x98>)
 8009ef0:	22ef      	movs	r2, #239	; 0xef
 8009ef2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ef4:	4b1a      	ldr	r3, [pc, #104]	; (8009f60 <MX_TIM2_Init+0x98>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8009efa:	4b19      	ldr	r3, [pc, #100]	; (8009f60 <MX_TIM2_Init+0x98>)
 8009efc:	f04f 32ff 	mov.w	r2, #4294967295
 8009f00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f02:	4b17      	ldr	r3, [pc, #92]	; (8009f60 <MX_TIM2_Init+0x98>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f08:	4b15      	ldr	r3, [pc, #84]	; (8009f60 <MX_TIM2_Init+0x98>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009f0e:	4814      	ldr	r0, [pc, #80]	; (8009f60 <MX_TIM2_Init+0x98>)
 8009f10:	f00b ff90 	bl	8015e34 <HAL_TIM_Base_Init>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8009f1a:	f7ff fc07 	bl	800972c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009f24:	f107 0310 	add.w	r3, r7, #16
 8009f28:	4619      	mov	r1, r3
 8009f2a:	480d      	ldr	r0, [pc, #52]	; (8009f60 <MX_TIM2_Init+0x98>)
 8009f2c:	f00c fdf4 	bl	8016b18 <HAL_TIM_ConfigClockSource>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8009f36:	f7ff fbf9 	bl	800972c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009f42:	1d3b      	adds	r3, r7, #4
 8009f44:	4619      	mov	r1, r3
 8009f46:	4806      	ldr	r0, [pc, #24]	; (8009f60 <MX_TIM2_Init+0x98>)
 8009f48:	f00d fc6e 	bl	8017828 <HAL_TIMEx_MasterConfigSynchronization>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8009f52:	f7ff fbeb 	bl	800972c <Error_Handler>
  }

}
 8009f56:	bf00      	nop
 8009f58:	3720      	adds	r7, #32
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	240094f4 	.word	0x240094f4

08009f64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b08e      	sub	sp, #56	; 0x38
 8009f68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f6e:	2200      	movs	r2, #0
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	605a      	str	r2, [r3, #4]
 8009f74:	609a      	str	r2, [r3, #8]
 8009f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f78:	f107 031c 	add.w	r3, r7, #28
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	601a      	str	r2, [r3, #0]
 8009f80:	605a      	str	r2, [r3, #4]
 8009f82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009f84:	463b      	mov	r3, r7
 8009f86:	2200      	movs	r2, #0
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	605a      	str	r2, [r3, #4]
 8009f8c:	609a      	str	r2, [r3, #8]
 8009f8e:	60da      	str	r2, [r3, #12]
 8009f90:	611a      	str	r2, [r3, #16]
 8009f92:	615a      	str	r2, [r3, #20]
 8009f94:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8009f96:	4b38      	ldr	r3, [pc, #224]	; (800a078 <MX_TIM3_Init+0x114>)
 8009f98:	4a38      	ldr	r2, [pc, #224]	; (800a07c <MX_TIM3_Init+0x118>)
 8009f9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12-1;
 8009f9c:	4b36      	ldr	r3, [pc, #216]	; (800a078 <MX_TIM3_Init+0x114>)
 8009f9e:	220b      	movs	r2, #11
 8009fa0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009fa2:	4b35      	ldr	r3, [pc, #212]	; (800a078 <MX_TIM3_Init+0x114>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 8009fa8:	4b33      	ldr	r3, [pc, #204]	; (800a078 <MX_TIM3_Init+0x114>)
 8009faa:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8009fae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009fb0:	4b31      	ldr	r3, [pc, #196]	; (800a078 <MX_TIM3_Init+0x114>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009fb6:	4b30      	ldr	r3, [pc, #192]	; (800a078 <MX_TIM3_Init+0x114>)
 8009fb8:	2280      	movs	r2, #128	; 0x80
 8009fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009fbc:	482e      	ldr	r0, [pc, #184]	; (800a078 <MX_TIM3_Init+0x114>)
 8009fbe:	f00b ff39 	bl	8015e34 <HAL_TIM_Base_Init>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8009fc8:	f7ff fbb0 	bl	800972c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	4827      	ldr	r0, [pc, #156]	; (800a078 <MX_TIM3_Init+0x114>)
 8009fda:	f00c fd9d 	bl	8016b18 <HAL_TIM_ConfigClockSource>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8009fe4:	f7ff fba2 	bl	800972c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009fe8:	4823      	ldr	r0, [pc, #140]	; (800a078 <MX_TIM3_Init+0x114>)
 8009fea:	f00b ffb1 	bl	8015f50 <HAL_TIM_PWM_Init>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8009ff4:	f7ff fb9a 	bl	800972c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a000:	f107 031c 	add.w	r3, r7, #28
 800a004:	4619      	mov	r1, r3
 800a006:	481c      	ldr	r0, [pc, #112]	; (800a078 <MX_TIM3_Init+0x114>)
 800a008:	f00d fc0e 	bl	8017828 <HAL_TIMEx_MasterConfigSynchronization>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800a012:	f7ff fb8b 	bl	800972c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a016:	2360      	movs	r3, #96	; 0x60
 800a018:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a01e:	2300      	movs	r3, #0
 800a020:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a022:	2300      	movs	r3, #0
 800a024:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a026:	463b      	mov	r3, r7
 800a028:	2200      	movs	r2, #0
 800a02a:	4619      	mov	r1, r3
 800a02c:	4812      	ldr	r0, [pc, #72]	; (800a078 <MX_TIM3_Init+0x114>)
 800a02e:	f00c fc63 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800a038:	f7ff fb78 	bl	800972c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a03c:	463b      	mov	r3, r7
 800a03e:	2204      	movs	r2, #4
 800a040:	4619      	mov	r1, r3
 800a042:	480d      	ldr	r0, [pc, #52]	; (800a078 <MX_TIM3_Init+0x114>)
 800a044:	f00c fc58 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800a04e:	f7ff fb6d 	bl	800972c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a052:	463b      	mov	r3, r7
 800a054:	220c      	movs	r2, #12
 800a056:	4619      	mov	r1, r3
 800a058:	4807      	ldr	r0, [pc, #28]	; (800a078 <MX_TIM3_Init+0x114>)
 800a05a:	f00c fc4d 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800a064:	f7ff fb62 	bl	800972c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800a068:	4803      	ldr	r0, [pc, #12]	; (800a078 <MX_TIM3_Init+0x114>)
 800a06a:	f000 fb5d 	bl	800a728 <HAL_TIM_MspPostInit>

}
 800a06e:	bf00      	nop
 800a070:	3738      	adds	r7, #56	; 0x38
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	2400945c 	.word	0x2400945c
 800a07c:	40000400 	.word	0x40000400

0800a080 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08e      	sub	sp, #56	; 0x38
 800a084:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a086:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a08a:	2200      	movs	r2, #0
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	605a      	str	r2, [r3, #4]
 800a090:	609a      	str	r2, [r3, #8]
 800a092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a094:	f107 031c 	add.w	r3, r7, #28
 800a098:	2200      	movs	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]
 800a09c:	605a      	str	r2, [r3, #4]
 800a09e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a0a0:	463b      	mov	r3, r7
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	605a      	str	r2, [r3, #4]
 800a0a8:	609a      	str	r2, [r3, #8]
 800a0aa:	60da      	str	r2, [r3, #12]
 800a0ac:	611a      	str	r2, [r3, #16]
 800a0ae:	615a      	str	r2, [r3, #20]
 800a0b0:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800a0b2:	4b3d      	ldr	r3, [pc, #244]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a0b4:	4a3d      	ldr	r2, [pc, #244]	; (800a1ac <MX_TIM4_Init+0x12c>)
 800a0b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 12-1;
 800a0b8:	4b3b      	ldr	r3, [pc, #236]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a0ba:	220b      	movs	r2, #11
 800a0bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0be:	4b3a      	ldr	r3, [pc, #232]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 40000-1;
 800a0c4:	4b38      	ldr	r3, [pc, #224]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a0c6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800a0ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0cc:	4b36      	ldr	r3, [pc, #216]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a0d2:	4b35      	ldr	r3, [pc, #212]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a0d4:	2280      	movs	r2, #128	; 0x80
 800a0d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800a0d8:	4833      	ldr	r0, [pc, #204]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a0da:	f00b feab 	bl	8015e34 <HAL_TIM_Base_Init>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800a0e4:	f7ff fb22 	bl	800972c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a0e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800a0ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	482c      	ldr	r0, [pc, #176]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a0f6:	f00c fd0f 	bl	8016b18 <HAL_TIM_ConfigClockSource>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800a100:	f7ff fb14 	bl	800972c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800a104:	4828      	ldr	r0, [pc, #160]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a106:	f00b ff23 	bl	8015f50 <HAL_TIM_PWM_Init>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800a110:	f7ff fb0c 	bl	800972c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a114:	2300      	movs	r3, #0
 800a116:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a118:	2300      	movs	r3, #0
 800a11a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a11c:	f107 031c 	add.w	r3, r7, #28
 800a120:	4619      	mov	r1, r3
 800a122:	4821      	ldr	r0, [pc, #132]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a124:	f00d fb80 	bl	8017828 <HAL_TIMEx_MasterConfigSynchronization>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800a12e:	f7ff fafd 	bl	800972c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a132:	2360      	movs	r3, #96	; 0x60
 800a134:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a13a:	2300      	movs	r3, #0
 800a13c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a13e:	2300      	movs	r3, #0
 800a140:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a142:	463b      	mov	r3, r7
 800a144:	2200      	movs	r2, #0
 800a146:	4619      	mov	r1, r3
 800a148:	4817      	ldr	r0, [pc, #92]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a14a:	f00c fbd5 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d001      	beq.n	800a158 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800a154:	f7ff faea 	bl	800972c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a158:	463b      	mov	r3, r7
 800a15a:	2204      	movs	r2, #4
 800a15c:	4619      	mov	r1, r3
 800a15e:	4812      	ldr	r0, [pc, #72]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a160:	f00c fbca 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800a16a:	f7ff fadf 	bl	800972c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a16e:	463b      	mov	r3, r7
 800a170:	2208      	movs	r2, #8
 800a172:	4619      	mov	r1, r3
 800a174:	480c      	ldr	r0, [pc, #48]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a176:	f00c fbbf 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 800a180:	f7ff fad4 	bl	800972c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a184:	463b      	mov	r3, r7
 800a186:	220c      	movs	r2, #12
 800a188:	4619      	mov	r1, r3
 800a18a:	4807      	ldr	r0, [pc, #28]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a18c:	f00c fbb4 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 800a196:	f7ff fac9 	bl	800972c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800a19a:	4803      	ldr	r0, [pc, #12]	; (800a1a8 <MX_TIM4_Init+0x128>)
 800a19c:	f000 fac4 	bl	800a728 <HAL_TIM_MspPostInit>

}
 800a1a0:	bf00      	nop
 800a1a2:	3738      	adds	r7, #56	; 0x38
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	24009378 	.word	0x24009378
 800a1ac:	40000800 	.word	0x40000800

0800a1b0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b08e      	sub	sp, #56	; 0x38
 800a1b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a1b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	605a      	str	r2, [r3, #4]
 800a1c0:	609a      	str	r2, [r3, #8]
 800a1c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1c4:	f107 031c 	add.w	r3, r7, #28
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	601a      	str	r2, [r3, #0]
 800a1cc:	605a      	str	r2, [r3, #4]
 800a1ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a1d0:	463b      	mov	r3, r7
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	601a      	str	r2, [r3, #0]
 800a1d6:	605a      	str	r2, [r3, #4]
 800a1d8:	609a      	str	r2, [r3, #8]
 800a1da:	60da      	str	r2, [r3, #12]
 800a1dc:	611a      	str	r2, [r3, #16]
 800a1de:	615a      	str	r2, [r3, #20]
 800a1e0:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 800a1e2:	4b2c      	ldr	r3, [pc, #176]	; (800a294 <MX_TIM5_Init+0xe4>)
 800a1e4:	4a2c      	ldr	r2, [pc, #176]	; (800a298 <MX_TIM5_Init+0xe8>)
 800a1e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a1e8:	4b2a      	ldr	r3, [pc, #168]	; (800a294 <MX_TIM5_Init+0xe4>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1ee:	4b29      	ldr	r3, [pc, #164]	; (800a294 <MX_TIM5_Init+0xe4>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10;
 800a1f4:	4b27      	ldr	r3, [pc, #156]	; (800a294 <MX_TIM5_Init+0xe4>)
 800a1f6:	220a      	movs	r2, #10
 800a1f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1fa:	4b26      	ldr	r3, [pc, #152]	; (800a294 <MX_TIM5_Init+0xe4>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a200:	4b24      	ldr	r3, [pc, #144]	; (800a294 <MX_TIM5_Init+0xe4>)
 800a202:	2200      	movs	r2, #0
 800a204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a206:	4823      	ldr	r0, [pc, #140]	; (800a294 <MX_TIM5_Init+0xe4>)
 800a208:	f00b fe14 	bl	8015e34 <HAL_TIM_Base_Init>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d001      	beq.n	800a216 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800a212:	f7ff fa8b 	bl	800972c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a21a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a21c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a220:	4619      	mov	r1, r3
 800a222:	481c      	ldr	r0, [pc, #112]	; (800a294 <MX_TIM5_Init+0xe4>)
 800a224:	f00c fc78 	bl	8016b18 <HAL_TIM_ConfigClockSource>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800a22e:	f7ff fa7d 	bl	800972c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800a232:	4818      	ldr	r0, [pc, #96]	; (800a294 <MX_TIM5_Init+0xe4>)
 800a234:	f00b fe8c 	bl	8015f50 <HAL_TIM_PWM_Init>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800a23e:	f7ff fa75 	bl	800972c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a242:	2300      	movs	r3, #0
 800a244:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a246:	2300      	movs	r3, #0
 800a248:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a24a:	f107 031c 	add.w	r3, r7, #28
 800a24e:	4619      	mov	r1, r3
 800a250:	4810      	ldr	r0, [pc, #64]	; (800a294 <MX_TIM5_Init+0xe4>)
 800a252:	f00d fae9 	bl	8017828 <HAL_TIMEx_MasterConfigSynchronization>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800a25c:	f7ff fa66 	bl	800972c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a260:	2360      	movs	r3, #96	; 0x60
 800a262:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 800a264:	2305      	movs	r3, #5
 800a266:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a268:	2300      	movs	r3, #0
 800a26a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a26c:	2300      	movs	r3, #0
 800a26e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a270:	463b      	mov	r3, r7
 800a272:	2204      	movs	r2, #4
 800a274:	4619      	mov	r1, r3
 800a276:	4807      	ldr	r0, [pc, #28]	; (800a294 <MX_TIM5_Init+0xe4>)
 800a278:	f00c fb3e 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d001      	beq.n	800a286 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800a282:	f7ff fa53 	bl	800972c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim5);
 800a286:	4803      	ldr	r0, [pc, #12]	; (800a294 <MX_TIM5_Init+0xe4>)
 800a288:	f000 fa4e 	bl	800a728 <HAL_TIM_MspPostInit>

}
 800a28c:	bf00      	nop
 800a28e:	3738      	adds	r7, #56	; 0x38
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	24009410 	.word	0x24009410
 800a298:	40000c00 	.word	0x40000c00

0800a29c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b096      	sub	sp, #88	; 0x58
 800a2a0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a2a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	601a      	str	r2, [r3, #0]
 800a2aa:	605a      	str	r2, [r3, #4]
 800a2ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a2ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	605a      	str	r2, [r3, #4]
 800a2b8:	609a      	str	r2, [r3, #8]
 800a2ba:	60da      	str	r2, [r3, #12]
 800a2bc:	611a      	str	r2, [r3, #16]
 800a2be:	615a      	str	r2, [r3, #20]
 800a2c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a2c2:	1d3b      	adds	r3, r7, #4
 800a2c4:	222c      	movs	r2, #44	; 0x2c
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f017 ff62 	bl	8022192 <memset>

  htim8.Instance = TIM8;
 800a2ce:	4b39      	ldr	r3, [pc, #228]	; (800a3b4 <MX_TIM8_Init+0x118>)
 800a2d0:	4a39      	ldr	r2, [pc, #228]	; (800a3b8 <MX_TIM8_Init+0x11c>)
 800a2d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 12-1;
 800a2d4:	4b37      	ldr	r3, [pc, #220]	; (800a3b4 <MX_TIM8_Init+0x118>)
 800a2d6:	220b      	movs	r2, #11
 800a2d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a2da:	4b36      	ldr	r3, [pc, #216]	; (800a3b4 <MX_TIM8_Init+0x118>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 40000-1;
 800a2e0:	4b34      	ldr	r3, [pc, #208]	; (800a3b4 <MX_TIM8_Init+0x118>)
 800a2e2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800a2e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a2e8:	4b32      	ldr	r3, [pc, #200]	; (800a3b4 <MX_TIM8_Init+0x118>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a2ee:	4b31      	ldr	r3, [pc, #196]	; (800a3b4 <MX_TIM8_Init+0x118>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a2f4:	4b2f      	ldr	r3, [pc, #188]	; (800a3b4 <MX_TIM8_Init+0x118>)
 800a2f6:	2280      	movs	r2, #128	; 0x80
 800a2f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800a2fa:	482e      	ldr	r0, [pc, #184]	; (800a3b4 <MX_TIM8_Init+0x118>)
 800a2fc:	f00b fe28 	bl	8015f50 <HAL_TIM_PWM_Init>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d001      	beq.n	800a30a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800a306:	f7ff fa11 	bl	800972c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a30a:	2300      	movs	r3, #0
 800a30c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a30e:	2300      	movs	r3, #0
 800a310:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a312:	2300      	movs	r3, #0
 800a314:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a316:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800a31a:	4619      	mov	r1, r3
 800a31c:	4825      	ldr	r0, [pc, #148]	; (800a3b4 <MX_TIM8_Init+0x118>)
 800a31e:	f00d fa83 	bl	8017828 <HAL_TIMEx_MasterConfigSynchronization>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800a328:	f7ff fa00 	bl	800972c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a32c:	2360      	movs	r3, #96	; 0x60
 800a32e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a334:	2300      	movs	r3, #0
 800a336:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a338:	2300      	movs	r3, #0
 800a33a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a33c:	2300      	movs	r3, #0
 800a33e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a340:	2300      	movs	r3, #0
 800a342:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a344:	2300      	movs	r3, #0
 800a346:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a348:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a34c:	2200      	movs	r2, #0
 800a34e:	4619      	mov	r1, r3
 800a350:	4818      	ldr	r0, [pc, #96]	; (800a3b4 <MX_TIM8_Init+0x118>)
 800a352:	f00c fad1 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d001      	beq.n	800a360 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800a35c:	f7ff f9e6 	bl	800972c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a360:	2300      	movs	r3, #0
 800a362:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a364:	2300      	movs	r3, #0
 800a366:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a368:	2300      	movs	r3, #0
 800a36a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a370:	2300      	movs	r3, #0
 800a372:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a378:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a37e:	2300      	movs	r3, #0
 800a380:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a386:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a38c:	2300      	movs	r3, #0
 800a38e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a390:	1d3b      	adds	r3, r7, #4
 800a392:	4619      	mov	r1, r3
 800a394:	4807      	ldr	r0, [pc, #28]	; (800a3b4 <MX_TIM8_Init+0x118>)
 800a396:	f00d facf 	bl	8017938 <HAL_TIMEx_ConfigBreakDeadTime>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d001      	beq.n	800a3a4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 800a3a0:	f7ff f9c4 	bl	800972c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800a3a4:	4803      	ldr	r0, [pc, #12]	; (800a3b4 <MX_TIM8_Init+0x118>)
 800a3a6:	f000 f9bf 	bl	800a728 <HAL_TIM_MspPostInit>

}
 800a3aa:	bf00      	nop
 800a3ac:	3758      	adds	r7, #88	; 0x58
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	2400932c 	.word	0x2400932c
 800a3b8:	40010400 	.word	0x40010400

0800a3bc <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b088      	sub	sp, #32
 800a3c0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a3c2:	1d3b      	adds	r3, r7, #4
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	605a      	str	r2, [r3, #4]
 800a3ca:	609a      	str	r2, [r3, #8]
 800a3cc:	60da      	str	r2, [r3, #12]
 800a3ce:	611a      	str	r2, [r3, #16]
 800a3d0:	615a      	str	r2, [r3, #20]
 800a3d2:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 800a3d4:	4b1f      	ldr	r3, [pc, #124]	; (800a454 <MX_TIM12_Init+0x98>)
 800a3d6:	4a20      	ldr	r2, [pc, #128]	; (800a458 <MX_TIM12_Init+0x9c>)
 800a3d8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800a3da:	4b1e      	ldr	r3, [pc, #120]	; (800a454 <MX_TIM12_Init+0x98>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3e0:	4b1c      	ldr	r3, [pc, #112]	; (800a454 <MX_TIM12_Init+0x98>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800a3e6:	4b1b      	ldr	r3, [pc, #108]	; (800a454 <MX_TIM12_Init+0x98>)
 800a3e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3ec:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a3ee:	4b19      	ldr	r3, [pc, #100]	; (800a454 <MX_TIM12_Init+0x98>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3f4:	4b17      	ldr	r3, [pc, #92]	; (800a454 <MX_TIM12_Init+0x98>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800a3fa:	4816      	ldr	r0, [pc, #88]	; (800a454 <MX_TIM12_Init+0x98>)
 800a3fc:	f00b fda8 	bl	8015f50 <HAL_TIM_PWM_Init>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800a406:	f7ff f991 	bl	800972c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a40a:	2360      	movs	r3, #96	; 0x60
 800a40c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a40e:	2300      	movs	r3, #0
 800a410:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a412:	2300      	movs	r3, #0
 800a414:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a416:	2300      	movs	r3, #0
 800a418:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a41a:	1d3b      	adds	r3, r7, #4
 800a41c:	2200      	movs	r2, #0
 800a41e:	4619      	mov	r1, r3
 800a420:	480c      	ldr	r0, [pc, #48]	; (800a454 <MX_TIM12_Init+0x98>)
 800a422:	f00c fa69 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800a42c:	f7ff f97e 	bl	800972c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a430:	1d3b      	adds	r3, r7, #4
 800a432:	2204      	movs	r2, #4
 800a434:	4619      	mov	r1, r3
 800a436:	4807      	ldr	r0, [pc, #28]	; (800a454 <MX_TIM12_Init+0x98>)
 800a438:	f00c fa5e 	bl	80168f8 <HAL_TIM_PWM_ConfigChannel>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800a442:	f7ff f973 	bl	800972c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 800a446:	4803      	ldr	r0, [pc, #12]	; (800a454 <MX_TIM12_Init+0x98>)
 800a448:	f000 f96e 	bl	800a728 <HAL_TIM_MspPostInit>

}
 800a44c:	bf00      	nop
 800a44e:	3720      	adds	r7, #32
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	24009540 	.word	0x24009540
 800a458:	40001800 	.word	0x40001800

0800a45c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b088      	sub	sp, #32
 800a460:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a462:	f107 0314 	add.w	r3, r7, #20
 800a466:	2200      	movs	r2, #0
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	605a      	str	r2, [r3, #4]
 800a46c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a46e:	1d3b      	adds	r3, r7, #4
 800a470:	2200      	movs	r2, #0
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	605a      	str	r2, [r3, #4]
 800a476:	609a      	str	r2, [r3, #8]
 800a478:	60da      	str	r2, [r3, #12]

  htim15.Instance = TIM15;
 800a47a:	4b29      	ldr	r3, [pc, #164]	; (800a520 <MX_TIM15_Init+0xc4>)
 800a47c:	4a29      	ldr	r2, [pc, #164]	; (800a524 <MX_TIM15_Init+0xc8>)
 800a47e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 800a480:	4b27      	ldr	r3, [pc, #156]	; (800a520 <MX_TIM15_Init+0xc4>)
 800a482:	22ef      	movs	r2, #239	; 0xef
 800a484:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a486:	4b26      	ldr	r3, [pc, #152]	; (800a520 <MX_TIM15_Init+0xc4>)
 800a488:	2200      	movs	r2, #0
 800a48a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800a48c:	4b24      	ldr	r3, [pc, #144]	; (800a520 <MX_TIM15_Init+0xc4>)
 800a48e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a492:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a494:	4b22      	ldr	r3, [pc, #136]	; (800a520 <MX_TIM15_Init+0xc4>)
 800a496:	2200      	movs	r2, #0
 800a498:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800a49a:	4b21      	ldr	r3, [pc, #132]	; (800a520 <MX_TIM15_Init+0xc4>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a4a0:	4b1f      	ldr	r3, [pc, #124]	; (800a520 <MX_TIM15_Init+0xc4>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800a4a6:	481e      	ldr	r0, [pc, #120]	; (800a520 <MX_TIM15_Init+0xc4>)
 800a4a8:	f00b ff12 	bl	80162d0 <HAL_TIM_IC_Init>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800a4b2:	f7ff f93b 	bl	800972c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800a4be:	f107 0314 	add.w	r3, r7, #20
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	4816      	ldr	r0, [pc, #88]	; (800a520 <MX_TIM15_Init+0xc4>)
 800a4c6:	f00d f9af 	bl	8017828 <HAL_TIMEx_MasterConfigSynchronization>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800a4d0:	f7ff f92c 	bl	800972c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a4e4:	1d3b      	adds	r3, r7, #4
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	480d      	ldr	r0, [pc, #52]	; (800a520 <MX_TIM15_Init+0xc4>)
 800a4ec:	f00c f96f 	bl	80167ce <HAL_TIM_IC_ConfigChannel>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 800a4f6:	f7ff f919 	bl	800972c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800a4fe:	2302      	movs	r3, #2
 800a500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800a502:	1d3b      	adds	r3, r7, #4
 800a504:	2204      	movs	r2, #4
 800a506:	4619      	mov	r1, r3
 800a508:	4805      	ldr	r0, [pc, #20]	; (800a520 <MX_TIM15_Init+0xc4>)
 800a50a:	f00c f960 	bl	80167ce <HAL_TIM_IC_ConfigChannel>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <MX_TIM15_Init+0xbc>
  {
    Error_Handler();
 800a514:	f7ff f90a 	bl	800972c <Error_Handler>
  }

}
 800a518:	bf00      	nop
 800a51a:	3720      	adds	r7, #32
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	240093c4 	.word	0x240093c4
 800a524:	40014000 	.word	0x40014000

0800a528 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a528:	b480      	push	{r7}
 800a52a:	b089      	sub	sp, #36	; 0x24
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a35      	ldr	r2, [pc, #212]	; (800a60c <HAL_TIM_Base_MspInit+0xe4>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d10f      	bne.n	800a55a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a53a:	4b35      	ldr	r3, [pc, #212]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a53c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a540:	4a33      	ldr	r2, [pc, #204]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a542:	f043 0301 	orr.w	r3, r3, #1
 800a546:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a54a:	4b31      	ldr	r3, [pc, #196]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a54c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a550:	f003 0301 	and.w	r3, r3, #1
 800a554:	61fb      	str	r3, [r7, #28]
 800a556:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800a558:	e052      	b.n	800a600 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM2)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a562:	d10f      	bne.n	800a584 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a564:	4b2a      	ldr	r3, [pc, #168]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a566:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a56a:	4a29      	ldr	r2, [pc, #164]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a56c:	f043 0301 	orr.w	r3, r3, #1
 800a570:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a574:	4b26      	ldr	r3, [pc, #152]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	61bb      	str	r3, [r7, #24]
 800a580:	69bb      	ldr	r3, [r7, #24]
}
 800a582:	e03d      	b.n	800a600 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM3)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a22      	ldr	r2, [pc, #136]	; (800a614 <HAL_TIM_Base_MspInit+0xec>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d10f      	bne.n	800a5ae <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a58e:	4b20      	ldr	r3, [pc, #128]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a594:	4a1e      	ldr	r2, [pc, #120]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a596:	f043 0302 	orr.w	r3, r3, #2
 800a59a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a59e:	4b1c      	ldr	r3, [pc, #112]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a5a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a5a4:	f003 0302 	and.w	r3, r3, #2
 800a5a8:	617b      	str	r3, [r7, #20]
 800a5aa:	697b      	ldr	r3, [r7, #20]
}
 800a5ac:	e028      	b.n	800a600 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM4)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a19      	ldr	r2, [pc, #100]	; (800a618 <HAL_TIM_Base_MspInit+0xf0>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d10f      	bne.n	800a5d8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a5b8:	4b15      	ldr	r3, [pc, #84]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a5ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a5be:	4a14      	ldr	r2, [pc, #80]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a5c0:	f043 0304 	orr.w	r3, r3, #4
 800a5c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a5c8:	4b11      	ldr	r3, [pc, #68]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a5ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a5ce:	f003 0304 	and.w	r3, r3, #4
 800a5d2:	613b      	str	r3, [r7, #16]
 800a5d4:	693b      	ldr	r3, [r7, #16]
}
 800a5d6:	e013      	b.n	800a600 <HAL_TIM_Base_MspInit+0xd8>
  else if(tim_baseHandle->Instance==TIM5)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a0f      	ldr	r2, [pc, #60]	; (800a61c <HAL_TIM_Base_MspInit+0xf4>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d10e      	bne.n	800a600 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a5e2:	4b0b      	ldr	r3, [pc, #44]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a5e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a5e8:	4a09      	ldr	r2, [pc, #36]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a5ea:	f043 0308 	orr.w	r3, r3, #8
 800a5ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a5f2:	4b07      	ldr	r3, [pc, #28]	; (800a610 <HAL_TIM_Base_MspInit+0xe8>)
 800a5f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a5f8:	f003 0308 	and.w	r3, r3, #8
 800a5fc:	60fb      	str	r3, [r7, #12]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
}
 800a600:	bf00      	nop
 800a602:	3724      	adds	r7, #36	; 0x24
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	40010000 	.word	0x40010000
 800a610:	58024400 	.word	0x58024400
 800a614:	40000400 	.word	0x40000400
 800a618:	40000800 	.word	0x40000800
 800a61c:	40000c00 	.word	0x40000c00

0800a620 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a16      	ldr	r2, [pc, #88]	; (800a688 <HAL_TIM_PWM_MspInit+0x68>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d10f      	bne.n	800a652 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a632:	4b16      	ldr	r3, [pc, #88]	; (800a68c <HAL_TIM_PWM_MspInit+0x6c>)
 800a634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a638:	4a14      	ldr	r2, [pc, #80]	; (800a68c <HAL_TIM_PWM_MspInit+0x6c>)
 800a63a:	f043 0302 	orr.w	r3, r3, #2
 800a63e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a642:	4b12      	ldr	r3, [pc, #72]	; (800a68c <HAL_TIM_PWM_MspInit+0x6c>)
 800a644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a648:	f003 0302 	and.w	r3, r3, #2
 800a64c:	60fb      	str	r3, [r7, #12]
 800a64e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800a650:	e013      	b.n	800a67a <HAL_TIM_PWM_MspInit+0x5a>
  else if(tim_pwmHandle->Instance==TIM12)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a0e      	ldr	r2, [pc, #56]	; (800a690 <HAL_TIM_PWM_MspInit+0x70>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d10e      	bne.n	800a67a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800a65c:	4b0b      	ldr	r3, [pc, #44]	; (800a68c <HAL_TIM_PWM_MspInit+0x6c>)
 800a65e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a662:	4a0a      	ldr	r2, [pc, #40]	; (800a68c <HAL_TIM_PWM_MspInit+0x6c>)
 800a664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a668:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a66c:	4b07      	ldr	r3, [pc, #28]	; (800a68c <HAL_TIM_PWM_MspInit+0x6c>)
 800a66e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a676:	60bb      	str	r3, [r7, #8]
 800a678:	68bb      	ldr	r3, [r7, #8]
}
 800a67a:	bf00      	nop
 800a67c:	3714      	adds	r7, #20
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	40010400 	.word	0x40010400
 800a68c:	58024400 	.word	0x58024400
 800a690:	40001800 	.word	0x40001800

0800a694 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b08a      	sub	sp, #40	; 0x28
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a69c:	f107 0314 	add.w	r3, r7, #20
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	601a      	str	r2, [r3, #0]
 800a6a4:	605a      	str	r2, [r3, #4]
 800a6a6:	609a      	str	r2, [r3, #8]
 800a6a8:	60da      	str	r2, [r3, #12]
 800a6aa:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM15)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a1a      	ldr	r2, [pc, #104]	; (800a71c <HAL_TIM_IC_MspInit+0x88>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d12d      	bne.n	800a712 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800a6b6:	4b1a      	ldr	r3, [pc, #104]	; (800a720 <HAL_TIM_IC_MspInit+0x8c>)
 800a6b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6bc:	4a18      	ldr	r2, [pc, #96]	; (800a720 <HAL_TIM_IC_MspInit+0x8c>)
 800a6be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a6c6:	4b16      	ldr	r3, [pc, #88]	; (800a720 <HAL_TIM_IC_MspInit+0x8c>)
 800a6c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6d0:	613b      	str	r3, [r7, #16]
 800a6d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a6d4:	4b12      	ldr	r3, [pc, #72]	; (800a720 <HAL_TIM_IC_MspInit+0x8c>)
 800a6d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6da:	4a11      	ldr	r2, [pc, #68]	; (800a720 <HAL_TIM_IC_MspInit+0x8c>)
 800a6dc:	f043 0310 	orr.w	r3, r3, #16
 800a6e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a6e4:	4b0e      	ldr	r3, [pc, #56]	; (800a720 <HAL_TIM_IC_MspInit+0x8c>)
 800a6e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6ea:	f003 0310 	and.w	r3, r3, #16
 800a6ee:	60fb      	str	r3, [r7, #12]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration
    PE5     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = LIDAR_Pin;
 800a6f2:	2320      	movs	r3, #32
 800a6f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6fe:	2300      	movs	r3, #0
 800a700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800a702:	2304      	movs	r3, #4
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LIDAR_GPIO_Port, &GPIO_InitStruct);
 800a706:	f107 0314 	add.w	r3, r7, #20
 800a70a:	4619      	mov	r1, r3
 800a70c:	4805      	ldr	r0, [pc, #20]	; (800a724 <HAL_TIM_IC_MspInit+0x90>)
 800a70e:	f004 f8ad 	bl	800e86c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800a712:	bf00      	nop
 800a714:	3728      	adds	r7, #40	; 0x28
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	40014000 	.word	0x40014000
 800a720:	58024400 	.word	0x58024400
 800a724:	58021000 	.word	0x58021000

0800a728 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b090      	sub	sp, #64	; 0x40
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a734:	2200      	movs	r2, #0
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	605a      	str	r2, [r3, #4]
 800a73a:	609a      	str	r2, [r3, #8]
 800a73c:	60da      	str	r2, [r3, #12]
 800a73e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a8f      	ldr	r2, [pc, #572]	; (800a984 <HAL_TIM_MspPostInit+0x25c>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d120      	bne.n	800a78c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a74a:	4b8f      	ldr	r3, [pc, #572]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a74c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a750:	4a8d      	ldr	r2, [pc, #564]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a752:	f043 0310 	orr.w	r3, r3, #16
 800a756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a75a:	4b8b      	ldr	r3, [pc, #556]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a75c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a760:	f003 0310 	and.w	r3, r3, #16
 800a764:	62bb      	str	r3, [r7, #40]	; 0x28
 800a766:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = S4_Pin|S1_Pin|S2_Pin|S3_Pin;
 800a768:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800a76c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a76e:	2302      	movs	r3, #2
 800a770:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a772:	2300      	movs	r3, #0
 800a774:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a776:	2300      	movs	r3, #0
 800a778:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a77a:	2301      	movs	r3, #1
 800a77c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a77e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a782:	4619      	mov	r1, r3
 800a784:	4881      	ldr	r0, [pc, #516]	; (800a98c <HAL_TIM_MspPostInit+0x264>)
 800a786:	f004 f871 	bl	800e86c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800a78a:	e0f7      	b.n	800a97c <HAL_TIM_MspPostInit+0x254>
  else if(timHandle->Instance==TIM3)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a7f      	ldr	r2, [pc, #508]	; (800a990 <HAL_TIM_MspPostInit+0x268>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d15d      	bne.n	800a852 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a796:	4b7c      	ldr	r3, [pc, #496]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a79c:	4a7a      	ldr	r2, [pc, #488]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a79e:	f043 0301 	orr.w	r3, r3, #1
 800a7a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7a6:	4b78      	ldr	r3, [pc, #480]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a7a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7b4:	4b74      	ldr	r3, [pc, #464]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a7b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7ba:	4a73      	ldr	r2, [pc, #460]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a7bc:	f043 0302 	orr.w	r3, r3, #2
 800a7c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7c4:	4b70      	ldr	r3, [pc, #448]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a7c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	623b      	str	r3, [r7, #32]
 800a7d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7d2:	4b6d      	ldr	r3, [pc, #436]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a7d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7d8:	4a6b      	ldr	r2, [pc, #428]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a7da:	f043 0304 	orr.w	r3, r3, #4
 800a7de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7e2:	4b69      	ldr	r3, [pc, #420]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a7e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	61fb      	str	r3, [r7, #28]
 800a7ee:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = M7_Pin;
 800a7f0:	2340      	movs	r3, #64	; 0x40
 800a7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a800:	2302      	movs	r3, #2
 800a802:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(M7_GPIO_Port, &GPIO_InitStruct);
 800a804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a808:	4619      	mov	r1, r3
 800a80a:	4862      	ldr	r0, [pc, #392]	; (800a994 <HAL_TIM_MspPostInit+0x26c>)
 800a80c:	f004 f82e 	bl	800e86c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M5_Pin;
 800a810:	2302      	movs	r3, #2
 800a812:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a814:	2302      	movs	r3, #2
 800a816:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a818:	2300      	movs	r3, #0
 800a81a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a81c:	2300      	movs	r3, #0
 800a81e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a820:	2302      	movs	r3, #2
 800a822:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(M5_GPIO_Port, &GPIO_InitStruct);
 800a824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a828:	4619      	mov	r1, r3
 800a82a:	485b      	ldr	r0, [pc, #364]	; (800a998 <HAL_TIM_MspPostInit+0x270>)
 800a82c:	f004 f81e 	bl	800e86c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M6_Pin;
 800a830:	2380      	movs	r3, #128	; 0x80
 800a832:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a834:	2302      	movs	r3, #2
 800a836:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a838:	2300      	movs	r3, #0
 800a83a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a83c:	2300      	movs	r3, #0
 800a83e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a840:	2302      	movs	r3, #2
 800a842:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(M6_GPIO_Port, &GPIO_InitStruct);
 800a844:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a848:	4619      	mov	r1, r3
 800a84a:	4854      	ldr	r0, [pc, #336]	; (800a99c <HAL_TIM_MspPostInit+0x274>)
 800a84c:	f004 f80e 	bl	800e86c <HAL_GPIO_Init>
}
 800a850:	e094      	b.n	800a97c <HAL_TIM_MspPostInit+0x254>
  else if(timHandle->Instance==TIM4)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a52      	ldr	r2, [pc, #328]	; (800a9a0 <HAL_TIM_MspPostInit+0x278>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d120      	bne.n	800a89e <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a85c:	4b4a      	ldr	r3, [pc, #296]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a85e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a862:	4a49      	ldr	r2, [pc, #292]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a864:	f043 0308 	orr.w	r3, r3, #8
 800a868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a86c:	4b46      	ldr	r3, [pc, #280]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a86e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a872:	f003 0308 	and.w	r3, r3, #8
 800a876:	61bb      	str	r3, [r7, #24]
 800a878:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M3_Pin|M4_Pin|M2_Pin|M1_Pin;
 800a87a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a87e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a880:	2302      	movs	r3, #2
 800a882:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a884:	2300      	movs	r3, #0
 800a886:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a888:	2300      	movs	r3, #0
 800a88a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a88c:	2302      	movs	r3, #2
 800a88e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a894:	4619      	mov	r1, r3
 800a896:	4843      	ldr	r0, [pc, #268]	; (800a9a4 <HAL_TIM_MspPostInit+0x27c>)
 800a898:	f003 ffe8 	bl	800e86c <HAL_GPIO_Init>
}
 800a89c:	e06e      	b.n	800a97c <HAL_TIM_MspPostInit+0x254>
  else if(timHandle->Instance==TIM5)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a41      	ldr	r2, [pc, #260]	; (800a9a8 <HAL_TIM_MspPostInit+0x280>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d11f      	bne.n	800a8e8 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8a8:	4b37      	ldr	r3, [pc, #220]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a8aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8ae:	4a36      	ldr	r2, [pc, #216]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a8b0:	f043 0301 	orr.w	r3, r3, #1
 800a8b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a8b8:	4b33      	ldr	r3, [pc, #204]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a8ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8be:	f003 0301 	and.w	r3, r3, #1
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800a8da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8de:	4619      	mov	r1, r3
 800a8e0:	482c      	ldr	r0, [pc, #176]	; (800a994 <HAL_TIM_MspPostInit+0x26c>)
 800a8e2:	f003 ffc3 	bl	800e86c <HAL_GPIO_Init>
}
 800a8e6:	e049      	b.n	800a97c <HAL_TIM_MspPostInit+0x254>
  else if(timHandle->Instance==TIM8)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a2f      	ldr	r2, [pc, #188]	; (800a9ac <HAL_TIM_MspPostInit+0x284>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d11f      	bne.n	800a932 <HAL_TIM_MspPostInit+0x20a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8f2:	4b25      	ldr	r3, [pc, #148]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a8f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8f8:	4a23      	ldr	r2, [pc, #140]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a8fa:	f043 0304 	orr.w	r3, r3, #4
 800a8fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a902:	4b21      	ldr	r3, [pc, #132]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a908:	f003 0304 	and.w	r3, r3, #4
 800a90c:	613b      	str	r3, [r7, #16]
 800a90e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M8_Pin;
 800a910:	2340      	movs	r3, #64	; 0x40
 800a912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a914:	2302      	movs	r3, #2
 800a916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a918:	2300      	movs	r3, #0
 800a91a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a91c:	2300      	movs	r3, #0
 800a91e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a920:	2303      	movs	r3, #3
 800a922:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(M8_GPIO_Port, &GPIO_InitStruct);
 800a924:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a928:	4619      	mov	r1, r3
 800a92a:	481c      	ldr	r0, [pc, #112]	; (800a99c <HAL_TIM_MspPostInit+0x274>)
 800a92c:	f003 ff9e 	bl	800e86c <HAL_GPIO_Init>
}
 800a930:	e024      	b.n	800a97c <HAL_TIM_MspPostInit+0x254>
  else if(timHandle->Instance==TIM12)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a1e      	ldr	r2, [pc, #120]	; (800a9b0 <HAL_TIM_MspPostInit+0x288>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d11f      	bne.n	800a97c <HAL_TIM_MspPostInit+0x254>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a93c:	4b12      	ldr	r3, [pc, #72]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a93e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a942:	4a11      	ldr	r2, [pc, #68]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a944:	f043 0302 	orr.w	r3, r3, #2
 800a948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a94c:	4b0e      	ldr	r3, [pc, #56]	; (800a988 <HAL_TIM_MspPostInit+0x260>)
 800a94e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a952:	f003 0302 	and.w	r3, r3, #2
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S5_Pin|S6_Pin;
 800a95a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a95e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a960:	2302      	movs	r3, #2
 800a962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a964:	2300      	movs	r3, #0
 800a966:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a968:	2300      	movs	r3, #0
 800a96a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800a96c:	2302      	movs	r3, #2
 800a96e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a974:	4619      	mov	r1, r3
 800a976:	4808      	ldr	r0, [pc, #32]	; (800a998 <HAL_TIM_MspPostInit+0x270>)
 800a978:	f003 ff78 	bl	800e86c <HAL_GPIO_Init>
}
 800a97c:	bf00      	nop
 800a97e:	3740      	adds	r7, #64	; 0x40
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	40010000 	.word	0x40010000
 800a988:	58024400 	.word	0x58024400
 800a98c:	58021000 	.word	0x58021000
 800a990:	40000400 	.word	0x40000400
 800a994:	58020000 	.word	0x58020000
 800a998:	58020400 	.word	0x58020400
 800a99c:	58020800 	.word	0x58020800
 800a9a0:	40000800 	.word	0x40000800
 800a9a4:	58020c00 	.word	0x58020c00
 800a9a8:	40000c00 	.word	0x40000c00
 800a9ac:	40010400 	.word	0x40010400
 800a9b0:	40001800 	.word	0x40001800

0800a9b4 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_uart7_rx;
DMA_HandleTypeDef hdma_uart8_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0

  huart7.Instance = UART7;
 800a9b8:	4b23      	ldr	r3, [pc, #140]	; (800aa48 <MX_UART7_Init+0x94>)
 800a9ba:	4a24      	ldr	r2, [pc, #144]	; (800aa4c <MX_UART7_Init+0x98>)
 800a9bc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 800a9be:	4b22      	ldr	r3, [pc, #136]	; (800aa48 <MX_UART7_Init+0x94>)
 800a9c0:	4a23      	ldr	r2, [pc, #140]	; (800aa50 <MX_UART7_Init+0x9c>)
 800a9c2:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 800a9c4:	4b20      	ldr	r3, [pc, #128]	; (800aa48 <MX_UART7_Init+0x94>)
 800a9c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9ca:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 800a9cc:	4b1e      	ldr	r3, [pc, #120]	; (800aa48 <MX_UART7_Init+0x94>)
 800a9ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a9d2:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 800a9d4:	4b1c      	ldr	r3, [pc, #112]	; (800aa48 <MX_UART7_Init+0x94>)
 800a9d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9da:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800a9dc:	4b1a      	ldr	r3, [pc, #104]	; (800aa48 <MX_UART7_Init+0x94>)
 800a9de:	220c      	movs	r2, #12
 800a9e0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a9e2:	4b19      	ldr	r3, [pc, #100]	; (800aa48 <MX_UART7_Init+0x94>)
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800a9e8:	4b17      	ldr	r3, [pc, #92]	; (800aa48 <MX_UART7_Init+0x94>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a9ee:	4b16      	ldr	r3, [pc, #88]	; (800aa48 <MX_UART7_Init+0x94>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a9f4:	4b14      	ldr	r3, [pc, #80]	; (800aa48 <MX_UART7_Init+0x94>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a9fa:	4b13      	ldr	r3, [pc, #76]	; (800aa48 <MX_UART7_Init+0x94>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800aa00:	4811      	ldr	r0, [pc, #68]	; (800aa48 <MX_UART7_Init+0x94>)
 800aa02:	f00d f835 	bl	8017a70 <HAL_UART_Init>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <MX_UART7_Init+0x5c>
  {
    Error_Handler();
 800aa0c:	f7fe fe8e 	bl	800972c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aa10:	2100      	movs	r1, #0
 800aa12:	480d      	ldr	r0, [pc, #52]	; (800aa48 <MX_UART7_Init+0x94>)
 800aa14:	f00e fb06 	bl	8019024 <HAL_UARTEx_SetTxFifoThreshold>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <MX_UART7_Init+0x6e>
  {
    Error_Handler();
 800aa1e:	f7fe fe85 	bl	800972c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aa22:	2100      	movs	r1, #0
 800aa24:	4808      	ldr	r0, [pc, #32]	; (800aa48 <MX_UART7_Init+0x94>)
 800aa26:	f00e fb3b 	bl	80190a0 <HAL_UARTEx_SetRxFifoThreshold>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d001      	beq.n	800aa34 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 800aa30:	f7fe fe7c 	bl	800972c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800aa34:	4804      	ldr	r0, [pc, #16]	; (800aa48 <MX_UART7_Init+0x94>)
 800aa36:	f00e fabc 	bl	8018fb2 <HAL_UARTEx_DisableFifoMode>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d001      	beq.n	800aa44 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 800aa40:	f7fe fe74 	bl	800972c <Error_Handler>
  }

}
 800aa44:	bf00      	nop
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	2400958c 	.word	0x2400958c
 800aa4c:	40007800 	.word	0x40007800
 800aa50:	000186a0 	.word	0x000186a0

0800aa54 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 800aa58:	4b22      	ldr	r3, [pc, #136]	; (800aae4 <MX_UART8_Init+0x90>)
 800aa5a:	4a23      	ldr	r2, [pc, #140]	; (800aae8 <MX_UART8_Init+0x94>)
 800aa5c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 38400;
 800aa5e:	4b21      	ldr	r3, [pc, #132]	; (800aae4 <MX_UART8_Init+0x90>)
 800aa60:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800aa64:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800aa66:	4b1f      	ldr	r3, [pc, #124]	; (800aae4 <MX_UART8_Init+0x90>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800aa6c:	4b1d      	ldr	r3, [pc, #116]	; (800aae4 <MX_UART8_Init+0x90>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800aa72:	4b1c      	ldr	r3, [pc, #112]	; (800aae4 <MX_UART8_Init+0x90>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800aa78:	4b1a      	ldr	r3, [pc, #104]	; (800aae4 <MX_UART8_Init+0x90>)
 800aa7a:	220c      	movs	r2, #12
 800aa7c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa7e:	4b19      	ldr	r3, [pc, #100]	; (800aae4 <MX_UART8_Init+0x90>)
 800aa80:	2200      	movs	r2, #0
 800aa82:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800aa84:	4b17      	ldr	r3, [pc, #92]	; (800aae4 <MX_UART8_Init+0x90>)
 800aa86:	2200      	movs	r2, #0
 800aa88:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aa8a:	4b16      	ldr	r3, [pc, #88]	; (800aae4 <MX_UART8_Init+0x90>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800aa90:	4b14      	ldr	r3, [pc, #80]	; (800aae4 <MX_UART8_Init+0x90>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aa96:	4b13      	ldr	r3, [pc, #76]	; (800aae4 <MX_UART8_Init+0x90>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800aa9c:	4811      	ldr	r0, [pc, #68]	; (800aae4 <MX_UART8_Init+0x90>)
 800aa9e:	f00c ffe7 	bl	8017a70 <HAL_UART_Init>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800aaa8:	f7fe fe40 	bl	800972c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aaac:	2100      	movs	r1, #0
 800aaae:	480d      	ldr	r0, [pc, #52]	; (800aae4 <MX_UART8_Init+0x90>)
 800aab0:	f00e fab8 	bl	8019024 <HAL_UARTEx_SetTxFifoThreshold>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800aaba:	f7fe fe37 	bl	800972c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aabe:	2100      	movs	r1, #0
 800aac0:	4808      	ldr	r0, [pc, #32]	; (800aae4 <MX_UART8_Init+0x90>)
 800aac2:	f00e faed 	bl	80190a0 <HAL_UARTEx_SetRxFifoThreshold>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800aacc:	f7fe fe2e 	bl	800972c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800aad0:	4804      	ldr	r0, [pc, #16]	; (800aae4 <MX_UART8_Init+0x90>)
 800aad2:	f00e fa6e 	bl	8018fb2 <HAL_UARTEx_DisableFifoMode>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d001      	beq.n	800aae0 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800aadc:	f7fe fe26 	bl	800972c <Error_Handler>
  }

}
 800aae0:	bf00      	nop
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	24009794 	.word	0x24009794
 800aae8:	40007c00 	.word	0x40007c00

0800aaec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800aaf0:	4b23      	ldr	r3, [pc, #140]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800aaf2:	4a24      	ldr	r2, [pc, #144]	; (800ab84 <MX_USART2_UART_Init+0x98>)
 800aaf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800aaf6:	4b22      	ldr	r3, [pc, #136]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800aaf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800aafc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800aafe:	4b20      	ldr	r3, [pc, #128]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ab04:	4b1e      	ldr	r3, [pc, #120]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800ab06:	2200      	movs	r2, #0
 800ab08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ab0a:	4b1d      	ldr	r3, [pc, #116]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ab10:	4b1b      	ldr	r3, [pc, #108]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800ab12:	220c      	movs	r2, #12
 800ab14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800ab16:	4b1a      	ldr	r3, [pc, #104]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800ab18:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ab1c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab1e:	4b18      	ldr	r3, [pc, #96]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800ab20:	2200      	movs	r2, #0
 800ab22:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ab24:	4b16      	ldr	r3, [pc, #88]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ab2a:	4b15      	ldr	r3, [pc, #84]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ab30:	4b13      	ldr	r3, [pc, #76]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ab36:	4812      	ldr	r0, [pc, #72]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800ab38:	f00c ff9a 	bl	8017a70 <HAL_UART_Init>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d001      	beq.n	800ab46 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800ab42:	f7fe fdf3 	bl	800972c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ab46:	2100      	movs	r1, #0
 800ab48:	480d      	ldr	r0, [pc, #52]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800ab4a:	f00e fa6b 	bl	8019024 <HAL_UARTEx_SetTxFifoThreshold>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d001      	beq.n	800ab58 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800ab54:	f7fe fdea 	bl	800972c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ab58:	2100      	movs	r1, #0
 800ab5a:	4809      	ldr	r0, [pc, #36]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800ab5c:	f00e faa0 	bl	80190a0 <HAL_UARTEx_SetRxFifoThreshold>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800ab66:	f7fe fde1 	bl	800972c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800ab6a:	4805      	ldr	r0, [pc, #20]	; (800ab80 <MX_USART2_UART_Init+0x94>)
 800ab6c:	f00e fa21 	bl	8018fb2 <HAL_UARTEx_DisableFifoMode>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800ab76:	f7fe fdd9 	bl	800972c <Error_Handler>
  }

}
 800ab7a:	bf00      	nop
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	24009820 	.word	0x24009820
 800ab84:	40004400 	.word	0x40004400

0800ab88 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800ab8c:	4b22      	ldr	r3, [pc, #136]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800ab8e:	4a23      	ldr	r2, [pc, #140]	; (800ac1c <MX_USART3_UART_Init+0x94>)
 800ab90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800ab92:	4b21      	ldr	r3, [pc, #132]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800ab94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ab98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ab9a:	4b1f      	ldr	r3, [pc, #124]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800aba0:	4b1d      	ldr	r3, [pc, #116]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800aba6:	4b1c      	ldr	r3, [pc, #112]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800abac:	4b1a      	ldr	r3, [pc, #104]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800abae:	220c      	movs	r2, #12
 800abb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800abb2:	4b19      	ldr	r3, [pc, #100]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800abb8:	4b17      	ldr	r3, [pc, #92]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800abba:	2200      	movs	r2, #0
 800abbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800abbe:	4b16      	ldr	r3, [pc, #88]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800abc4:	4b14      	ldr	r3, [pc, #80]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800abc6:	2200      	movs	r2, #0
 800abc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800abca:	4b13      	ldr	r3, [pc, #76]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800abcc:	2200      	movs	r2, #0
 800abce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800abd0:	4811      	ldr	r0, [pc, #68]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800abd2:	f00c ff4d 	bl	8017a70 <HAL_UART_Init>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d001      	beq.n	800abe0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800abdc:	f7fe fda6 	bl	800972c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800abe0:	2100      	movs	r1, #0
 800abe2:	480d      	ldr	r0, [pc, #52]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800abe4:	f00e fa1e 	bl	8019024 <HAL_UARTEx_SetTxFifoThreshold>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800abee:	f7fe fd9d 	bl	800972c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800abf2:	2100      	movs	r1, #0
 800abf4:	4808      	ldr	r0, [pc, #32]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800abf6:	f00e fa53 	bl	80190a0 <HAL_UARTEx_SetRxFifoThreshold>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800ac00:	f7fe fd94 	bl	800972c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800ac04:	4804      	ldr	r0, [pc, #16]	; (800ac18 <MX_USART3_UART_Init+0x90>)
 800ac06:	f00e f9d4 	bl	8018fb2 <HAL_UARTEx_DisableFifoMode>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800ac10:	f7fe fd8c 	bl	800972c <Error_Handler>
  }

}
 800ac14:	bf00      	nop
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	24009618 	.word	0x24009618
 800ac1c:	40004800 	.word	0x40004800

0800ac20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b090      	sub	sp, #64	; 0x40
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	601a      	str	r2, [r3, #0]
 800ac30:	605a      	str	r2, [r3, #4]
 800ac32:	609a      	str	r2, [r3, #8]
 800ac34:	60da      	str	r2, [r3, #12]
 800ac36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4aae      	ldr	r2, [pc, #696]	; (800aef8 <HAL_UART_MspInit+0x2d8>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d165      	bne.n	800ad0e <HAL_UART_MspInit+0xee>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800ac42:	4bae      	ldr	r3, [pc, #696]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ac44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ac48:	4aac      	ldr	r2, [pc, #688]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ac4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ac52:	4baa      	ldr	r3, [pc, #680]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ac54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ac58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ac5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ac60:	4ba6      	ldr	r3, [pc, #664]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ac62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac66:	4aa5      	ldr	r2, [pc, #660]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ac68:	f043 0310 	orr.w	r3, r3, #16
 800ac6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ac70:	4ba2      	ldr	r3, [pc, #648]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ac72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ac76:	f003 0310 	and.w	r3, r3, #16
 800ac7a:	627b      	str	r3, [r7, #36]	; 0x24
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = SBUS_RX_Pin|SBUS_TX_Pin;
 800ac7e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800ac82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac84:	2302      	movs	r3, #2
 800ac86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800ac90:	2307      	movs	r3, #7
 800ac92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ac94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac98:	4619      	mov	r1, r3
 800ac9a:	4899      	ldr	r0, [pc, #612]	; (800af00 <HAL_UART_MspInit+0x2e0>)
 800ac9c:	f003 fde6 	bl	800e86c <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream1;
 800aca0:	4b98      	ldr	r3, [pc, #608]	; (800af04 <HAL_UART_MspInit+0x2e4>)
 800aca2:	4a99      	ldr	r2, [pc, #612]	; (800af08 <HAL_UART_MspInit+0x2e8>)
 800aca4:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 800aca6:	4b97      	ldr	r3, [pc, #604]	; (800af04 <HAL_UART_MspInit+0x2e4>)
 800aca8:	224f      	movs	r2, #79	; 0x4f
 800acaa:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800acac:	4b95      	ldr	r3, [pc, #596]	; (800af04 <HAL_UART_MspInit+0x2e4>)
 800acae:	2200      	movs	r2, #0
 800acb0:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800acb2:	4b94      	ldr	r3, [pc, #592]	; (800af04 <HAL_UART_MspInit+0x2e4>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800acb8:	4b92      	ldr	r3, [pc, #584]	; (800af04 <HAL_UART_MspInit+0x2e4>)
 800acba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800acbe:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800acc0:	4b90      	ldr	r3, [pc, #576]	; (800af04 <HAL_UART_MspInit+0x2e4>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800acc6:	4b8f      	ldr	r3, [pc, #572]	; (800af04 <HAL_UART_MspInit+0x2e4>)
 800acc8:	2200      	movs	r2, #0
 800acca:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 800accc:	4b8d      	ldr	r3, [pc, #564]	; (800af04 <HAL_UART_MspInit+0x2e4>)
 800acce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acd2:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800acd4:	4b8b      	ldr	r3, [pc, #556]	; (800af04 <HAL_UART_MspInit+0x2e4>)
 800acd6:	2200      	movs	r2, #0
 800acd8:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800acda:	4b8a      	ldr	r3, [pc, #552]	; (800af04 <HAL_UART_MspInit+0x2e4>)
 800acdc:	2200      	movs	r2, #0
 800acde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 800ace0:	4888      	ldr	r0, [pc, #544]	; (800af04 <HAL_UART_MspInit+0x2e4>)
 800ace2:	f001 fa8d 	bl	800c200 <HAL_DMA_Init>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d001      	beq.n	800acf0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800acec:	f7fe fd1e 	bl	800972c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a84      	ldr	r2, [pc, #528]	; (800af04 <HAL_UART_MspInit+0x2e4>)
 800acf4:	679a      	str	r2, [r3, #120]	; 0x78
 800acf6:	4a83      	ldr	r2, [pc, #524]	; (800af04 <HAL_UART_MspInit+0x2e4>)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 10, 0);
 800acfc:	2200      	movs	r2, #0
 800acfe:	210a      	movs	r1, #10
 800ad00:	2052      	movs	r0, #82	; 0x52
 800ad02:	f001 fa55 	bl	800c1b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800ad06:	2052      	movs	r0, #82	; 0x52
 800ad08:	f001 fa6c 	bl	800c1e4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800ad0c:	e0f0      	b.n	800aef0 <HAL_UART_MspInit+0x2d0>
  else if(uartHandle->Instance==UART8)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a7e      	ldr	r2, [pc, #504]	; (800af0c <HAL_UART_MspInit+0x2ec>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d164      	bne.n	800ade2 <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_UART8_CLK_ENABLE();
 800ad18:	4b78      	ldr	r3, [pc, #480]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ad1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ad1e:	4a77      	ldr	r2, [pc, #476]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ad20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ad28:	4b74      	ldr	r3, [pc, #464]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ad2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ad2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad32:	623b      	str	r3, [r7, #32]
 800ad34:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ad36:	4b71      	ldr	r3, [pc, #452]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ad38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad3c:	4a6f      	ldr	r2, [pc, #444]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ad3e:	f043 0310 	orr.w	r3, r3, #16
 800ad42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ad46:	4b6d      	ldr	r3, [pc, #436]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ad48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ad4c:	f003 0310 	and.w	r3, r3, #16
 800ad50:	61fb      	str	r3, [r7, #28]
 800ad52:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 800ad54:	2303      	movs	r3, #3
 800ad56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad58:	2302      	movs	r3, #2
 800ad5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad60:	2300      	movs	r3, #0
 800ad62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800ad64:	2308      	movs	r3, #8
 800ad66:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ad68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4864      	ldr	r0, [pc, #400]	; (800af00 <HAL_UART_MspInit+0x2e0>)
 800ad70:	f003 fd7c 	bl	800e86c <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream0;
 800ad74:	4b66      	ldr	r3, [pc, #408]	; (800af10 <HAL_UART_MspInit+0x2f0>)
 800ad76:	4a67      	ldr	r2, [pc, #412]	; (800af14 <HAL_UART_MspInit+0x2f4>)
 800ad78:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800ad7a:	4b65      	ldr	r3, [pc, #404]	; (800af10 <HAL_UART_MspInit+0x2f0>)
 800ad7c:	2251      	movs	r2, #81	; 0x51
 800ad7e:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ad80:	4b63      	ldr	r3, [pc, #396]	; (800af10 <HAL_UART_MspInit+0x2f0>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ad86:	4b62      	ldr	r3, [pc, #392]	; (800af10 <HAL_UART_MspInit+0x2f0>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ad8c:	4b60      	ldr	r3, [pc, #384]	; (800af10 <HAL_UART_MspInit+0x2f0>)
 800ad8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad92:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad94:	4b5e      	ldr	r3, [pc, #376]	; (800af10 <HAL_UART_MspInit+0x2f0>)
 800ad96:	2200      	movs	r2, #0
 800ad98:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad9a:	4b5d      	ldr	r3, [pc, #372]	; (800af10 <HAL_UART_MspInit+0x2f0>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 800ada0:	4b5b      	ldr	r3, [pc, #364]	; (800af10 <HAL_UART_MspInit+0x2f0>)
 800ada2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ada6:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ada8:	4b59      	ldr	r3, [pc, #356]	; (800af10 <HAL_UART_MspInit+0x2f0>)
 800adaa:	2200      	movs	r2, #0
 800adac:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800adae:	4b58      	ldr	r3, [pc, #352]	; (800af10 <HAL_UART_MspInit+0x2f0>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800adb4:	4856      	ldr	r0, [pc, #344]	; (800af10 <HAL_UART_MspInit+0x2f0>)
 800adb6:	f001 fa23 	bl	800c200 <HAL_DMA_Init>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d001      	beq.n	800adc4 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 800adc0:	f7fe fcb4 	bl	800972c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a52      	ldr	r2, [pc, #328]	; (800af10 <HAL_UART_MspInit+0x2f0>)
 800adc8:	679a      	str	r2, [r3, #120]	; 0x78
 800adca:	4a51      	ldr	r2, [pc, #324]	; (800af10 <HAL_UART_MspInit+0x2f0>)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 10, 0);
 800add0:	2200      	movs	r2, #0
 800add2:	210a      	movs	r1, #10
 800add4:	2053      	movs	r0, #83	; 0x53
 800add6:	f001 f9eb 	bl	800c1b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800adda:	2053      	movs	r0, #83	; 0x53
 800addc:	f001 fa02 	bl	800c1e4 <HAL_NVIC_EnableIRQ>
}
 800ade0:	e086      	b.n	800aef0 <HAL_UART_MspInit+0x2d0>
  else if(uartHandle->Instance==USART2)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a4c      	ldr	r2, [pc, #304]	; (800af18 <HAL_UART_MspInit+0x2f8>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d14d      	bne.n	800ae88 <HAL_UART_MspInit+0x268>
    __HAL_RCC_USART2_CLK_ENABLE();
 800adec:	4b43      	ldr	r3, [pc, #268]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800adee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800adf2:	4a42      	ldr	r2, [pc, #264]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800adf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adf8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800adfc:	4b3f      	ldr	r3, [pc, #252]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800adfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ae02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae06:	61bb      	str	r3, [r7, #24]
 800ae08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae0a:	4b3c      	ldr	r3, [pc, #240]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ae0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae10:	4a3a      	ldr	r2, [pc, #232]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ae12:	f043 0301 	orr.w	r3, r3, #1
 800ae16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ae1a:	4b38      	ldr	r3, [pc, #224]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ae1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae20:	f003 0301 	and.w	r3, r3, #1
 800ae24:	617b      	str	r3, [r7, #20]
 800ae26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ae28:	4b34      	ldr	r3, [pc, #208]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ae2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae2e:	4a33      	ldr	r2, [pc, #204]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ae30:	f043 0308 	orr.w	r3, r3, #8
 800ae34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ae38:	4b30      	ldr	r3, [pc, #192]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ae3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ae3e:	f003 0308 	and.w	r3, r3, #8
 800ae42:	613b      	str	r3, [r7, #16]
 800ae44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TELEM_CTS_Pin|TELEM_RX_Pin;
 800ae46:	2309      	movs	r3, #9
 800ae48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae52:	2300      	movs	r3, #0
 800ae54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ae56:	2307      	movs	r3, #7
 800ae58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae5e:	4619      	mov	r1, r3
 800ae60:	482e      	ldr	r0, [pc, #184]	; (800af1c <HAL_UART_MspInit+0x2fc>)
 800ae62:	f003 fd03 	bl	800e86c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TELEM_RTS_Pin|TELEM_TX_Pin;
 800ae66:	2330      	movs	r3, #48	; 0x30
 800ae68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae6a:	2302      	movs	r3, #2
 800ae6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae72:	2300      	movs	r3, #0
 800ae74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ae76:	2307      	movs	r3, #7
 800ae78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ae7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4827      	ldr	r0, [pc, #156]	; (800af20 <HAL_UART_MspInit+0x300>)
 800ae82:	f003 fcf3 	bl	800e86c <HAL_GPIO_Init>
}
 800ae86:	e033      	b.n	800aef0 <HAL_UART_MspInit+0x2d0>
  else if(uartHandle->Instance==USART3)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a25      	ldr	r2, [pc, #148]	; (800af24 <HAL_UART_MspInit+0x304>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d12e      	bne.n	800aef0 <HAL_UART_MspInit+0x2d0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800ae92:	4b1a      	ldr	r3, [pc, #104]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ae94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ae98:	4a18      	ldr	r2, [pc, #96]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800ae9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800aea2:	4b16      	ldr	r3, [pc, #88]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800aea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aeac:	60fb      	str	r3, [r7, #12]
 800aeae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aeb0:	4b12      	ldr	r3, [pc, #72]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800aeb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aeb6:	4a11      	ldr	r2, [pc, #68]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800aeb8:	f043 0308 	orr.w	r3, r3, #8
 800aebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aec0:	4b0e      	ldr	r3, [pc, #56]	; (800aefc <HAL_UART_MspInit+0x2dc>)
 800aec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aec6:	f003 0308 	and.w	r3, r3, #8
 800aeca:	60bb      	str	r3, [r7, #8]
 800aecc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800aece:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aed4:	2302      	movs	r3, #2
 800aed6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aed8:	2300      	movs	r3, #0
 800aeda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aedc:	2300      	movs	r3, #0
 800aede:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800aee0:	2307      	movs	r3, #7
 800aee2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aee8:	4619      	mov	r1, r3
 800aeea:	480d      	ldr	r0, [pc, #52]	; (800af20 <HAL_UART_MspInit+0x300>)
 800aeec:	f003 fcbe 	bl	800e86c <HAL_GPIO_Init>
}
 800aef0:	bf00      	nop
 800aef2:	3740      	adds	r7, #64	; 0x40
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	40007800 	.word	0x40007800
 800aefc:	58024400 	.word	0x58024400
 800af00:	58021000 	.word	0x58021000
 800af04:	240096a4 	.word	0x240096a4
 800af08:	40020028 	.word	0x40020028
 800af0c:	40007c00 	.word	0x40007c00
 800af10:	2400971c 	.word	0x2400971c
 800af14:	40020010 	.word	0x40020010
 800af18:	40004400 	.word	0x40004400
 800af1c:	58020000 	.word	0x58020000
 800af20:	58020c00 	.word	0x58020c00
 800af24:	40004800 	.word	0x40004800

0800af28 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af2c:	4b15      	ldr	r3, [pc, #84]	; (800af84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800af2e:	4a16      	ldr	r2, [pc, #88]	; (800af88 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800af30:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800af32:	4b14      	ldr	r3, [pc, #80]	; (800af84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800af34:	2209      	movs	r2, #9
 800af36:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af38:	4b12      	ldr	r3, [pc, #72]	; (800af84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800af3a:	2202      	movs	r2, #2
 800af3c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af3e:	4b11      	ldr	r3, [pc, #68]	; (800af84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800af40:	2200      	movs	r2, #0
 800af42:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af44:	4b0f      	ldr	r3, [pc, #60]	; (800af84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800af46:	2202      	movs	r2, #2
 800af48:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800af4a:	4b0e      	ldr	r3, [pc, #56]	; (800af84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800af4c:	2201      	movs	r2, #1
 800af4e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af50:	4b0c      	ldr	r3, [pc, #48]	; (800af84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800af52:	2200      	movs	r2, #0
 800af54:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af56:	4b0b      	ldr	r3, [pc, #44]	; (800af84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800af58:	2200      	movs	r2, #0
 800af5a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800af5c:	4b09      	ldr	r3, [pc, #36]	; (800af84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800af5e:	2201      	movs	r2, #1
 800af60:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800af62:	4b08      	ldr	r3, [pc, #32]	; (800af84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800af64:	2201      	movs	r2, #1
 800af66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af68:	4b06      	ldr	r3, [pc, #24]	; (800af84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af6e:	4805      	ldr	r0, [pc, #20]	; (800af84 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800af70:	f006 fac7 	bl	8011502 <HAL_PCD_Init>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800af7a:	f7fe fbd7 	bl	800972c <Error_Handler>
  }

}
 800af7e:	bf00      	nop
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	240098ac 	.word	0x240098ac
 800af88:	40080000 	.word	0x40080000

0800af8c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b08a      	sub	sp, #40	; 0x28
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af94:	f107 0314 	add.w	r3, r7, #20
 800af98:	2200      	movs	r2, #0
 800af9a:	601a      	str	r2, [r3, #0]
 800af9c:	605a      	str	r2, [r3, #4]
 800af9e:	609a      	str	r2, [r3, #8]
 800afa0:	60da      	str	r2, [r3, #12]
 800afa2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a21      	ldr	r2, [pc, #132]	; (800b030 <HAL_PCD_MspInit+0xa4>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d13b      	bne.n	800b026 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afae:	4b21      	ldr	r3, [pc, #132]	; (800b034 <HAL_PCD_MspInit+0xa8>)
 800afb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afb4:	4a1f      	ldr	r2, [pc, #124]	; (800b034 <HAL_PCD_MspInit+0xa8>)
 800afb6:	f043 0301 	orr.w	r3, r3, #1
 800afba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800afbe:	4b1d      	ldr	r3, [pc, #116]	; (800b034 <HAL_PCD_MspInit+0xa8>)
 800afc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800afc4:	f003 0301 	and.w	r3, r3, #1
 800afc8:	613b      	str	r3, [r7, #16]
 800afca:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800afcc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800afd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afd2:	2302      	movs	r3, #2
 800afd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afda:	2300      	movs	r3, #0
 800afdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800afde:	230a      	movs	r3, #10
 800afe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afe2:	f107 0314 	add.w	r3, r7, #20
 800afe6:	4619      	mov	r1, r3
 800afe8:	4813      	ldr	r0, [pc, #76]	; (800b038 <HAL_PCD_MspInit+0xac>)
 800afea:	f003 fc3f 	bl	800e86c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800afee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aff4:	2300      	movs	r3, #0
 800aff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aff8:	2300      	movs	r3, #0
 800affa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800affc:	f107 0314 	add.w	r3, r7, #20
 800b000:	4619      	mov	r1, r3
 800b002:	480d      	ldr	r0, [pc, #52]	; (800b038 <HAL_PCD_MspInit+0xac>)
 800b004:	f003 fc32 	bl	800e86c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b008:	4b0a      	ldr	r3, [pc, #40]	; (800b034 <HAL_PCD_MspInit+0xa8>)
 800b00a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b00e:	4a09      	ldr	r2, [pc, #36]	; (800b034 <HAL_PCD_MspInit+0xa8>)
 800b010:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b014:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b018:	4b06      	ldr	r3, [pc, #24]	; (800b034 <HAL_PCD_MspInit+0xa8>)
 800b01a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b01e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b022:	60fb      	str	r3, [r7, #12]
 800b024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b026:	bf00      	nop
 800b028:	3728      	adds	r7, #40	; 0x28
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	40080000 	.word	0x40080000
 800b034:	58024400 	.word	0x58024400
 800b038:	58020000 	.word	0x58020000

0800b03c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b03c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b074 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800b040:	f7fe fde6 	bl	8009c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b044:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b046:	e003      	b.n	800b050 <LoopCopyDataInit>

0800b048 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b048:	4b0b      	ldr	r3, [pc, #44]	; (800b078 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800b04a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b04c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b04e:	3104      	adds	r1, #4

0800b050 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b050:	480a      	ldr	r0, [pc, #40]	; (800b07c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800b052:	4b0b      	ldr	r3, [pc, #44]	; (800b080 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800b054:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b056:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b058:	d3f6      	bcc.n	800b048 <CopyDataInit>
  ldr  r2, =_sbss
 800b05a:	4a0a      	ldr	r2, [pc, #40]	; (800b084 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800b05c:	e002      	b.n	800b064 <LoopFillZerobss>

0800b05e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b05e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b060:	f842 3b04 	str.w	r3, [r2], #4

0800b064 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b064:	4b08      	ldr	r3, [pc, #32]	; (800b088 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800b066:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b068:	d3f9      	bcc.n	800b05e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b06a:	f017 f863 	bl	8022134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b06e:	f7fe fa1f 	bl	80094b0 <main>
  bx  lr    
 800b072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b074:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800b078:	08024130 	.word	0x08024130
  ldr  r0, =_sdata
 800b07c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800b080:	24000148 	.word	0x24000148
  ldr  r2, =_sbss
 800b084:	24000148 	.word	0x24000148
  ldr  r3, = _ebss
 800b088:	2400a168 	.word	0x2400a168

0800b08c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b08c:	e7fe      	b.n	800b08c <ADC3_IRQHandler>
	...

0800b090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b096:	2003      	movs	r0, #3
 800b098:	f001 f87f 	bl	800c19a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b09c:	f007 f98a 	bl	80123b4 <HAL_RCC_GetSysClockFreq>
 800b0a0:	4601      	mov	r1, r0
 800b0a2:	4b15      	ldr	r3, [pc, #84]	; (800b0f8 <HAL_Init+0x68>)
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	0a1b      	lsrs	r3, r3, #8
 800b0a8:	f003 030f 	and.w	r3, r3, #15
 800b0ac:	4a13      	ldr	r2, [pc, #76]	; (800b0fc <HAL_Init+0x6c>)
 800b0ae:	5cd3      	ldrb	r3, [r2, r3]
 800b0b0:	f003 031f 	and.w	r3, r3, #31
 800b0b4:	fa21 f303 	lsr.w	r3, r1, r3
 800b0b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b0ba:	4b0f      	ldr	r3, [pc, #60]	; (800b0f8 <HAL_Init+0x68>)
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	f003 030f 	and.w	r3, r3, #15
 800b0c2:	4a0e      	ldr	r2, [pc, #56]	; (800b0fc <HAL_Init+0x6c>)
 800b0c4:	5cd3      	ldrb	r3, [r2, r3]
 800b0c6:	f003 031f 	and.w	r3, r3, #31
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b0d0:	4a0b      	ldr	r2, [pc, #44]	; (800b100 <HAL_Init+0x70>)
 800b0d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b0d4:	4a0b      	ldr	r2, [pc, #44]	; (800b104 <HAL_Init+0x74>)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b0da:	2000      	movs	r0, #0
 800b0dc:	f7fe fbee 	bl	80098bc <HAL_InitTick>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	e002      	b.n	800b0f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800b0ea:	f7fe fbcd 	bl	8009888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	58024400 	.word	0x58024400
 800b0fc:	08023b80 	.word	0x08023b80
 800b100:	240000d0 	.word	0x240000d0
 800b104:	240000cc 	.word	0x240000cc

0800b108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b108:	b480      	push	{r7}
 800b10a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b10c:	4b06      	ldr	r3, [pc, #24]	; (800b128 <HAL_IncTick+0x20>)
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	461a      	mov	r2, r3
 800b112:	4b06      	ldr	r3, [pc, #24]	; (800b12c <HAL_IncTick+0x24>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4413      	add	r3, r2
 800b118:	4a04      	ldr	r2, [pc, #16]	; (800b12c <HAL_IncTick+0x24>)
 800b11a:	6013      	str	r3, [r2, #0]
}
 800b11c:	bf00      	nop
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	240000d8 	.word	0x240000d8
 800b12c:	24009cb4 	.word	0x24009cb4

0800b130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b130:	b480      	push	{r7}
 800b132:	af00      	add	r7, sp, #0
  return uwTick;
 800b134:	4b03      	ldr	r3, [pc, #12]	; (800b144 <HAL_GetTick+0x14>)
 800b136:	681b      	ldr	r3, [r3, #0]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	24009cb4 	.word	0x24009cb4

0800b148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b150:	f7ff ffee 	bl	800b130 <HAL_GetTick>
 800b154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b160:	d005      	beq.n	800b16e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b162:	4b09      	ldr	r3, [pc, #36]	; (800b188 <HAL_Delay+0x40>)
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	461a      	mov	r2, r3
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	4413      	add	r3, r2
 800b16c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b16e:	bf00      	nop
 800b170:	f7ff ffde 	bl	800b130 <HAL_GetTick>
 800b174:	4602      	mov	r2, r0
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	1ad3      	subs	r3, r2, r3
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d8f7      	bhi.n	800b170 <HAL_Delay+0x28>
  {
  }
}
 800b180:	bf00      	nop
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	240000d8 	.word	0x240000d8

0800b18c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800b18c:	b480      	push	{r7}
 800b18e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800b190:	4b03      	ldr	r3, [pc, #12]	; (800b1a0 <HAL_GetREVID+0x14>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	0c1b      	lsrs	r3, r3, #16
}
 800b196:	4618      	mov	r0, r3
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	5c001000 	.word	0x5c001000

0800b1a4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800b1ae:	4b07      	ldr	r3, [pc, #28]	; (800b1cc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800b1b0:	685a      	ldr	r2, [r3, #4]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	43db      	mvns	r3, r3
 800b1b6:	401a      	ands	r2, r3
 800b1b8:	4904      	ldr	r1, [pc, #16]	; (800b1cc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	604b      	str	r3, [r1, #4]
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr
 800b1cc:	58000400 	.word	0x58000400

0800b1d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	431a      	orrs	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	609a      	str	r2, [r3, #8]
}
 800b1ea:	bf00      	nop
 800b1ec:	370c      	adds	r7, #12
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr

0800b1f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800b1f6:	b480      	push	{r7}
 800b1f8:	b083      	sub	sp, #12
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	431a      	orrs	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	609a      	str	r2, [r3, #8]
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b238:	b480      	push	{r7}
 800b23a:	b087      	sub	sp, #28
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
 800b244:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3360      	adds	r3, #96	; 0x60
 800b24a:	461a      	mov	r2, r3
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4413      	add	r3, r2
 800b252:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	430b      	orrs	r3, r1
 800b266:	431a      	orrs	r2, r3
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800b26c:	bf00      	nop
 800b26e:	371c      	adds	r7, #28
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800b278:	b480      	push	{r7}
 800b27a:	b085      	sub	sp, #20
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	f003 031f 	and.w	r3, r3, #31
 800b292:	6879      	ldr	r1, [r7, #4]
 800b294:	fa01 f303 	lsl.w	r3, r1, r3
 800b298:	431a      	orrs	r2, r3
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	611a      	str	r2, [r3, #16]
}
 800b29e:	bf00      	nop
 800b2a0:	3714      	adds	r7, #20
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr

0800b2aa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800b2aa:	b480      	push	{r7}
 800b2ac:	b087      	sub	sp, #28
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	60f8      	str	r0, [r7, #12]
 800b2b2:	60b9      	str	r1, [r7, #8]
 800b2b4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	3360      	adds	r3, #96	; 0x60
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	431a      	orrs	r2, r3
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	601a      	str	r2, [r3, #0]
  }
}
 800b2d4:	bf00      	nop
 800b2d6:	371c      	adds	r7, #28
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	3330      	adds	r3, #48	; 0x30
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	0a1b      	lsrs	r3, r3, #8
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	f003 030c 	and.w	r3, r3, #12
 800b2fc:	4413      	add	r3, r2
 800b2fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f003 031f 	and.w	r3, r3, #31
 800b30a:	211f      	movs	r1, #31
 800b30c:	fa01 f303 	lsl.w	r3, r1, r3
 800b310:	43db      	mvns	r3, r3
 800b312:	401a      	ands	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	0e9b      	lsrs	r3, r3, #26
 800b318:	f003 011f 	and.w	r1, r3, #31
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	f003 031f 	and.w	r3, r3, #31
 800b322:	fa01 f303 	lsl.w	r3, r1, r3
 800b326:	431a      	orrs	r2, r3
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b32c:	bf00      	nop
 800b32e:	371c      	adds	r7, #28
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b338:	b480      	push	{r7}
 800b33a:	b087      	sub	sp, #28
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	3314      	adds	r3, #20
 800b348:	461a      	mov	r2, r3
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	0e5b      	lsrs	r3, r3, #25
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	f003 0304 	and.w	r3, r3, #4
 800b354:	4413      	add	r3, r2
 800b356:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	0d1b      	lsrs	r3, r3, #20
 800b360:	f003 031f 	and.w	r3, r3, #31
 800b364:	2107      	movs	r1, #7
 800b366:	fa01 f303 	lsl.w	r3, r1, r3
 800b36a:	43db      	mvns	r3, r3
 800b36c:	401a      	ands	r2, r3
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	0d1b      	lsrs	r3, r3, #20
 800b372:	f003 031f 	and.w	r3, r3, #31
 800b376:	6879      	ldr	r1, [r7, #4]
 800b378:	fa01 f303 	lsl.w	r3, r1, r3
 800b37c:	431a      	orrs	r2, r3
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b382:	bf00      	nop
 800b384:	371c      	adds	r7, #28
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
	...

0800b390 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3a8:	43db      	mvns	r3, r3
 800b3aa:	401a      	ands	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f003 0318 	and.w	r3, r3, #24
 800b3b2:	4908      	ldr	r1, [pc, #32]	; (800b3d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 800b3b4:	40d9      	lsrs	r1, r3
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	400b      	ands	r3, r1
 800b3ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3be:	431a      	orrs	r2, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800b3c6:	bf00      	nop
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	000fffff 	.word	0x000fffff

0800b3d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	689a      	ldr	r2, [r3, #8]
 800b3e4:	4b04      	ldr	r3, [pc, #16]	; (800b3f8 <LL_ADC_DisableDeepPowerDown+0x20>)
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	6093      	str	r3, [r2, #8]
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr
 800b3f8:	5fffffc0 	.word	0x5fffffc0

0800b3fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b40c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b410:	d101      	bne.n	800b416 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b412:	2301      	movs	r3, #1
 800b414:	e000      	b.n	800b418 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	689a      	ldr	r2, [r3, #8]
 800b430:	4b05      	ldr	r3, [pc, #20]	; (800b448 <LL_ADC_EnableInternalRegulator+0x24>)
 800b432:	4013      	ands	r3, r2
 800b434:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	6fffffc0 	.word	0x6fffffc0

0800b44c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b45c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b460:	d101      	bne.n	800b466 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b462:	2301      	movs	r3, #1
 800b464:	e000      	b.n	800b468 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	f003 0301 	and.w	r3, r3, #1
 800b484:	2b01      	cmp	r3, #1
 800b486:	d101      	bne.n	800b48c <LL_ADC_IsEnabled+0x18>
 800b488:	2301      	movs	r3, #1
 800b48a:	e000      	b.n	800b48e <LL_ADC_IsEnabled+0x1a>
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b49a:	b480      	push	{r7}
 800b49c:	b083      	sub	sp, #12
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	f003 0304 	and.w	r3, r3, #4
 800b4aa:	2b04      	cmp	r3, #4
 800b4ac:	d101      	bne.n	800b4b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e000      	b.n	800b4b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	370c      	adds	r7, #12
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr

0800b4c0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	f003 0308 	and.w	r3, r3, #8
 800b4d0:	2b08      	cmp	r3, #8
 800b4d2:	d101      	bne.n	800b4d8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e000      	b.n	800b4da <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
	...

0800b4e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b4e8:	b590      	push	{r4, r7, lr}
 800b4ea:	b089      	sub	sp, #36	; 0x24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e18e      	b.n	800b820 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d109      	bne.n	800b524 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7fd fc35 	bl	8008d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4618      	mov	r0, r3
 800b52a:	f7ff ff67 	bl	800b3fc <LL_ADC_IsDeepPowerDownEnabled>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d004      	beq.n	800b53e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4618      	mov	r0, r3
 800b53a:	f7ff ff4d 	bl	800b3d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4618      	mov	r0, r3
 800b544:	f7ff ff82 	bl	800b44c <LL_ADC_IsInternalRegulatorEnabled>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d113      	bne.n	800b576 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4618      	mov	r0, r3
 800b554:	f7ff ff66 	bl	800b424 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800b558:	4b9a      	ldr	r3, [pc, #616]	; (800b7c4 <HAL_ADC_Init+0x2dc>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	099b      	lsrs	r3, r3, #6
 800b55e:	4a9a      	ldr	r2, [pc, #616]	; (800b7c8 <HAL_ADC_Init+0x2e0>)
 800b560:	fba2 2303 	umull	r2, r3, r2, r3
 800b564:	099b      	lsrs	r3, r3, #6
 800b566:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b568:	e002      	b.n	800b570 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	3b01      	subs	r3, #1
 800b56e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d1f9      	bne.n	800b56a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff ff66 	bl	800b44c <LL_ADC_IsInternalRegulatorEnabled>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10d      	bne.n	800b5a2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b58a:	f043 0210 	orr.w	r2, r3, #16
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b596:	f043 0201 	orr.w	r2, r3, #1
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7ff ff77 	bl	800b49a <LL_ADC_REG_IsConversionOngoing>
 800b5ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b2:	f003 0310 	and.w	r3, r3, #16
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f040 8129 	bne.w	800b80e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f040 8125 	bne.w	800b80e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b5cc:	f043 0202 	orr.w	r2, r3, #2
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7ff ff4b 	bl	800b474 <LL_ADC_IsEnabled>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d136      	bne.n	800b652 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a78      	ldr	r2, [pc, #480]	; (800b7cc <HAL_ADC_Init+0x2e4>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d004      	beq.n	800b5f8 <HAL_ADC_Init+0x110>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a77      	ldr	r2, [pc, #476]	; (800b7d0 <HAL_ADC_Init+0x2e8>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d10e      	bne.n	800b616 <HAL_ADC_Init+0x12e>
 800b5f8:	4874      	ldr	r0, [pc, #464]	; (800b7cc <HAL_ADC_Init+0x2e4>)
 800b5fa:	f7ff ff3b 	bl	800b474 <LL_ADC_IsEnabled>
 800b5fe:	4604      	mov	r4, r0
 800b600:	4873      	ldr	r0, [pc, #460]	; (800b7d0 <HAL_ADC_Init+0x2e8>)
 800b602:	f7ff ff37 	bl	800b474 <LL_ADC_IsEnabled>
 800b606:	4603      	mov	r3, r0
 800b608:	4323      	orrs	r3, r4
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	bf0c      	ite	eq
 800b60e:	2301      	moveq	r3, #1
 800b610:	2300      	movne	r3, #0
 800b612:	b2db      	uxtb	r3, r3
 800b614:	e008      	b.n	800b628 <HAL_ADC_Init+0x140>
 800b616:	486f      	ldr	r0, [pc, #444]	; (800b7d4 <HAL_ADC_Init+0x2ec>)
 800b618:	f7ff ff2c 	bl	800b474 <LL_ADC_IsEnabled>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	bf0c      	ite	eq
 800b622:	2301      	moveq	r3, #1
 800b624:	2300      	movne	r3, #0
 800b626:	b2db      	uxtb	r3, r3
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d012      	beq.n	800b652 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a66      	ldr	r2, [pc, #408]	; (800b7cc <HAL_ADC_Init+0x2e4>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d004      	beq.n	800b640 <HAL_ADC_Init+0x158>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a65      	ldr	r2, [pc, #404]	; (800b7d0 <HAL_ADC_Init+0x2e8>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d101      	bne.n	800b644 <HAL_ADC_Init+0x15c>
 800b640:	4a65      	ldr	r2, [pc, #404]	; (800b7d8 <HAL_ADC_Init+0x2f0>)
 800b642:	e000      	b.n	800b646 <HAL_ADC_Init+0x15e>
 800b644:	4a65      	ldr	r2, [pc, #404]	; (800b7dc <HAL_ADC_Init+0x2f4>)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	4619      	mov	r1, r3
 800b64c:	4610      	mov	r0, r2
 800b64e:	f7ff fdbf 	bl	800b1d0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800b652:	f7ff fd9b 	bl	800b18c <HAL_GetREVID>
 800b656:	4602      	mov	r2, r0
 800b658:	f241 0303 	movw	r3, #4099	; 0x1003
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d914      	bls.n	800b68a <HAL_ADC_Init+0x1a2>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	2b10      	cmp	r3, #16
 800b666:	d110      	bne.n	800b68a <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	7d5b      	ldrb	r3, [r3, #21]
 800b66c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800b672:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800b678:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	7f1b      	ldrb	r3, [r3, #28]
 800b67e:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800b680:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800b682:	f043 030c 	orr.w	r3, r3, #12
 800b686:	61bb      	str	r3, [r7, #24]
 800b688:	e00d      	b.n	800b6a6 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	7d5b      	ldrb	r3, [r3, #21]
 800b68e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800b694:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800b69a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	7f1b      	ldrb	r3, [r3, #28]
 800b6a0:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	7f1b      	ldrb	r3, [r3, #28]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d106      	bne.n	800b6bc <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	045b      	lsls	r3, r3, #17
 800b6b6:	69ba      	ldr	r2, [r7, #24]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d009      	beq.n	800b6d8 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b6d2:	69ba      	ldr	r2, [r7, #24]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68da      	ldr	r2, [r3, #12]
 800b6de:	4b40      	ldr	r3, [pc, #256]	; (800b7e0 <HAL_ADC_Init+0x2f8>)
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	6812      	ldr	r2, [r2, #0]
 800b6e6:	69b9      	ldr	r1, [r7, #24]
 800b6e8:	430b      	orrs	r3, r1
 800b6ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7ff fed2 	bl	800b49a <LL_ADC_REG_IsConversionOngoing>
 800b6f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7ff fedf 	bl	800b4c0 <LL_ADC_INJ_IsConversionOngoing>
 800b702:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d14a      	bne.n	800b7a0 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d147      	bne.n	800b7a0 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	7d1b      	ldrb	r3, [r3, #20]
 800b714:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800b71a:	4313      	orrs	r3, r2
 800b71c:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	68da      	ldr	r2, [r3, #12]
 800b724:	4b2f      	ldr	r3, [pc, #188]	; (800b7e4 <HAL_ADC_Init+0x2fc>)
 800b726:	4013      	ands	r3, r2
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	6812      	ldr	r2, [r2, #0]
 800b72c:	69b9      	ldr	r1, [r7, #24]
 800b72e:	430b      	orrs	r3, r1
 800b730:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d11b      	bne.n	800b774 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b740:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	691a      	ldr	r2, [r3, #16]
 800b748:	4b27      	ldr	r3, [pc, #156]	; (800b7e8 <HAL_ADC_Init+0x300>)
 800b74a:	4013      	ands	r3, r2
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b750:	3a01      	subs	r2, #1
 800b752:	0411      	lsls	r1, r2, #16
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b758:	4311      	orrs	r1, r2
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b75e:	4311      	orrs	r1, r2
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b764:	430a      	orrs	r2, r1
 800b766:	431a      	orrs	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f042 0201 	orr.w	r2, r2, #1
 800b770:	611a      	str	r2, [r3, #16]
 800b772:	e007      	b.n	800b784 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	691a      	ldr	r2, [r3, #16]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f022 0201 	bic.w	r2, r2, #1
 800b782:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	430a      	orrs	r2, r1
 800b798:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 fb58 	bl	800be50 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d121      	bne.n	800b7ec <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ae:	f023 010f 	bic.w	r1, r3, #15
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	1e5a      	subs	r2, r3, #1
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	430a      	orrs	r2, r1
 800b7be:	631a      	str	r2, [r3, #48]	; 0x30
 800b7c0:	e01c      	b.n	800b7fc <HAL_ADC_Init+0x314>
 800b7c2:	bf00      	nop
 800b7c4:	240000cc 	.word	0x240000cc
 800b7c8:	053e2d63 	.word	0x053e2d63
 800b7cc:	40022000 	.word	0x40022000
 800b7d0:	40022100 	.word	0x40022100
 800b7d4:	58026000 	.word	0x58026000
 800b7d8:	40022300 	.word	0x40022300
 800b7dc:	58026300 	.word	0x58026300
 800b7e0:	fff0c003 	.word	0xfff0c003
 800b7e4:	ffffbffc 	.word	0xffffbffc
 800b7e8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f022 020f 	bic.w	r2, r2, #15
 800b7fa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b800:	f023 0303 	bic.w	r3, r3, #3
 800b804:	f043 0201 	orr.w	r2, r3, #1
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	655a      	str	r2, [r3, #84]	; 0x54
 800b80c:	e007      	b.n	800b81e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b812:	f043 0210 	orr.w	r2, r3, #16
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b81e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3724      	adds	r7, #36	; 0x24
 800b824:	46bd      	mov	sp, r7
 800b826:	bd90      	pop	{r4, r7, pc}

0800b828 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800b828:	b590      	push	{r4, r7, lr}
 800b82a:	b099      	sub	sp, #100	; 0x64
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	4a99      	ldr	r2, [pc, #612]	; (800baa8 <HAL_ADC_ConfigChannel+0x280>)
 800b842:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d101      	bne.n	800b852 <HAL_ADC_ConfigChannel+0x2a>
 800b84e:	2302      	movs	r3, #2
 800b850:	e2e6      	b.n	800be20 <HAL_ADC_ConfigChannel+0x5f8>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2201      	movs	r2, #1
 800b856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4618      	mov	r0, r3
 800b860:	f7ff fe1b 	bl	800b49a <LL_ADC_REG_IsConversionOngoing>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	f040 82cb 	bne.w	800be02 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b874:	2b00      	cmp	r3, #0
 800b876:	d108      	bne.n	800b88a <HAL_ADC_ConfigChannel+0x62>
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	0e9b      	lsrs	r3, r3, #26
 800b87e:	f003 031f 	and.w	r3, r3, #31
 800b882:	2201      	movs	r2, #1
 800b884:	fa02 f303 	lsl.w	r3, r2, r3
 800b888:	e00f      	b.n	800b8aa <HAL_ADC_ConfigChannel+0x82>
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b892:	fa93 f3a3 	rbit	r3, r3
 800b896:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b89a:	fab3 f383 	clz	r3, r3
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	f003 031f 	and.w	r3, r3, #31
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	6812      	ldr	r2, [r2, #0]
 800b8ae:	69d1      	ldr	r1, [r2, #28]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	6812      	ldr	r2, [r2, #0]
 800b8b4:	430b      	orrs	r3, r1
 800b8b6:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6818      	ldr	r0, [r3, #0]
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	6859      	ldr	r1, [r3, #4]
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	f7ff fd0b 	bl	800b2e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7ff fde3 	bl	800b49a <LL_ADC_REG_IsConversionOngoing>
 800b8d4:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7ff fdf0 	bl	800b4c0 <LL_ADC_INJ_IsConversionOngoing>
 800b8e0:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b8e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f040 80b3 	bne.w	800ba50 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b8ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f040 80af 	bne.w	800ba50 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6818      	ldr	r0, [r3, #0]
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	6819      	ldr	r1, [r3, #0]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	461a      	mov	r2, r3
 800b900:	f7ff fd1a 	bl	800b338 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800b904:	4b69      	ldr	r3, [pc, #420]	; (800baac <HAL_ADC_ConfigChannel+0x284>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b90c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b910:	d10b      	bne.n	800b92a <HAL_ADC_ConfigChannel+0x102>
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	695a      	ldr	r2, [r3, #20]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	089b      	lsrs	r3, r3, #2
 800b91e:	f003 0307 	and.w	r3, r3, #7
 800b922:	005b      	lsls	r3, r3, #1
 800b924:	fa02 f303 	lsl.w	r3, r2, r3
 800b928:	e01d      	b.n	800b966 <HAL_ADC_ConfigChannel+0x13e>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	f003 0310 	and.w	r3, r3, #16
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10b      	bne.n	800b950 <HAL_ADC_ConfigChannel+0x128>
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	695a      	ldr	r2, [r3, #20]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	089b      	lsrs	r3, r3, #2
 800b944:	f003 0307 	and.w	r3, r3, #7
 800b948:	005b      	lsls	r3, r3, #1
 800b94a:	fa02 f303 	lsl.w	r3, r2, r3
 800b94e:	e00a      	b.n	800b966 <HAL_ADC_ConfigChannel+0x13e>
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	695a      	ldr	r2, [r3, #20]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	089b      	lsrs	r3, r3, #2
 800b95c:	f003 0304 	and.w	r3, r3, #4
 800b960:	005b      	lsls	r3, r3, #1
 800b962:	fa02 f303 	lsl.w	r3, r2, r3
 800b966:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	2b04      	cmp	r3, #4
 800b96e:	d027      	beq.n	800b9c0 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6818      	ldr	r0, [r3, #0]
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	6919      	ldr	r1, [r3, #16]
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b97e:	f7ff fc5b 	bl	800b238 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6818      	ldr	r0, [r3, #0]
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	6919      	ldr	r1, [r3, #16]
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	7e5b      	ldrb	r3, [r3, #25]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d102      	bne.n	800b998 <HAL_ADC_ConfigChannel+0x170>
 800b992:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b996:	e000      	b.n	800b99a <HAL_ADC_ConfigChannel+0x172>
 800b998:	2300      	movs	r3, #0
 800b99a:	461a      	mov	r2, r3
 800b99c:	f7ff fc85 	bl	800b2aa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6818      	ldr	r0, [r3, #0]
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	6919      	ldr	r1, [r3, #16]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	7e1b      	ldrb	r3, [r3, #24]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d102      	bne.n	800b9b6 <HAL_ADC_ConfigChannel+0x18e>
 800b9b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b9b4:	e000      	b.n	800b9b8 <HAL_ADC_ConfigChannel+0x190>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	f7ff fc5d 	bl	800b278 <LL_ADC_SetDataRightShift>
 800b9be:	e047      	b.n	800ba50 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	069b      	lsls	r3, r3, #26
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d107      	bne.n	800b9e4 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b9e2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	069b      	lsls	r3, r3, #26
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d107      	bne.n	800ba08 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ba06:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	069b      	lsls	r3, r3, #26
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d107      	bne.n	800ba2c <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ba2a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	069b      	lsls	r3, r3, #26
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d107      	bne.n	800ba50 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ba4e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7ff fd0d 	bl	800b474 <LL_ADC_IsEnabled>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f040 81d9 	bne.w	800be14 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6818      	ldr	r0, [r3, #0]
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	6819      	ldr	r1, [r3, #0]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	461a      	mov	r2, r3
 800ba70:	f7ff fc8e 	bl	800b390 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	4a0b      	ldr	r2, [pc, #44]	; (800baa8 <HAL_ADC_ConfigChannel+0x280>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	f040 8101 	bne.w	800bc82 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10f      	bne.n	800bab0 <HAL_ADC_ConfigChannel+0x288>
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	0e9b      	lsrs	r3, r3, #26
 800ba96:	3301      	adds	r3, #1
 800ba98:	f003 031f 	and.w	r3, r3, #31
 800ba9c:	2b09      	cmp	r3, #9
 800ba9e:	bf94      	ite	ls
 800baa0:	2301      	movls	r3, #1
 800baa2:	2300      	movhi	r3, #0
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	e016      	b.n	800bad6 <HAL_ADC_ConfigChannel+0x2ae>
 800baa8:	47ff0000 	.word	0x47ff0000
 800baac:	5c001000 	.word	0x5c001000
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab8:	fa93 f3a3 	rbit	r3, r3
 800babc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800babe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bac0:	fab3 f383 	clz	r3, r3
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	3301      	adds	r3, #1
 800bac8:	f003 031f 	and.w	r3, r3, #31
 800bacc:	2b09      	cmp	r3, #9
 800bace:	bf94      	ite	ls
 800bad0:	2301      	movls	r3, #1
 800bad2:	2300      	movhi	r3, #0
 800bad4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d064      	beq.n	800bba4 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d107      	bne.n	800baf6 <HAL_ADC_ConfigChannel+0x2ce>
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	0e9b      	lsrs	r3, r3, #26
 800baec:	3301      	adds	r3, #1
 800baee:	069b      	lsls	r3, r3, #26
 800baf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800baf4:	e00e      	b.n	800bb14 <HAL_ADC_ConfigChannel+0x2ec>
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafe:	fa93 f3a3 	rbit	r3, r3
 800bb02:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800bb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb06:	fab3 f383 	clz	r3, r3
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	069b      	lsls	r3, r3, #26
 800bb10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d109      	bne.n	800bb34 <HAL_ADC_ConfigChannel+0x30c>
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	0e9b      	lsrs	r3, r3, #26
 800bb26:	3301      	adds	r3, #1
 800bb28:	f003 031f 	and.w	r3, r3, #31
 800bb2c:	2101      	movs	r1, #1
 800bb2e:	fa01 f303 	lsl.w	r3, r1, r3
 800bb32:	e010      	b.n	800bb56 <HAL_ADC_ConfigChannel+0x32e>
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	fa93 f3a3 	rbit	r3, r3
 800bb40:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800bb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb44:	fab3 f383 	clz	r3, r3
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	f003 031f 	and.w	r3, r3, #31
 800bb50:	2101      	movs	r1, #1
 800bb52:	fa01 f303 	lsl.w	r3, r1, r3
 800bb56:	ea42 0103 	orr.w	r1, r2, r3
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10a      	bne.n	800bb7c <HAL_ADC_ConfigChannel+0x354>
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	0e9b      	lsrs	r3, r3, #26
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	f003 021f 	and.w	r2, r3, #31
 800bb72:	4613      	mov	r3, r2
 800bb74:	005b      	lsls	r3, r3, #1
 800bb76:	4413      	add	r3, r2
 800bb78:	051b      	lsls	r3, r3, #20
 800bb7a:	e011      	b.n	800bba0 <HAL_ADC_ConfigChannel+0x378>
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb84:	fa93 f3a3 	rbit	r3, r3
 800bb88:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	fab3 f383 	clz	r3, r3
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	3301      	adds	r3, #1
 800bb94:	f003 021f 	and.w	r2, r3, #31
 800bb98:	4613      	mov	r3, r2
 800bb9a:	005b      	lsls	r3, r3, #1
 800bb9c:	4413      	add	r3, r2
 800bb9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bba0:	430b      	orrs	r3, r1
 800bba2:	e069      	b.n	800bc78 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d107      	bne.n	800bbc0 <HAL_ADC_ConfigChannel+0x398>
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	0e9b      	lsrs	r3, r3, #26
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	069b      	lsls	r3, r3, #26
 800bbba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800bbbe:	e00e      	b.n	800bbde <HAL_ADC_ConfigChannel+0x3b6>
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	fa93 f3a3 	rbit	r3, r3
 800bbcc:	61fb      	str	r3, [r7, #28]
  return result;
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	fab3 f383 	clz	r3, r3
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	069b      	lsls	r3, r3, #26
 800bbda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d109      	bne.n	800bbfe <HAL_ADC_ConfigChannel+0x3d6>
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	0e9b      	lsrs	r3, r3, #26
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	f003 031f 	and.w	r3, r3, #31
 800bbf6:	2101      	movs	r1, #1
 800bbf8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbfc:	e010      	b.n	800bc20 <HAL_ADC_ConfigChannel+0x3f8>
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	fa93 f3a3 	rbit	r3, r3
 800bc0a:	617b      	str	r3, [r7, #20]
  return result;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	fab3 f383 	clz	r3, r3
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	3301      	adds	r3, #1
 800bc16:	f003 031f 	and.w	r3, r3, #31
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	fa01 f303 	lsl.w	r3, r1, r3
 800bc20:	ea42 0103 	orr.w	r1, r2, r3
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10d      	bne.n	800bc4c <HAL_ADC_ConfigChannel+0x424>
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	0e9b      	lsrs	r3, r3, #26
 800bc36:	3301      	adds	r3, #1
 800bc38:	f003 021f 	and.w	r2, r3, #31
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	005b      	lsls	r3, r3, #1
 800bc40:	4413      	add	r3, r2
 800bc42:	3b1e      	subs	r3, #30
 800bc44:	051b      	lsls	r3, r3, #20
 800bc46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bc4a:	e014      	b.n	800bc76 <HAL_ADC_ConfigChannel+0x44e>
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	fa93 f3a3 	rbit	r3, r3
 800bc58:	60fb      	str	r3, [r7, #12]
  return result;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	fab3 f383 	clz	r3, r3
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	3301      	adds	r3, #1
 800bc64:	f003 021f 	and.w	r2, r3, #31
 800bc68:	4613      	mov	r3, r2
 800bc6a:	005b      	lsls	r3, r3, #1
 800bc6c:	4413      	add	r3, r2
 800bc6e:	3b1e      	subs	r3, #30
 800bc70:	051b      	lsls	r3, r3, #20
 800bc72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bc76:	430b      	orrs	r3, r1
 800bc78:	683a      	ldr	r2, [r7, #0]
 800bc7a:	6892      	ldr	r2, [r2, #8]
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	f7ff fb5b 	bl	800b338 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	f280 80c4 	bge.w	800be14 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a65      	ldr	r2, [pc, #404]	; (800be28 <HAL_ADC_ConfigChannel+0x600>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d004      	beq.n	800bca0 <HAL_ADC_ConfigChannel+0x478>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a64      	ldr	r2, [pc, #400]	; (800be2c <HAL_ADC_ConfigChannel+0x604>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d101      	bne.n	800bca4 <HAL_ADC_ConfigChannel+0x47c>
 800bca0:	4b63      	ldr	r3, [pc, #396]	; (800be30 <HAL_ADC_ConfigChannel+0x608>)
 800bca2:	e000      	b.n	800bca6 <HAL_ADC_ConfigChannel+0x47e>
 800bca4:	4b63      	ldr	r3, [pc, #396]	; (800be34 <HAL_ADC_ConfigChannel+0x60c>)
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7ff fab8 	bl	800b21c <LL_ADC_GetCommonPathInternalCh>
 800bcac:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a5d      	ldr	r2, [pc, #372]	; (800be28 <HAL_ADC_ConfigChannel+0x600>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d004      	beq.n	800bcc2 <HAL_ADC_ConfigChannel+0x49a>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4a5b      	ldr	r2, [pc, #364]	; (800be2c <HAL_ADC_ConfigChannel+0x604>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d10e      	bne.n	800bce0 <HAL_ADC_ConfigChannel+0x4b8>
 800bcc2:	4859      	ldr	r0, [pc, #356]	; (800be28 <HAL_ADC_ConfigChannel+0x600>)
 800bcc4:	f7ff fbd6 	bl	800b474 <LL_ADC_IsEnabled>
 800bcc8:	4604      	mov	r4, r0
 800bcca:	4858      	ldr	r0, [pc, #352]	; (800be2c <HAL_ADC_ConfigChannel+0x604>)
 800bccc:	f7ff fbd2 	bl	800b474 <LL_ADC_IsEnabled>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	4323      	orrs	r3, r4
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	bf0c      	ite	eq
 800bcd8:	2301      	moveq	r3, #1
 800bcda:	2300      	movne	r3, #0
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	e008      	b.n	800bcf2 <HAL_ADC_ConfigChannel+0x4ca>
 800bce0:	4855      	ldr	r0, [pc, #340]	; (800be38 <HAL_ADC_ConfigChannel+0x610>)
 800bce2:	f7ff fbc7 	bl	800b474 <LL_ADC_IsEnabled>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	bf0c      	ite	eq
 800bcec:	2301      	moveq	r3, #1
 800bcee:	2300      	movne	r3, #0
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d07b      	beq.n	800bdee <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a50      	ldr	r2, [pc, #320]	; (800be3c <HAL_ADC_ConfigChannel+0x614>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d12e      	bne.n	800bd5e <HAL_ADC_ConfigChannel+0x536>
 800bd00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d129      	bne.n	800bd5e <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a4a      	ldr	r2, [pc, #296]	; (800be38 <HAL_ADC_ConfigChannel+0x610>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d17f      	bne.n	800be14 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a43      	ldr	r2, [pc, #268]	; (800be28 <HAL_ADC_ConfigChannel+0x600>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d004      	beq.n	800bd28 <HAL_ADC_ConfigChannel+0x500>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a42      	ldr	r2, [pc, #264]	; (800be2c <HAL_ADC_ConfigChannel+0x604>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d101      	bne.n	800bd2c <HAL_ADC_ConfigChannel+0x504>
 800bd28:	4a41      	ldr	r2, [pc, #260]	; (800be30 <HAL_ADC_ConfigChannel+0x608>)
 800bd2a:	e000      	b.n	800bd2e <HAL_ADC_ConfigChannel+0x506>
 800bd2c:	4a41      	ldr	r2, [pc, #260]	; (800be34 <HAL_ADC_ConfigChannel+0x60c>)
 800bd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bd34:	4619      	mov	r1, r3
 800bd36:	4610      	mov	r0, r2
 800bd38:	f7ff fa5d 	bl	800b1f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800bd3c:	4b40      	ldr	r3, [pc, #256]	; (800be40 <HAL_ADC_ConfigChannel+0x618>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	099b      	lsrs	r3, r3, #6
 800bd42:	4a40      	ldr	r2, [pc, #256]	; (800be44 <HAL_ADC_ConfigChannel+0x61c>)
 800bd44:	fba2 2303 	umull	r2, r3, r2, r3
 800bd48:	099b      	lsrs	r3, r3, #6
 800bd4a:	005b      	lsls	r3, r3, #1
 800bd4c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800bd4e:	e002      	b.n	800bd56 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	3b01      	subs	r3, #1
 800bd54:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1f9      	bne.n	800bd50 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bd5c:	e05a      	b.n	800be14 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a39      	ldr	r2, [pc, #228]	; (800be48 <HAL_ADC_ConfigChannel+0x620>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d11e      	bne.n	800bda6 <HAL_ADC_ConfigChannel+0x57e>
 800bd68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d119      	bne.n	800bda6 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a30      	ldr	r2, [pc, #192]	; (800be38 <HAL_ADC_ConfigChannel+0x610>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d14b      	bne.n	800be14 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a29      	ldr	r2, [pc, #164]	; (800be28 <HAL_ADC_ConfigChannel+0x600>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d004      	beq.n	800bd90 <HAL_ADC_ConfigChannel+0x568>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a28      	ldr	r2, [pc, #160]	; (800be2c <HAL_ADC_ConfigChannel+0x604>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d101      	bne.n	800bd94 <HAL_ADC_ConfigChannel+0x56c>
 800bd90:	4a27      	ldr	r2, [pc, #156]	; (800be30 <HAL_ADC_ConfigChannel+0x608>)
 800bd92:	e000      	b.n	800bd96 <HAL_ADC_ConfigChannel+0x56e>
 800bd94:	4a27      	ldr	r2, [pc, #156]	; (800be34 <HAL_ADC_ConfigChannel+0x60c>)
 800bd96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4610      	mov	r0, r2
 800bda0:	f7ff fa29 	bl	800b1f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bda4:	e036      	b.n	800be14 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a28      	ldr	r2, [pc, #160]	; (800be4c <HAL_ADC_ConfigChannel+0x624>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d131      	bne.n	800be14 <HAL_ADC_ConfigChannel+0x5ec>
 800bdb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d12c      	bne.n	800be14 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a1e      	ldr	r2, [pc, #120]	; (800be38 <HAL_ADC_ConfigChannel+0x610>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d127      	bne.n	800be14 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a17      	ldr	r2, [pc, #92]	; (800be28 <HAL_ADC_ConfigChannel+0x600>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d004      	beq.n	800bdd8 <HAL_ADC_ConfigChannel+0x5b0>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a16      	ldr	r2, [pc, #88]	; (800be2c <HAL_ADC_ConfigChannel+0x604>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d101      	bne.n	800bddc <HAL_ADC_ConfigChannel+0x5b4>
 800bdd8:	4a15      	ldr	r2, [pc, #84]	; (800be30 <HAL_ADC_ConfigChannel+0x608>)
 800bdda:	e000      	b.n	800bdde <HAL_ADC_ConfigChannel+0x5b6>
 800bddc:	4a15      	ldr	r2, [pc, #84]	; (800be34 <HAL_ADC_ConfigChannel+0x60c>)
 800bdde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bde4:	4619      	mov	r1, r3
 800bde6:	4610      	mov	r0, r2
 800bde8:	f7ff fa05 	bl	800b1f6 <LL_ADC_SetCommonPathInternalCh>
 800bdec:	e012      	b.n	800be14 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf2:	f043 0220 	orr.w	r2, r3, #32
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800be00:	e008      	b.n	800be14 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be06:	f043 0220 	orr.w	r2, r3, #32
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800be0e:	2301      	movs	r3, #1
 800be10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800be1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800be20:	4618      	mov	r0, r3
 800be22:	3764      	adds	r7, #100	; 0x64
 800be24:	46bd      	mov	sp, r7
 800be26:	bd90      	pop	{r4, r7, pc}
 800be28:	40022000 	.word	0x40022000
 800be2c:	40022100 	.word	0x40022100
 800be30:	40022300 	.word	0x40022300
 800be34:	58026300 	.word	0x58026300
 800be38:	58026000 	.word	0x58026000
 800be3c:	cb840000 	.word	0xcb840000
 800be40:	240000cc 	.word	0x240000cc
 800be44:	053e2d63 	.word	0x053e2d63
 800be48:	c7520000 	.word	0xc7520000
 800be4c:	cfb80000 	.word	0xcfb80000

0800be50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a70      	ldr	r2, [pc, #448]	; (800c020 <ADC_ConfigureBoostMode+0x1d0>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d004      	beq.n	800be6c <ADC_ConfigureBoostMode+0x1c>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a6f      	ldr	r2, [pc, #444]	; (800c024 <ADC_ConfigureBoostMode+0x1d4>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d109      	bne.n	800be80 <ADC_ConfigureBoostMode+0x30>
 800be6c:	4b6e      	ldr	r3, [pc, #440]	; (800c028 <ADC_ConfigureBoostMode+0x1d8>)
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800be74:	2b00      	cmp	r3, #0
 800be76:	bf14      	ite	ne
 800be78:	2301      	movne	r3, #1
 800be7a:	2300      	moveq	r3, #0
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	e008      	b.n	800be92 <ADC_ConfigureBoostMode+0x42>
 800be80:	4b6a      	ldr	r3, [pc, #424]	; (800c02c <ADC_ConfigureBoostMode+0x1dc>)
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800be88:	2b00      	cmp	r3, #0
 800be8a:	bf14      	ite	ne
 800be8c:	2301      	movne	r3, #1
 800be8e:	2300      	moveq	r3, #0
 800be90:	b2db      	uxtb	r3, r3
 800be92:	2b00      	cmp	r3, #0
 800be94:	d01a      	beq.n	800becc <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800be96:	f006 fbff 	bl	8012698 <HAL_RCC_GetHCLKFreq>
 800be9a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bea4:	d006      	beq.n	800beb4 <ADC_ConfigureBoostMode+0x64>
 800bea6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800beaa:	d00b      	beq.n	800bec4 <ADC_ConfigureBoostMode+0x74>
 800beac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beb0:	d000      	beq.n	800beb4 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 800beb2:	e05d      	b.n	800bf70 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	0c1b      	lsrs	r3, r3, #16
 800beba:	68fa      	ldr	r2, [r7, #12]
 800bebc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bec0:	60fb      	str	r3, [r7, #12]
        break;
 800bec2:	e055      	b.n	800bf70 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	089b      	lsrs	r3, r3, #2
 800bec8:	60fb      	str	r3, [r7, #12]
        break;
 800beca:	e051      	b.n	800bf70 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800becc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bed0:	f007 fb6e 	bl	80135b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800bed4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800bede:	d02a      	beq.n	800bf36 <ADC_ConfigureBoostMode+0xe6>
 800bee0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800bee4:	d813      	bhi.n	800bf0e <ADC_ConfigureBoostMode+0xbe>
 800bee6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800beea:	d024      	beq.n	800bf36 <ADC_ConfigureBoostMode+0xe6>
 800beec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bef0:	d806      	bhi.n	800bf00 <ADC_ConfigureBoostMode+0xb0>
 800bef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bef6:	d01e      	beq.n	800bf36 <ADC_ConfigureBoostMode+0xe6>
 800bef8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800befc:	d01b      	beq.n	800bf36 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 800befe:	e037      	b.n	800bf70 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 800bf00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf04:	d017      	beq.n	800bf36 <ADC_ConfigureBoostMode+0xe6>
 800bf06:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800bf0a:	d014      	beq.n	800bf36 <ADC_ConfigureBoostMode+0xe6>
        break;
 800bf0c:	e030      	b.n	800bf70 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 800bf0e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800bf12:	d021      	beq.n	800bf58 <ADC_ConfigureBoostMode+0x108>
 800bf14:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800bf18:	d806      	bhi.n	800bf28 <ADC_ConfigureBoostMode+0xd8>
 800bf1a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800bf1e:	d013      	beq.n	800bf48 <ADC_ConfigureBoostMode+0xf8>
 800bf20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf24:	d014      	beq.n	800bf50 <ADC_ConfigureBoostMode+0x100>
        break;
 800bf26:	e023      	b.n	800bf70 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 800bf28:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800bf2c:	d018      	beq.n	800bf60 <ADC_ConfigureBoostMode+0x110>
 800bf2e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800bf32:	d019      	beq.n	800bf68 <ADC_ConfigureBoostMode+0x118>
        break;
 800bf34:	e01c      	b.n	800bf70 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	0c9b      	lsrs	r3, r3, #18
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf44:	60fb      	str	r3, [r7, #12]
        break;
 800bf46:	e013      	b.n	800bf70 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	091b      	lsrs	r3, r3, #4
 800bf4c:	60fb      	str	r3, [r7, #12]
        break;
 800bf4e:	e00f      	b.n	800bf70 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	095b      	lsrs	r3, r3, #5
 800bf54:	60fb      	str	r3, [r7, #12]
        break;
 800bf56:	e00b      	b.n	800bf70 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	099b      	lsrs	r3, r3, #6
 800bf5c:	60fb      	str	r3, [r7, #12]
        break;
 800bf5e:	e007      	b.n	800bf70 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	09db      	lsrs	r3, r3, #7
 800bf64:	60fb      	str	r3, [r7, #12]
        break;
 800bf66:	e003      	b.n	800bf70 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	0a1b      	lsrs	r3, r3, #8
 800bf6c:	60fb      	str	r3, [r7, #12]
        break;
 800bf6e:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800bf70:	f7ff f90c 	bl	800b18c <HAL_GetREVID>
 800bf74:	4602      	mov	r2, r0
 800bf76:	f241 0303 	movw	r3, #4099	; 0x1003
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d815      	bhi.n	800bfaa <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4a2b      	ldr	r2, [pc, #172]	; (800c030 <ADC_ConfigureBoostMode+0x1e0>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d908      	bls.n	800bf98 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	689a      	ldr	r2, [r3, #8]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf94:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800bf96:	e03e      	b.n	800c016 <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	689a      	ldr	r2, [r3, #8]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bfa6:	609a      	str	r2, [r3, #8]
}
 800bfa8:	e035      	b.n	800c016 <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	085b      	lsrs	r3, r3, #1
 800bfae:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	4a20      	ldr	r2, [pc, #128]	; (800c034 <ADC_ConfigureBoostMode+0x1e4>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d808      	bhi.n	800bfca <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	689a      	ldr	r2, [r3, #8]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bfc6:	609a      	str	r2, [r3, #8]
}
 800bfc8:	e025      	b.n	800c016 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	4a1a      	ldr	r2, [pc, #104]	; (800c038 <ADC_ConfigureBoostMode+0x1e8>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d80a      	bhi.n	800bfe8 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bfe4:	609a      	str	r2, [r3, #8]
}
 800bfe6:	e016      	b.n	800c016 <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	4a14      	ldr	r2, [pc, #80]	; (800c03c <ADC_ConfigureBoostMode+0x1ec>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d80a      	bhi.n	800c006 <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c002:	609a      	str	r2, [r3, #8]
}
 800c004:	e007      	b.n	800c016 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	689a      	ldr	r2, [r3, #8]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c014:	609a      	str	r2, [r3, #8]
}
 800c016:	bf00      	nop
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	40022000 	.word	0x40022000
 800c024:	40022100 	.word	0x40022100
 800c028:	40022300 	.word	0x40022300
 800c02c:	58026300 	.word	0x58026300
 800c030:	01312d00 	.word	0x01312d00
 800c034:	005f5e10 	.word	0x005f5e10
 800c038:	00bebc20 	.word	0x00bebc20
 800c03c:	017d7840 	.word	0x017d7840

0800c040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f003 0307 	and.w	r3, r3, #7
 800c04e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c050:	4b0b      	ldr	r3, [pc, #44]	; (800c080 <__NVIC_SetPriorityGrouping+0x40>)
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c056:	68ba      	ldr	r2, [r7, #8]
 800c058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c05c:	4013      	ands	r3, r2
 800c05e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800c068:	4b06      	ldr	r3, [pc, #24]	; (800c084 <__NVIC_SetPriorityGrouping+0x44>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c06e:	4a04      	ldr	r2, [pc, #16]	; (800c080 <__NVIC_SetPriorityGrouping+0x40>)
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	60d3      	str	r3, [r2, #12]
}
 800c074:	bf00      	nop
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	e000ed00 	.word	0xe000ed00
 800c084:	05fa0000 	.word	0x05fa0000

0800c088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c088:	b480      	push	{r7}
 800c08a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c08c:	4b04      	ldr	r3, [pc, #16]	; (800c0a0 <__NVIC_GetPriorityGrouping+0x18>)
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	0a1b      	lsrs	r3, r3, #8
 800c092:	f003 0307 	and.w	r3, r3, #7
}
 800c096:	4618      	mov	r0, r3
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr
 800c0a0:	e000ed00 	.word	0xe000ed00

0800c0a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c0ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	db0b      	blt.n	800c0ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c0b6:	88fb      	ldrh	r3, [r7, #6]
 800c0b8:	f003 021f 	and.w	r2, r3, #31
 800c0bc:	4907      	ldr	r1, [pc, #28]	; (800c0dc <__NVIC_EnableIRQ+0x38>)
 800c0be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0c2:	095b      	lsrs	r3, r3, #5
 800c0c4:	2001      	movs	r0, #1
 800c0c6:	fa00 f202 	lsl.w	r2, r0, r2
 800c0ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c0ce:	bf00      	nop
 800c0d0:	370c      	adds	r7, #12
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	e000e100 	.word	0xe000e100

0800c0e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	6039      	str	r1, [r7, #0]
 800c0ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c0ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	db0a      	blt.n	800c10a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	490c      	ldr	r1, [pc, #48]	; (800c12c <__NVIC_SetPriority+0x4c>)
 800c0fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c0fe:	0112      	lsls	r2, r2, #4
 800c100:	b2d2      	uxtb	r2, r2
 800c102:	440b      	add	r3, r1
 800c104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c108:	e00a      	b.n	800c120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	4908      	ldr	r1, [pc, #32]	; (800c130 <__NVIC_SetPriority+0x50>)
 800c110:	88fb      	ldrh	r3, [r7, #6]
 800c112:	f003 030f 	and.w	r3, r3, #15
 800c116:	3b04      	subs	r3, #4
 800c118:	0112      	lsls	r2, r2, #4
 800c11a:	b2d2      	uxtb	r2, r2
 800c11c:	440b      	add	r3, r1
 800c11e:	761a      	strb	r2, [r3, #24]
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	e000e100 	.word	0xe000e100
 800c130:	e000ed00 	.word	0xe000ed00

0800c134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c134:	b480      	push	{r7}
 800c136:	b089      	sub	sp, #36	; 0x24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	f1c3 0307 	rsb	r3, r3, #7
 800c14e:	2b04      	cmp	r3, #4
 800c150:	bf28      	it	cs
 800c152:	2304      	movcs	r3, #4
 800c154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	3304      	adds	r3, #4
 800c15a:	2b06      	cmp	r3, #6
 800c15c:	d902      	bls.n	800c164 <NVIC_EncodePriority+0x30>
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	3b03      	subs	r3, #3
 800c162:	e000      	b.n	800c166 <NVIC_EncodePriority+0x32>
 800c164:	2300      	movs	r3, #0
 800c166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c168:	f04f 32ff 	mov.w	r2, #4294967295
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	fa02 f303 	lsl.w	r3, r2, r3
 800c172:	43da      	mvns	r2, r3
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	401a      	ands	r2, r3
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c17c:	f04f 31ff 	mov.w	r1, #4294967295
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	fa01 f303 	lsl.w	r3, r1, r3
 800c186:	43d9      	mvns	r1, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c18c:	4313      	orrs	r3, r2
         );
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3724      	adds	r7, #36	; 0x24
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7ff ff4c 	bl	800c040 <__NVIC_SetPriorityGrouping>
}
 800c1a8:	bf00      	nop
 800c1aa:	3708      	adds	r7, #8
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	607a      	str	r2, [r7, #4]
 800c1bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c1be:	f7ff ff63 	bl	800c088 <__NVIC_GetPriorityGrouping>
 800c1c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	68b9      	ldr	r1, [r7, #8]
 800c1c8:	6978      	ldr	r0, [r7, #20]
 800c1ca:	f7ff ffb3 	bl	800c134 <NVIC_EncodePriority>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c1d4:	4611      	mov	r1, r2
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7ff ff82 	bl	800c0e0 <__NVIC_SetPriority>
}
 800c1dc:	bf00      	nop
 800c1de:	3718      	adds	r7, #24
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c1ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7ff ff56 	bl	800c0a4 <__NVIC_EnableIRQ>
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800c208:	f7fe ff92 	bl	800b130 <HAL_GetTick>
 800c20c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d101      	bne.n	800c218 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	e316      	b.n	800c846 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a66      	ldr	r2, [pc, #408]	; (800c3b8 <HAL_DMA_Init+0x1b8>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d04a      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a65      	ldr	r2, [pc, #404]	; (800c3bc <HAL_DMA_Init+0x1bc>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d045      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a63      	ldr	r2, [pc, #396]	; (800c3c0 <HAL_DMA_Init+0x1c0>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d040      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a62      	ldr	r2, [pc, #392]	; (800c3c4 <HAL_DMA_Init+0x1c4>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d03b      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a60      	ldr	r2, [pc, #384]	; (800c3c8 <HAL_DMA_Init+0x1c8>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d036      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a5f      	ldr	r2, [pc, #380]	; (800c3cc <HAL_DMA_Init+0x1cc>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d031      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a5d      	ldr	r2, [pc, #372]	; (800c3d0 <HAL_DMA_Init+0x1d0>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d02c      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4a5c      	ldr	r2, [pc, #368]	; (800c3d4 <HAL_DMA_Init+0x1d4>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d027      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a5a      	ldr	r2, [pc, #360]	; (800c3d8 <HAL_DMA_Init+0x1d8>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d022      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a59      	ldr	r2, [pc, #356]	; (800c3dc <HAL_DMA_Init+0x1dc>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d01d      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a57      	ldr	r2, [pc, #348]	; (800c3e0 <HAL_DMA_Init+0x1e0>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d018      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a56      	ldr	r2, [pc, #344]	; (800c3e4 <HAL_DMA_Init+0x1e4>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d013      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a54      	ldr	r2, [pc, #336]	; (800c3e8 <HAL_DMA_Init+0x1e8>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d00e      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a53      	ldr	r2, [pc, #332]	; (800c3ec <HAL_DMA_Init+0x1ec>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d009      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a51      	ldr	r2, [pc, #324]	; (800c3f0 <HAL_DMA_Init+0x1f0>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d004      	beq.n	800c2b8 <HAL_DMA_Init+0xb8>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a50      	ldr	r2, [pc, #320]	; (800c3f4 <HAL_DMA_Init+0x1f4>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d101      	bne.n	800c2bc <HAL_DMA_Init+0xbc>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e000      	b.n	800c2be <HAL_DMA_Init+0xbe>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 813b 	beq.w	800c53a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a37      	ldr	r2, [pc, #220]	; (800c3b8 <HAL_DMA_Init+0x1b8>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d04a      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a36      	ldr	r2, [pc, #216]	; (800c3bc <HAL_DMA_Init+0x1bc>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d045      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a34      	ldr	r2, [pc, #208]	; (800c3c0 <HAL_DMA_Init+0x1c0>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d040      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a33      	ldr	r2, [pc, #204]	; (800c3c4 <HAL_DMA_Init+0x1c4>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d03b      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a31      	ldr	r2, [pc, #196]	; (800c3c8 <HAL_DMA_Init+0x1c8>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d036      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a30      	ldr	r2, [pc, #192]	; (800c3cc <HAL_DMA_Init+0x1cc>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d031      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a2e      	ldr	r2, [pc, #184]	; (800c3d0 <HAL_DMA_Init+0x1d0>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d02c      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a2d      	ldr	r2, [pc, #180]	; (800c3d4 <HAL_DMA_Init+0x1d4>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d027      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a2b      	ldr	r2, [pc, #172]	; (800c3d8 <HAL_DMA_Init+0x1d8>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d022      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a2a      	ldr	r2, [pc, #168]	; (800c3dc <HAL_DMA_Init+0x1dc>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d01d      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4a28      	ldr	r2, [pc, #160]	; (800c3e0 <HAL_DMA_Init+0x1e0>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d018      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a27      	ldr	r2, [pc, #156]	; (800c3e4 <HAL_DMA_Init+0x1e4>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d013      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a25      	ldr	r2, [pc, #148]	; (800c3e8 <HAL_DMA_Init+0x1e8>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d00e      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a24      	ldr	r2, [pc, #144]	; (800c3ec <HAL_DMA_Init+0x1ec>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d009      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4a22      	ldr	r2, [pc, #136]	; (800c3f0 <HAL_DMA_Init+0x1f0>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d004      	beq.n	800c374 <HAL_DMA_Init+0x174>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a21      	ldr	r2, [pc, #132]	; (800c3f4 <HAL_DMA_Init+0x1f4>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d108      	bne.n	800c386 <HAL_DMA_Init+0x186>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f022 0201 	bic.w	r2, r2, #1
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	e007      	b.n	800c396 <HAL_DMA_Init+0x196>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f022 0201 	bic.w	r2, r2, #1
 800c394:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c396:	e02f      	b.n	800c3f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c398:	f7fe feca 	bl	800b130 <HAL_GetTick>
 800c39c:	4602      	mov	r2, r0
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	2b05      	cmp	r3, #5
 800c3a4:	d928      	bls.n	800c3f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2220      	movs	r2, #32
 800c3aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2203      	movs	r2, #3
 800c3b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e246      	b.n	800c846 <HAL_DMA_Init+0x646>
 800c3b8:	40020010 	.word	0x40020010
 800c3bc:	40020028 	.word	0x40020028
 800c3c0:	40020040 	.word	0x40020040
 800c3c4:	40020058 	.word	0x40020058
 800c3c8:	40020070 	.word	0x40020070
 800c3cc:	40020088 	.word	0x40020088
 800c3d0:	400200a0 	.word	0x400200a0
 800c3d4:	400200b8 	.word	0x400200b8
 800c3d8:	40020410 	.word	0x40020410
 800c3dc:	40020428 	.word	0x40020428
 800c3e0:	40020440 	.word	0x40020440
 800c3e4:	40020458 	.word	0x40020458
 800c3e8:	40020470 	.word	0x40020470
 800c3ec:	40020488 	.word	0x40020488
 800c3f0:	400204a0 	.word	0x400204a0
 800c3f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f003 0301 	and.w	r3, r3, #1
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1c8      	bne.n	800c398 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c40e:	697a      	ldr	r2, [r7, #20]
 800c410:	4b83      	ldr	r3, [pc, #524]	; (800c620 <HAL_DMA_Init+0x420>)
 800c412:	4013      	ands	r3, r2
 800c414:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800c41e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c42a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c436:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a1b      	ldr	r3, [r3, #32]
 800c43c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	4313      	orrs	r3, r2
 800c442:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c448:	2b04      	cmp	r3, #4
 800c44a:	d107      	bne.n	800c45c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c454:	4313      	orrs	r3, r2
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	4313      	orrs	r3, r2
 800c45a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800c45c:	4b71      	ldr	r3, [pc, #452]	; (800c624 <HAL_DMA_Init+0x424>)
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	4b71      	ldr	r3, [pc, #452]	; (800c628 <HAL_DMA_Init+0x428>)
 800c462:	4013      	ands	r3, r2
 800c464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c468:	d328      	bcc.n	800c4bc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	2b28      	cmp	r3, #40	; 0x28
 800c470:	d903      	bls.n	800c47a <HAL_DMA_Init+0x27a>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	2b2e      	cmp	r3, #46	; 0x2e
 800c478:	d917      	bls.n	800c4aa <HAL_DMA_Init+0x2aa>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	2b3e      	cmp	r3, #62	; 0x3e
 800c480:	d903      	bls.n	800c48a <HAL_DMA_Init+0x28a>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	2b42      	cmp	r3, #66	; 0x42
 800c488:	d90f      	bls.n	800c4aa <HAL_DMA_Init+0x2aa>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	2b46      	cmp	r3, #70	; 0x46
 800c490:	d903      	bls.n	800c49a <HAL_DMA_Init+0x29a>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	2b48      	cmp	r3, #72	; 0x48
 800c498:	d907      	bls.n	800c4aa <HAL_DMA_Init+0x2aa>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	2b4e      	cmp	r3, #78	; 0x4e
 800c4a0:	d905      	bls.n	800c4ae <HAL_DMA_Init+0x2ae>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	2b52      	cmp	r3, #82	; 0x52
 800c4a8:	d801      	bhi.n	800c4ae <HAL_DMA_Init+0x2ae>
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	e000      	b.n	800c4b0 <HAL_DMA_Init+0x2b0>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d003      	beq.n	800c4bc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4ba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	697a      	ldr	r2, [r7, #20]
 800c4c2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	f023 0307 	bic.w	r3, r3, #7
 800c4d2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e2:	2b04      	cmp	r3, #4
 800c4e4:	d117      	bne.n	800c516 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00e      	beq.n	800c516 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f002 f82d 	bl	800e558 <DMA_CheckFifoParam>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d008      	beq.n	800c516 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2240      	movs	r2, #64	; 0x40
 800c508:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2201      	movs	r2, #1
 800c50e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800c512:	2301      	movs	r3, #1
 800c514:	e197      	b.n	800c846 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	697a      	ldr	r2, [r7, #20]
 800c51c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f001 ff68 	bl	800e3f4 <DMA_CalcBaseAndBitshift>
 800c524:	4603      	mov	r3, r0
 800c526:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c52c:	f003 031f 	and.w	r3, r3, #31
 800c530:	223f      	movs	r2, #63	; 0x3f
 800c532:	409a      	lsls	r2, r3
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	609a      	str	r2, [r3, #8]
 800c538:	e0cd      	b.n	800c6d6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a3b      	ldr	r2, [pc, #236]	; (800c62c <HAL_DMA_Init+0x42c>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d022      	beq.n	800c58a <HAL_DMA_Init+0x38a>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a39      	ldr	r2, [pc, #228]	; (800c630 <HAL_DMA_Init+0x430>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d01d      	beq.n	800c58a <HAL_DMA_Init+0x38a>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4a38      	ldr	r2, [pc, #224]	; (800c634 <HAL_DMA_Init+0x434>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d018      	beq.n	800c58a <HAL_DMA_Init+0x38a>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a36      	ldr	r2, [pc, #216]	; (800c638 <HAL_DMA_Init+0x438>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d013      	beq.n	800c58a <HAL_DMA_Init+0x38a>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a35      	ldr	r2, [pc, #212]	; (800c63c <HAL_DMA_Init+0x43c>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d00e      	beq.n	800c58a <HAL_DMA_Init+0x38a>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a33      	ldr	r2, [pc, #204]	; (800c640 <HAL_DMA_Init+0x440>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d009      	beq.n	800c58a <HAL_DMA_Init+0x38a>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a32      	ldr	r2, [pc, #200]	; (800c644 <HAL_DMA_Init+0x444>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d004      	beq.n	800c58a <HAL_DMA_Init+0x38a>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4a30      	ldr	r2, [pc, #192]	; (800c648 <HAL_DMA_Init+0x448>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d101      	bne.n	800c58e <HAL_DMA_Init+0x38e>
 800c58a:	2301      	movs	r3, #1
 800c58c:	e000      	b.n	800c590 <HAL_DMA_Init+0x390>
 800c58e:	2300      	movs	r3, #0
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 8097 	beq.w	800c6c4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a24      	ldr	r2, [pc, #144]	; (800c62c <HAL_DMA_Init+0x42c>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d021      	beq.n	800c5e4 <HAL_DMA_Init+0x3e4>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a22      	ldr	r2, [pc, #136]	; (800c630 <HAL_DMA_Init+0x430>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d01c      	beq.n	800c5e4 <HAL_DMA_Init+0x3e4>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a21      	ldr	r2, [pc, #132]	; (800c634 <HAL_DMA_Init+0x434>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d017      	beq.n	800c5e4 <HAL_DMA_Init+0x3e4>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a1f      	ldr	r2, [pc, #124]	; (800c638 <HAL_DMA_Init+0x438>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d012      	beq.n	800c5e4 <HAL_DMA_Init+0x3e4>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a1e      	ldr	r2, [pc, #120]	; (800c63c <HAL_DMA_Init+0x43c>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d00d      	beq.n	800c5e4 <HAL_DMA_Init+0x3e4>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a1c      	ldr	r2, [pc, #112]	; (800c640 <HAL_DMA_Init+0x440>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d008      	beq.n	800c5e4 <HAL_DMA_Init+0x3e4>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a1b      	ldr	r2, [pc, #108]	; (800c644 <HAL_DMA_Init+0x444>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d003      	beq.n	800c5e4 <HAL_DMA_Init+0x3e4>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a19      	ldr	r2, [pc, #100]	; (800c648 <HAL_DMA_Init+0x448>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2202      	movs	r2, #2
 800c5f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	4b12      	ldr	r3, [pc, #72]	; (800c64c <HAL_DMA_Init+0x44c>)
 800c602:	4013      	ands	r3, r2
 800c604:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	2b40      	cmp	r3, #64	; 0x40
 800c60c:	d020      	beq.n	800c650 <HAL_DMA_Init+0x450>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	2b80      	cmp	r3, #128	; 0x80
 800c614:	d102      	bne.n	800c61c <HAL_DMA_Init+0x41c>
 800c616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c61a:	e01a      	b.n	800c652 <HAL_DMA_Init+0x452>
 800c61c:	2300      	movs	r3, #0
 800c61e:	e018      	b.n	800c652 <HAL_DMA_Init+0x452>
 800c620:	fe10803f 	.word	0xfe10803f
 800c624:	5c001000 	.word	0x5c001000
 800c628:	ffff0000 	.word	0xffff0000
 800c62c:	58025408 	.word	0x58025408
 800c630:	5802541c 	.word	0x5802541c
 800c634:	58025430 	.word	0x58025430
 800c638:	58025444 	.word	0x58025444
 800c63c:	58025458 	.word	0x58025458
 800c640:	5802546c 	.word	0x5802546c
 800c644:	58025480 	.word	0x58025480
 800c648:	58025494 	.word	0x58025494
 800c64c:	fffe000f 	.word	0xfffe000f
 800c650:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	68d2      	ldr	r2, [r2, #12]
 800c656:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c658:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800c660:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800c668:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800c670:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	69db      	ldr	r3, [r3, #28]
 800c676:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800c678:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6a1b      	ldr	r3, [r3, #32]
 800c67e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800c680:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	4313      	orrs	r3, r2
 800c686:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	697a      	ldr	r2, [r7, #20]
 800c68e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	461a      	mov	r2, r3
 800c696:	4b6e      	ldr	r3, [pc, #440]	; (800c850 <HAL_DMA_Init+0x650>)
 800c698:	4413      	add	r3, r2
 800c69a:	4a6e      	ldr	r2, [pc, #440]	; (800c854 <HAL_DMA_Init+0x654>)
 800c69c:	fba2 2303 	umull	r2, r3, r2, r3
 800c6a0:	091b      	lsrs	r3, r3, #4
 800c6a2:	009a      	lsls	r2, r3, #2
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f001 fea3 	bl	800e3f4 <DMA_CalcBaseAndBitshift>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6b6:	f003 031f 	and.w	r3, r3, #31
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	409a      	lsls	r2, r3
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	605a      	str	r2, [r3, #4]
 800c6c2:	e008      	b.n	800c6d6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2240      	movs	r2, #64	; 0x40
 800c6c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2203      	movs	r2, #3
 800c6ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e0b7      	b.n	800c846 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a5f      	ldr	r2, [pc, #380]	; (800c858 <HAL_DMA_Init+0x658>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d072      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a5d      	ldr	r2, [pc, #372]	; (800c85c <HAL_DMA_Init+0x65c>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d06d      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a5c      	ldr	r2, [pc, #368]	; (800c860 <HAL_DMA_Init+0x660>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d068      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a5a      	ldr	r2, [pc, #360]	; (800c864 <HAL_DMA_Init+0x664>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d063      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a59      	ldr	r2, [pc, #356]	; (800c868 <HAL_DMA_Init+0x668>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d05e      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a57      	ldr	r2, [pc, #348]	; (800c86c <HAL_DMA_Init+0x66c>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d059      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a56      	ldr	r2, [pc, #344]	; (800c870 <HAL_DMA_Init+0x670>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d054      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a54      	ldr	r2, [pc, #336]	; (800c874 <HAL_DMA_Init+0x674>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d04f      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a53      	ldr	r2, [pc, #332]	; (800c878 <HAL_DMA_Init+0x678>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d04a      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a51      	ldr	r2, [pc, #324]	; (800c87c <HAL_DMA_Init+0x67c>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d045      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a50      	ldr	r2, [pc, #320]	; (800c880 <HAL_DMA_Init+0x680>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d040      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a4e      	ldr	r2, [pc, #312]	; (800c884 <HAL_DMA_Init+0x684>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d03b      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a4d      	ldr	r2, [pc, #308]	; (800c888 <HAL_DMA_Init+0x688>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d036      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a4b      	ldr	r2, [pc, #300]	; (800c88c <HAL_DMA_Init+0x68c>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d031      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a4a      	ldr	r2, [pc, #296]	; (800c890 <HAL_DMA_Init+0x690>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d02c      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a48      	ldr	r2, [pc, #288]	; (800c894 <HAL_DMA_Init+0x694>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d027      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a47      	ldr	r2, [pc, #284]	; (800c898 <HAL_DMA_Init+0x698>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d022      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a45      	ldr	r2, [pc, #276]	; (800c89c <HAL_DMA_Init+0x69c>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d01d      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a44      	ldr	r2, [pc, #272]	; (800c8a0 <HAL_DMA_Init+0x6a0>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d018      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a42      	ldr	r2, [pc, #264]	; (800c8a4 <HAL_DMA_Init+0x6a4>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d013      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a41      	ldr	r2, [pc, #260]	; (800c8a8 <HAL_DMA_Init+0x6a8>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d00e      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a3f      	ldr	r2, [pc, #252]	; (800c8ac <HAL_DMA_Init+0x6ac>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d009      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a3e      	ldr	r2, [pc, #248]	; (800c8b0 <HAL_DMA_Init+0x6b0>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d004      	beq.n	800c7c6 <HAL_DMA_Init+0x5c6>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a3c      	ldr	r2, [pc, #240]	; (800c8b4 <HAL_DMA_Init+0x6b4>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d101      	bne.n	800c7ca <HAL_DMA_Init+0x5ca>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e000      	b.n	800c7cc <HAL_DMA_Init+0x5cc>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d032      	beq.n	800c836 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f001 ff3d 	bl	800e650 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	2b80      	cmp	r3, #128	; 0x80
 800c7dc:	d102      	bne.n	800c7e4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	685a      	ldr	r2, [r3, #4]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7ec:	b2d2      	uxtb	r2, r2
 800c7ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c7f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d010      	beq.n	800c824 <HAL_DMA_Init+0x624>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	2b08      	cmp	r3, #8
 800c808:	d80c      	bhi.n	800c824 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f001 ffba 	bl	800e784 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c814:	2200      	movs	r2, #0
 800c816:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c820:	605a      	str	r2, [r3, #4]
 800c822:	e008      	b.n	800c836 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2200      	movs	r2, #0
 800c828:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3718      	adds	r7, #24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	a7fdabf8 	.word	0xa7fdabf8
 800c854:	cccccccd 	.word	0xcccccccd
 800c858:	40020010 	.word	0x40020010
 800c85c:	40020028 	.word	0x40020028
 800c860:	40020040 	.word	0x40020040
 800c864:	40020058 	.word	0x40020058
 800c868:	40020070 	.word	0x40020070
 800c86c:	40020088 	.word	0x40020088
 800c870:	400200a0 	.word	0x400200a0
 800c874:	400200b8 	.word	0x400200b8
 800c878:	40020410 	.word	0x40020410
 800c87c:	40020428 	.word	0x40020428
 800c880:	40020440 	.word	0x40020440
 800c884:	40020458 	.word	0x40020458
 800c888:	40020470 	.word	0x40020470
 800c88c:	40020488 	.word	0x40020488
 800c890:	400204a0 	.word	0x400204a0
 800c894:	400204b8 	.word	0x400204b8
 800c898:	58025408 	.word	0x58025408
 800c89c:	5802541c 	.word	0x5802541c
 800c8a0:	58025430 	.word	0x58025430
 800c8a4:	58025444 	.word	0x58025444
 800c8a8:	58025458 	.word	0x58025458
 800c8ac:	5802546c 	.word	0x5802546c
 800c8b0:	58025480 	.word	0x58025480
 800c8b4:	58025494 	.word	0x58025494

0800c8b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b086      	sub	sp, #24
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
 800c8c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d101      	bne.n	800c8d4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e226      	b.n	800cd22 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d101      	bne.n	800c8e2 <HAL_DMA_Start_IT+0x2a>
 800c8de:	2302      	movs	r3, #2
 800c8e0:	e21f      	b.n	800cd22 <HAL_DMA_Start_IT+0x46a>
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b01      	cmp	r3, #1
 800c8f4:	f040 820a 	bne.w	800cd0c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2202      	movs	r2, #2
 800c8fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2200      	movs	r2, #0
 800c904:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a68      	ldr	r2, [pc, #416]	; (800caac <HAL_DMA_Start_IT+0x1f4>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d04a      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a66      	ldr	r2, [pc, #408]	; (800cab0 <HAL_DMA_Start_IT+0x1f8>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d045      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a65      	ldr	r2, [pc, #404]	; (800cab4 <HAL_DMA_Start_IT+0x1fc>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d040      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a63      	ldr	r2, [pc, #396]	; (800cab8 <HAL_DMA_Start_IT+0x200>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d03b      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a62      	ldr	r2, [pc, #392]	; (800cabc <HAL_DMA_Start_IT+0x204>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d036      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a60      	ldr	r2, [pc, #384]	; (800cac0 <HAL_DMA_Start_IT+0x208>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d031      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a5f      	ldr	r2, [pc, #380]	; (800cac4 <HAL_DMA_Start_IT+0x20c>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d02c      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a5d      	ldr	r2, [pc, #372]	; (800cac8 <HAL_DMA_Start_IT+0x210>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d027      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a5c      	ldr	r2, [pc, #368]	; (800cacc <HAL_DMA_Start_IT+0x214>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d022      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a5a      	ldr	r2, [pc, #360]	; (800cad0 <HAL_DMA_Start_IT+0x218>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d01d      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a59      	ldr	r2, [pc, #356]	; (800cad4 <HAL_DMA_Start_IT+0x21c>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d018      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a57      	ldr	r2, [pc, #348]	; (800cad8 <HAL_DMA_Start_IT+0x220>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d013      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a56      	ldr	r2, [pc, #344]	; (800cadc <HAL_DMA_Start_IT+0x224>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d00e      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a54      	ldr	r2, [pc, #336]	; (800cae0 <HAL_DMA_Start_IT+0x228>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d009      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a53      	ldr	r2, [pc, #332]	; (800cae4 <HAL_DMA_Start_IT+0x22c>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d004      	beq.n	800c9a6 <HAL_DMA_Start_IT+0xee>
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a51      	ldr	r2, [pc, #324]	; (800cae8 <HAL_DMA_Start_IT+0x230>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d108      	bne.n	800c9b8 <HAL_DMA_Start_IT+0x100>
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f022 0201 	bic.w	r2, r2, #1
 800c9b4:	601a      	str	r2, [r3, #0]
 800c9b6:	e007      	b.n	800c9c8 <HAL_DMA_Start_IT+0x110>
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f022 0201 	bic.w	r2, r2, #1
 800c9c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	68b9      	ldr	r1, [r7, #8]
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f001 fb64 	bl	800e09c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a34      	ldr	r2, [pc, #208]	; (800caac <HAL_DMA_Start_IT+0x1f4>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d04a      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a33      	ldr	r2, [pc, #204]	; (800cab0 <HAL_DMA_Start_IT+0x1f8>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d045      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a31      	ldr	r2, [pc, #196]	; (800cab4 <HAL_DMA_Start_IT+0x1fc>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d040      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a30      	ldr	r2, [pc, #192]	; (800cab8 <HAL_DMA_Start_IT+0x200>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d03b      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a2e      	ldr	r2, [pc, #184]	; (800cabc <HAL_DMA_Start_IT+0x204>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d036      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a2d      	ldr	r2, [pc, #180]	; (800cac0 <HAL_DMA_Start_IT+0x208>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d031      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a2b      	ldr	r2, [pc, #172]	; (800cac4 <HAL_DMA_Start_IT+0x20c>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d02c      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a2a      	ldr	r2, [pc, #168]	; (800cac8 <HAL_DMA_Start_IT+0x210>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d027      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a28      	ldr	r2, [pc, #160]	; (800cacc <HAL_DMA_Start_IT+0x214>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d022      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a27      	ldr	r2, [pc, #156]	; (800cad0 <HAL_DMA_Start_IT+0x218>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d01d      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a25      	ldr	r2, [pc, #148]	; (800cad4 <HAL_DMA_Start_IT+0x21c>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d018      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a24      	ldr	r2, [pc, #144]	; (800cad8 <HAL_DMA_Start_IT+0x220>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d013      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a22      	ldr	r2, [pc, #136]	; (800cadc <HAL_DMA_Start_IT+0x224>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d00e      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a21      	ldr	r2, [pc, #132]	; (800cae0 <HAL_DMA_Start_IT+0x228>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d009      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a1f      	ldr	r2, [pc, #124]	; (800cae4 <HAL_DMA_Start_IT+0x22c>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d004      	beq.n	800ca74 <HAL_DMA_Start_IT+0x1bc>
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a1e      	ldr	r2, [pc, #120]	; (800cae8 <HAL_DMA_Start_IT+0x230>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d101      	bne.n	800ca78 <HAL_DMA_Start_IT+0x1c0>
 800ca74:	2301      	movs	r3, #1
 800ca76:	e000      	b.n	800ca7a <HAL_DMA_Start_IT+0x1c2>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d036      	beq.n	800caec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f023 021e 	bic.w	r2, r3, #30
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f042 0216 	orr.w	r2, r2, #22
 800ca90:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d03e      	beq.n	800cb18 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f042 0208 	orr.w	r2, r2, #8
 800caa8:	601a      	str	r2, [r3, #0]
 800caaa:	e035      	b.n	800cb18 <HAL_DMA_Start_IT+0x260>
 800caac:	40020010 	.word	0x40020010
 800cab0:	40020028 	.word	0x40020028
 800cab4:	40020040 	.word	0x40020040
 800cab8:	40020058 	.word	0x40020058
 800cabc:	40020070 	.word	0x40020070
 800cac0:	40020088 	.word	0x40020088
 800cac4:	400200a0 	.word	0x400200a0
 800cac8:	400200b8 	.word	0x400200b8
 800cacc:	40020410 	.word	0x40020410
 800cad0:	40020428 	.word	0x40020428
 800cad4:	40020440 	.word	0x40020440
 800cad8:	40020458 	.word	0x40020458
 800cadc:	40020470 	.word	0x40020470
 800cae0:	40020488 	.word	0x40020488
 800cae4:	400204a0 	.word	0x400204a0
 800cae8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f023 020e 	bic.w	r2, r3, #14
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f042 020a 	orr.w	r2, r2, #10
 800cafe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d007      	beq.n	800cb18 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f042 0204 	orr.w	r2, r2, #4
 800cb16:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a83      	ldr	r2, [pc, #524]	; (800cd2c <HAL_DMA_Start_IT+0x474>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d072      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a82      	ldr	r2, [pc, #520]	; (800cd30 <HAL_DMA_Start_IT+0x478>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d06d      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a80      	ldr	r2, [pc, #512]	; (800cd34 <HAL_DMA_Start_IT+0x47c>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d068      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a7f      	ldr	r2, [pc, #508]	; (800cd38 <HAL_DMA_Start_IT+0x480>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d063      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a7d      	ldr	r2, [pc, #500]	; (800cd3c <HAL_DMA_Start_IT+0x484>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d05e      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4a7c      	ldr	r2, [pc, #496]	; (800cd40 <HAL_DMA_Start_IT+0x488>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d059      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a7a      	ldr	r2, [pc, #488]	; (800cd44 <HAL_DMA_Start_IT+0x48c>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d054      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a79      	ldr	r2, [pc, #484]	; (800cd48 <HAL_DMA_Start_IT+0x490>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d04f      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a77      	ldr	r2, [pc, #476]	; (800cd4c <HAL_DMA_Start_IT+0x494>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d04a      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a76      	ldr	r2, [pc, #472]	; (800cd50 <HAL_DMA_Start_IT+0x498>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d045      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a74      	ldr	r2, [pc, #464]	; (800cd54 <HAL_DMA_Start_IT+0x49c>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d040      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a73      	ldr	r2, [pc, #460]	; (800cd58 <HAL_DMA_Start_IT+0x4a0>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d03b      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4a71      	ldr	r2, [pc, #452]	; (800cd5c <HAL_DMA_Start_IT+0x4a4>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d036      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a70      	ldr	r2, [pc, #448]	; (800cd60 <HAL_DMA_Start_IT+0x4a8>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d031      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a6e      	ldr	r2, [pc, #440]	; (800cd64 <HAL_DMA_Start_IT+0x4ac>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d02c      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a6d      	ldr	r2, [pc, #436]	; (800cd68 <HAL_DMA_Start_IT+0x4b0>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d027      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a6b      	ldr	r2, [pc, #428]	; (800cd6c <HAL_DMA_Start_IT+0x4b4>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d022      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a6a      	ldr	r2, [pc, #424]	; (800cd70 <HAL_DMA_Start_IT+0x4b8>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d01d      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a68      	ldr	r2, [pc, #416]	; (800cd74 <HAL_DMA_Start_IT+0x4bc>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d018      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a67      	ldr	r2, [pc, #412]	; (800cd78 <HAL_DMA_Start_IT+0x4c0>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d013      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a65      	ldr	r2, [pc, #404]	; (800cd7c <HAL_DMA_Start_IT+0x4c4>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d00e      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a64      	ldr	r2, [pc, #400]	; (800cd80 <HAL_DMA_Start_IT+0x4c8>)
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d009      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a62      	ldr	r2, [pc, #392]	; (800cd84 <HAL_DMA_Start_IT+0x4cc>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d004      	beq.n	800cc08 <HAL_DMA_Start_IT+0x350>
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a61      	ldr	r2, [pc, #388]	; (800cd88 <HAL_DMA_Start_IT+0x4d0>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d101      	bne.n	800cc0c <HAL_DMA_Start_IT+0x354>
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e000      	b.n	800cc0e <HAL_DMA_Start_IT+0x356>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d01a      	beq.n	800cc48 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d007      	beq.n	800cc30 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc24:	681a      	ldr	r2, [r3, #0]
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc2e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d007      	beq.n	800cc48 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc46:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a37      	ldr	r2, [pc, #220]	; (800cd2c <HAL_DMA_Start_IT+0x474>)
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	d04a      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4a36      	ldr	r2, [pc, #216]	; (800cd30 <HAL_DMA_Start_IT+0x478>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d045      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a34      	ldr	r2, [pc, #208]	; (800cd34 <HAL_DMA_Start_IT+0x47c>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d040      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a33      	ldr	r2, [pc, #204]	; (800cd38 <HAL_DMA_Start_IT+0x480>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d03b      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4a31      	ldr	r2, [pc, #196]	; (800cd3c <HAL_DMA_Start_IT+0x484>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d036      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a30      	ldr	r2, [pc, #192]	; (800cd40 <HAL_DMA_Start_IT+0x488>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d031      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a2e      	ldr	r2, [pc, #184]	; (800cd44 <HAL_DMA_Start_IT+0x48c>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d02c      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a2d      	ldr	r2, [pc, #180]	; (800cd48 <HAL_DMA_Start_IT+0x490>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d027      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a2b      	ldr	r2, [pc, #172]	; (800cd4c <HAL_DMA_Start_IT+0x494>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d022      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a2a      	ldr	r2, [pc, #168]	; (800cd50 <HAL_DMA_Start_IT+0x498>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d01d      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a28      	ldr	r2, [pc, #160]	; (800cd54 <HAL_DMA_Start_IT+0x49c>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d018      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4a27      	ldr	r2, [pc, #156]	; (800cd58 <HAL_DMA_Start_IT+0x4a0>)
 800ccbc:	4293      	cmp	r3, r2
 800ccbe:	d013      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a25      	ldr	r2, [pc, #148]	; (800cd5c <HAL_DMA_Start_IT+0x4a4>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d00e      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	4a24      	ldr	r2, [pc, #144]	; (800cd60 <HAL_DMA_Start_IT+0x4a8>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d009      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4a22      	ldr	r2, [pc, #136]	; (800cd64 <HAL_DMA_Start_IT+0x4ac>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d004      	beq.n	800cce8 <HAL_DMA_Start_IT+0x430>
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a21      	ldr	r2, [pc, #132]	; (800cd68 <HAL_DMA_Start_IT+0x4b0>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d108      	bne.n	800ccfa <HAL_DMA_Start_IT+0x442>
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f042 0201 	orr.w	r2, r2, #1
 800ccf6:	601a      	str	r2, [r3, #0]
 800ccf8:	e012      	b.n	800cd20 <HAL_DMA_Start_IT+0x468>
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f042 0201 	orr.w	r2, r2, #1
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	e009      	b.n	800cd20 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800cd20:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3718      	adds	r7, #24
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	40020010 	.word	0x40020010
 800cd30:	40020028 	.word	0x40020028
 800cd34:	40020040 	.word	0x40020040
 800cd38:	40020058 	.word	0x40020058
 800cd3c:	40020070 	.word	0x40020070
 800cd40:	40020088 	.word	0x40020088
 800cd44:	400200a0 	.word	0x400200a0
 800cd48:	400200b8 	.word	0x400200b8
 800cd4c:	40020410 	.word	0x40020410
 800cd50:	40020428 	.word	0x40020428
 800cd54:	40020440 	.word	0x40020440
 800cd58:	40020458 	.word	0x40020458
 800cd5c:	40020470 	.word	0x40020470
 800cd60:	40020488 	.word	0x40020488
 800cd64:	400204a0 	.word	0x400204a0
 800cd68:	400204b8 	.word	0x400204b8
 800cd6c:	58025408 	.word	0x58025408
 800cd70:	5802541c 	.word	0x5802541c
 800cd74:	58025430 	.word	0x58025430
 800cd78:	58025444 	.word	0x58025444
 800cd7c:	58025458 	.word	0x58025458
 800cd80:	5802546c 	.word	0x5802546c
 800cd84:	58025480 	.word	0x58025480
 800cd88:	58025494 	.word	0x58025494

0800cd8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d101      	bne.n	800cd9e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e205      	b.n	800d1aa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800cda4:	b2db      	uxtb	r3, r3
 800cda6:	2b02      	cmp	r3, #2
 800cda8:	d004      	beq.n	800cdb4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2280      	movs	r2, #128	; 0x80
 800cdae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e1fa      	b.n	800d1aa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a8c      	ldr	r2, [pc, #560]	; (800cfec <HAL_DMA_Abort_IT+0x260>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d04a      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4a8b      	ldr	r2, [pc, #556]	; (800cff0 <HAL_DMA_Abort_IT+0x264>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d045      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	4a89      	ldr	r2, [pc, #548]	; (800cff4 <HAL_DMA_Abort_IT+0x268>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d040      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a88      	ldr	r2, [pc, #544]	; (800cff8 <HAL_DMA_Abort_IT+0x26c>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d03b      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a86      	ldr	r2, [pc, #536]	; (800cffc <HAL_DMA_Abort_IT+0x270>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d036      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a85      	ldr	r2, [pc, #532]	; (800d000 <HAL_DMA_Abort_IT+0x274>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d031      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a83      	ldr	r2, [pc, #524]	; (800d004 <HAL_DMA_Abort_IT+0x278>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d02c      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a82      	ldr	r2, [pc, #520]	; (800d008 <HAL_DMA_Abort_IT+0x27c>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d027      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a80      	ldr	r2, [pc, #512]	; (800d00c <HAL_DMA_Abort_IT+0x280>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d022      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a7f      	ldr	r2, [pc, #508]	; (800d010 <HAL_DMA_Abort_IT+0x284>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d01d      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a7d      	ldr	r2, [pc, #500]	; (800d014 <HAL_DMA_Abort_IT+0x288>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d018      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a7c      	ldr	r2, [pc, #496]	; (800d018 <HAL_DMA_Abort_IT+0x28c>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d013      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a7a      	ldr	r2, [pc, #488]	; (800d01c <HAL_DMA_Abort_IT+0x290>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d00e      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a79      	ldr	r2, [pc, #484]	; (800d020 <HAL_DMA_Abort_IT+0x294>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d009      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4a77      	ldr	r2, [pc, #476]	; (800d024 <HAL_DMA_Abort_IT+0x298>)
 800ce46:	4293      	cmp	r3, r2
 800ce48:	d004      	beq.n	800ce54 <HAL_DMA_Abort_IT+0xc8>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a76      	ldr	r2, [pc, #472]	; (800d028 <HAL_DMA_Abort_IT+0x29c>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d101      	bne.n	800ce58 <HAL_DMA_Abort_IT+0xcc>
 800ce54:	2301      	movs	r3, #1
 800ce56:	e000      	b.n	800ce5a <HAL_DMA_Abort_IT+0xce>
 800ce58:	2300      	movs	r3, #0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d065      	beq.n	800cf2a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2204      	movs	r2, #4
 800ce62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a60      	ldr	r2, [pc, #384]	; (800cfec <HAL_DMA_Abort_IT+0x260>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d04a      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a5e      	ldr	r2, [pc, #376]	; (800cff0 <HAL_DMA_Abort_IT+0x264>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d045      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a5d      	ldr	r2, [pc, #372]	; (800cff4 <HAL_DMA_Abort_IT+0x268>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d040      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a5b      	ldr	r2, [pc, #364]	; (800cff8 <HAL_DMA_Abort_IT+0x26c>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d03b      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a5a      	ldr	r2, [pc, #360]	; (800cffc <HAL_DMA_Abort_IT+0x270>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d036      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a58      	ldr	r2, [pc, #352]	; (800d000 <HAL_DMA_Abort_IT+0x274>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d031      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4a57      	ldr	r2, [pc, #348]	; (800d004 <HAL_DMA_Abort_IT+0x278>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d02c      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a55      	ldr	r2, [pc, #340]	; (800d008 <HAL_DMA_Abort_IT+0x27c>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d027      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a54      	ldr	r2, [pc, #336]	; (800d00c <HAL_DMA_Abort_IT+0x280>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d022      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a52      	ldr	r2, [pc, #328]	; (800d010 <HAL_DMA_Abort_IT+0x284>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d01d      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a51      	ldr	r2, [pc, #324]	; (800d014 <HAL_DMA_Abort_IT+0x288>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d018      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a4f      	ldr	r2, [pc, #316]	; (800d018 <HAL_DMA_Abort_IT+0x28c>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d013      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a4e      	ldr	r2, [pc, #312]	; (800d01c <HAL_DMA_Abort_IT+0x290>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d00e      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a4c      	ldr	r2, [pc, #304]	; (800d020 <HAL_DMA_Abort_IT+0x294>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d009      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a4b      	ldr	r2, [pc, #300]	; (800d024 <HAL_DMA_Abort_IT+0x298>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d004      	beq.n	800cf06 <HAL_DMA_Abort_IT+0x17a>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a49      	ldr	r2, [pc, #292]	; (800d028 <HAL_DMA_Abort_IT+0x29c>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d108      	bne.n	800cf18 <HAL_DMA_Abort_IT+0x18c>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f022 0201 	bic.w	r2, r2, #1
 800cf14:	601a      	str	r2, [r3, #0]
 800cf16:	e147      	b.n	800d1a8 <HAL_DMA_Abort_IT+0x41c>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f022 0201 	bic.w	r2, r2, #1
 800cf26:	601a      	str	r2, [r3, #0]
 800cf28:	e13e      	b.n	800d1a8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f022 020e 	bic.w	r2, r2, #14
 800cf38:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a2b      	ldr	r2, [pc, #172]	; (800cfec <HAL_DMA_Abort_IT+0x260>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d04a      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a29      	ldr	r2, [pc, #164]	; (800cff0 <HAL_DMA_Abort_IT+0x264>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d045      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a28      	ldr	r2, [pc, #160]	; (800cff4 <HAL_DMA_Abort_IT+0x268>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d040      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a26      	ldr	r2, [pc, #152]	; (800cff8 <HAL_DMA_Abort_IT+0x26c>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d03b      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a25      	ldr	r2, [pc, #148]	; (800cffc <HAL_DMA_Abort_IT+0x270>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d036      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a23      	ldr	r2, [pc, #140]	; (800d000 <HAL_DMA_Abort_IT+0x274>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d031      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a22      	ldr	r2, [pc, #136]	; (800d004 <HAL_DMA_Abort_IT+0x278>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d02c      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a20      	ldr	r2, [pc, #128]	; (800d008 <HAL_DMA_Abort_IT+0x27c>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d027      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a1f      	ldr	r2, [pc, #124]	; (800d00c <HAL_DMA_Abort_IT+0x280>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d022      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a1d      	ldr	r2, [pc, #116]	; (800d010 <HAL_DMA_Abort_IT+0x284>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d01d      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4a1c      	ldr	r2, [pc, #112]	; (800d014 <HAL_DMA_Abort_IT+0x288>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d018      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a1a      	ldr	r2, [pc, #104]	; (800d018 <HAL_DMA_Abort_IT+0x28c>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d013      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a19      	ldr	r2, [pc, #100]	; (800d01c <HAL_DMA_Abort_IT+0x290>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d00e      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a17      	ldr	r2, [pc, #92]	; (800d020 <HAL_DMA_Abort_IT+0x294>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d009      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a16      	ldr	r2, [pc, #88]	; (800d024 <HAL_DMA_Abort_IT+0x298>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d004      	beq.n	800cfda <HAL_DMA_Abort_IT+0x24e>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a14      	ldr	r2, [pc, #80]	; (800d028 <HAL_DMA_Abort_IT+0x29c>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d128      	bne.n	800d02c <HAL_DMA_Abort_IT+0x2a0>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f022 0201 	bic.w	r2, r2, #1
 800cfe8:	601a      	str	r2, [r3, #0]
 800cfea:	e027      	b.n	800d03c <HAL_DMA_Abort_IT+0x2b0>
 800cfec:	40020010 	.word	0x40020010
 800cff0:	40020028 	.word	0x40020028
 800cff4:	40020040 	.word	0x40020040
 800cff8:	40020058 	.word	0x40020058
 800cffc:	40020070 	.word	0x40020070
 800d000:	40020088 	.word	0x40020088
 800d004:	400200a0 	.word	0x400200a0
 800d008:	400200b8 	.word	0x400200b8
 800d00c:	40020410 	.word	0x40020410
 800d010:	40020428 	.word	0x40020428
 800d014:	40020440 	.word	0x40020440
 800d018:	40020458 	.word	0x40020458
 800d01c:	40020470 	.word	0x40020470
 800d020:	40020488 	.word	0x40020488
 800d024:	400204a0 	.word	0x400204a0
 800d028:	400204b8 	.word	0x400204b8
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f022 0201 	bic.w	r2, r2, #1
 800d03a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a5c      	ldr	r2, [pc, #368]	; (800d1b4 <HAL_DMA_Abort_IT+0x428>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d072      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4a5b      	ldr	r2, [pc, #364]	; (800d1b8 <HAL_DMA_Abort_IT+0x42c>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d06d      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a59      	ldr	r2, [pc, #356]	; (800d1bc <HAL_DMA_Abort_IT+0x430>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d068      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a58      	ldr	r2, [pc, #352]	; (800d1c0 <HAL_DMA_Abort_IT+0x434>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d063      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a56      	ldr	r2, [pc, #344]	; (800d1c4 <HAL_DMA_Abort_IT+0x438>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d05e      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4a55      	ldr	r2, [pc, #340]	; (800d1c8 <HAL_DMA_Abort_IT+0x43c>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d059      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a53      	ldr	r2, [pc, #332]	; (800d1cc <HAL_DMA_Abort_IT+0x440>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d054      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4a52      	ldr	r2, [pc, #328]	; (800d1d0 <HAL_DMA_Abort_IT+0x444>)
 800d088:	4293      	cmp	r3, r2
 800d08a:	d04f      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a50      	ldr	r2, [pc, #320]	; (800d1d4 <HAL_DMA_Abort_IT+0x448>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d04a      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a4f      	ldr	r2, [pc, #316]	; (800d1d8 <HAL_DMA_Abort_IT+0x44c>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d045      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a4d      	ldr	r2, [pc, #308]	; (800d1dc <HAL_DMA_Abort_IT+0x450>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d040      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a4c      	ldr	r2, [pc, #304]	; (800d1e0 <HAL_DMA_Abort_IT+0x454>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d03b      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a4a      	ldr	r2, [pc, #296]	; (800d1e4 <HAL_DMA_Abort_IT+0x458>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d036      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a49      	ldr	r2, [pc, #292]	; (800d1e8 <HAL_DMA_Abort_IT+0x45c>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d031      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a47      	ldr	r2, [pc, #284]	; (800d1ec <HAL_DMA_Abort_IT+0x460>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d02c      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a46      	ldr	r2, [pc, #280]	; (800d1f0 <HAL_DMA_Abort_IT+0x464>)
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	d027      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a44      	ldr	r2, [pc, #272]	; (800d1f4 <HAL_DMA_Abort_IT+0x468>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d022      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a43      	ldr	r2, [pc, #268]	; (800d1f8 <HAL_DMA_Abort_IT+0x46c>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d01d      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a41      	ldr	r2, [pc, #260]	; (800d1fc <HAL_DMA_Abort_IT+0x470>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d018      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a40      	ldr	r2, [pc, #256]	; (800d200 <HAL_DMA_Abort_IT+0x474>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d013      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a3e      	ldr	r2, [pc, #248]	; (800d204 <HAL_DMA_Abort_IT+0x478>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d00e      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a3d      	ldr	r2, [pc, #244]	; (800d208 <HAL_DMA_Abort_IT+0x47c>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d009      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a3b      	ldr	r2, [pc, #236]	; (800d20c <HAL_DMA_Abort_IT+0x480>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d004      	beq.n	800d12c <HAL_DMA_Abort_IT+0x3a0>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	4a3a      	ldr	r2, [pc, #232]	; (800d210 <HAL_DMA_Abort_IT+0x484>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d101      	bne.n	800d130 <HAL_DMA_Abort_IT+0x3a4>
 800d12c:	2301      	movs	r3, #1
 800d12e:	e000      	b.n	800d132 <HAL_DMA_Abort_IT+0x3a6>
 800d130:	2300      	movs	r3, #0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d028      	beq.n	800d188 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d144:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d14a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d150:	f003 031f 	and.w	r3, r3, #31
 800d154:	2201      	movs	r2, #1
 800d156:	409a      	lsls	r2, r3
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d164:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00c      	beq.n	800d188 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d17c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d186:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d003      	beq.n	800d1a8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800d1a8:	2300      	movs	r3, #0
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	40020010 	.word	0x40020010
 800d1b8:	40020028 	.word	0x40020028
 800d1bc:	40020040 	.word	0x40020040
 800d1c0:	40020058 	.word	0x40020058
 800d1c4:	40020070 	.word	0x40020070
 800d1c8:	40020088 	.word	0x40020088
 800d1cc:	400200a0 	.word	0x400200a0
 800d1d0:	400200b8 	.word	0x400200b8
 800d1d4:	40020410 	.word	0x40020410
 800d1d8:	40020428 	.word	0x40020428
 800d1dc:	40020440 	.word	0x40020440
 800d1e0:	40020458 	.word	0x40020458
 800d1e4:	40020470 	.word	0x40020470
 800d1e8:	40020488 	.word	0x40020488
 800d1ec:	400204a0 	.word	0x400204a0
 800d1f0:	400204b8 	.word	0x400204b8
 800d1f4:	58025408 	.word	0x58025408
 800d1f8:	5802541c 	.word	0x5802541c
 800d1fc:	58025430 	.word	0x58025430
 800d200:	58025444 	.word	0x58025444
 800d204:	58025458 	.word	0x58025458
 800d208:	5802546c 	.word	0x5802546c
 800d20c:	58025480 	.word	0x58025480
 800d210:	58025494 	.word	0x58025494

0800d214 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b08a      	sub	sp, #40	; 0x28
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800d21c:	2300      	movs	r3, #0
 800d21e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800d220:	4b67      	ldr	r3, [pc, #412]	; (800d3c0 <HAL_DMA_IRQHandler+0x1ac>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a67      	ldr	r2, [pc, #412]	; (800d3c4 <HAL_DMA_IRQHandler+0x1b0>)
 800d226:	fba2 2303 	umull	r2, r3, r2, r3
 800d22a:	0a9b      	lsrs	r3, r3, #10
 800d22c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d232:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d238:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800d23a:	6a3b      	ldr	r3, [r7, #32]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4a5f      	ldr	r2, [pc, #380]	; (800d3c8 <HAL_DMA_IRQHandler+0x1b4>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d04a      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a5d      	ldr	r2, [pc, #372]	; (800d3cc <HAL_DMA_IRQHandler+0x1b8>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d045      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a5c      	ldr	r2, [pc, #368]	; (800d3d0 <HAL_DMA_IRQHandler+0x1bc>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d040      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4a5a      	ldr	r2, [pc, #360]	; (800d3d4 <HAL_DMA_IRQHandler+0x1c0>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d03b      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a59      	ldr	r2, [pc, #356]	; (800d3d8 <HAL_DMA_IRQHandler+0x1c4>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d036      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a57      	ldr	r2, [pc, #348]	; (800d3dc <HAL_DMA_IRQHandler+0x1c8>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d031      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a56      	ldr	r2, [pc, #344]	; (800d3e0 <HAL_DMA_IRQHandler+0x1cc>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d02c      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a54      	ldr	r2, [pc, #336]	; (800d3e4 <HAL_DMA_IRQHandler+0x1d0>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d027      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a53      	ldr	r2, [pc, #332]	; (800d3e8 <HAL_DMA_IRQHandler+0x1d4>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d022      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a51      	ldr	r2, [pc, #324]	; (800d3ec <HAL_DMA_IRQHandler+0x1d8>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d01d      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a50      	ldr	r2, [pc, #320]	; (800d3f0 <HAL_DMA_IRQHandler+0x1dc>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d018      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a4e      	ldr	r2, [pc, #312]	; (800d3f4 <HAL_DMA_IRQHandler+0x1e0>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d013      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a4d      	ldr	r2, [pc, #308]	; (800d3f8 <HAL_DMA_IRQHandler+0x1e4>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d00e      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a4b      	ldr	r2, [pc, #300]	; (800d3fc <HAL_DMA_IRQHandler+0x1e8>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d009      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4a4a      	ldr	r2, [pc, #296]	; (800d400 <HAL_DMA_IRQHandler+0x1ec>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d004      	beq.n	800d2e6 <HAL_DMA_IRQHandler+0xd2>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a48      	ldr	r2, [pc, #288]	; (800d404 <HAL_DMA_IRQHandler+0x1f0>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d101      	bne.n	800d2ea <HAL_DMA_IRQHandler+0xd6>
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e000      	b.n	800d2ec <HAL_DMA_IRQHandler+0xd8>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 842b 	beq.w	800db48 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2f6:	f003 031f 	and.w	r3, r3, #31
 800d2fa:	2208      	movs	r2, #8
 800d2fc:	409a      	lsls	r2, r3
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	4013      	ands	r3, r2
 800d302:	2b00      	cmp	r3, #0
 800d304:	f000 80a2 	beq.w	800d44c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a2e      	ldr	r2, [pc, #184]	; (800d3c8 <HAL_DMA_IRQHandler+0x1b4>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d04a      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a2d      	ldr	r2, [pc, #180]	; (800d3cc <HAL_DMA_IRQHandler+0x1b8>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d045      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a2b      	ldr	r2, [pc, #172]	; (800d3d0 <HAL_DMA_IRQHandler+0x1bc>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d040      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a2a      	ldr	r2, [pc, #168]	; (800d3d4 <HAL_DMA_IRQHandler+0x1c0>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d03b      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a28      	ldr	r2, [pc, #160]	; (800d3d8 <HAL_DMA_IRQHandler+0x1c4>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d036      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4a27      	ldr	r2, [pc, #156]	; (800d3dc <HAL_DMA_IRQHandler+0x1c8>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d031      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4a25      	ldr	r2, [pc, #148]	; (800d3e0 <HAL_DMA_IRQHandler+0x1cc>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d02c      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	4a24      	ldr	r2, [pc, #144]	; (800d3e4 <HAL_DMA_IRQHandler+0x1d0>)
 800d354:	4293      	cmp	r3, r2
 800d356:	d027      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a22      	ldr	r2, [pc, #136]	; (800d3e8 <HAL_DMA_IRQHandler+0x1d4>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d022      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4a21      	ldr	r2, [pc, #132]	; (800d3ec <HAL_DMA_IRQHandler+0x1d8>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d01d      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a1f      	ldr	r2, [pc, #124]	; (800d3f0 <HAL_DMA_IRQHandler+0x1dc>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d018      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a1e      	ldr	r2, [pc, #120]	; (800d3f4 <HAL_DMA_IRQHandler+0x1e0>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d013      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a1c      	ldr	r2, [pc, #112]	; (800d3f8 <HAL_DMA_IRQHandler+0x1e4>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d00e      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a1b      	ldr	r2, [pc, #108]	; (800d3fc <HAL_DMA_IRQHandler+0x1e8>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d009      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a19      	ldr	r2, [pc, #100]	; (800d400 <HAL_DMA_IRQHandler+0x1ec>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d004      	beq.n	800d3a8 <HAL_DMA_IRQHandler+0x194>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a18      	ldr	r2, [pc, #96]	; (800d404 <HAL_DMA_IRQHandler+0x1f0>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d12f      	bne.n	800d408 <HAL_DMA_IRQHandler+0x1f4>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f003 0304 	and.w	r3, r3, #4
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	bf14      	ite	ne
 800d3b6:	2301      	movne	r3, #1
 800d3b8:	2300      	moveq	r3, #0
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	e02e      	b.n	800d41c <HAL_DMA_IRQHandler+0x208>
 800d3be:	bf00      	nop
 800d3c0:	240000cc 	.word	0x240000cc
 800d3c4:	1b4e81b5 	.word	0x1b4e81b5
 800d3c8:	40020010 	.word	0x40020010
 800d3cc:	40020028 	.word	0x40020028
 800d3d0:	40020040 	.word	0x40020040
 800d3d4:	40020058 	.word	0x40020058
 800d3d8:	40020070 	.word	0x40020070
 800d3dc:	40020088 	.word	0x40020088
 800d3e0:	400200a0 	.word	0x400200a0
 800d3e4:	400200b8 	.word	0x400200b8
 800d3e8:	40020410 	.word	0x40020410
 800d3ec:	40020428 	.word	0x40020428
 800d3f0:	40020440 	.word	0x40020440
 800d3f4:	40020458 	.word	0x40020458
 800d3f8:	40020470 	.word	0x40020470
 800d3fc:	40020488 	.word	0x40020488
 800d400:	400204a0 	.word	0x400204a0
 800d404:	400204b8 	.word	0x400204b8
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f003 0308 	and.w	r3, r3, #8
 800d412:	2b00      	cmp	r3, #0
 800d414:	bf14      	ite	ne
 800d416:	2301      	movne	r3, #1
 800d418:	2300      	moveq	r3, #0
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d015      	beq.n	800d44c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f022 0204 	bic.w	r2, r2, #4
 800d42e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d434:	f003 031f 	and.w	r3, r3, #31
 800d438:	2208      	movs	r2, #8
 800d43a:	409a      	lsls	r2, r3
 800d43c:	6a3b      	ldr	r3, [r7, #32]
 800d43e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d444:	f043 0201 	orr.w	r2, r3, #1
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d450:	f003 031f 	and.w	r3, r3, #31
 800d454:	69ba      	ldr	r2, [r7, #24]
 800d456:	fa22 f303 	lsr.w	r3, r2, r3
 800d45a:	f003 0301 	and.w	r3, r3, #1
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d06e      	beq.n	800d540 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a69      	ldr	r2, [pc, #420]	; (800d60c <HAL_DMA_IRQHandler+0x3f8>)
 800d468:	4293      	cmp	r3, r2
 800d46a:	d04a      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a67      	ldr	r2, [pc, #412]	; (800d610 <HAL_DMA_IRQHandler+0x3fc>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d045      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a66      	ldr	r2, [pc, #408]	; (800d614 <HAL_DMA_IRQHandler+0x400>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d040      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a64      	ldr	r2, [pc, #400]	; (800d618 <HAL_DMA_IRQHandler+0x404>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d03b      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a63      	ldr	r2, [pc, #396]	; (800d61c <HAL_DMA_IRQHandler+0x408>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d036      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a61      	ldr	r2, [pc, #388]	; (800d620 <HAL_DMA_IRQHandler+0x40c>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d031      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a60      	ldr	r2, [pc, #384]	; (800d624 <HAL_DMA_IRQHandler+0x410>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d02c      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4a5e      	ldr	r2, [pc, #376]	; (800d628 <HAL_DMA_IRQHandler+0x414>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d027      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4a5d      	ldr	r2, [pc, #372]	; (800d62c <HAL_DMA_IRQHandler+0x418>)
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d022      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a5b      	ldr	r2, [pc, #364]	; (800d630 <HAL_DMA_IRQHandler+0x41c>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d01d      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4a5a      	ldr	r2, [pc, #360]	; (800d634 <HAL_DMA_IRQHandler+0x420>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d018      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a58      	ldr	r2, [pc, #352]	; (800d638 <HAL_DMA_IRQHandler+0x424>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d013      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4a57      	ldr	r2, [pc, #348]	; (800d63c <HAL_DMA_IRQHandler+0x428>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d00e      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a55      	ldr	r2, [pc, #340]	; (800d640 <HAL_DMA_IRQHandler+0x42c>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d009      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a54      	ldr	r2, [pc, #336]	; (800d644 <HAL_DMA_IRQHandler+0x430>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d004      	beq.n	800d502 <HAL_DMA_IRQHandler+0x2ee>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a52      	ldr	r2, [pc, #328]	; (800d648 <HAL_DMA_IRQHandler+0x434>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d10a      	bne.n	800d518 <HAL_DMA_IRQHandler+0x304>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	695b      	ldr	r3, [r3, #20]
 800d508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	bf14      	ite	ne
 800d510:	2301      	movne	r3, #1
 800d512:	2300      	moveq	r3, #0
 800d514:	b2db      	uxtb	r3, r3
 800d516:	e003      	b.n	800d520 <HAL_DMA_IRQHandler+0x30c>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2300      	movs	r3, #0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d00d      	beq.n	800d540 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d528:	f003 031f 	and.w	r3, r3, #31
 800d52c:	2201      	movs	r2, #1
 800d52e:	409a      	lsls	r2, r3
 800d530:	6a3b      	ldr	r3, [r7, #32]
 800d532:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d538:	f043 0202 	orr.w	r2, r3, #2
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d544:	f003 031f 	and.w	r3, r3, #31
 800d548:	2204      	movs	r2, #4
 800d54a:	409a      	lsls	r2, r3
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	4013      	ands	r3, r2
 800d550:	2b00      	cmp	r3, #0
 800d552:	f000 808f 	beq.w	800d674 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4a2c      	ldr	r2, [pc, #176]	; (800d60c <HAL_DMA_IRQHandler+0x3f8>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d04a      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4a2a      	ldr	r2, [pc, #168]	; (800d610 <HAL_DMA_IRQHandler+0x3fc>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d045      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4a29      	ldr	r2, [pc, #164]	; (800d614 <HAL_DMA_IRQHandler+0x400>)
 800d570:	4293      	cmp	r3, r2
 800d572:	d040      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a27      	ldr	r2, [pc, #156]	; (800d618 <HAL_DMA_IRQHandler+0x404>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d03b      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4a26      	ldr	r2, [pc, #152]	; (800d61c <HAL_DMA_IRQHandler+0x408>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d036      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4a24      	ldr	r2, [pc, #144]	; (800d620 <HAL_DMA_IRQHandler+0x40c>)
 800d58e:	4293      	cmp	r3, r2
 800d590:	d031      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a23      	ldr	r2, [pc, #140]	; (800d624 <HAL_DMA_IRQHandler+0x410>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d02c      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a21      	ldr	r2, [pc, #132]	; (800d628 <HAL_DMA_IRQHandler+0x414>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d027      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a20      	ldr	r2, [pc, #128]	; (800d62c <HAL_DMA_IRQHandler+0x418>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d022      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a1e      	ldr	r2, [pc, #120]	; (800d630 <HAL_DMA_IRQHandler+0x41c>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d01d      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4a1d      	ldr	r2, [pc, #116]	; (800d634 <HAL_DMA_IRQHandler+0x420>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d018      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4a1b      	ldr	r2, [pc, #108]	; (800d638 <HAL_DMA_IRQHandler+0x424>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d013      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a1a      	ldr	r2, [pc, #104]	; (800d63c <HAL_DMA_IRQHandler+0x428>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d00e      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4a18      	ldr	r2, [pc, #96]	; (800d640 <HAL_DMA_IRQHandler+0x42c>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d009      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	4a17      	ldr	r2, [pc, #92]	; (800d644 <HAL_DMA_IRQHandler+0x430>)
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d004      	beq.n	800d5f6 <HAL_DMA_IRQHandler+0x3e2>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4a15      	ldr	r2, [pc, #84]	; (800d648 <HAL_DMA_IRQHandler+0x434>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d12a      	bne.n	800d64c <HAL_DMA_IRQHandler+0x438>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f003 0302 	and.w	r3, r3, #2
 800d600:	2b00      	cmp	r3, #0
 800d602:	bf14      	ite	ne
 800d604:	2301      	movne	r3, #1
 800d606:	2300      	moveq	r3, #0
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	e023      	b.n	800d654 <HAL_DMA_IRQHandler+0x440>
 800d60c:	40020010 	.word	0x40020010
 800d610:	40020028 	.word	0x40020028
 800d614:	40020040 	.word	0x40020040
 800d618:	40020058 	.word	0x40020058
 800d61c:	40020070 	.word	0x40020070
 800d620:	40020088 	.word	0x40020088
 800d624:	400200a0 	.word	0x400200a0
 800d628:	400200b8 	.word	0x400200b8
 800d62c:	40020410 	.word	0x40020410
 800d630:	40020428 	.word	0x40020428
 800d634:	40020440 	.word	0x40020440
 800d638:	40020458 	.word	0x40020458
 800d63c:	40020470 	.word	0x40020470
 800d640:	40020488 	.word	0x40020488
 800d644:	400204a0 	.word	0x400204a0
 800d648:	400204b8 	.word	0x400204b8
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2300      	movs	r3, #0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d00d      	beq.n	800d674 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d65c:	f003 031f 	and.w	r3, r3, #31
 800d660:	2204      	movs	r2, #4
 800d662:	409a      	lsls	r2, r3
 800d664:	6a3b      	ldr	r3, [r7, #32]
 800d666:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d66c:	f043 0204 	orr.w	r2, r3, #4
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d678:	f003 031f 	and.w	r3, r3, #31
 800d67c:	2210      	movs	r2, #16
 800d67e:	409a      	lsls	r2, r3
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	4013      	ands	r3, r2
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 80a6 	beq.w	800d7d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4a85      	ldr	r2, [pc, #532]	; (800d8a4 <HAL_DMA_IRQHandler+0x690>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d04a      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	4a83      	ldr	r2, [pc, #524]	; (800d8a8 <HAL_DMA_IRQHandler+0x694>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d045      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4a82      	ldr	r2, [pc, #520]	; (800d8ac <HAL_DMA_IRQHandler+0x698>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d040      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a80      	ldr	r2, [pc, #512]	; (800d8b0 <HAL_DMA_IRQHandler+0x69c>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d03b      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a7f      	ldr	r2, [pc, #508]	; (800d8b4 <HAL_DMA_IRQHandler+0x6a0>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d036      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a7d      	ldr	r2, [pc, #500]	; (800d8b8 <HAL_DMA_IRQHandler+0x6a4>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d031      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4a7c      	ldr	r2, [pc, #496]	; (800d8bc <HAL_DMA_IRQHandler+0x6a8>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d02c      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4a7a      	ldr	r2, [pc, #488]	; (800d8c0 <HAL_DMA_IRQHandler+0x6ac>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d027      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4a79      	ldr	r2, [pc, #484]	; (800d8c4 <HAL_DMA_IRQHandler+0x6b0>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d022      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4a77      	ldr	r2, [pc, #476]	; (800d8c8 <HAL_DMA_IRQHandler+0x6b4>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d01d      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4a76      	ldr	r2, [pc, #472]	; (800d8cc <HAL_DMA_IRQHandler+0x6b8>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d018      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a74      	ldr	r2, [pc, #464]	; (800d8d0 <HAL_DMA_IRQHandler+0x6bc>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d013      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a73      	ldr	r2, [pc, #460]	; (800d8d4 <HAL_DMA_IRQHandler+0x6c0>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d00e      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a71      	ldr	r2, [pc, #452]	; (800d8d8 <HAL_DMA_IRQHandler+0x6c4>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d009      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a70      	ldr	r2, [pc, #448]	; (800d8dc <HAL_DMA_IRQHandler+0x6c8>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d004      	beq.n	800d72a <HAL_DMA_IRQHandler+0x516>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4a6e      	ldr	r2, [pc, #440]	; (800d8e0 <HAL_DMA_IRQHandler+0x6cc>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d10a      	bne.n	800d740 <HAL_DMA_IRQHandler+0x52c>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f003 0308 	and.w	r3, r3, #8
 800d734:	2b00      	cmp	r3, #0
 800d736:	bf14      	ite	ne
 800d738:	2301      	movne	r3, #1
 800d73a:	2300      	moveq	r3, #0
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	e009      	b.n	800d754 <HAL_DMA_IRQHandler+0x540>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f003 0304 	and.w	r3, r3, #4
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	bf14      	ite	ne
 800d74e:	2301      	movne	r3, #1
 800d750:	2300      	moveq	r3, #0
 800d752:	b2db      	uxtb	r3, r3
 800d754:	2b00      	cmp	r3, #0
 800d756:	d03e      	beq.n	800d7d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d75c:	f003 031f 	and.w	r3, r3, #31
 800d760:	2210      	movs	r2, #16
 800d762:	409a      	lsls	r2, r3
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d772:	2b00      	cmp	r3, #0
 800d774:	d018      	beq.n	800d7a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d780:	2b00      	cmp	r3, #0
 800d782:	d108      	bne.n	800d796 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d024      	beq.n	800d7d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	4798      	blx	r3
 800d794:	e01f      	b.n	800d7d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d01b      	beq.n	800d7d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	4798      	blx	r3
 800d7a6:	e016      	b.n	800d7d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d107      	bne.n	800d7c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f022 0208 	bic.w	r2, r2, #8
 800d7c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d003      	beq.n	800d7d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7da:	f003 031f 	and.w	r3, r3, #31
 800d7de:	2220      	movs	r2, #32
 800d7e0:	409a      	lsls	r2, r3
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	4013      	ands	r3, r2
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	f000 8110 	beq.w	800da0c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a2c      	ldr	r2, [pc, #176]	; (800d8a4 <HAL_DMA_IRQHandler+0x690>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d04a      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	4a2b      	ldr	r2, [pc, #172]	; (800d8a8 <HAL_DMA_IRQHandler+0x694>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d045      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a29      	ldr	r2, [pc, #164]	; (800d8ac <HAL_DMA_IRQHandler+0x698>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d040      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4a28      	ldr	r2, [pc, #160]	; (800d8b0 <HAL_DMA_IRQHandler+0x69c>)
 800d810:	4293      	cmp	r3, r2
 800d812:	d03b      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4a26      	ldr	r2, [pc, #152]	; (800d8b4 <HAL_DMA_IRQHandler+0x6a0>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d036      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4a25      	ldr	r2, [pc, #148]	; (800d8b8 <HAL_DMA_IRQHandler+0x6a4>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d031      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a23      	ldr	r2, [pc, #140]	; (800d8bc <HAL_DMA_IRQHandler+0x6a8>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d02c      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4a22      	ldr	r2, [pc, #136]	; (800d8c0 <HAL_DMA_IRQHandler+0x6ac>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d027      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a20      	ldr	r2, [pc, #128]	; (800d8c4 <HAL_DMA_IRQHandler+0x6b0>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d022      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4a1f      	ldr	r2, [pc, #124]	; (800d8c8 <HAL_DMA_IRQHandler+0x6b4>)
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d01d      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a1d      	ldr	r2, [pc, #116]	; (800d8cc <HAL_DMA_IRQHandler+0x6b8>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d018      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4a1c      	ldr	r2, [pc, #112]	; (800d8d0 <HAL_DMA_IRQHandler+0x6bc>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d013      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4a1a      	ldr	r2, [pc, #104]	; (800d8d4 <HAL_DMA_IRQHandler+0x6c0>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d00e      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a19      	ldr	r2, [pc, #100]	; (800d8d8 <HAL_DMA_IRQHandler+0x6c4>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d009      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a17      	ldr	r2, [pc, #92]	; (800d8dc <HAL_DMA_IRQHandler+0x6c8>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d004      	beq.n	800d88c <HAL_DMA_IRQHandler+0x678>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4a16      	ldr	r2, [pc, #88]	; (800d8e0 <HAL_DMA_IRQHandler+0x6cc>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d12b      	bne.n	800d8e4 <HAL_DMA_IRQHandler+0x6d0>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f003 0310 	and.w	r3, r3, #16
 800d896:	2b00      	cmp	r3, #0
 800d898:	bf14      	ite	ne
 800d89a:	2301      	movne	r3, #1
 800d89c:	2300      	moveq	r3, #0
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	e02a      	b.n	800d8f8 <HAL_DMA_IRQHandler+0x6e4>
 800d8a2:	bf00      	nop
 800d8a4:	40020010 	.word	0x40020010
 800d8a8:	40020028 	.word	0x40020028
 800d8ac:	40020040 	.word	0x40020040
 800d8b0:	40020058 	.word	0x40020058
 800d8b4:	40020070 	.word	0x40020070
 800d8b8:	40020088 	.word	0x40020088
 800d8bc:	400200a0 	.word	0x400200a0
 800d8c0:	400200b8 	.word	0x400200b8
 800d8c4:	40020410 	.word	0x40020410
 800d8c8:	40020428 	.word	0x40020428
 800d8cc:	40020440 	.word	0x40020440
 800d8d0:	40020458 	.word	0x40020458
 800d8d4:	40020470 	.word	0x40020470
 800d8d8:	40020488 	.word	0x40020488
 800d8dc:	400204a0 	.word	0x400204a0
 800d8e0:	400204b8 	.word	0x400204b8
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f003 0302 	and.w	r3, r3, #2
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	bf14      	ite	ne
 800d8f2:	2301      	movne	r3, #1
 800d8f4:	2300      	moveq	r3, #0
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f000 8087 	beq.w	800da0c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d902:	f003 031f 	and.w	r3, r3, #31
 800d906:	2220      	movs	r2, #32
 800d908:	409a      	lsls	r2, r3
 800d90a:	6a3b      	ldr	r3, [r7, #32]
 800d90c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d914:	b2db      	uxtb	r3, r3
 800d916:	2b04      	cmp	r3, #4
 800d918:	d139      	bne.n	800d98e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f022 0216 	bic.w	r2, r2, #22
 800d928:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	695a      	ldr	r2, [r3, #20]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d938:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d103      	bne.n	800d94a <HAL_DMA_IRQHandler+0x736>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d946:	2b00      	cmp	r3, #0
 800d948:	d007      	beq.n	800d95a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	681a      	ldr	r2, [r3, #0]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f022 0208 	bic.w	r2, r2, #8
 800d958:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d95e:	f003 031f 	and.w	r3, r3, #31
 800d962:	223f      	movs	r2, #63	; 0x3f
 800d964:	409a      	lsls	r2, r3
 800d966:	6a3b      	ldr	r3, [r7, #32]
 800d968:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2201      	movs	r2, #1
 800d976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d97e:	2b00      	cmp	r3, #0
 800d980:	f000 834a 	beq.w	800e018 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	4798      	blx	r3
          }
          return;
 800d98c:	e344      	b.n	800e018 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d018      	beq.n	800d9ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d108      	bne.n	800d9bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d02c      	beq.n	800da0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	4798      	blx	r3
 800d9ba:	e027      	b.n	800da0c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d023      	beq.n	800da0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	4798      	blx	r3
 800d9cc:	e01e      	b.n	800da0c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d10f      	bne.n	800d9fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f022 0210 	bic.w	r2, r2, #16
 800d9ea:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da00:	2b00      	cmp	r3, #0
 800da02:	d003      	beq.n	800da0c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da10:	2b00      	cmp	r3, #0
 800da12:	f000 8306 	beq.w	800e022 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da1a:	f003 0301 	and.w	r3, r3, #1
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f000 8088 	beq.w	800db34 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2204      	movs	r2, #4
 800da28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4a7a      	ldr	r2, [pc, #488]	; (800dc1c <HAL_DMA_IRQHandler+0xa08>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d04a      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a79      	ldr	r2, [pc, #484]	; (800dc20 <HAL_DMA_IRQHandler+0xa0c>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d045      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a77      	ldr	r2, [pc, #476]	; (800dc24 <HAL_DMA_IRQHandler+0xa10>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d040      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a76      	ldr	r2, [pc, #472]	; (800dc28 <HAL_DMA_IRQHandler+0xa14>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d03b      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a74      	ldr	r2, [pc, #464]	; (800dc2c <HAL_DMA_IRQHandler+0xa18>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d036      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4a73      	ldr	r2, [pc, #460]	; (800dc30 <HAL_DMA_IRQHandler+0xa1c>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d031      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a71      	ldr	r2, [pc, #452]	; (800dc34 <HAL_DMA_IRQHandler+0xa20>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d02c      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a70      	ldr	r2, [pc, #448]	; (800dc38 <HAL_DMA_IRQHandler+0xa24>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d027      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a6e      	ldr	r2, [pc, #440]	; (800dc3c <HAL_DMA_IRQHandler+0xa28>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d022      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a6d      	ldr	r2, [pc, #436]	; (800dc40 <HAL_DMA_IRQHandler+0xa2c>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d01d      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a6b      	ldr	r2, [pc, #428]	; (800dc44 <HAL_DMA_IRQHandler+0xa30>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d018      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a6a      	ldr	r2, [pc, #424]	; (800dc48 <HAL_DMA_IRQHandler+0xa34>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d013      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a68      	ldr	r2, [pc, #416]	; (800dc4c <HAL_DMA_IRQHandler+0xa38>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d00e      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a67      	ldr	r2, [pc, #412]	; (800dc50 <HAL_DMA_IRQHandler+0xa3c>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d009      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a65      	ldr	r2, [pc, #404]	; (800dc54 <HAL_DMA_IRQHandler+0xa40>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d004      	beq.n	800dacc <HAL_DMA_IRQHandler+0x8b8>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a64      	ldr	r2, [pc, #400]	; (800dc58 <HAL_DMA_IRQHandler+0xa44>)
 800dac8:	4293      	cmp	r3, r2
 800daca:	d108      	bne.n	800dade <HAL_DMA_IRQHandler+0x8ca>
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f022 0201 	bic.w	r2, r2, #1
 800dada:	601a      	str	r2, [r3, #0]
 800dadc:	e007      	b.n	800daee <HAL_DMA_IRQHandler+0x8da>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f022 0201 	bic.w	r2, r2, #1
 800daec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	3301      	adds	r3, #1
 800daf2:	60fb      	str	r3, [r7, #12]
 800daf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d307      	bcc.n	800db0a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f003 0301 	and.w	r3, r3, #1
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1f2      	bne.n	800daee <HAL_DMA_IRQHandler+0x8da>
 800db08:	e000      	b.n	800db0c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800db0a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2200      	movs	r2, #0
 800db10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f003 0301 	and.w	r3, r3, #1
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d004      	beq.n	800db2c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2203      	movs	r2, #3
 800db26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800db2a:	e003      	b.n	800db34 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f000 8272 	beq.w	800e022 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	4798      	blx	r3
 800db46:	e26c      	b.n	800e022 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a43      	ldr	r2, [pc, #268]	; (800dc5c <HAL_DMA_IRQHandler+0xa48>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d022      	beq.n	800db98 <HAL_DMA_IRQHandler+0x984>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a42      	ldr	r2, [pc, #264]	; (800dc60 <HAL_DMA_IRQHandler+0xa4c>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d01d      	beq.n	800db98 <HAL_DMA_IRQHandler+0x984>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a40      	ldr	r2, [pc, #256]	; (800dc64 <HAL_DMA_IRQHandler+0xa50>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d018      	beq.n	800db98 <HAL_DMA_IRQHandler+0x984>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a3f      	ldr	r2, [pc, #252]	; (800dc68 <HAL_DMA_IRQHandler+0xa54>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d013      	beq.n	800db98 <HAL_DMA_IRQHandler+0x984>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a3d      	ldr	r2, [pc, #244]	; (800dc6c <HAL_DMA_IRQHandler+0xa58>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d00e      	beq.n	800db98 <HAL_DMA_IRQHandler+0x984>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a3c      	ldr	r2, [pc, #240]	; (800dc70 <HAL_DMA_IRQHandler+0xa5c>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d009      	beq.n	800db98 <HAL_DMA_IRQHandler+0x984>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4a3a      	ldr	r2, [pc, #232]	; (800dc74 <HAL_DMA_IRQHandler+0xa60>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d004      	beq.n	800db98 <HAL_DMA_IRQHandler+0x984>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a39      	ldr	r2, [pc, #228]	; (800dc78 <HAL_DMA_IRQHandler+0xa64>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d101      	bne.n	800db9c <HAL_DMA_IRQHandler+0x988>
 800db98:	2301      	movs	r3, #1
 800db9a:	e000      	b.n	800db9e <HAL_DMA_IRQHandler+0x98a>
 800db9c:	2300      	movs	r3, #0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	f000 823f 	beq.w	800e022 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbb0:	f003 031f 	and.w	r3, r3, #31
 800dbb4:	2204      	movs	r2, #4
 800dbb6:	409a      	lsls	r2, r3
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	4013      	ands	r3, r2
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f000 80cd 	beq.w	800dd5c <HAL_DMA_IRQHandler+0xb48>
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	f003 0304 	and.w	r3, r3, #4
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f000 80c7 	beq.w	800dd5c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbd2:	f003 031f 	and.w	r3, r3, #31
 800dbd6:	2204      	movs	r2, #4
 800dbd8:	409a      	lsls	r2, r3
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d049      	beq.n	800dc7c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d109      	bne.n	800dc06 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 8210 	beq.w	800e01c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dc04:	e20a      	b.n	800e01c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f000 8206 	beq.w	800e01c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dc18:	e200      	b.n	800e01c <HAL_DMA_IRQHandler+0xe08>
 800dc1a:	bf00      	nop
 800dc1c:	40020010 	.word	0x40020010
 800dc20:	40020028 	.word	0x40020028
 800dc24:	40020040 	.word	0x40020040
 800dc28:	40020058 	.word	0x40020058
 800dc2c:	40020070 	.word	0x40020070
 800dc30:	40020088 	.word	0x40020088
 800dc34:	400200a0 	.word	0x400200a0
 800dc38:	400200b8 	.word	0x400200b8
 800dc3c:	40020410 	.word	0x40020410
 800dc40:	40020428 	.word	0x40020428
 800dc44:	40020440 	.word	0x40020440
 800dc48:	40020458 	.word	0x40020458
 800dc4c:	40020470 	.word	0x40020470
 800dc50:	40020488 	.word	0x40020488
 800dc54:	400204a0 	.word	0x400204a0
 800dc58:	400204b8 	.word	0x400204b8
 800dc5c:	58025408 	.word	0x58025408
 800dc60:	5802541c 	.word	0x5802541c
 800dc64:	58025430 	.word	0x58025430
 800dc68:	58025444 	.word	0x58025444
 800dc6c:	58025458 	.word	0x58025458
 800dc70:	5802546c 	.word	0x5802546c
 800dc74:	58025480 	.word	0x58025480
 800dc78:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	f003 0320 	and.w	r3, r3, #32
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d160      	bne.n	800dd48 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4a8c      	ldr	r2, [pc, #560]	; (800debc <HAL_DMA_IRQHandler+0xca8>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d04a      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a8a      	ldr	r2, [pc, #552]	; (800dec0 <HAL_DMA_IRQHandler+0xcac>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d045      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4a89      	ldr	r2, [pc, #548]	; (800dec4 <HAL_DMA_IRQHandler+0xcb0>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d040      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a87      	ldr	r2, [pc, #540]	; (800dec8 <HAL_DMA_IRQHandler+0xcb4>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d03b      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4a86      	ldr	r2, [pc, #536]	; (800decc <HAL_DMA_IRQHandler+0xcb8>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d036      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4a84      	ldr	r2, [pc, #528]	; (800ded0 <HAL_DMA_IRQHandler+0xcbc>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d031      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4a83      	ldr	r2, [pc, #524]	; (800ded4 <HAL_DMA_IRQHandler+0xcc0>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d02c      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a81      	ldr	r2, [pc, #516]	; (800ded8 <HAL_DMA_IRQHandler+0xcc4>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d027      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a80      	ldr	r2, [pc, #512]	; (800dedc <HAL_DMA_IRQHandler+0xcc8>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d022      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4a7e      	ldr	r2, [pc, #504]	; (800dee0 <HAL_DMA_IRQHandler+0xccc>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d01d      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4a7d      	ldr	r2, [pc, #500]	; (800dee4 <HAL_DMA_IRQHandler+0xcd0>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d018      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4a7b      	ldr	r2, [pc, #492]	; (800dee8 <HAL_DMA_IRQHandler+0xcd4>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d013      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	4a7a      	ldr	r2, [pc, #488]	; (800deec <HAL_DMA_IRQHandler+0xcd8>)
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d00e      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4a78      	ldr	r2, [pc, #480]	; (800def0 <HAL_DMA_IRQHandler+0xcdc>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d009      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4a77      	ldr	r2, [pc, #476]	; (800def4 <HAL_DMA_IRQHandler+0xce0>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d004      	beq.n	800dd26 <HAL_DMA_IRQHandler+0xb12>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4a75      	ldr	r2, [pc, #468]	; (800def8 <HAL_DMA_IRQHandler+0xce4>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d108      	bne.n	800dd38 <HAL_DMA_IRQHandler+0xb24>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f022 0208 	bic.w	r2, r2, #8
 800dd34:	601a      	str	r2, [r3, #0]
 800dd36:	e007      	b.n	800dd48 <HAL_DMA_IRQHandler+0xb34>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f022 0204 	bic.w	r2, r2, #4
 800dd46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f000 8165 	beq.w	800e01c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dd5a:	e15f      	b.n	800e01c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd60:	f003 031f 	and.w	r3, r3, #31
 800dd64:	2202      	movs	r2, #2
 800dd66:	409a      	lsls	r2, r3
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	4013      	ands	r3, r2
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f000 80c5 	beq.w	800defc <HAL_DMA_IRQHandler+0xce8>
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	f003 0302 	and.w	r3, r3, #2
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f000 80bf 	beq.w	800defc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd82:	f003 031f 	and.w	r3, r3, #31
 800dd86:	2202      	movs	r2, #2
 800dd88:	409a      	lsls	r2, r3
 800dd8a:	69fb      	ldr	r3, [r7, #28]
 800dd8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d018      	beq.n	800ddca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d109      	bne.n	800ddb6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	f000 813a 	beq.w	800e020 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ddb4:	e134      	b.n	800e020 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	f000 8130 	beq.w	800e020 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ddc8:	e12a      	b.n	800e020 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	f003 0320 	and.w	r3, r3, #32
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d168      	bne.n	800dea6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a38      	ldr	r2, [pc, #224]	; (800debc <HAL_DMA_IRQHandler+0xca8>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d04a      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	4a37      	ldr	r2, [pc, #220]	; (800dec0 <HAL_DMA_IRQHandler+0xcac>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d045      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a35      	ldr	r2, [pc, #212]	; (800dec4 <HAL_DMA_IRQHandler+0xcb0>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d040      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	4a34      	ldr	r2, [pc, #208]	; (800dec8 <HAL_DMA_IRQHandler+0xcb4>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d03b      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a32      	ldr	r2, [pc, #200]	; (800decc <HAL_DMA_IRQHandler+0xcb8>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d036      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4a31      	ldr	r2, [pc, #196]	; (800ded0 <HAL_DMA_IRQHandler+0xcbc>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d031      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4a2f      	ldr	r2, [pc, #188]	; (800ded4 <HAL_DMA_IRQHandler+0xcc0>)
 800de16:	4293      	cmp	r3, r2
 800de18:	d02c      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	4a2e      	ldr	r2, [pc, #184]	; (800ded8 <HAL_DMA_IRQHandler+0xcc4>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d027      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4a2c      	ldr	r2, [pc, #176]	; (800dedc <HAL_DMA_IRQHandler+0xcc8>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d022      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	4a2b      	ldr	r2, [pc, #172]	; (800dee0 <HAL_DMA_IRQHandler+0xccc>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d01d      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4a29      	ldr	r2, [pc, #164]	; (800dee4 <HAL_DMA_IRQHandler+0xcd0>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d018      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a28      	ldr	r2, [pc, #160]	; (800dee8 <HAL_DMA_IRQHandler+0xcd4>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d013      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4a26      	ldr	r2, [pc, #152]	; (800deec <HAL_DMA_IRQHandler+0xcd8>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d00e      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4a25      	ldr	r2, [pc, #148]	; (800def0 <HAL_DMA_IRQHandler+0xcdc>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d009      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a23      	ldr	r2, [pc, #140]	; (800def4 <HAL_DMA_IRQHandler+0xce0>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d004      	beq.n	800de74 <HAL_DMA_IRQHandler+0xc60>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	4a22      	ldr	r2, [pc, #136]	; (800def8 <HAL_DMA_IRQHandler+0xce4>)
 800de70:	4293      	cmp	r3, r2
 800de72:	d108      	bne.n	800de86 <HAL_DMA_IRQHandler+0xc72>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f022 0214 	bic.w	r2, r2, #20
 800de82:	601a      	str	r2, [r3, #0]
 800de84:	e007      	b.n	800de96 <HAL_DMA_IRQHandler+0xc82>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f022 020a 	bic.w	r2, r2, #10
 800de94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2200      	movs	r2, #0
 800de9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2201      	movs	r2, #1
 800dea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f000 80b8 	beq.w	800e020 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800deb8:	e0b2      	b.n	800e020 <HAL_DMA_IRQHandler+0xe0c>
 800deba:	bf00      	nop
 800debc:	40020010 	.word	0x40020010
 800dec0:	40020028 	.word	0x40020028
 800dec4:	40020040 	.word	0x40020040
 800dec8:	40020058 	.word	0x40020058
 800decc:	40020070 	.word	0x40020070
 800ded0:	40020088 	.word	0x40020088
 800ded4:	400200a0 	.word	0x400200a0
 800ded8:	400200b8 	.word	0x400200b8
 800dedc:	40020410 	.word	0x40020410
 800dee0:	40020428 	.word	0x40020428
 800dee4:	40020440 	.word	0x40020440
 800dee8:	40020458 	.word	0x40020458
 800deec:	40020470 	.word	0x40020470
 800def0:	40020488 	.word	0x40020488
 800def4:	400204a0 	.word	0x400204a0
 800def8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df00:	f003 031f 	and.w	r3, r3, #31
 800df04:	2208      	movs	r2, #8
 800df06:	409a      	lsls	r2, r3
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	4013      	ands	r3, r2
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	f000 8088 	beq.w	800e022 <HAL_DMA_IRQHandler+0xe0e>
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	f003 0308 	and.w	r3, r3, #8
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f000 8082 	beq.w	800e022 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a41      	ldr	r2, [pc, #260]	; (800e028 <HAL_DMA_IRQHandler+0xe14>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d04a      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a3f      	ldr	r2, [pc, #252]	; (800e02c <HAL_DMA_IRQHandler+0xe18>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d045      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4a3e      	ldr	r2, [pc, #248]	; (800e030 <HAL_DMA_IRQHandler+0xe1c>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d040      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a3c      	ldr	r2, [pc, #240]	; (800e034 <HAL_DMA_IRQHandler+0xe20>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d03b      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a3b      	ldr	r2, [pc, #236]	; (800e038 <HAL_DMA_IRQHandler+0xe24>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d036      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a39      	ldr	r2, [pc, #228]	; (800e03c <HAL_DMA_IRQHandler+0xe28>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d031      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a38      	ldr	r2, [pc, #224]	; (800e040 <HAL_DMA_IRQHandler+0xe2c>)
 800df60:	4293      	cmp	r3, r2
 800df62:	d02c      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a36      	ldr	r2, [pc, #216]	; (800e044 <HAL_DMA_IRQHandler+0xe30>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d027      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4a35      	ldr	r2, [pc, #212]	; (800e048 <HAL_DMA_IRQHandler+0xe34>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d022      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a33      	ldr	r2, [pc, #204]	; (800e04c <HAL_DMA_IRQHandler+0xe38>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d01d      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4a32      	ldr	r2, [pc, #200]	; (800e050 <HAL_DMA_IRQHandler+0xe3c>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d018      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a30      	ldr	r2, [pc, #192]	; (800e054 <HAL_DMA_IRQHandler+0xe40>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d013      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a2f      	ldr	r2, [pc, #188]	; (800e058 <HAL_DMA_IRQHandler+0xe44>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d00e      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a2d      	ldr	r2, [pc, #180]	; (800e05c <HAL_DMA_IRQHandler+0xe48>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d009      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4a2c      	ldr	r2, [pc, #176]	; (800e060 <HAL_DMA_IRQHandler+0xe4c>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d004      	beq.n	800dfbe <HAL_DMA_IRQHandler+0xdaa>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4a2a      	ldr	r2, [pc, #168]	; (800e064 <HAL_DMA_IRQHandler+0xe50>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d108      	bne.n	800dfd0 <HAL_DMA_IRQHandler+0xdbc>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f022 021c 	bic.w	r2, r2, #28
 800dfcc:	601a      	str	r2, [r3, #0]
 800dfce:	e007      	b.n	800dfe0 <HAL_DMA_IRQHandler+0xdcc>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f022 020e 	bic.w	r2, r2, #14
 800dfde:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfe4:	f003 031f 	and.w	r3, r3, #31
 800dfe8:	2201      	movs	r2, #1
 800dfea:	409a      	lsls	r2, r3
 800dfec:	69fb      	ldr	r3, [r7, #28]
 800dfee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2201      	movs	r2, #1
 800dff4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2201      	movs	r2, #1
 800e002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d009      	beq.n	800e022 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	4798      	blx	r3
 800e016:	e004      	b.n	800e022 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800e018:	bf00      	nop
 800e01a:	e002      	b.n	800e022 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e01c:	bf00      	nop
 800e01e:	e000      	b.n	800e022 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800e020:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800e022:	3728      	adds	r7, #40	; 0x28
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	40020010 	.word	0x40020010
 800e02c:	40020028 	.word	0x40020028
 800e030:	40020040 	.word	0x40020040
 800e034:	40020058 	.word	0x40020058
 800e038:	40020070 	.word	0x40020070
 800e03c:	40020088 	.word	0x40020088
 800e040:	400200a0 	.word	0x400200a0
 800e044:	400200b8 	.word	0x400200b8
 800e048:	40020410 	.word	0x40020410
 800e04c:	40020428 	.word	0x40020428
 800e050:	40020440 	.word	0x40020440
 800e054:	40020458 	.word	0x40020458
 800e058:	40020470 	.word	0x40020470
 800e05c:	40020488 	.word	0x40020488
 800e060:	400204a0 	.word	0x400204a0
 800e064:	400204b8 	.word	0x400204b8

0800e068 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e076:	b2db      	uxtb	r3, r3
}
 800e078:	4618      	mov	r0, r3
 800e07a:	370c      	adds	r7, #12
 800e07c:	46bd      	mov	sp, r7
 800e07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e082:	4770      	bx	lr

0800e084 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800e084:	b480      	push	{r7}
 800e086:	b083      	sub	sp, #12
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800e090:	4618      	mov	r0, r3
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b087      	sub	sp, #28
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	607a      	str	r2, [r7, #4]
 800e0a8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0ae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0b4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4a84      	ldr	r2, [pc, #528]	; (800e2cc <DMA_SetConfig+0x230>)
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d072      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a82      	ldr	r2, [pc, #520]	; (800e2d0 <DMA_SetConfig+0x234>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d06d      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	4a81      	ldr	r2, [pc, #516]	; (800e2d4 <DMA_SetConfig+0x238>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d068      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a7f      	ldr	r2, [pc, #508]	; (800e2d8 <DMA_SetConfig+0x23c>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d063      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4a7e      	ldr	r2, [pc, #504]	; (800e2dc <DMA_SetConfig+0x240>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d05e      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a7c      	ldr	r2, [pc, #496]	; (800e2e0 <DMA_SetConfig+0x244>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d059      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4a7b      	ldr	r2, [pc, #492]	; (800e2e4 <DMA_SetConfig+0x248>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d054      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a79      	ldr	r2, [pc, #484]	; (800e2e8 <DMA_SetConfig+0x24c>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d04f      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4a78      	ldr	r2, [pc, #480]	; (800e2ec <DMA_SetConfig+0x250>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d04a      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a76      	ldr	r2, [pc, #472]	; (800e2f0 <DMA_SetConfig+0x254>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d045      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4a75      	ldr	r2, [pc, #468]	; (800e2f4 <DMA_SetConfig+0x258>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d040      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4a73      	ldr	r2, [pc, #460]	; (800e2f8 <DMA_SetConfig+0x25c>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d03b      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4a72      	ldr	r2, [pc, #456]	; (800e2fc <DMA_SetConfig+0x260>)
 800e134:	4293      	cmp	r3, r2
 800e136:	d036      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a70      	ldr	r2, [pc, #448]	; (800e300 <DMA_SetConfig+0x264>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d031      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a6f      	ldr	r2, [pc, #444]	; (800e304 <DMA_SetConfig+0x268>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d02c      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a6d      	ldr	r2, [pc, #436]	; (800e308 <DMA_SetConfig+0x26c>)
 800e152:	4293      	cmp	r3, r2
 800e154:	d027      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	4a6c      	ldr	r2, [pc, #432]	; (800e30c <DMA_SetConfig+0x270>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d022      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	4a6a      	ldr	r2, [pc, #424]	; (800e310 <DMA_SetConfig+0x274>)
 800e166:	4293      	cmp	r3, r2
 800e168:	d01d      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	4a69      	ldr	r2, [pc, #420]	; (800e314 <DMA_SetConfig+0x278>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d018      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4a67      	ldr	r2, [pc, #412]	; (800e318 <DMA_SetConfig+0x27c>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d013      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	4a66      	ldr	r2, [pc, #408]	; (800e31c <DMA_SetConfig+0x280>)
 800e184:	4293      	cmp	r3, r2
 800e186:	d00e      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	4a64      	ldr	r2, [pc, #400]	; (800e320 <DMA_SetConfig+0x284>)
 800e18e:	4293      	cmp	r3, r2
 800e190:	d009      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4a63      	ldr	r2, [pc, #396]	; (800e324 <DMA_SetConfig+0x288>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d004      	beq.n	800e1a6 <DMA_SetConfig+0x10a>
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4a61      	ldr	r2, [pc, #388]	; (800e328 <DMA_SetConfig+0x28c>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d101      	bne.n	800e1aa <DMA_SetConfig+0x10e>
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e000      	b.n	800e1ac <DMA_SetConfig+0x110>
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00d      	beq.n	800e1cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1b4:	68fa      	ldr	r2, [r7, #12]
 800e1b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e1b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d004      	beq.n	800e1cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1c6:	68fa      	ldr	r2, [r7, #12]
 800e1c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800e1ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4a3e      	ldr	r2, [pc, #248]	; (800e2cc <DMA_SetConfig+0x230>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d04a      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4a3d      	ldr	r2, [pc, #244]	; (800e2d0 <DMA_SetConfig+0x234>)
 800e1dc:	4293      	cmp	r3, r2
 800e1de:	d045      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4a3b      	ldr	r2, [pc, #236]	; (800e2d4 <DMA_SetConfig+0x238>)
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d040      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	4a3a      	ldr	r2, [pc, #232]	; (800e2d8 <DMA_SetConfig+0x23c>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d03b      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4a38      	ldr	r2, [pc, #224]	; (800e2dc <DMA_SetConfig+0x240>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d036      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	4a37      	ldr	r2, [pc, #220]	; (800e2e0 <DMA_SetConfig+0x244>)
 800e204:	4293      	cmp	r3, r2
 800e206:	d031      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a35      	ldr	r2, [pc, #212]	; (800e2e4 <DMA_SetConfig+0x248>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d02c      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4a34      	ldr	r2, [pc, #208]	; (800e2e8 <DMA_SetConfig+0x24c>)
 800e218:	4293      	cmp	r3, r2
 800e21a:	d027      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a32      	ldr	r2, [pc, #200]	; (800e2ec <DMA_SetConfig+0x250>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d022      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a31      	ldr	r2, [pc, #196]	; (800e2f0 <DMA_SetConfig+0x254>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d01d      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a2f      	ldr	r2, [pc, #188]	; (800e2f4 <DMA_SetConfig+0x258>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d018      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4a2e      	ldr	r2, [pc, #184]	; (800e2f8 <DMA_SetConfig+0x25c>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d013      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a2c      	ldr	r2, [pc, #176]	; (800e2fc <DMA_SetConfig+0x260>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d00e      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a2b      	ldr	r2, [pc, #172]	; (800e300 <DMA_SetConfig+0x264>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d009      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4a29      	ldr	r2, [pc, #164]	; (800e304 <DMA_SetConfig+0x268>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d004      	beq.n	800e26c <DMA_SetConfig+0x1d0>
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4a28      	ldr	r2, [pc, #160]	; (800e308 <DMA_SetConfig+0x26c>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d101      	bne.n	800e270 <DMA_SetConfig+0x1d4>
 800e26c:	2301      	movs	r3, #1
 800e26e:	e000      	b.n	800e272 <DMA_SetConfig+0x1d6>
 800e270:	2300      	movs	r3, #0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d05a      	beq.n	800e32c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e27a:	f003 031f 	and.w	r3, r3, #31
 800e27e:	223f      	movs	r2, #63	; 0x3f
 800e280:	409a      	lsls	r2, r3
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e294:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	683a      	ldr	r2, [r7, #0]
 800e29c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	689b      	ldr	r3, [r3, #8]
 800e2a2:	2b40      	cmp	r3, #64	; 0x40
 800e2a4:	d108      	bne.n	800e2b8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	68ba      	ldr	r2, [r7, #8]
 800e2b4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800e2b6:	e087      	b.n	800e3c8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	68ba      	ldr	r2, [r7, #8]
 800e2be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	687a      	ldr	r2, [r7, #4]
 800e2c6:	60da      	str	r2, [r3, #12]
}
 800e2c8:	e07e      	b.n	800e3c8 <DMA_SetConfig+0x32c>
 800e2ca:	bf00      	nop
 800e2cc:	40020010 	.word	0x40020010
 800e2d0:	40020028 	.word	0x40020028
 800e2d4:	40020040 	.word	0x40020040
 800e2d8:	40020058 	.word	0x40020058
 800e2dc:	40020070 	.word	0x40020070
 800e2e0:	40020088 	.word	0x40020088
 800e2e4:	400200a0 	.word	0x400200a0
 800e2e8:	400200b8 	.word	0x400200b8
 800e2ec:	40020410 	.word	0x40020410
 800e2f0:	40020428 	.word	0x40020428
 800e2f4:	40020440 	.word	0x40020440
 800e2f8:	40020458 	.word	0x40020458
 800e2fc:	40020470 	.word	0x40020470
 800e300:	40020488 	.word	0x40020488
 800e304:	400204a0 	.word	0x400204a0
 800e308:	400204b8 	.word	0x400204b8
 800e30c:	58025408 	.word	0x58025408
 800e310:	5802541c 	.word	0x5802541c
 800e314:	58025430 	.word	0x58025430
 800e318:	58025444 	.word	0x58025444
 800e31c:	58025458 	.word	0x58025458
 800e320:	5802546c 	.word	0x5802546c
 800e324:	58025480 	.word	0x58025480
 800e328:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	4a28      	ldr	r2, [pc, #160]	; (800e3d4 <DMA_SetConfig+0x338>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d022      	beq.n	800e37c <DMA_SetConfig+0x2e0>
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4a27      	ldr	r2, [pc, #156]	; (800e3d8 <DMA_SetConfig+0x33c>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d01d      	beq.n	800e37c <DMA_SetConfig+0x2e0>
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a25      	ldr	r2, [pc, #148]	; (800e3dc <DMA_SetConfig+0x340>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d018      	beq.n	800e37c <DMA_SetConfig+0x2e0>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4a24      	ldr	r2, [pc, #144]	; (800e3e0 <DMA_SetConfig+0x344>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d013      	beq.n	800e37c <DMA_SetConfig+0x2e0>
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4a22      	ldr	r2, [pc, #136]	; (800e3e4 <DMA_SetConfig+0x348>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d00e      	beq.n	800e37c <DMA_SetConfig+0x2e0>
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	4a21      	ldr	r2, [pc, #132]	; (800e3e8 <DMA_SetConfig+0x34c>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d009      	beq.n	800e37c <DMA_SetConfig+0x2e0>
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a1f      	ldr	r2, [pc, #124]	; (800e3ec <DMA_SetConfig+0x350>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d004      	beq.n	800e37c <DMA_SetConfig+0x2e0>
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4a1e      	ldr	r2, [pc, #120]	; (800e3f0 <DMA_SetConfig+0x354>)
 800e378:	4293      	cmp	r3, r2
 800e37a:	d101      	bne.n	800e380 <DMA_SetConfig+0x2e4>
 800e37c:	2301      	movs	r3, #1
 800e37e:	e000      	b.n	800e382 <DMA_SetConfig+0x2e6>
 800e380:	2300      	movs	r3, #0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d020      	beq.n	800e3c8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e38a:	f003 031f 	and.w	r3, r3, #31
 800e38e:	2201      	movs	r2, #1
 800e390:	409a      	lsls	r2, r3
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	683a      	ldr	r2, [r7, #0]
 800e39c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	689b      	ldr	r3, [r3, #8]
 800e3a2:	2b40      	cmp	r3, #64	; 0x40
 800e3a4:	d108      	bne.n	800e3b8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	60da      	str	r2, [r3, #12]
}
 800e3b6:	e007      	b.n	800e3c8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	68ba      	ldr	r2, [r7, #8]
 800e3be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	60da      	str	r2, [r3, #12]
}
 800e3c8:	bf00      	nop
 800e3ca:	371c      	adds	r7, #28
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr
 800e3d4:	58025408 	.word	0x58025408
 800e3d8:	5802541c 	.word	0x5802541c
 800e3dc:	58025430 	.word	0x58025430
 800e3e0:	58025444 	.word	0x58025444
 800e3e4:	58025458 	.word	0x58025458
 800e3e8:	5802546c 	.word	0x5802546c
 800e3ec:	58025480 	.word	0x58025480
 800e3f0:	58025494 	.word	0x58025494

0800e3f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b085      	sub	sp, #20
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a42      	ldr	r2, [pc, #264]	; (800e50c <DMA_CalcBaseAndBitshift+0x118>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d04a      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a41      	ldr	r2, [pc, #260]	; (800e510 <DMA_CalcBaseAndBitshift+0x11c>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d045      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a3f      	ldr	r2, [pc, #252]	; (800e514 <DMA_CalcBaseAndBitshift+0x120>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d040      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4a3e      	ldr	r2, [pc, #248]	; (800e518 <DMA_CalcBaseAndBitshift+0x124>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d03b      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a3c      	ldr	r2, [pc, #240]	; (800e51c <DMA_CalcBaseAndBitshift+0x128>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d036      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4a3b      	ldr	r2, [pc, #236]	; (800e520 <DMA_CalcBaseAndBitshift+0x12c>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d031      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	4a39      	ldr	r2, [pc, #228]	; (800e524 <DMA_CalcBaseAndBitshift+0x130>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d02c      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4a38      	ldr	r2, [pc, #224]	; (800e528 <DMA_CalcBaseAndBitshift+0x134>)
 800e448:	4293      	cmp	r3, r2
 800e44a:	d027      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a36      	ldr	r2, [pc, #216]	; (800e52c <DMA_CalcBaseAndBitshift+0x138>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d022      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a35      	ldr	r2, [pc, #212]	; (800e530 <DMA_CalcBaseAndBitshift+0x13c>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d01d      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a33      	ldr	r2, [pc, #204]	; (800e534 <DMA_CalcBaseAndBitshift+0x140>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d018      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	4a32      	ldr	r2, [pc, #200]	; (800e538 <DMA_CalcBaseAndBitshift+0x144>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d013      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a30      	ldr	r2, [pc, #192]	; (800e53c <DMA_CalcBaseAndBitshift+0x148>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d00e      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a2f      	ldr	r2, [pc, #188]	; (800e540 <DMA_CalcBaseAndBitshift+0x14c>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d009      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a2d      	ldr	r2, [pc, #180]	; (800e544 <DMA_CalcBaseAndBitshift+0x150>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d004      	beq.n	800e49c <DMA_CalcBaseAndBitshift+0xa8>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4a2c      	ldr	r2, [pc, #176]	; (800e548 <DMA_CalcBaseAndBitshift+0x154>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d101      	bne.n	800e4a0 <DMA_CalcBaseAndBitshift+0xac>
 800e49c:	2301      	movs	r3, #1
 800e49e:	e000      	b.n	800e4a2 <DMA_CalcBaseAndBitshift+0xae>
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d024      	beq.n	800e4f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	3b10      	subs	r3, #16
 800e4ae:	4a27      	ldr	r2, [pc, #156]	; (800e54c <DMA_CalcBaseAndBitshift+0x158>)
 800e4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800e4b4:	091b      	lsrs	r3, r3, #4
 800e4b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f003 0307 	and.w	r3, r3, #7
 800e4be:	4a24      	ldr	r2, [pc, #144]	; (800e550 <DMA_CalcBaseAndBitshift+0x15c>)
 800e4c0:	5cd3      	ldrb	r3, [r2, r3]
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2b03      	cmp	r3, #3
 800e4cc:	d908      	bls.n	800e4e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	4b1f      	ldr	r3, [pc, #124]	; (800e554 <DMA_CalcBaseAndBitshift+0x160>)
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	1d1a      	adds	r2, r3, #4
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	659a      	str	r2, [r3, #88]	; 0x58
 800e4de:	e00d      	b.n	800e4fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	4b1b      	ldr	r3, [pc, #108]	; (800e554 <DMA_CalcBaseAndBitshift+0x160>)
 800e4e8:	4013      	ands	r3, r2
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	6593      	str	r3, [r2, #88]	; 0x58
 800e4ee:	e005      	b.n	800e4fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800e500:	4618      	mov	r0, r3
 800e502:	3714      	adds	r7, #20
 800e504:	46bd      	mov	sp, r7
 800e506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50a:	4770      	bx	lr
 800e50c:	40020010 	.word	0x40020010
 800e510:	40020028 	.word	0x40020028
 800e514:	40020040 	.word	0x40020040
 800e518:	40020058 	.word	0x40020058
 800e51c:	40020070 	.word	0x40020070
 800e520:	40020088 	.word	0x40020088
 800e524:	400200a0 	.word	0x400200a0
 800e528:	400200b8 	.word	0x400200b8
 800e52c:	40020410 	.word	0x40020410
 800e530:	40020428 	.word	0x40020428
 800e534:	40020440 	.word	0x40020440
 800e538:	40020458 	.word	0x40020458
 800e53c:	40020470 	.word	0x40020470
 800e540:	40020488 	.word	0x40020488
 800e544:	400204a0 	.word	0x400204a0
 800e548:	400204b8 	.word	0x400204b8
 800e54c:	aaaaaaab 	.word	0xaaaaaaab
 800e550:	08023b90 	.word	0x08023b90
 800e554:	fffffc00 	.word	0xfffffc00

0800e558 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800e558:	b480      	push	{r7}
 800e55a:	b085      	sub	sp, #20
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e560:	2300      	movs	r3, #0
 800e562:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	699b      	ldr	r3, [r3, #24]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d120      	bne.n	800e5ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e570:	2b03      	cmp	r3, #3
 800e572:	d858      	bhi.n	800e626 <DMA_CheckFifoParam+0xce>
 800e574:	a201      	add	r2, pc, #4	; (adr r2, 800e57c <DMA_CheckFifoParam+0x24>)
 800e576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e57a:	bf00      	nop
 800e57c:	0800e58d 	.word	0x0800e58d
 800e580:	0800e59f 	.word	0x0800e59f
 800e584:	0800e58d 	.word	0x0800e58d
 800e588:	0800e627 	.word	0x0800e627
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e594:	2b00      	cmp	r3, #0
 800e596:	d048      	beq.n	800e62a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800e598:	2301      	movs	r3, #1
 800e59a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e59c:	e045      	b.n	800e62a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e5a6:	d142      	bne.n	800e62e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e5ac:	e03f      	b.n	800e62e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	699b      	ldr	r3, [r3, #24]
 800e5b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5b6:	d123      	bne.n	800e600 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5bc:	2b03      	cmp	r3, #3
 800e5be:	d838      	bhi.n	800e632 <DMA_CheckFifoParam+0xda>
 800e5c0:	a201      	add	r2, pc, #4	; (adr r2, 800e5c8 <DMA_CheckFifoParam+0x70>)
 800e5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c6:	bf00      	nop
 800e5c8:	0800e5d9 	.word	0x0800e5d9
 800e5cc:	0800e5df 	.word	0x0800e5df
 800e5d0:	0800e5d9 	.word	0x0800e5d9
 800e5d4:	0800e5f1 	.word	0x0800e5f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	73fb      	strb	r3, [r7, #15]
        break;
 800e5dc:	e030      	b.n	800e640 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d025      	beq.n	800e636 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e5ee:	e022      	b.n	800e636 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e5f8:	d11f      	bne.n	800e63a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800e5fe:	e01c      	b.n	800e63a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e604:	2b02      	cmp	r3, #2
 800e606:	d902      	bls.n	800e60e <DMA_CheckFifoParam+0xb6>
 800e608:	2b03      	cmp	r3, #3
 800e60a:	d003      	beq.n	800e614 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800e60c:	e018      	b.n	800e640 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800e60e:	2301      	movs	r3, #1
 800e610:	73fb      	strb	r3, [r7, #15]
        break;
 800e612:	e015      	b.n	800e640 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00e      	beq.n	800e63e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800e620:	2301      	movs	r3, #1
 800e622:	73fb      	strb	r3, [r7, #15]
    break;
 800e624:	e00b      	b.n	800e63e <DMA_CheckFifoParam+0xe6>
        break;
 800e626:	bf00      	nop
 800e628:	e00a      	b.n	800e640 <DMA_CheckFifoParam+0xe8>
        break;
 800e62a:	bf00      	nop
 800e62c:	e008      	b.n	800e640 <DMA_CheckFifoParam+0xe8>
        break;
 800e62e:	bf00      	nop
 800e630:	e006      	b.n	800e640 <DMA_CheckFifoParam+0xe8>
        break;
 800e632:	bf00      	nop
 800e634:	e004      	b.n	800e640 <DMA_CheckFifoParam+0xe8>
        break;
 800e636:	bf00      	nop
 800e638:	e002      	b.n	800e640 <DMA_CheckFifoParam+0xe8>
        break;
 800e63a:	bf00      	nop
 800e63c:	e000      	b.n	800e640 <DMA_CheckFifoParam+0xe8>
    break;
 800e63e:	bf00      	nop
    }
  }

  return status;
 800e640:	7bfb      	ldrb	r3, [r7, #15]
}
 800e642:	4618      	mov	r0, r3
 800e644:	3714      	adds	r7, #20
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr
 800e64e:	bf00      	nop

0800e650 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4a38      	ldr	r2, [pc, #224]	; (800e744 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d022      	beq.n	800e6ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a36      	ldr	r2, [pc, #216]	; (800e748 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d01d      	beq.n	800e6ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a35      	ldr	r2, [pc, #212]	; (800e74c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d018      	beq.n	800e6ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a33      	ldr	r2, [pc, #204]	; (800e750 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d013      	beq.n	800e6ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a32      	ldr	r2, [pc, #200]	; (800e754 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d00e      	beq.n	800e6ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a30      	ldr	r2, [pc, #192]	; (800e758 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d009      	beq.n	800e6ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4a2f      	ldr	r2, [pc, #188]	; (800e75c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d004      	beq.n	800e6ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4a2d      	ldr	r2, [pc, #180]	; (800e760 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d101      	bne.n	800e6b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e000      	b.n	800e6b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d01a      	beq.n	800e6ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	3b08      	subs	r3, #8
 800e6c0:	4a28      	ldr	r2, [pc, #160]	; (800e764 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800e6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6c6:	091b      	lsrs	r3, r3, #4
 800e6c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	4b26      	ldr	r3, [pc, #152]	; (800e768 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800e6ce:	4413      	add	r3, r2
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4a24      	ldr	r2, [pc, #144]	; (800e76c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800e6dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f003 031f 	and.w	r3, r3, #31
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	409a      	lsls	r2, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800e6ec:	e024      	b.n	800e738 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	b2db      	uxtb	r3, r3
 800e6f4:	3b10      	subs	r3, #16
 800e6f6:	4a1e      	ldr	r2, [pc, #120]	; (800e770 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800e6f8:	fba2 2303 	umull	r2, r3, r2, r3
 800e6fc:	091b      	lsrs	r3, r3, #4
 800e6fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	4a1c      	ldr	r2, [pc, #112]	; (800e774 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d806      	bhi.n	800e716 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	4a1b      	ldr	r2, [pc, #108]	; (800e778 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d902      	bls.n	800e716 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	3308      	adds	r3, #8
 800e714:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	4b18      	ldr	r3, [pc, #96]	; (800e77c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800e71a:	4413      	add	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	461a      	mov	r2, r3
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	4a16      	ldr	r2, [pc, #88]	; (800e780 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800e728:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f003 031f 	and.w	r3, r3, #31
 800e730:	2201      	movs	r2, #1
 800e732:	409a      	lsls	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	669a      	str	r2, [r3, #104]	; 0x68
}
 800e738:	bf00      	nop
 800e73a:	3714      	adds	r7, #20
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr
 800e744:	58025408 	.word	0x58025408
 800e748:	5802541c 	.word	0x5802541c
 800e74c:	58025430 	.word	0x58025430
 800e750:	58025444 	.word	0x58025444
 800e754:	58025458 	.word	0x58025458
 800e758:	5802546c 	.word	0x5802546c
 800e75c:	58025480 	.word	0x58025480
 800e760:	58025494 	.word	0x58025494
 800e764:	cccccccd 	.word	0xcccccccd
 800e768:	16009600 	.word	0x16009600
 800e76c:	58025880 	.word	0x58025880
 800e770:	aaaaaaab 	.word	0xaaaaaaab
 800e774:	400204b8 	.word	0x400204b8
 800e778:	4002040f 	.word	0x4002040f
 800e77c:	10008200 	.word	0x10008200
 800e780:	40020880 	.word	0x40020880

0800e784 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800e784:	b480      	push	{r7}
 800e786:	b085      	sub	sp, #20
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	b2db      	uxtb	r3, r3
 800e792:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d04a      	beq.n	800e830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2b08      	cmp	r3, #8
 800e79e:	d847      	bhi.n	800e830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4a25      	ldr	r2, [pc, #148]	; (800e83c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d022      	beq.n	800e7f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4a24      	ldr	r2, [pc, #144]	; (800e840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d01d      	beq.n	800e7f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4a22      	ldr	r2, [pc, #136]	; (800e844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d018      	beq.n	800e7f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	4a21      	ldr	r2, [pc, #132]	; (800e848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d013      	beq.n	800e7f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4a1f      	ldr	r2, [pc, #124]	; (800e84c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d00e      	beq.n	800e7f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	4a1e      	ldr	r2, [pc, #120]	; (800e850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d009      	beq.n	800e7f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4a1c      	ldr	r2, [pc, #112]	; (800e854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d004      	beq.n	800e7f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	4a1b      	ldr	r2, [pc, #108]	; (800e858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d101      	bne.n	800e7f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	e000      	b.n	800e7f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00a      	beq.n	800e810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e7fa:	68fa      	ldr	r2, [r7, #12]
 800e7fc:	4b17      	ldr	r3, [pc, #92]	; (800e85c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800e7fe:	4413      	add	r3, r2
 800e800:	009b      	lsls	r3, r3, #2
 800e802:	461a      	mov	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	4a15      	ldr	r2, [pc, #84]	; (800e860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800e80c:	671a      	str	r2, [r3, #112]	; 0x70
 800e80e:	e009      	b.n	800e824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e810:	68fa      	ldr	r2, [r7, #12]
 800e812:	4b14      	ldr	r3, [pc, #80]	; (800e864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800e814:	4413      	add	r3, r2
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	461a      	mov	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4a11      	ldr	r2, [pc, #68]	; (800e868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800e822:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	3b01      	subs	r3, #1
 800e828:	2201      	movs	r2, #1
 800e82a:	409a      	lsls	r2, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800e830:	bf00      	nop
 800e832:	3714      	adds	r7, #20
 800e834:	46bd      	mov	sp, r7
 800e836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83a:	4770      	bx	lr
 800e83c:	58025408 	.word	0x58025408
 800e840:	5802541c 	.word	0x5802541c
 800e844:	58025430 	.word	0x58025430
 800e848:	58025444 	.word	0x58025444
 800e84c:	58025458 	.word	0x58025458
 800e850:	5802546c 	.word	0x5802546c
 800e854:	58025480 	.word	0x58025480
 800e858:	58025494 	.word	0x58025494
 800e85c:	1600963f 	.word	0x1600963f
 800e860:	58025940 	.word	0x58025940
 800e864:	1000823f 	.word	0x1000823f
 800e868:	40020940 	.word	0x40020940

0800e86c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b089      	sub	sp, #36	; 0x24
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e876:	2300      	movs	r3, #0
 800e878:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800e87a:	4b89      	ldr	r3, [pc, #548]	; (800eaa0 <HAL_GPIO_Init+0x234>)
 800e87c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800e87e:	e194      	b.n	800ebaa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	2101      	movs	r1, #1
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	fa01 f303 	lsl.w	r3, r1, r3
 800e88c:	4013      	ands	r3, r2
 800e88e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	2b00      	cmp	r3, #0
 800e894:	f000 8186 	beq.w	800eba4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d00b      	beq.n	800e8b8 <HAL_GPIO_Init+0x4c>
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d007      	beq.n	800e8b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800e8ac:	2b11      	cmp	r3, #17
 800e8ae:	d003      	beq.n	800e8b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	2b12      	cmp	r3, #18
 800e8b6:	d130      	bne.n	800e91a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	005b      	lsls	r3, r3, #1
 800e8c2:	2203      	movs	r2, #3
 800e8c4:	fa02 f303 	lsl.w	r3, r2, r3
 800e8c8:	43db      	mvns	r3, r3
 800e8ca:	69ba      	ldr	r2, [r7, #24]
 800e8cc:	4013      	ands	r3, r2
 800e8ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	68da      	ldr	r2, [r3, #12]
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	005b      	lsls	r3, r3, #1
 800e8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8dc:	69ba      	ldr	r2, [r7, #24]
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	69ba      	ldr	r2, [r7, #24]
 800e8e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e8f6:	43db      	mvns	r3, r3
 800e8f8:	69ba      	ldr	r2, [r7, #24]
 800e8fa:	4013      	ands	r3, r2
 800e8fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	091b      	lsrs	r3, r3, #4
 800e904:	f003 0201 	and.w	r2, r3, #1
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	fa02 f303 	lsl.w	r3, r2, r3
 800e90e:	69ba      	ldr	r2, [r7, #24]
 800e910:	4313      	orrs	r3, r2
 800e912:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	69ba      	ldr	r2, [r7, #24]
 800e918:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	005b      	lsls	r3, r3, #1
 800e924:	2203      	movs	r2, #3
 800e926:	fa02 f303 	lsl.w	r3, r2, r3
 800e92a:	43db      	mvns	r3, r3
 800e92c:	69ba      	ldr	r2, [r7, #24]
 800e92e:	4013      	ands	r3, r2
 800e930:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	689a      	ldr	r2, [r3, #8]
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	005b      	lsls	r3, r3, #1
 800e93a:	fa02 f303 	lsl.w	r3, r2, r3
 800e93e:	69ba      	ldr	r2, [r7, #24]
 800e940:	4313      	orrs	r3, r2
 800e942:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	69ba      	ldr	r2, [r7, #24]
 800e948:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	2b02      	cmp	r3, #2
 800e950:	d003      	beq.n	800e95a <HAL_GPIO_Init+0xee>
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	2b12      	cmp	r3, #18
 800e958:	d123      	bne.n	800e9a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	08da      	lsrs	r2, r3, #3
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	3208      	adds	r2, #8
 800e962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800e968:	69fb      	ldr	r3, [r7, #28]
 800e96a:	f003 0307 	and.w	r3, r3, #7
 800e96e:	009b      	lsls	r3, r3, #2
 800e970:	220f      	movs	r2, #15
 800e972:	fa02 f303 	lsl.w	r3, r2, r3
 800e976:	43db      	mvns	r3, r3
 800e978:	69ba      	ldr	r2, [r7, #24]
 800e97a:	4013      	ands	r3, r2
 800e97c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	691a      	ldr	r2, [r3, #16]
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	f003 0307 	and.w	r3, r3, #7
 800e988:	009b      	lsls	r3, r3, #2
 800e98a:	fa02 f303 	lsl.w	r3, r2, r3
 800e98e:	69ba      	ldr	r2, [r7, #24]
 800e990:	4313      	orrs	r3, r2
 800e992:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	08da      	lsrs	r2, r3, #3
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	3208      	adds	r2, #8
 800e99c:	69b9      	ldr	r1, [r7, #24]
 800e99e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	005b      	lsls	r3, r3, #1
 800e9ac:	2203      	movs	r2, #3
 800e9ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e9b2:	43db      	mvns	r3, r3
 800e9b4:	69ba      	ldr	r2, [r7, #24]
 800e9b6:	4013      	ands	r3, r2
 800e9b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	f003 0203 	and.w	r2, r3, #3
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	fa02 f303 	lsl.w	r3, r2, r3
 800e9ca:	69ba      	ldr	r2, [r7, #24]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	69ba      	ldr	r2, [r7, #24]
 800e9d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	f000 80e0 	beq.w	800eba4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e9e4:	4b2f      	ldr	r3, [pc, #188]	; (800eaa4 <HAL_GPIO_Init+0x238>)
 800e9e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e9ea:	4a2e      	ldr	r2, [pc, #184]	; (800eaa4 <HAL_GPIO_Init+0x238>)
 800e9ec:	f043 0302 	orr.w	r3, r3, #2
 800e9f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800e9f4:	4b2b      	ldr	r3, [pc, #172]	; (800eaa4 <HAL_GPIO_Init+0x238>)
 800e9f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e9fa:	f003 0302 	and.w	r3, r3, #2
 800e9fe:	60fb      	str	r3, [r7, #12]
 800ea00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ea02:	4a29      	ldr	r2, [pc, #164]	; (800eaa8 <HAL_GPIO_Init+0x23c>)
 800ea04:	69fb      	ldr	r3, [r7, #28]
 800ea06:	089b      	lsrs	r3, r3, #2
 800ea08:	3302      	adds	r3, #2
 800ea0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	f003 0303 	and.w	r3, r3, #3
 800ea16:	009b      	lsls	r3, r3, #2
 800ea18:	220f      	movs	r2, #15
 800ea1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ea1e:	43db      	mvns	r3, r3
 800ea20:	69ba      	ldr	r2, [r7, #24]
 800ea22:	4013      	ands	r3, r2
 800ea24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	4a20      	ldr	r2, [pc, #128]	; (800eaac <HAL_GPIO_Init+0x240>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d052      	beq.n	800ead4 <HAL_GPIO_Init+0x268>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	4a1f      	ldr	r2, [pc, #124]	; (800eab0 <HAL_GPIO_Init+0x244>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d031      	beq.n	800ea9a <HAL_GPIO_Init+0x22e>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	4a1e      	ldr	r2, [pc, #120]	; (800eab4 <HAL_GPIO_Init+0x248>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d02b      	beq.n	800ea96 <HAL_GPIO_Init+0x22a>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4a1d      	ldr	r2, [pc, #116]	; (800eab8 <HAL_GPIO_Init+0x24c>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d025      	beq.n	800ea92 <HAL_GPIO_Init+0x226>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4a1c      	ldr	r2, [pc, #112]	; (800eabc <HAL_GPIO_Init+0x250>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d01f      	beq.n	800ea8e <HAL_GPIO_Init+0x222>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a1b      	ldr	r2, [pc, #108]	; (800eac0 <HAL_GPIO_Init+0x254>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d019      	beq.n	800ea8a <HAL_GPIO_Init+0x21e>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a1a      	ldr	r2, [pc, #104]	; (800eac4 <HAL_GPIO_Init+0x258>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d013      	beq.n	800ea86 <HAL_GPIO_Init+0x21a>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a19      	ldr	r2, [pc, #100]	; (800eac8 <HAL_GPIO_Init+0x25c>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d00d      	beq.n	800ea82 <HAL_GPIO_Init+0x216>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4a18      	ldr	r2, [pc, #96]	; (800eacc <HAL_GPIO_Init+0x260>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d007      	beq.n	800ea7e <HAL_GPIO_Init+0x212>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4a17      	ldr	r2, [pc, #92]	; (800ead0 <HAL_GPIO_Init+0x264>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d101      	bne.n	800ea7a <HAL_GPIO_Init+0x20e>
 800ea76:	2309      	movs	r3, #9
 800ea78:	e02d      	b.n	800ead6 <HAL_GPIO_Init+0x26a>
 800ea7a:	230a      	movs	r3, #10
 800ea7c:	e02b      	b.n	800ead6 <HAL_GPIO_Init+0x26a>
 800ea7e:	2308      	movs	r3, #8
 800ea80:	e029      	b.n	800ead6 <HAL_GPIO_Init+0x26a>
 800ea82:	2307      	movs	r3, #7
 800ea84:	e027      	b.n	800ead6 <HAL_GPIO_Init+0x26a>
 800ea86:	2306      	movs	r3, #6
 800ea88:	e025      	b.n	800ead6 <HAL_GPIO_Init+0x26a>
 800ea8a:	2305      	movs	r3, #5
 800ea8c:	e023      	b.n	800ead6 <HAL_GPIO_Init+0x26a>
 800ea8e:	2304      	movs	r3, #4
 800ea90:	e021      	b.n	800ead6 <HAL_GPIO_Init+0x26a>
 800ea92:	2303      	movs	r3, #3
 800ea94:	e01f      	b.n	800ead6 <HAL_GPIO_Init+0x26a>
 800ea96:	2302      	movs	r3, #2
 800ea98:	e01d      	b.n	800ead6 <HAL_GPIO_Init+0x26a>
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	e01b      	b.n	800ead6 <HAL_GPIO_Init+0x26a>
 800ea9e:	bf00      	nop
 800eaa0:	58000080 	.word	0x58000080
 800eaa4:	58024400 	.word	0x58024400
 800eaa8:	58000400 	.word	0x58000400
 800eaac:	58020000 	.word	0x58020000
 800eab0:	58020400 	.word	0x58020400
 800eab4:	58020800 	.word	0x58020800
 800eab8:	58020c00 	.word	0x58020c00
 800eabc:	58021000 	.word	0x58021000
 800eac0:	58021400 	.word	0x58021400
 800eac4:	58021800 	.word	0x58021800
 800eac8:	58021c00 	.word	0x58021c00
 800eacc:	58022000 	.word	0x58022000
 800ead0:	58022400 	.word	0x58022400
 800ead4:	2300      	movs	r3, #0
 800ead6:	69fa      	ldr	r2, [r7, #28]
 800ead8:	f002 0203 	and.w	r2, r2, #3
 800eadc:	0092      	lsls	r2, r2, #2
 800eade:	4093      	lsls	r3, r2
 800eae0:	69ba      	ldr	r2, [r7, #24]
 800eae2:	4313      	orrs	r3, r2
 800eae4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800eae6:	4938      	ldr	r1, [pc, #224]	; (800ebc8 <HAL_GPIO_Init+0x35c>)
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	089b      	lsrs	r3, r3, #2
 800eaec:	3302      	adds	r3, #2
 800eaee:	69ba      	ldr	r2, [r7, #24]
 800eaf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	43db      	mvns	r3, r3
 800eafe:	69ba      	ldr	r2, [r7, #24]
 800eb00:	4013      	ands	r3, r2
 800eb02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d003      	beq.n	800eb18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800eb10:	69ba      	ldr	r2, [r7, #24]
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	4313      	orrs	r3, r2
 800eb16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	69ba      	ldr	r2, [r7, #24]
 800eb1c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	43db      	mvns	r3, r3
 800eb28:	69ba      	ldr	r2, [r7, #24]
 800eb2a:	4013      	ands	r3, r2
 800eb2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d003      	beq.n	800eb42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800eb3a:	69ba      	ldr	r2, [r7, #24]
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	4313      	orrs	r3, r2
 800eb40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	69ba      	ldr	r2, [r7, #24]
 800eb46:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800eb48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	43db      	mvns	r3, r3
 800eb54:	69ba      	ldr	r2, [r7, #24]
 800eb56:	4013      	ands	r3, r2
 800eb58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d003      	beq.n	800eb6e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800eb66:	69ba      	ldr	r2, [r7, #24]
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800eb6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800eb76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800eb7e:	693b      	ldr	r3, [r7, #16]
 800eb80:	43db      	mvns	r3, r3
 800eb82:	69ba      	ldr	r2, [r7, #24]
 800eb84:	4013      	ands	r3, r2
 800eb86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d003      	beq.n	800eb9c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800eb94:	69ba      	ldr	r2, [r7, #24]
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	4313      	orrs	r3, r2
 800eb9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800eb9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	3301      	adds	r3, #1
 800eba8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	681a      	ldr	r2, [r3, #0]
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	fa22 f303 	lsr.w	r3, r2, r3
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f47f ae63 	bne.w	800e880 <HAL_GPIO_Init+0x14>
  }
}
 800ebba:	bf00      	nop
 800ebbc:	3724      	adds	r7, #36	; 0x24
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop
 800ebc8:	58000400 	.word	0x58000400

0800ebcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b085      	sub	sp, #20
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	691a      	ldr	r2, [r3, #16]
 800ebdc:	887b      	ldrh	r3, [r7, #2]
 800ebde:	4013      	ands	r3, r2
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d002      	beq.n	800ebea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	73fb      	strb	r3, [r7, #15]
 800ebe8:	e001      	b.n	800ebee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ebea:	2300      	movs	r3, #0
 800ebec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ebee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3714      	adds	r7, #20
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	460b      	mov	r3, r1
 800ec06:	807b      	strh	r3, [r7, #2]
 800ec08:	4613      	mov	r3, r2
 800ec0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ec0c:	787b      	ldrb	r3, [r7, #1]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d003      	beq.n	800ec1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ec12:	887a      	ldrh	r2, [r7, #2]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ec18:	e003      	b.n	800ec22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ec1a:	887b      	ldrh	r3, [r7, #2]
 800ec1c:	041a      	lsls	r2, r3, #16
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	619a      	str	r2, [r3, #24]
}
 800ec22:	bf00      	nop
 800ec24:	370c      	adds	r7, #12
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr
	...

0800ec30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b082      	sub	sp, #8
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d101      	bne.n	800ec42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ec3e:	2301      	movs	r3, #1
 800ec40:	e07f      	b.n	800ed42 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec48:	b2db      	uxtb	r3, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d106      	bne.n	800ec5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2200      	movs	r2, #0
 800ec52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f7fa fb48 	bl	80092ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2224      	movs	r2, #36	; 0x24
 800ec60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f022 0201 	bic.w	r2, r2, #1
 800ec72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	685a      	ldr	r2, [r3, #4]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ec80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	689a      	ldr	r2, [r3, #8]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ec90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d107      	bne.n	800ecaa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	689a      	ldr	r2, [r3, #8]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eca6:	609a      	str	r2, [r3, #8]
 800eca8:	e006      	b.n	800ecb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	689a      	ldr	r2, [r3, #8]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ecb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	2b02      	cmp	r3, #2
 800ecbe:	d104      	bne.n	800ecca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	6859      	ldr	r1, [r3, #4]
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681a      	ldr	r2, [r3, #0]
 800ecd4:	4b1d      	ldr	r3, [pc, #116]	; (800ed4c <HAL_I2C_Init+0x11c>)
 800ecd6:	430b      	orrs	r3, r1
 800ecd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	68da      	ldr	r2, [r3, #12]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ece8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	691a      	ldr	r2, [r3, #16]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	695b      	ldr	r3, [r3, #20]
 800ecf2:	ea42 0103 	orr.w	r1, r2, r3
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	699b      	ldr	r3, [r3, #24]
 800ecfa:	021a      	lsls	r2, r3, #8
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	430a      	orrs	r2, r1
 800ed02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	69d9      	ldr	r1, [r3, #28]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6a1a      	ldr	r2, [r3, #32]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	430a      	orrs	r2, r1
 800ed12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f042 0201 	orr.w	r2, r2, #1
 800ed22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2220      	movs	r2, #32
 800ed2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2200      	movs	r2, #0
 800ed36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ed40:	2300      	movs	r3, #0
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3708      	adds	r7, #8
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	02008000 	.word	0x02008000

0800ed50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b088      	sub	sp, #32
 800ed54:	af02      	add	r7, sp, #8
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	4608      	mov	r0, r1
 800ed5a:	4611      	mov	r1, r2
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	4603      	mov	r3, r0
 800ed60:	817b      	strh	r3, [r7, #10]
 800ed62:	460b      	mov	r3, r1
 800ed64:	813b      	strh	r3, [r7, #8]
 800ed66:	4613      	mov	r3, r2
 800ed68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	2b20      	cmp	r3, #32
 800ed74:	f040 80f9 	bne.w	800ef6a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed78:	6a3b      	ldr	r3, [r7, #32]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d002      	beq.n	800ed84 <HAL_I2C_Mem_Write+0x34>
 800ed7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d105      	bne.n	800ed90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	e0ed      	b.n	800ef6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d101      	bne.n	800ed9e <HAL_I2C_Mem_Write+0x4e>
 800ed9a:	2302      	movs	r3, #2
 800ed9c:	e0e6      	b.n	800ef6c <HAL_I2C_Mem_Write+0x21c>
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2201      	movs	r2, #1
 800eda2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800eda6:	f7fc f9c3 	bl	800b130 <HAL_GetTick>
 800edaa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	9300      	str	r3, [sp, #0]
 800edb0:	2319      	movs	r3, #25
 800edb2:	2201      	movs	r2, #1
 800edb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f002 f8f9 	bl	8010fb0 <I2C_WaitOnFlagUntilTimeout>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d001      	beq.n	800edc8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800edc4:	2301      	movs	r3, #1
 800edc6:	e0d1      	b.n	800ef6c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2221      	movs	r2, #33	; 0x21
 800edcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2240      	movs	r2, #64	; 0x40
 800edd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2200      	movs	r2, #0
 800eddc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	6a3a      	ldr	r2, [r7, #32]
 800ede2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ede8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2200      	movs	r2, #0
 800edee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800edf0:	88f8      	ldrh	r0, [r7, #6]
 800edf2:	893a      	ldrh	r2, [r7, #8]
 800edf4:	8979      	ldrh	r1, [r7, #10]
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	9301      	str	r3, [sp, #4]
 800edfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfc:	9300      	str	r3, [sp, #0]
 800edfe:	4603      	mov	r3, r0
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	f001 f939 	bl	8010078 <I2C_RequestMemoryWrite>
 800ee06:	4603      	mov	r3, r0
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d005      	beq.n	800ee18 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ee14:	2301      	movs	r3, #1
 800ee16:	e0a9      	b.n	800ef6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	2bff      	cmp	r3, #255	; 0xff
 800ee20:	d90e      	bls.n	800ee40 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	22ff      	movs	r2, #255	; 0xff
 800ee26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee2c:	b2da      	uxtb	r2, r3
 800ee2e:	8979      	ldrh	r1, [r7, #10]
 800ee30:	2300      	movs	r3, #0
 800ee32:	9300      	str	r3, [sp, #0]
 800ee34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ee38:	68f8      	ldr	r0, [r7, #12]
 800ee3a:	f002 f9db 	bl	80111f4 <I2C_TransferConfig>
 800ee3e:	e00f      	b.n	800ee60 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee44:	b29a      	uxth	r2, r3
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee4e:	b2da      	uxtb	r2, r3
 800ee50:	8979      	ldrh	r1, [r7, #10]
 800ee52:	2300      	movs	r3, #0
 800ee54:	9300      	str	r3, [sp, #0]
 800ee56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f002 f9ca 	bl	80111f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ee60:	697a      	ldr	r2, [r7, #20]
 800ee62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	f002 f8e3 	bl	8011030 <I2C_WaitOnTXISFlagUntilTimeout>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d001      	beq.n	800ee74 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ee70:	2301      	movs	r3, #1
 800ee72:	e07b      	b.n	800ef6c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee78:	781a      	ldrb	r2, [r3, #0]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee84:	1c5a      	adds	r2, r3, #1
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	3b01      	subs	r3, #1
 800ee92:	b29a      	uxth	r2, r3
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee9c:	3b01      	subs	r3, #1
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d034      	beq.n	800ef18 <HAL_I2C_Mem_Write+0x1c8>
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d130      	bne.n	800ef18 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	9300      	str	r3, [sp, #0]
 800eeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eebc:	2200      	movs	r2, #0
 800eebe:	2180      	movs	r1, #128	; 0x80
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	f002 f875 	bl	8010fb0 <I2C_WaitOnFlagUntilTimeout>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d001      	beq.n	800eed0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800eecc:	2301      	movs	r3, #1
 800eece:	e04d      	b.n	800ef6c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	2bff      	cmp	r3, #255	; 0xff
 800eed8:	d90e      	bls.n	800eef8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	22ff      	movs	r2, #255	; 0xff
 800eede:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eee4:	b2da      	uxtb	r2, r3
 800eee6:	8979      	ldrh	r1, [r7, #10]
 800eee8:	2300      	movs	r3, #0
 800eeea:	9300      	str	r3, [sp, #0]
 800eeec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800eef0:	68f8      	ldr	r0, [r7, #12]
 800eef2:	f002 f97f 	bl	80111f4 <I2C_TransferConfig>
 800eef6:	e00f      	b.n	800ef18 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eefc:	b29a      	uxth	r2, r3
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef06:	b2da      	uxtb	r2, r3
 800ef08:	8979      	ldrh	r1, [r7, #10]
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	9300      	str	r3, [sp, #0]
 800ef0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ef12:	68f8      	ldr	r0, [r7, #12]
 800ef14:	f002 f96e 	bl	80111f4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d19e      	bne.n	800ee60 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ef22:	697a      	ldr	r2, [r7, #20]
 800ef24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef26:	68f8      	ldr	r0, [r7, #12]
 800ef28:	f002 f8c2 	bl	80110b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d001      	beq.n	800ef36 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ef32:	2301      	movs	r3, #1
 800ef34:	e01a      	b.n	800ef6c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	2220      	movs	r2, #32
 800ef3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	6859      	ldr	r1, [r3, #4]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	4b0a      	ldr	r3, [pc, #40]	; (800ef74 <HAL_I2C_Mem_Write+0x224>)
 800ef4a:	400b      	ands	r3, r1
 800ef4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2220      	movs	r2, #32
 800ef52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2200      	movs	r2, #0
 800ef62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ef66:	2300      	movs	r3, #0
 800ef68:	e000      	b.n	800ef6c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ef6a:	2302      	movs	r3, #2
  }
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3718      	adds	r7, #24
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}
 800ef74:	fe00e800 	.word	0xfe00e800

0800ef78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b088      	sub	sp, #32
 800ef7c:	af02      	add	r7, sp, #8
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	4608      	mov	r0, r1
 800ef82:	4611      	mov	r1, r2
 800ef84:	461a      	mov	r2, r3
 800ef86:	4603      	mov	r3, r0
 800ef88:	817b      	strh	r3, [r7, #10]
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	813b      	strh	r3, [r7, #8]
 800ef8e:	4613      	mov	r3, r2
 800ef90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	2b20      	cmp	r3, #32
 800ef9c:	f040 80fd 	bne.w	800f19a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800efa0:	6a3b      	ldr	r3, [r7, #32]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d002      	beq.n	800efac <HAL_I2C_Mem_Read+0x34>
 800efa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d105      	bne.n	800efb8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efb2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800efb4:	2301      	movs	r3, #1
 800efb6:	e0f1      	b.n	800f19c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d101      	bne.n	800efc6 <HAL_I2C_Mem_Read+0x4e>
 800efc2:	2302      	movs	r3, #2
 800efc4:	e0ea      	b.n	800f19c <HAL_I2C_Mem_Read+0x224>
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2201      	movs	r2, #1
 800efca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800efce:	f7fc f8af 	bl	800b130 <HAL_GetTick>
 800efd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	9300      	str	r3, [sp, #0]
 800efd8:	2319      	movs	r3, #25
 800efda:	2201      	movs	r2, #1
 800efdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800efe0:	68f8      	ldr	r0, [r7, #12]
 800efe2:	f001 ffe5 	bl	8010fb0 <I2C_WaitOnFlagUntilTimeout>
 800efe6:	4603      	mov	r3, r0
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d001      	beq.n	800eff0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800efec:	2301      	movs	r3, #1
 800efee:	e0d5      	b.n	800f19c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2222      	movs	r2, #34	; 0x22
 800eff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2240      	movs	r2, #64	; 0x40
 800effc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2200      	movs	r2, #0
 800f004:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	6a3a      	ldr	r2, [r7, #32]
 800f00a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f010:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2200      	movs	r2, #0
 800f016:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800f018:	88f8      	ldrh	r0, [r7, #6]
 800f01a:	893a      	ldrh	r2, [r7, #8]
 800f01c:	8979      	ldrh	r1, [r7, #10]
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	9301      	str	r3, [sp, #4]
 800f022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f024:	9300      	str	r3, [sp, #0]
 800f026:	4603      	mov	r3, r0
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f001 f879 	bl	8010120 <I2C_RequestMemoryRead>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d005      	beq.n	800f040 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2200      	movs	r2, #0
 800f038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800f03c:	2301      	movs	r3, #1
 800f03e:	e0ad      	b.n	800f19c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f044:	b29b      	uxth	r3, r3
 800f046:	2bff      	cmp	r3, #255	; 0xff
 800f048:	d90e      	bls.n	800f068 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	22ff      	movs	r2, #255	; 0xff
 800f04e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f054:	b2da      	uxtb	r2, r3
 800f056:	8979      	ldrh	r1, [r7, #10]
 800f058:	4b52      	ldr	r3, [pc, #328]	; (800f1a4 <HAL_I2C_Mem_Read+0x22c>)
 800f05a:	9300      	str	r3, [sp, #0]
 800f05c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f060:	68f8      	ldr	r0, [r7, #12]
 800f062:	f002 f8c7 	bl	80111f4 <I2C_TransferConfig>
 800f066:	e00f      	b.n	800f088 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f06c:	b29a      	uxth	r2, r3
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f076:	b2da      	uxtb	r2, r3
 800f078:	8979      	ldrh	r1, [r7, #10]
 800f07a:	4b4a      	ldr	r3, [pc, #296]	; (800f1a4 <HAL_I2C_Mem_Read+0x22c>)
 800f07c:	9300      	str	r3, [sp, #0]
 800f07e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f082:	68f8      	ldr	r0, [r7, #12]
 800f084:	f002 f8b6 	bl	80111f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	9300      	str	r3, [sp, #0]
 800f08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f08e:	2200      	movs	r2, #0
 800f090:	2104      	movs	r1, #4
 800f092:	68f8      	ldr	r0, [r7, #12]
 800f094:	f001 ff8c 	bl	8010fb0 <I2C_WaitOnFlagUntilTimeout>
 800f098:	4603      	mov	r3, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d001      	beq.n	800f0a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e07c      	b.n	800f19c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ac:	b2d2      	uxtb	r2, r2
 800f0ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b4:	1c5a      	adds	r2, r3, #1
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0be:	3b01      	subs	r3, #1
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	3b01      	subs	r3, #1
 800f0ce:	b29a      	uxth	r2, r3
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d034      	beq.n	800f148 <HAL_I2C_Mem_Read+0x1d0>
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d130      	bne.n	800f148 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	9300      	str	r3, [sp, #0]
 800f0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	2180      	movs	r1, #128	; 0x80
 800f0f0:	68f8      	ldr	r0, [r7, #12]
 800f0f2:	f001 ff5d 	bl	8010fb0 <I2C_WaitOnFlagUntilTimeout>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d001      	beq.n	800f100 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	e04d      	b.n	800f19c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f104:	b29b      	uxth	r3, r3
 800f106:	2bff      	cmp	r3, #255	; 0xff
 800f108:	d90e      	bls.n	800f128 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	22ff      	movs	r2, #255	; 0xff
 800f10e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f114:	b2da      	uxtb	r2, r3
 800f116:	8979      	ldrh	r1, [r7, #10]
 800f118:	2300      	movs	r3, #0
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f120:	68f8      	ldr	r0, [r7, #12]
 800f122:	f002 f867 	bl	80111f4 <I2C_TransferConfig>
 800f126:	e00f      	b.n	800f148 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f12c:	b29a      	uxth	r2, r3
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f136:	b2da      	uxtb	r2, r3
 800f138:	8979      	ldrh	r1, [r7, #10]
 800f13a:	2300      	movs	r3, #0
 800f13c:	9300      	str	r3, [sp, #0]
 800f13e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f142:	68f8      	ldr	r0, [r7, #12]
 800f144:	f002 f856 	bl	80111f4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d19a      	bne.n	800f088 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f152:	697a      	ldr	r2, [r7, #20]
 800f154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f156:	68f8      	ldr	r0, [r7, #12]
 800f158:	f001 ffaa 	bl	80110b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f15c:	4603      	mov	r3, r0
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d001      	beq.n	800f166 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800f162:	2301      	movs	r3, #1
 800f164:	e01a      	b.n	800f19c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2220      	movs	r2, #32
 800f16c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	6859      	ldr	r1, [r3, #4]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681a      	ldr	r2, [r3, #0]
 800f178:	4b0b      	ldr	r3, [pc, #44]	; (800f1a8 <HAL_I2C_Mem_Read+0x230>)
 800f17a:	400b      	ands	r3, r1
 800f17c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2220      	movs	r2, #32
 800f182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2200      	movs	r2, #0
 800f18a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2200      	movs	r2, #0
 800f192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f196:	2300      	movs	r3, #0
 800f198:	e000      	b.n	800f19c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800f19a:	2302      	movs	r3, #2
  }
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3718      	adds	r7, #24
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}
 800f1a4:	80002400 	.word	0x80002400
 800f1a8:	fe00e800 	.word	0xfe00e800

0800f1ac <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b088      	sub	sp, #32
 800f1b0:	af02      	add	r7, sp, #8
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	4608      	mov	r0, r1
 800f1b6:	4611      	mov	r1, r2
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	817b      	strh	r3, [r7, #10]
 800f1be:	460b      	mov	r3, r1
 800f1c0:	813b      	strh	r3, [r7, #8]
 800f1c2:	4613      	mov	r3, r2
 800f1c4:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	2b20      	cmp	r3, #32
 800f1d0:	d176      	bne.n	800f2c0 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1d2:	6a3b      	ldr	r3, [r7, #32]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <HAL_I2C_Mem_Read_IT+0x32>
 800f1d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d105      	bne.n	800f1ea <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f1e4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e06b      	b.n	800f2c2 <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	699b      	ldr	r3, [r3, #24]
 800f1f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f1f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1f8:	d101      	bne.n	800f1fe <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800f1fa:	2302      	movs	r3, #2
 800f1fc:	e061      	b.n	800f2c2 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f204:	2b01      	cmp	r3, #1
 800f206:	d101      	bne.n	800f20c <HAL_I2C_Mem_Read_IT+0x60>
 800f208:	2302      	movs	r3, #2
 800f20a:	e05a      	b.n	800f2c2 <HAL_I2C_Mem_Read_IT+0x116>
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2201      	movs	r2, #1
 800f210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f214:	f7fb ff8c 	bl	800b130 <HAL_GetTick>
 800f218:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2222      	movs	r2, #34	; 0x22
 800f21e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	2240      	movs	r2, #64	; 0x40
 800f226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2200      	movs	r2, #0
 800f22e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	6a3a      	ldr	r2, [r7, #32]
 800f234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f23a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	4a23      	ldr	r2, [pc, #140]	; (800f2cc <HAL_I2C_Mem_Read_IT+0x120>)
 800f240:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	4a22      	ldr	r2, [pc, #136]	; (800f2d0 <HAL_I2C_Mem_Read_IT+0x124>)
 800f246:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	2bff      	cmp	r3, #255	; 0xff
 800f250:	d906      	bls.n	800f260 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	22ff      	movs	r2, #255	; 0xff
 800f256:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800f258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f25c:	617b      	str	r3, [r7, #20]
 800f25e:	e007      	b.n	800f270 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f264:	b29a      	uxth	r2, r3
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800f26a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f26e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800f270:	88f8      	ldrh	r0, [r7, #6]
 800f272:	893a      	ldrh	r2, [r7, #8]
 800f274:	8979      	ldrh	r1, [r7, #10]
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	9301      	str	r3, [sp, #4]
 800f27a:	2319      	movs	r3, #25
 800f27c:	9300      	str	r3, [sp, #0]
 800f27e:	4603      	mov	r3, r0
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f000 ff4d 	bl	8010120 <I2C_RequestMemoryRead>
 800f286:	4603      	mov	r3, r0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d005      	beq.n	800f298 <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	2200      	movs	r2, #0
 800f290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800f294:	2301      	movs	r3, #1
 800f296:	e014      	b.n	800f2c2 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f29c:	b2da      	uxtb	r2, r3
 800f29e:	8979      	ldrh	r1, [r7, #10]
 800f2a0:	4b0c      	ldr	r3, [pc, #48]	; (800f2d4 <HAL_I2C_Mem_Read_IT+0x128>)
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	68f8      	ldr	r0, [r7, #12]
 800f2a8:	f001 ffa4 	bl	80111f4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800f2b4:	2102      	movs	r1, #2
 800f2b6:	68f8      	ldr	r0, [r7, #12]
 800f2b8:	f001 ffca 	bl	8011250 <I2C_Enable_IRQ>

    return HAL_OK;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	e000      	b.n	800f2c2 <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 800f2c0:	2302      	movs	r3, #2
  }
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3718      	adds	r7, #24
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	ffff0000 	.word	0xffff0000
 800f2d0:	0800f67b 	.word	0x0800f67b
 800f2d4:	80002400 	.word	0x80002400

0800f2d8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b08a      	sub	sp, #40	; 0x28
 800f2dc:	af02      	add	r7, sp, #8
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	4608      	mov	r0, r1
 800f2e2:	4611      	mov	r1, r2
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	817b      	strh	r3, [r7, #10]
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	813b      	strh	r3, [r7, #8]
 800f2ee:	4613      	mov	r3, r2
 800f2f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	2b20      	cmp	r3, #32
 800f2fc:	f040 80d5 	bne.w	800f4aa <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 800f300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f302:	2b00      	cmp	r3, #0
 800f304:	d002      	beq.n	800f30c <HAL_I2C_Mem_Read_DMA+0x34>
 800f306:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d105      	bne.n	800f318 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f312:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800f314:	2301      	movs	r3, #1
 800f316:	e0c9      	b.n	800f4ac <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	699b      	ldr	r3, [r3, #24]
 800f31e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f326:	d101      	bne.n	800f32c <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 800f328:	2302      	movs	r3, #2
 800f32a:	e0bf      	b.n	800f4ac <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f332:	2b01      	cmp	r3, #1
 800f334:	d101      	bne.n	800f33a <HAL_I2C_Mem_Read_DMA+0x62>
 800f336:	2302      	movs	r3, #2
 800f338:	e0b8      	b.n	800f4ac <HAL_I2C_Mem_Read_DMA+0x1d4>
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	2201      	movs	r2, #1
 800f33e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f342:	f7fb fef5 	bl	800b130 <HAL_GetTick>
 800f346:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2222      	movs	r2, #34	; 0x22
 800f34c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2240      	movs	r2, #64	; 0x40
 800f354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	2200      	movs	r2, #0
 800f35c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f368:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	4a51      	ldr	r2, [pc, #324]	; (800f4b4 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 800f36e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	4a51      	ldr	r2, [pc, #324]	; (800f4b8 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 800f374:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	2bff      	cmp	r3, #255	; 0xff
 800f37e:	d906      	bls.n	800f38e <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	22ff      	movs	r2, #255	; 0xff
 800f384:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800f386:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f38a:	61fb      	str	r3, [r7, #28]
 800f38c:	e007      	b.n	800f39e <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f392:	b29a      	uxth	r2, r3
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800f398:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f39c:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800f39e:	88f8      	ldrh	r0, [r7, #6]
 800f3a0:	893a      	ldrh	r2, [r7, #8]
 800f3a2:	8979      	ldrh	r1, [r7, #10]
 800f3a4:	69bb      	ldr	r3, [r7, #24]
 800f3a6:	9301      	str	r3, [sp, #4]
 800f3a8:	2319      	movs	r3, #25
 800f3aa:	9300      	str	r3, [sp, #0]
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	68f8      	ldr	r0, [r7, #12]
 800f3b0:	f000 feb6 	bl	8010120 <I2C_RequestMemoryRead>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d005      	beq.n	800f3c6 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	e072      	b.n	800f4ac <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d020      	beq.n	800f410 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3d2:	4a3a      	ldr	r2, [pc, #232]	; (800f4bc <HAL_I2C_Mem_Read_DMA+0x1e4>)
 800f3d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3da:	4a39      	ldr	r2, [pc, #228]	; (800f4c0 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 800f3dc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	3324      	adds	r3, #36	; 0x24
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f400:	f7fd fa5a 	bl	800c8b8 <HAL_DMA_Start_IT>
 800f404:	4603      	mov	r3, r0
 800f406:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800f408:	7dfb      	ldrb	r3, [r7, #23]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d139      	bne.n	800f482 <HAL_I2C_Mem_Read_DMA+0x1aa>
 800f40e:	e013      	b.n	800f438 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2220      	movs	r2, #32
 800f414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2200      	movs	r2, #0
 800f41c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f424:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2200      	movs	r2, #0
 800f430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800f434:	2301      	movs	r3, #1
 800f436:	e039      	b.n	800f4ac <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f43c:	b2da      	uxtb	r2, r3
 800f43e:	8979      	ldrh	r1, [r7, #10]
 800f440:	4b20      	ldr	r3, [pc, #128]	; (800f4c4 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 800f442:	9300      	str	r3, [sp, #0]
 800f444:	69fb      	ldr	r3, [r7, #28]
 800f446:	68f8      	ldr	r0, [r7, #12]
 800f448:	f001 fed4 	bl	80111f4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f450:	b29a      	uxth	r2, r3
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f456:	1ad3      	subs	r3, r2, r3
 800f458:	b29a      	uxth	r2, r3
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2200      	movs	r2, #0
 800f462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f466:	2110      	movs	r1, #16
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f001 fef1 	bl	8011250 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	681a      	ldr	r2, [r3, #0]
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f47c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800f47e:	2300      	movs	r3, #0
 800f480:	e014      	b.n	800f4ac <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	2220      	movs	r2, #32
 800f486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2200      	movs	r2, #0
 800f48e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f496:	f043 0210 	orr.w	r2, r3, #16
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	e000      	b.n	800f4ac <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 800f4aa:	2302      	movs	r3, #2
  }
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3720      	adds	r7, #32
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	ffff0000 	.word	0xffff0000
 800f4b8:	0800fad3 	.word	0x0800fad3
 800f4bc:	08010c6f 	.word	0x08010c6f
 800f4c0:	08010d05 	.word	0x08010d05
 800f4c4:	80002400 	.word	0x80002400

0800f4c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	699b      	ldr	r3, [r3, #24]
 800f4d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d005      	beq.n	800f4f4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ec:	68ba      	ldr	r2, [r7, #8]
 800f4ee:	68f9      	ldr	r1, [r7, #12]
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	4798      	blx	r3
  }
}
 800f4f4:	bf00      	nop
 800f4f6:	3710      	adds	r7, #16
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b086      	sub	sp, #24
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	699b      	ldr	r3, [r3, #24]
 800f50a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	0a1b      	lsrs	r3, r3, #8
 800f518:	f003 0301 	and.w	r3, r3, #1
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d010      	beq.n	800f542 <HAL_I2C_ER_IRQHandler+0x46>
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	09db      	lsrs	r3, r3, #7
 800f524:	f003 0301 	and.w	r3, r3, #1
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d00a      	beq.n	800f542 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f530:	f043 0201 	orr.w	r2, r3, #1
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f540:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	0a9b      	lsrs	r3, r3, #10
 800f546:	f003 0301 	and.w	r3, r3, #1
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d010      	beq.n	800f570 <HAL_I2C_ER_IRQHandler+0x74>
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	09db      	lsrs	r3, r3, #7
 800f552:	f003 0301 	and.w	r3, r3, #1
 800f556:	2b00      	cmp	r3, #0
 800f558:	d00a      	beq.n	800f570 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f55e:	f043 0208 	orr.w	r2, r3, #8
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f56e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	0a5b      	lsrs	r3, r3, #9
 800f574:	f003 0301 	and.w	r3, r3, #1
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d010      	beq.n	800f59e <HAL_I2C_ER_IRQHandler+0xa2>
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	09db      	lsrs	r3, r3, #7
 800f580:	f003 0301 	and.w	r3, r3, #1
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00a      	beq.n	800f59e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f58c:	f043 0202 	orr.w	r2, r3, #2
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f59c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5a2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f003 030b 	and.w	r3, r3, #11
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d003      	beq.n	800f5b6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800f5ae:	68f9      	ldr	r1, [r7, #12]
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f001 fa41 	bl	8010a38 <I2C_ITError>
  }
}
 800f5b6:	bf00      	nop
 800f5b8:	3718      	adds	r7, #24
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f5be:	b480      	push	{r7}
 800f5c0:	b083      	sub	sp, #12
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f5c6:	bf00      	nop
 800f5c8:	370c      	adds	r7, #12
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d0:	4770      	bx	lr

0800f5d2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f5d2:	b480      	push	{r7}
 800f5d4:	b083      	sub	sp, #12
 800f5d6:	af00      	add	r7, sp, #0
 800f5d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f5da:	bf00      	nop
 800f5dc:	370c      	adds	r7, #12
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr

0800f5e6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f5e6:	b480      	push	{r7}
 800f5e8:	b083      	sub	sp, #12
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f5ee:	bf00      	nop
 800f5f0:	370c      	adds	r7, #12
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr

0800f5fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f5fa:	b480      	push	{r7}
 800f5fc:	b083      	sub	sp, #12
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f602:	bf00      	nop
 800f604:	370c      	adds	r7, #12
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f60e:	b480      	push	{r7}
 800f610:	b083      	sub	sp, #12
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
 800f616:	460b      	mov	r3, r1
 800f618:	70fb      	strb	r3, [r7, #3]
 800f61a:	4613      	mov	r3, r2
 800f61c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f61e:	bf00      	nop
 800f620:	370c      	adds	r7, #12
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr

0800f62a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f62a:	b480      	push	{r7}
 800f62c:	b083      	sub	sp, #12
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f632:	bf00      	nop
 800f634:	370c      	adds	r7, #12
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr

0800f63e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f63e:	b480      	push	{r7}
 800f640:	b083      	sub	sp, #12
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f646:	bf00      	nop
 800f648:	370c      	adds	r7, #12
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr

0800f652 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f652:	b480      	push	{r7}
 800f654:	b083      	sub	sp, #12
 800f656:	af00      	add	r7, sp, #0
 800f658:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f65a:	bf00      	nop
 800f65c:	370c      	adds	r7, #12
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr

0800f666 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f666:	b480      	push	{r7}
 800f668:	b083      	sub	sp, #12
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f66e:	bf00      	nop
 800f670:	370c      	adds	r7, #12
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr

0800f67a <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800f67a:	b580      	push	{r7, lr}
 800f67c:	b088      	sub	sp, #32
 800f67e:	af02      	add	r7, sp, #8
 800f680:	60f8      	str	r0, [r7, #12]
 800f682:	60b9      	str	r1, [r7, #8]
 800f684:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f690:	2b01      	cmp	r3, #1
 800f692:	d101      	bne.n	800f698 <I2C_Master_ISR_IT+0x1e>
 800f694:	2302      	movs	r3, #2
 800f696:	e115      	b.n	800f8c4 <I2C_Master_ISR_IT+0x24a>
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2201      	movs	r2, #1
 800f69c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	091b      	lsrs	r3, r3, #4
 800f6a4:	f003 0301 	and.w	r3, r3, #1
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d013      	beq.n	800f6d4 <I2C_Master_ISR_IT+0x5a>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	091b      	lsrs	r3, r3, #4
 800f6b0:	f003 0301 	and.w	r3, r3, #1
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00d      	beq.n	800f6d4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2210      	movs	r2, #16
 800f6be:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6c4:	f043 0204 	orr.w	r2, r3, #4
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f6cc:	68f8      	ldr	r0, [r7, #12]
 800f6ce:	f001 faaa 	bl	8010c26 <I2C_Flush_TXDR>
 800f6d2:	e0e2      	b.n	800f89a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	089b      	lsrs	r3, r3, #2
 800f6d8:	f003 0301 	and.w	r3, r3, #1
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d023      	beq.n	800f728 <I2C_Master_ISR_IT+0xae>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	089b      	lsrs	r3, r3, #2
 800f6e4:	f003 0301 	and.w	r3, r3, #1
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d01d      	beq.n	800f728 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	f023 0304 	bic.w	r3, r3, #4
 800f6f2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6fe:	b2d2      	uxtb	r2, r2
 800f700:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f706:	1c5a      	adds	r2, r3, #1
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f710:	3b01      	subs	r3, #1
 800f712:	b29a      	uxth	r2, r3
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	3b01      	subs	r3, #1
 800f720:	b29a      	uxth	r2, r3
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f726:	e0b8      	b.n	800f89a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	085b      	lsrs	r3, r3, #1
 800f72c:	f003 0301 	and.w	r3, r3, #1
 800f730:	2b00      	cmp	r3, #0
 800f732:	d01e      	beq.n	800f772 <I2C_Master_ISR_IT+0xf8>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	085b      	lsrs	r3, r3, #1
 800f738:	f003 0301 	and.w	r3, r3, #1
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d018      	beq.n	800f772 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f744:	781a      	ldrb	r2, [r3, #0]
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f750:	1c5a      	adds	r2, r3, #1
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f75a:	3b01      	subs	r3, #1
 800f75c:	b29a      	uxth	r2, r3
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f766:	b29b      	uxth	r3, r3
 800f768:	3b01      	subs	r3, #1
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f770:	e093      	b.n	800f89a <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	09db      	lsrs	r3, r3, #7
 800f776:	f003 0301 	and.w	r3, r3, #1
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d05e      	beq.n	800f83c <I2C_Master_ISR_IT+0x1c2>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	099b      	lsrs	r3, r3, #6
 800f782:	f003 0301 	and.w	r3, r3, #1
 800f786:	2b00      	cmp	r3, #0
 800f788:	d058      	beq.n	800f83c <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f78e:	b29b      	uxth	r3, r3
 800f790:	2b00      	cmp	r3, #0
 800f792:	d041      	beq.n	800f818 <I2C_Master_ISR_IT+0x19e>
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d13d      	bne.n	800f818 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f7a8:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7ae:	b29b      	uxth	r3, r3
 800f7b0:	2bff      	cmp	r3, #255	; 0xff
 800f7b2:	d90e      	bls.n	800f7d2 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	22ff      	movs	r2, #255	; 0xff
 800f7b8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7be:	b2da      	uxtb	r2, r3
 800f7c0:	8a79      	ldrh	r1, [r7, #18]
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	9300      	str	r3, [sp, #0]
 800f7c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f7ca:	68f8      	ldr	r0, [r7, #12]
 800f7cc:	f001 fd12 	bl	80111f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f7d0:	e033      	b.n	800f83a <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7d6:	b29a      	uxth	r2, r3
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f7e4:	d00c      	beq.n	800f800 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7ea:	b2da      	uxtb	r2, r3
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f7f0:	8a79      	ldrh	r1, [r7, #18]
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	9300      	str	r3, [sp, #0]
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	68f8      	ldr	r0, [r7, #12]
 800f7fa:	f001 fcfb 	bl	80111f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f7fe:	e01c      	b.n	800f83a <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f804:	b2da      	uxtb	r2, r3
 800f806:	8a79      	ldrh	r1, [r7, #18]
 800f808:	2300      	movs	r3, #0
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	f001 fcef 	bl	80111f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f816:	e010      	b.n	800f83a <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f826:	d003      	beq.n	800f830 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f000 fd51 	bl	80102d0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f82e:	e034      	b.n	800f89a <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f830:	2140      	movs	r1, #64	; 0x40
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	f001 f900 	bl	8010a38 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f838:	e02f      	b.n	800f89a <I2C_Master_ISR_IT+0x220>
 800f83a:	e02e      	b.n	800f89a <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	099b      	lsrs	r3, r3, #6
 800f840:	f003 0301 	and.w	r3, r3, #1
 800f844:	2b00      	cmp	r3, #0
 800f846:	d028      	beq.n	800f89a <I2C_Master_ISR_IT+0x220>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	099b      	lsrs	r3, r3, #6
 800f84c:	f003 0301 	and.w	r3, r3, #1
 800f850:	2b00      	cmp	r3, #0
 800f852:	d022      	beq.n	800f89a <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f858:	b29b      	uxth	r3, r3
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d119      	bne.n	800f892 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	685b      	ldr	r3, [r3, #4]
 800f864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f86c:	d015      	beq.n	800f89a <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f872:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f876:	d108      	bne.n	800f88a <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	685a      	ldr	r2, [r3, #4]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f886:	605a      	str	r2, [r3, #4]
 800f888:	e007      	b.n	800f89a <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f88a:	68f8      	ldr	r0, [r7, #12]
 800f88c:	f000 fd20 	bl	80102d0 <I2C_ITMasterSeqCplt>
 800f890:	e003      	b.n	800f89a <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f892:	2140      	movs	r1, #64	; 0x40
 800f894:	68f8      	ldr	r0, [r7, #12]
 800f896:	f001 f8cf 	bl	8010a38 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	095b      	lsrs	r3, r3, #5
 800f89e:	f003 0301 	and.w	r3, r3, #1
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d009      	beq.n	800f8ba <I2C_Master_ISR_IT+0x240>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	095b      	lsrs	r3, r3, #5
 800f8aa:	f003 0301 	and.w	r3, r3, #1
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d003      	beq.n	800f8ba <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800f8b2:	6979      	ldr	r1, [r7, #20]
 800f8b4:	68f8      	ldr	r0, [r7, #12]
 800f8b6:	f000 fda7 	bl	8010408 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f8c2:	2300      	movs	r3, #0
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3718      	adds	r7, #24
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b086      	sub	sp, #24
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f8e8:	2b01      	cmp	r3, #1
 800f8ea:	d101      	bne.n	800f8f0 <I2C_Slave_ISR_IT+0x24>
 800f8ec:	2302      	movs	r3, #2
 800f8ee:	e0ec      	b.n	800faca <I2C_Slave_ISR_IT+0x1fe>
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	095b      	lsrs	r3, r3, #5
 800f8fc:	f003 0301 	and.w	r3, r3, #1
 800f900:	2b00      	cmp	r3, #0
 800f902:	d009      	beq.n	800f918 <I2C_Slave_ISR_IT+0x4c>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	095b      	lsrs	r3, r3, #5
 800f908:	f003 0301 	and.w	r3, r3, #1
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d003      	beq.n	800f918 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f910:	6939      	ldr	r1, [r7, #16]
 800f912:	68f8      	ldr	r0, [r7, #12]
 800f914:	f000 fe42 	bl	801059c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	091b      	lsrs	r3, r3, #4
 800f91c:	f003 0301 	and.w	r3, r3, #1
 800f920:	2b00      	cmp	r3, #0
 800f922:	d04d      	beq.n	800f9c0 <I2C_Slave_ISR_IT+0xf4>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	091b      	lsrs	r3, r3, #4
 800f928:	f003 0301 	and.w	r3, r3, #1
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d047      	beq.n	800f9c0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f934:	b29b      	uxth	r3, r3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d128      	bne.n	800f98c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f940:	b2db      	uxtb	r3, r3
 800f942:	2b28      	cmp	r3, #40	; 0x28
 800f944:	d108      	bne.n	800f958 <I2C_Slave_ISR_IT+0x8c>
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f94c:	d104      	bne.n	800f958 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f94e:	6939      	ldr	r1, [r7, #16]
 800f950:	68f8      	ldr	r0, [r7, #12]
 800f952:	f001 f81b 	bl	801098c <I2C_ITListenCplt>
 800f956:	e032      	b.n	800f9be <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	2b29      	cmp	r3, #41	; 0x29
 800f962:	d10e      	bne.n	800f982 <I2C_Slave_ISR_IT+0xb6>
 800f964:	697b      	ldr	r3, [r7, #20]
 800f966:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f96a:	d00a      	beq.n	800f982 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2210      	movs	r2, #16
 800f972:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f974:	68f8      	ldr	r0, [r7, #12]
 800f976:	f001 f956 	bl	8010c26 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	f000 fce5 	bl	801034a <I2C_ITSlaveSeqCplt>
 800f980:	e01d      	b.n	800f9be <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	2210      	movs	r2, #16
 800f988:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f98a:	e096      	b.n	800faba <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2210      	movs	r2, #16
 800f992:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f998:	f043 0204 	orr.w	r2, r3, #4
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d004      	beq.n	800f9b0 <I2C_Slave_ISR_IT+0xe4>
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f9ac:	f040 8085 	bne.w	800faba <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	68f8      	ldr	r0, [r7, #12]
 800f9b8:	f001 f83e 	bl	8010a38 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f9bc:	e07d      	b.n	800faba <I2C_Slave_ISR_IT+0x1ee>
 800f9be:	e07c      	b.n	800faba <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	089b      	lsrs	r3, r3, #2
 800f9c4:	f003 0301 	and.w	r3, r3, #1
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d030      	beq.n	800fa2e <I2C_Slave_ISR_IT+0x162>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	089b      	lsrs	r3, r3, #2
 800f9d0:	f003 0301 	and.w	r3, r3, #1
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d02a      	beq.n	800fa2e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d018      	beq.n	800fa14 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ec:	b2d2      	uxtb	r2, r2
 800f9ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f4:	1c5a      	adds	r2, r3, #1
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9fe:	3b01      	subs	r3, #1
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa0a:	b29b      	uxth	r3, r3
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	b29a      	uxth	r2, r3
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d14f      	bne.n	800fabe <I2C_Slave_ISR_IT+0x1f2>
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fa24:	d04b      	beq.n	800fabe <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800fa26:	68f8      	ldr	r0, [r7, #12]
 800fa28:	f000 fc8f 	bl	801034a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800fa2c:	e047      	b.n	800fabe <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	08db      	lsrs	r3, r3, #3
 800fa32:	f003 0301 	and.w	r3, r3, #1
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d00a      	beq.n	800fa50 <I2C_Slave_ISR_IT+0x184>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	08db      	lsrs	r3, r3, #3
 800fa3e:	f003 0301 	and.w	r3, r3, #1
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d004      	beq.n	800fa50 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800fa46:	6939      	ldr	r1, [r7, #16]
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f000 fbbd 	bl	80101c8 <I2C_ITAddrCplt>
 800fa4e:	e037      	b.n	800fac0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	085b      	lsrs	r3, r3, #1
 800fa54:	f003 0301 	and.w	r3, r3, #1
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d031      	beq.n	800fac0 <I2C_Slave_ISR_IT+0x1f4>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	085b      	lsrs	r3, r3, #1
 800fa60:	f003 0301 	and.w	r3, r3, #1
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d02b      	beq.n	800fac0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d018      	beq.n	800faa4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa76:	781a      	ldrb	r2, [r3, #0]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa82:	1c5a      	adds	r2, r3, #1
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	3b01      	subs	r3, #1
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa9a:	3b01      	subs	r3, #1
 800fa9c:	b29a      	uxth	r2, r3
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	851a      	strh	r2, [r3, #40]	; 0x28
 800faa2:	e00d      	b.n	800fac0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800faaa:	d002      	beq.n	800fab2 <I2C_Slave_ISR_IT+0x1e6>
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d106      	bne.n	800fac0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f000 fc49 	bl	801034a <I2C_ITSlaveSeqCplt>
 800fab8:	e002      	b.n	800fac0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800faba:	bf00      	nop
 800fabc:	e000      	b.n	800fac0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800fabe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fac8:	2300      	movs	r3, #0
}
 800faca:	4618      	mov	r0, r3
 800facc:	3718      	adds	r7, #24
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}

0800fad2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800fad2:	b580      	push	{r7, lr}
 800fad4:	b088      	sub	sp, #32
 800fad6:	af02      	add	r7, sp, #8
 800fad8:	60f8      	str	r0, [r7, #12]
 800fada:	60b9      	str	r1, [r7, #8]
 800fadc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fae4:	2b01      	cmp	r3, #1
 800fae6:	d101      	bne.n	800faec <I2C_Master_ISR_DMA+0x1a>
 800fae8:	2302      	movs	r3, #2
 800faea:	e0e1      	b.n	800fcb0 <I2C_Master_ISR_DMA+0x1de>
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2201      	movs	r2, #1
 800faf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	091b      	lsrs	r3, r3, #4
 800faf8:	f003 0301 	and.w	r3, r3, #1
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d017      	beq.n	800fb30 <I2C_Master_ISR_DMA+0x5e>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	091b      	lsrs	r3, r3, #4
 800fb04:	f003 0301 	and.w	r3, r3, #1
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d011      	beq.n	800fb30 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2210      	movs	r2, #16
 800fb12:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb18:	f043 0204 	orr.w	r2, r3, #4
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800fb20:	2120      	movs	r1, #32
 800fb22:	68f8      	ldr	r0, [r7, #12]
 800fb24:	f001 fb94 	bl	8011250 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f001 f87c 	bl	8010c26 <I2C_Flush_TXDR>
 800fb2e:	e0ba      	b.n	800fca6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	09db      	lsrs	r3, r3, #7
 800fb34:	f003 0301 	and.w	r3, r3, #1
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d072      	beq.n	800fc22 <I2C_Master_ISR_DMA+0x150>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	099b      	lsrs	r3, r3, #6
 800fb40:	f003 0301 	and.w	r3, r3, #1
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d06c      	beq.n	800fc22 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fb56:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d04e      	beq.n	800fc00 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb6e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	2bff      	cmp	r3, #255	; 0xff
 800fb78:	d906      	bls.n	800fb88 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	22ff      	movs	r2, #255	; 0xff
 800fb7e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800fb80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fb84:	617b      	str	r3, [r7, #20]
 800fb86:	e010      	b.n	800fbaa <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb8c:	b29a      	uxth	r2, r3
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fb9a:	d003      	beq.n	800fba4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba0:	617b      	str	r3, [r7, #20]
 800fba2:	e002      	b.n	800fbaa <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800fba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fba8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbae:	b2da      	uxtb	r2, r3
 800fbb0:	8a79      	ldrh	r1, [r7, #18]
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	9300      	str	r3, [sp, #0]
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f001 fb1b 	bl	80111f4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbc2:	b29a      	uxth	r2, r3
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbc8:	1ad3      	subs	r3, r2, r3
 800fbca:	b29a      	uxth	r2, r3
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	2b22      	cmp	r3, #34	; 0x22
 800fbda:	d108      	bne.n	800fbee <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	681a      	ldr	r2, [r3, #0]
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fbea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800fbec:	e05b      	b.n	800fca6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fbfc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800fbfe:	e052      	b.n	800fca6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fc0e:	d003      	beq.n	800fc18 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800fc10:	68f8      	ldr	r0, [r7, #12]
 800fc12:	f000 fb5d 	bl	80102d0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800fc16:	e046      	b.n	800fca6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800fc18:	2140      	movs	r1, #64	; 0x40
 800fc1a:	68f8      	ldr	r0, [r7, #12]
 800fc1c:	f000 ff0c 	bl	8010a38 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800fc20:	e041      	b.n	800fca6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	099b      	lsrs	r3, r3, #6
 800fc26:	f003 0301 	and.w	r3, r3, #1
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d029      	beq.n	800fc82 <I2C_Master_ISR_DMA+0x1b0>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	099b      	lsrs	r3, r3, #6
 800fc32:	f003 0301 	and.w	r3, r3, #1
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d023      	beq.n	800fc82 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d119      	bne.n	800fc78 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fc52:	d027      	beq.n	800fca4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fc5c:	d108      	bne.n	800fc70 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	685a      	ldr	r2, [r3, #4]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800fc6c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800fc6e:	e019      	b.n	800fca4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f000 fb2d 	bl	80102d0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800fc76:	e015      	b.n	800fca4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800fc78:	2140      	movs	r1, #64	; 0x40
 800fc7a:	68f8      	ldr	r0, [r7, #12]
 800fc7c:	f000 fedc 	bl	8010a38 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800fc80:	e010      	b.n	800fca4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	095b      	lsrs	r3, r3, #5
 800fc86:	f003 0301 	and.w	r3, r3, #1
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d00b      	beq.n	800fca6 <I2C_Master_ISR_DMA+0x1d4>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	095b      	lsrs	r3, r3, #5
 800fc92:	f003 0301 	and.w	r3, r3, #1
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d005      	beq.n	800fca6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800fc9a:	68b9      	ldr	r1, [r7, #8]
 800fc9c:	68f8      	ldr	r0, [r7, #12]
 800fc9e:	f000 fbb3 	bl	8010408 <I2C_ITMasterCplt>
 800fca2:	e000      	b.n	800fca6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800fca4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800fcae:	2300      	movs	r3, #0
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3718      	adds	r7, #24
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b088      	sub	sp, #32
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	60b9      	str	r1, [r7, #8]
 800fcc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800fcca:	2300      	movs	r3, #0
 800fccc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	d101      	bne.n	800fcdc <I2C_Slave_ISR_DMA+0x24>
 800fcd8:	2302      	movs	r3, #2
 800fcda:	e1c8      	b.n	801006e <I2C_Slave_ISR_DMA+0x3b6>
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	2201      	movs	r2, #1
 800fce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	095b      	lsrs	r3, r3, #5
 800fce8:	f003 0301 	and.w	r3, r3, #1
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d009      	beq.n	800fd04 <I2C_Slave_ISR_DMA+0x4c>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	095b      	lsrs	r3, r3, #5
 800fcf4:	f003 0301 	and.w	r3, r3, #1
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d003      	beq.n	800fd04 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800fcfc:	68b9      	ldr	r1, [r7, #8]
 800fcfe:	68f8      	ldr	r0, [r7, #12]
 800fd00:	f000 fc4c 	bl	801059c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	091b      	lsrs	r3, r3, #4
 800fd08:	f003 0301 	and.w	r3, r3, #1
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	f000 8199 	beq.w	8010044 <I2C_Slave_ISR_DMA+0x38c>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	091b      	lsrs	r3, r3, #4
 800fd16:	f003 0301 	and.w	r3, r3, #1
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f000 8192 	beq.w	8010044 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	0b9b      	lsrs	r3, r3, #14
 800fd24:	f003 0301 	and.w	r3, r3, #1
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d106      	bne.n	800fd3a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	0bdb      	lsrs	r3, r3, #15
 800fd30:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	f000 817e 	beq.w	8010036 <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d07c      	beq.n	800fe3c <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	0bdb      	lsrs	r3, r3, #15
 800fd46:	f003 0301 	and.w	r3, r3, #1
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d076      	beq.n	800fe3c <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4a8d      	ldr	r2, [pc, #564]	; (800ff8c <I2C_Slave_ISR_DMA+0x2d4>)
 800fd56:	4293      	cmp	r3, r2
 800fd58:	d059      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4a8b      	ldr	r2, [pc, #556]	; (800ff90 <I2C_Slave_ISR_DMA+0x2d8>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d053      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	4a89      	ldr	r2, [pc, #548]	; (800ff94 <I2C_Slave_ISR_DMA+0x2dc>)
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d04d      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	4a87      	ldr	r2, [pc, #540]	; (800ff98 <I2C_Slave_ISR_DMA+0x2e0>)
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	d047      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	4a85      	ldr	r2, [pc, #532]	; (800ff9c <I2C_Slave_ISR_DMA+0x2e4>)
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d041      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4a83      	ldr	r2, [pc, #524]	; (800ffa0 <I2C_Slave_ISR_DMA+0x2e8>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d03b      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4a81      	ldr	r2, [pc, #516]	; (800ffa4 <I2C_Slave_ISR_DMA+0x2ec>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d035      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	4a7f      	ldr	r2, [pc, #508]	; (800ffa8 <I2C_Slave_ISR_DMA+0x2f0>)
 800fdaa:	4293      	cmp	r3, r2
 800fdac:	d02f      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	4a7d      	ldr	r2, [pc, #500]	; (800ffac <I2C_Slave_ISR_DMA+0x2f4>)
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d029      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4a7b      	ldr	r2, [pc, #492]	; (800ffb0 <I2C_Slave_ISR_DMA+0x2f8>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d023      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	4a79      	ldr	r2, [pc, #484]	; (800ffb4 <I2C_Slave_ISR_DMA+0x2fc>)
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d01d      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4a77      	ldr	r2, [pc, #476]	; (800ffb8 <I2C_Slave_ISR_DMA+0x300>)
 800fdda:	4293      	cmp	r3, r2
 800fddc:	d017      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4a75      	ldr	r2, [pc, #468]	; (800ffbc <I2C_Slave_ISR_DMA+0x304>)
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d011      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	4a73      	ldr	r2, [pc, #460]	; (800ffc0 <I2C_Slave_ISR_DMA+0x308>)
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	d00b      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a71      	ldr	r2, [pc, #452]	; (800ffc4 <I2C_Slave_ISR_DMA+0x30c>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d005      	beq.n	800fe0e <I2C_Slave_ISR_DMA+0x156>
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	4a6f      	ldr	r2, [pc, #444]	; (800ffc8 <I2C_Slave_ISR_DMA+0x310>)
 800fe0a:	4293      	cmp	r3, r2
 800fe0c:	d109      	bne.n	800fe22 <I2C_Slave_ISR_DMA+0x16a>
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	bf0c      	ite	eq
 800fe1a:	2301      	moveq	r3, #1
 800fe1c:	2300      	movne	r3, #0
 800fe1e:	b2db      	uxtb	r3, r3
 800fe20:	e008      	b.n	800fe34 <I2C_Slave_ISR_DMA+0x17c>
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	685b      	ldr	r3, [r3, #4]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	bf0c      	ite	eq
 800fe2e:	2301      	moveq	r3, #1
 800fe30:	2300      	movne	r3, #0
 800fe32:	b2db      	uxtb	r3, r3
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d001      	beq.n	800fe3c <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 800fe38:	2301      	movs	r3, #1
 800fe3a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d07c      	beq.n	800ff3e <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	0b9b      	lsrs	r3, r3, #14
 800fe48:	f003 0301 	and.w	r3, r3, #1
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d076      	beq.n	800ff3e <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	4a4d      	ldr	r2, [pc, #308]	; (800ff8c <I2C_Slave_ISR_DMA+0x2d4>)
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	d059      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	4a4b      	ldr	r2, [pc, #300]	; (800ff90 <I2C_Slave_ISR_DMA+0x2d8>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d053      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4a49      	ldr	r2, [pc, #292]	; (800ff94 <I2C_Slave_ISR_DMA+0x2dc>)
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d04d      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	4a47      	ldr	r2, [pc, #284]	; (800ff98 <I2C_Slave_ISR_DMA+0x2e0>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d047      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	4a45      	ldr	r2, [pc, #276]	; (800ff9c <I2C_Slave_ISR_DMA+0x2e4>)
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d041      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4a43      	ldr	r2, [pc, #268]	; (800ffa0 <I2C_Slave_ISR_DMA+0x2e8>)
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d03b      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	4a41      	ldr	r2, [pc, #260]	; (800ffa4 <I2C_Slave_ISR_DMA+0x2ec>)
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d035      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	4a3f      	ldr	r2, [pc, #252]	; (800ffa8 <I2C_Slave_ISR_DMA+0x2f0>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d02f      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	4a3d      	ldr	r2, [pc, #244]	; (800ffac <I2C_Slave_ISR_DMA+0x2f4>)
 800feb8:	4293      	cmp	r3, r2
 800feba:	d029      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	4a3b      	ldr	r2, [pc, #236]	; (800ffb0 <I2C_Slave_ISR_DMA+0x2f8>)
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d023      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4a39      	ldr	r2, [pc, #228]	; (800ffb4 <I2C_Slave_ISR_DMA+0x2fc>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d01d      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	4a37      	ldr	r2, [pc, #220]	; (800ffb8 <I2C_Slave_ISR_DMA+0x300>)
 800fedc:	4293      	cmp	r3, r2
 800fede:	d017      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	4a35      	ldr	r2, [pc, #212]	; (800ffbc <I2C_Slave_ISR_DMA+0x304>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d011      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	4a33      	ldr	r2, [pc, #204]	; (800ffc0 <I2C_Slave_ISR_DMA+0x308>)
 800fef4:	4293      	cmp	r3, r2
 800fef6:	d00b      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	4a31      	ldr	r2, [pc, #196]	; (800ffc4 <I2C_Slave_ISR_DMA+0x30c>)
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d005      	beq.n	800ff10 <I2C_Slave_ISR_DMA+0x258>
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4a2f      	ldr	r2, [pc, #188]	; (800ffc8 <I2C_Slave_ISR_DMA+0x310>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d109      	bne.n	800ff24 <I2C_Slave_ISR_DMA+0x26c>
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	bf0c      	ite	eq
 800ff1c:	2301      	moveq	r3, #1
 800ff1e:	2300      	movne	r3, #0
 800ff20:	b2db      	uxtb	r3, r3
 800ff22:	e008      	b.n	800ff36 <I2C_Slave_ISR_DMA+0x27e>
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	bf0c      	ite	eq
 800ff30:	2301      	moveq	r3, #1
 800ff32:	2300      	movne	r3, #0
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d001      	beq.n	800ff3e <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	d148      	bne.n	800ffd6 <I2C_Slave_ISR_DMA+0x31e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	2b28      	cmp	r3, #40	; 0x28
 800ff4e:	d108      	bne.n	800ff62 <I2C_Slave_ISR_DMA+0x2aa>
 800ff50:	69bb      	ldr	r3, [r7, #24]
 800ff52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ff56:	d104      	bne.n	800ff62 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ff58:	68b9      	ldr	r1, [r7, #8]
 800ff5a:	68f8      	ldr	r0, [r7, #12]
 800ff5c:	f000 fd16 	bl	801098c <I2C_ITListenCplt>
 800ff60:	e068      	b.n	8010034 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff68:	b2db      	uxtb	r3, r3
 800ff6a:	2b29      	cmp	r3, #41	; 0x29
 800ff6c:	d12e      	bne.n	800ffcc <I2C_Slave_ISR_DMA+0x314>
 800ff6e:	69bb      	ldr	r3, [r7, #24]
 800ff70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ff74:	d02a      	beq.n	800ffcc <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	2210      	movs	r2, #16
 800ff7c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ff7e:	68f8      	ldr	r0, [r7, #12]
 800ff80:	f000 fe51 	bl	8010c26 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ff84:	68f8      	ldr	r0, [r7, #12]
 800ff86:	f000 f9e0 	bl	801034a <I2C_ITSlaveSeqCplt>
 800ff8a:	e053      	b.n	8010034 <I2C_Slave_ISR_DMA+0x37c>
 800ff8c:	40020010 	.word	0x40020010
 800ff90:	40020028 	.word	0x40020028
 800ff94:	40020040 	.word	0x40020040
 800ff98:	40020058 	.word	0x40020058
 800ff9c:	40020070 	.word	0x40020070
 800ffa0:	40020088 	.word	0x40020088
 800ffa4:	400200a0 	.word	0x400200a0
 800ffa8:	400200b8 	.word	0x400200b8
 800ffac:	40020410 	.word	0x40020410
 800ffb0:	40020428 	.word	0x40020428
 800ffb4:	40020440 	.word	0x40020440
 800ffb8:	40020458 	.word	0x40020458
 800ffbc:	40020470 	.word	0x40020470
 800ffc0:	40020488 	.word	0x40020488
 800ffc4:	400204a0 	.word	0x400204a0
 800ffc8:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	2210      	movs	r2, #16
 800ffd2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ffd4:	e034      	b.n	8010040 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2210      	movs	r2, #16
 800ffdc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffe2:	f043 0204 	orr.w	r2, r3, #4
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fff0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d003      	beq.n	8010000 <I2C_Slave_ISR_DMA+0x348>
 800fff8:	69bb      	ldr	r3, [r7, #24]
 800fffa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fffe:	d11f      	bne.n	8010040 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010000:	7dfb      	ldrb	r3, [r7, #23]
 8010002:	2b21      	cmp	r3, #33	; 0x21
 8010004:	d002      	beq.n	801000c <I2C_Slave_ISR_DMA+0x354>
 8010006:	7dfb      	ldrb	r3, [r7, #23]
 8010008:	2b29      	cmp	r3, #41	; 0x29
 801000a:	d103      	bne.n	8010014 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2221      	movs	r2, #33	; 0x21
 8010010:	631a      	str	r2, [r3, #48]	; 0x30
 8010012:	e008      	b.n	8010026 <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010014:	7dfb      	ldrb	r3, [r7, #23]
 8010016:	2b22      	cmp	r3, #34	; 0x22
 8010018:	d002      	beq.n	8010020 <I2C_Slave_ISR_DMA+0x368>
 801001a:	7dfb      	ldrb	r3, [r7, #23]
 801001c:	2b2a      	cmp	r3, #42	; 0x2a
 801001e:	d102      	bne.n	8010026 <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2222      	movs	r2, #34	; 0x22
 8010024:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801002a:	4619      	mov	r1, r3
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f000 fd03 	bl	8010a38 <I2C_ITError>
      if (treatdmanack == 1U)
 8010032:	e005      	b.n	8010040 <I2C_Slave_ISR_DMA+0x388>
 8010034:	e004      	b.n	8010040 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2210      	movs	r2, #16
 801003c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801003e:	e011      	b.n	8010064 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8010040:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010042:	e00f      	b.n	8010064 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	08db      	lsrs	r3, r3, #3
 8010048:	f003 0301 	and.w	r3, r3, #1
 801004c:	2b00      	cmp	r3, #0
 801004e:	d009      	beq.n	8010064 <I2C_Slave_ISR_DMA+0x3ac>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	08db      	lsrs	r3, r3, #3
 8010054:	f003 0301 	and.w	r3, r3, #1
 8010058:	2b00      	cmp	r3, #0
 801005a:	d003      	beq.n	8010064 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801005c:	68b9      	ldr	r1, [r7, #8]
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f000 f8b2 	bl	80101c8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2200      	movs	r2, #0
 8010068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801006c:	2300      	movs	r3, #0
}
 801006e:	4618      	mov	r0, r3
 8010070:	3720      	adds	r7, #32
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop

08010078 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b086      	sub	sp, #24
 801007c:	af02      	add	r7, sp, #8
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	4608      	mov	r0, r1
 8010082:	4611      	mov	r1, r2
 8010084:	461a      	mov	r2, r3
 8010086:	4603      	mov	r3, r0
 8010088:	817b      	strh	r3, [r7, #10]
 801008a:	460b      	mov	r3, r1
 801008c:	813b      	strh	r3, [r7, #8]
 801008e:	4613      	mov	r3, r2
 8010090:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8010092:	88fb      	ldrh	r3, [r7, #6]
 8010094:	b2da      	uxtb	r2, r3
 8010096:	8979      	ldrh	r1, [r7, #10]
 8010098:	4b20      	ldr	r3, [pc, #128]	; (801011c <I2C_RequestMemoryWrite+0xa4>)
 801009a:	9300      	str	r3, [sp, #0]
 801009c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80100a0:	68f8      	ldr	r0, [r7, #12]
 80100a2:	f001 f8a7 	bl	80111f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80100a6:	69fa      	ldr	r2, [r7, #28]
 80100a8:	69b9      	ldr	r1, [r7, #24]
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f000 ffc0 	bl	8011030 <I2C_WaitOnTXISFlagUntilTimeout>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d001      	beq.n	80100ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80100b6:	2301      	movs	r3, #1
 80100b8:	e02c      	b.n	8010114 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80100ba:	88fb      	ldrh	r3, [r7, #6]
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d105      	bne.n	80100cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80100c0:	893b      	ldrh	r3, [r7, #8]
 80100c2:	b2da      	uxtb	r2, r3
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	629a      	str	r2, [r3, #40]	; 0x28
 80100ca:	e015      	b.n	80100f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80100cc:	893b      	ldrh	r3, [r7, #8]
 80100ce:	0a1b      	lsrs	r3, r3, #8
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	b2da      	uxtb	r2, r3
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80100da:	69fa      	ldr	r2, [r7, #28]
 80100dc:	69b9      	ldr	r1, [r7, #24]
 80100de:	68f8      	ldr	r0, [r7, #12]
 80100e0:	f000 ffa6 	bl	8011030 <I2C_WaitOnTXISFlagUntilTimeout>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d001      	beq.n	80100ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80100ea:	2301      	movs	r3, #1
 80100ec:	e012      	b.n	8010114 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80100ee:	893b      	ldrh	r3, [r7, #8]
 80100f0:	b2da      	uxtb	r2, r3
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	9300      	str	r3, [sp, #0]
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	2200      	movs	r2, #0
 8010100:	2180      	movs	r1, #128	; 0x80
 8010102:	68f8      	ldr	r0, [r7, #12]
 8010104:	f000 ff54 	bl	8010fb0 <I2C_WaitOnFlagUntilTimeout>
 8010108:	4603      	mov	r3, r0
 801010a:	2b00      	cmp	r3, #0
 801010c:	d001      	beq.n	8010112 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801010e:	2301      	movs	r3, #1
 8010110:	e000      	b.n	8010114 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8010112:	2300      	movs	r3, #0
}
 8010114:	4618      	mov	r0, r3
 8010116:	3710      	adds	r7, #16
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}
 801011c:	80002000 	.word	0x80002000

08010120 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b086      	sub	sp, #24
 8010124:	af02      	add	r7, sp, #8
 8010126:	60f8      	str	r0, [r7, #12]
 8010128:	4608      	mov	r0, r1
 801012a:	4611      	mov	r1, r2
 801012c:	461a      	mov	r2, r3
 801012e:	4603      	mov	r3, r0
 8010130:	817b      	strh	r3, [r7, #10]
 8010132:	460b      	mov	r3, r1
 8010134:	813b      	strh	r3, [r7, #8]
 8010136:	4613      	mov	r3, r2
 8010138:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801013a:	88fb      	ldrh	r3, [r7, #6]
 801013c:	b2da      	uxtb	r2, r3
 801013e:	8979      	ldrh	r1, [r7, #10]
 8010140:	4b20      	ldr	r3, [pc, #128]	; (80101c4 <I2C_RequestMemoryRead+0xa4>)
 8010142:	9300      	str	r3, [sp, #0]
 8010144:	2300      	movs	r3, #0
 8010146:	68f8      	ldr	r0, [r7, #12]
 8010148:	f001 f854 	bl	80111f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801014c:	69fa      	ldr	r2, [r7, #28]
 801014e:	69b9      	ldr	r1, [r7, #24]
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f000 ff6d 	bl	8011030 <I2C_WaitOnTXISFlagUntilTimeout>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d001      	beq.n	8010160 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 801015c:	2301      	movs	r3, #1
 801015e:	e02c      	b.n	80101ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010160:	88fb      	ldrh	r3, [r7, #6]
 8010162:	2b01      	cmp	r3, #1
 8010164:	d105      	bne.n	8010172 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010166:	893b      	ldrh	r3, [r7, #8]
 8010168:	b2da      	uxtb	r2, r3
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	629a      	str	r2, [r3, #40]	; 0x28
 8010170:	e015      	b.n	801019e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8010172:	893b      	ldrh	r3, [r7, #8]
 8010174:	0a1b      	lsrs	r3, r3, #8
 8010176:	b29b      	uxth	r3, r3
 8010178:	b2da      	uxtb	r2, r3
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010180:	69fa      	ldr	r2, [r7, #28]
 8010182:	69b9      	ldr	r1, [r7, #24]
 8010184:	68f8      	ldr	r0, [r7, #12]
 8010186:	f000 ff53 	bl	8011030 <I2C_WaitOnTXISFlagUntilTimeout>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d001      	beq.n	8010194 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8010190:	2301      	movs	r3, #1
 8010192:	e012      	b.n	80101ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010194:	893b      	ldrh	r3, [r7, #8]
 8010196:	b2da      	uxtb	r2, r3
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	9300      	str	r3, [sp, #0]
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	2200      	movs	r2, #0
 80101a6:	2140      	movs	r1, #64	; 0x40
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f000 ff01 	bl	8010fb0 <I2C_WaitOnFlagUntilTimeout>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d001      	beq.n	80101b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80101b4:	2301      	movs	r3, #1
 80101b6:	e000      	b.n	80101ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80101b8:	2300      	movs	r3, #0
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3710      	adds	r7, #16
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	80002000 	.word	0x80002000

080101c8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b084      	sub	sp, #16
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80101d8:	b2db      	uxtb	r3, r3
 80101da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80101de:	2b28      	cmp	r3, #40	; 0x28
 80101e0:	d16a      	bne.n	80102b8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	699b      	ldr	r3, [r3, #24]
 80101e8:	0c1b      	lsrs	r3, r3, #16
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	f003 0301 	and.w	r3, r3, #1
 80101f0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	699b      	ldr	r3, [r3, #24]
 80101f8:	0c1b      	lsrs	r3, r3, #16
 80101fa:	b29b      	uxth	r3, r3
 80101fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8010200:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	b29b      	uxth	r3, r3
 801020a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801020e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	b29b      	uxth	r3, r3
 8010218:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801021c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	2b02      	cmp	r3, #2
 8010224:	d138      	bne.n	8010298 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8010226:	897b      	ldrh	r3, [r7, #10]
 8010228:	09db      	lsrs	r3, r3, #7
 801022a:	b29a      	uxth	r2, r3
 801022c:	89bb      	ldrh	r3, [r7, #12]
 801022e:	4053      	eors	r3, r2
 8010230:	b29b      	uxth	r3, r3
 8010232:	f003 0306 	and.w	r3, r3, #6
 8010236:	2b00      	cmp	r3, #0
 8010238:	d11c      	bne.n	8010274 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 801023a:	897b      	ldrh	r3, [r7, #10]
 801023c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010242:	1c5a      	adds	r2, r3, #1
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801024c:	2b02      	cmp	r3, #2
 801024e:	d13b      	bne.n	80102c8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2200      	movs	r2, #0
 8010254:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2208      	movs	r2, #8
 801025c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2200      	movs	r2, #0
 8010262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010266:	89ba      	ldrh	r2, [r7, #12]
 8010268:	7bfb      	ldrb	r3, [r7, #15]
 801026a:	4619      	mov	r1, r3
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f7ff f9ce 	bl	800f60e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8010272:	e029      	b.n	80102c8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8010274:	893b      	ldrh	r3, [r7, #8]
 8010276:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f001 f84b 	bl	8011318 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2200      	movs	r2, #0
 8010286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801028a:	89ba      	ldrh	r2, [r7, #12]
 801028c:	7bfb      	ldrb	r3, [r7, #15]
 801028e:	4619      	mov	r1, r3
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f7ff f9bc 	bl	800f60e <HAL_I2C_AddrCallback>
}
 8010296:	e017      	b.n	80102c8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f001 f83b 	bl	8011318 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2200      	movs	r2, #0
 80102a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80102aa:	89ba      	ldrh	r2, [r7, #12]
 80102ac:	7bfb      	ldrb	r3, [r7, #15]
 80102ae:	4619      	mov	r1, r3
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f7ff f9ac 	bl	800f60e <HAL_I2C_AddrCallback>
}
 80102b6:	e007      	b.n	80102c8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	2208      	movs	r2, #8
 80102be:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80102c8:	bf00      	nop
 80102ca:	3710      	adds	r7, #16
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2200      	movs	r2, #0
 80102dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80102e6:	b2db      	uxtb	r3, r3
 80102e8:	2b21      	cmp	r3, #33	; 0x21
 80102ea:	d115      	bne.n	8010318 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2220      	movs	r2, #32
 80102f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2211      	movs	r2, #17
 80102f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2200      	movs	r2, #0
 80102fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010300:	2101      	movs	r1, #1
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f001 f808 	bl	8011318 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2200      	movs	r2, #0
 801030c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f7ff f954 	bl	800f5be <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010316:	e014      	b.n	8010342 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2220      	movs	r2, #32
 801031c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2212      	movs	r2, #18
 8010324:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2200      	movs	r2, #0
 801032a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801032c:	2102      	movs	r1, #2
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 fff2 	bl	8011318 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2200      	movs	r2, #0
 8010338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f7ff f948 	bl	800f5d2 <HAL_I2C_MasterRxCpltCallback>
}
 8010342:	bf00      	nop
 8010344:	3708      	adds	r7, #8
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b084      	sub	sp, #16
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2200      	movs	r2, #0
 801035e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	0b9b      	lsrs	r3, r3, #14
 8010366:	f003 0301 	and.w	r3, r3, #1
 801036a:	2b00      	cmp	r3, #0
 801036c:	d008      	beq.n	8010380 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	681a      	ldr	r2, [r3, #0]
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801037c:	601a      	str	r2, [r3, #0]
 801037e:	e00d      	b.n	801039c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	0bdb      	lsrs	r3, r3, #15
 8010384:	f003 0301 	and.w	r3, r3, #1
 8010388:	2b00      	cmp	r3, #0
 801038a:	d007      	beq.n	801039c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801039a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80103a2:	b2db      	uxtb	r3, r3
 80103a4:	2b29      	cmp	r3, #41	; 0x29
 80103a6:	d112      	bne.n	80103ce <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2228      	movs	r2, #40	; 0x28
 80103ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2221      	movs	r2, #33	; 0x21
 80103b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80103b6:	2101      	movs	r1, #1
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f000 ffad 	bl	8011318 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2200      	movs	r2, #0
 80103c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f7ff f90d 	bl	800f5e6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80103cc:	e017      	b.n	80103fe <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	2b2a      	cmp	r3, #42	; 0x2a
 80103d8:	d111      	bne.n	80103fe <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2228      	movs	r2, #40	; 0x28
 80103de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2222      	movs	r2, #34	; 0x22
 80103e6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80103e8:	2102      	movs	r1, #2
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 ff94 	bl	8011318 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2200      	movs	r2, #0
 80103f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f7ff f8fe 	bl	800f5fa <HAL_I2C_SlaveRxCpltCallback>
}
 80103fe:	bf00      	nop
 8010400:	3710      	adds	r7, #16
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}
	...

08010408 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b086      	sub	sp, #24
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	2220      	movs	r2, #32
 801041c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010424:	b2db      	uxtb	r3, r3
 8010426:	2b21      	cmp	r3, #33	; 0x21
 8010428:	d107      	bne.n	801043a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801042a:	2101      	movs	r1, #1
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f000 ff73 	bl	8011318 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2211      	movs	r2, #17
 8010436:	631a      	str	r2, [r3, #48]	; 0x30
 8010438:	e00c      	b.n	8010454 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010440:	b2db      	uxtb	r3, r3
 8010442:	2b22      	cmp	r3, #34	; 0x22
 8010444:	d106      	bne.n	8010454 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010446:	2102      	movs	r1, #2
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 ff65 	bl	8011318 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2212      	movs	r2, #18
 8010452:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	6859      	ldr	r1, [r3, #4]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	4b4d      	ldr	r3, [pc, #308]	; (8010594 <I2C_ITMasterCplt+0x18c>)
 8010460:	400b      	ands	r3, r1
 8010462:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2200      	movs	r2, #0
 8010468:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	4a4a      	ldr	r2, [pc, #296]	; (8010598 <I2C_ITMasterCplt+0x190>)
 801046e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	091b      	lsrs	r3, r3, #4
 8010474:	f003 0301 	and.w	r3, r3, #1
 8010478:	2b00      	cmp	r3, #0
 801047a:	d009      	beq.n	8010490 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	2210      	movs	r2, #16
 8010482:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010488:	f043 0204 	orr.w	r2, r3, #4
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010496:	b2db      	uxtb	r3, r3
 8010498:	2b60      	cmp	r3, #96	; 0x60
 801049a:	d10b      	bne.n	80104b4 <I2C_ITMasterCplt+0xac>
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	089b      	lsrs	r3, r3, #2
 80104a0:	f003 0301 	and.w	r3, r3, #1
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d005      	beq.n	80104b4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80104b2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f000 fbb6 	bl	8010c26 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104be:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80104c6:	b2db      	uxtb	r3, r3
 80104c8:	2b60      	cmp	r3, #96	; 0x60
 80104ca:	d002      	beq.n	80104d2 <I2C_ITMasterCplt+0xca>
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d006      	beq.n	80104e0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104d6:	4619      	mov	r1, r3
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f000 faad 	bl	8010a38 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80104de:	e054      	b.n	801058a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	2b21      	cmp	r3, #33	; 0x21
 80104ea:	d124      	bne.n	8010536 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2220      	movs	r2, #32
 80104f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2200      	movs	r2, #0
 80104f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010500:	b2db      	uxtb	r3, r3
 8010502:	2b40      	cmp	r3, #64	; 0x40
 8010504:	d10b      	bne.n	801051e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2200      	movs	r2, #0
 801050a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2200      	movs	r2, #0
 8010512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f7ff f891 	bl	800f63e <HAL_I2C_MemTxCpltCallback>
}
 801051c:	e035      	b.n	801058a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2200      	movs	r2, #0
 8010522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2200      	movs	r2, #0
 801052a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f7ff f845 	bl	800f5be <HAL_I2C_MasterTxCpltCallback>
}
 8010534:	e029      	b.n	801058a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801053c:	b2db      	uxtb	r3, r3
 801053e:	2b22      	cmp	r3, #34	; 0x22
 8010540:	d123      	bne.n	801058a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2220      	movs	r2, #32
 8010546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010556:	b2db      	uxtb	r3, r3
 8010558:	2b40      	cmp	r3, #64	; 0x40
 801055a:	d10b      	bne.n	8010574 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2200      	movs	r2, #0
 8010560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2200      	movs	r2, #0
 8010568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f7f8 f9c5 	bl	80088fc <HAL_I2C_MemRxCpltCallback>
}
 8010572:	e00a      	b.n	801058a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2200      	movs	r2, #0
 8010578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2200      	movs	r2, #0
 8010580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f7ff f824 	bl	800f5d2 <HAL_I2C_MasterRxCpltCallback>
}
 801058a:	bf00      	nop
 801058c:	3718      	adds	r7, #24
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	fe00e800 	.word	0xfe00e800
 8010598:	ffff0000 	.word	0xffff0000

0801059c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b086      	sub	sp, #24
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
 80105a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80105b8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	2220      	movs	r2, #32
 80105c0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80105c2:	7bfb      	ldrb	r3, [r7, #15]
 80105c4:	2b21      	cmp	r3, #33	; 0x21
 80105c6:	d002      	beq.n	80105ce <I2C_ITSlaveCplt+0x32>
 80105c8:	7bfb      	ldrb	r3, [r7, #15]
 80105ca:	2b29      	cmp	r3, #41	; 0x29
 80105cc:	d108      	bne.n	80105e0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80105ce:	f248 0101 	movw	r1, #32769	; 0x8001
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f000 fea0 	bl	8011318 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2221      	movs	r2, #33	; 0x21
 80105dc:	631a      	str	r2, [r3, #48]	; 0x30
 80105de:	e00d      	b.n	80105fc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80105e0:	7bfb      	ldrb	r3, [r7, #15]
 80105e2:	2b22      	cmp	r3, #34	; 0x22
 80105e4:	d002      	beq.n	80105ec <I2C_ITSlaveCplt+0x50>
 80105e6:	7bfb      	ldrb	r3, [r7, #15]
 80105e8:	2b2a      	cmp	r3, #42	; 0x2a
 80105ea:	d107      	bne.n	80105fc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80105ec:	f248 0102 	movw	r1, #32770	; 0x8002
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f000 fe91 	bl	8011318 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2222      	movs	r2, #34	; 0x22
 80105fa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	685a      	ldr	r2, [r3, #4]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801060a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	6859      	ldr	r1, [r3, #4]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	4b80      	ldr	r3, [pc, #512]	; (8010818 <I2C_ITSlaveCplt+0x27c>)
 8010618:	400b      	ands	r3, r1
 801061a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f000 fb02 	bl	8010c26 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	0b9b      	lsrs	r3, r3, #14
 8010626:	f003 0301 	and.w	r3, r3, #1
 801062a:	2b00      	cmp	r3, #0
 801062c:	d07a      	beq.n	8010724 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	681a      	ldr	r2, [r3, #0]
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801063c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010642:	2b00      	cmp	r3, #0
 8010644:	f000 8111 	beq.w	801086a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	4a73      	ldr	r2, [pc, #460]	; (801081c <I2C_ITSlaveCplt+0x280>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d059      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	4a71      	ldr	r2, [pc, #452]	; (8010820 <I2C_ITSlaveCplt+0x284>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d053      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	4a6f      	ldr	r2, [pc, #444]	; (8010824 <I2C_ITSlaveCplt+0x288>)
 8010668:	4293      	cmp	r3, r2
 801066a:	d04d      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4a6d      	ldr	r2, [pc, #436]	; (8010828 <I2C_ITSlaveCplt+0x28c>)
 8010674:	4293      	cmp	r3, r2
 8010676:	d047      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	4a6b      	ldr	r2, [pc, #428]	; (801082c <I2C_ITSlaveCplt+0x290>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d041      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	4a69      	ldr	r2, [pc, #420]	; (8010830 <I2C_ITSlaveCplt+0x294>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d03b      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	4a67      	ldr	r2, [pc, #412]	; (8010834 <I2C_ITSlaveCplt+0x298>)
 8010698:	4293      	cmp	r3, r2
 801069a:	d035      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	4a65      	ldr	r2, [pc, #404]	; (8010838 <I2C_ITSlaveCplt+0x29c>)
 80106a4:	4293      	cmp	r3, r2
 80106a6:	d02f      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	4a63      	ldr	r2, [pc, #396]	; (801083c <I2C_ITSlaveCplt+0x2a0>)
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d029      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	4a61      	ldr	r2, [pc, #388]	; (8010840 <I2C_ITSlaveCplt+0x2a4>)
 80106bc:	4293      	cmp	r3, r2
 80106be:	d023      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	4a5f      	ldr	r2, [pc, #380]	; (8010844 <I2C_ITSlaveCplt+0x2a8>)
 80106c8:	4293      	cmp	r3, r2
 80106ca:	d01d      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	4a5d      	ldr	r2, [pc, #372]	; (8010848 <I2C_ITSlaveCplt+0x2ac>)
 80106d4:	4293      	cmp	r3, r2
 80106d6:	d017      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	4a5b      	ldr	r2, [pc, #364]	; (801084c <I2C_ITSlaveCplt+0x2b0>)
 80106e0:	4293      	cmp	r3, r2
 80106e2:	d011      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	4a59      	ldr	r2, [pc, #356]	; (8010850 <I2C_ITSlaveCplt+0x2b4>)
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d00b      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	4a57      	ldr	r2, [pc, #348]	; (8010854 <I2C_ITSlaveCplt+0x2b8>)
 80106f8:	4293      	cmp	r3, r2
 80106fa:	d005      	beq.n	8010708 <I2C_ITSlaveCplt+0x16c>
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	4a55      	ldr	r2, [pc, #340]	; (8010858 <I2C_ITSlaveCplt+0x2bc>)
 8010704:	4293      	cmp	r3, r2
 8010706:	d105      	bne.n	8010714 <I2C_ITSlaveCplt+0x178>
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	b29b      	uxth	r3, r3
 8010712:	e004      	b.n	801071e <I2C_ITSlaveCplt+0x182>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	b29b      	uxth	r3, r3
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	8553      	strh	r3, [r2, #42]	; 0x2a
 8010722:	e0a2      	b.n	801086a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	0bdb      	lsrs	r3, r3, #15
 8010728:	f003 0301 	and.w	r3, r3, #1
 801072c:	2b00      	cmp	r3, #0
 801072e:	f000 809c 	beq.w	801086a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	681a      	ldr	r2, [r3, #0]
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010740:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010746:	2b00      	cmp	r3, #0
 8010748:	f000 808f 	beq.w	801086a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	4a32      	ldr	r2, [pc, #200]	; (801081c <I2C_ITSlaveCplt+0x280>)
 8010754:	4293      	cmp	r3, r2
 8010756:	d059      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	4a30      	ldr	r2, [pc, #192]	; (8010820 <I2C_ITSlaveCplt+0x284>)
 8010760:	4293      	cmp	r3, r2
 8010762:	d053      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4a2e      	ldr	r2, [pc, #184]	; (8010824 <I2C_ITSlaveCplt+0x288>)
 801076c:	4293      	cmp	r3, r2
 801076e:	d04d      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4a2c      	ldr	r2, [pc, #176]	; (8010828 <I2C_ITSlaveCplt+0x28c>)
 8010778:	4293      	cmp	r3, r2
 801077a:	d047      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	4a2a      	ldr	r2, [pc, #168]	; (801082c <I2C_ITSlaveCplt+0x290>)
 8010784:	4293      	cmp	r3, r2
 8010786:	d041      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	4a28      	ldr	r2, [pc, #160]	; (8010830 <I2C_ITSlaveCplt+0x294>)
 8010790:	4293      	cmp	r3, r2
 8010792:	d03b      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	4a26      	ldr	r2, [pc, #152]	; (8010834 <I2C_ITSlaveCplt+0x298>)
 801079c:	4293      	cmp	r3, r2
 801079e:	d035      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	4a24      	ldr	r2, [pc, #144]	; (8010838 <I2C_ITSlaveCplt+0x29c>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d02f      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	4a22      	ldr	r2, [pc, #136]	; (801083c <I2C_ITSlaveCplt+0x2a0>)
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d029      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	4a20      	ldr	r2, [pc, #128]	; (8010840 <I2C_ITSlaveCplt+0x2a4>)
 80107c0:	4293      	cmp	r3, r2
 80107c2:	d023      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	4a1e      	ldr	r2, [pc, #120]	; (8010844 <I2C_ITSlaveCplt+0x2a8>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d01d      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	4a1c      	ldr	r2, [pc, #112]	; (8010848 <I2C_ITSlaveCplt+0x2ac>)
 80107d8:	4293      	cmp	r3, r2
 80107da:	d017      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	4a1a      	ldr	r2, [pc, #104]	; (801084c <I2C_ITSlaveCplt+0x2b0>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d011      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	4a18      	ldr	r2, [pc, #96]	; (8010850 <I2C_ITSlaveCplt+0x2b4>)
 80107f0:	4293      	cmp	r3, r2
 80107f2:	d00b      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	4a16      	ldr	r2, [pc, #88]	; (8010854 <I2C_ITSlaveCplt+0x2b8>)
 80107fc:	4293      	cmp	r3, r2
 80107fe:	d005      	beq.n	801080c <I2C_ITSlaveCplt+0x270>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	4a14      	ldr	r2, [pc, #80]	; (8010858 <I2C_ITSlaveCplt+0x2bc>)
 8010808:	4293      	cmp	r3, r2
 801080a:	d127      	bne.n	801085c <I2C_ITSlaveCplt+0x2c0>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	b29b      	uxth	r3, r3
 8010816:	e026      	b.n	8010866 <I2C_ITSlaveCplt+0x2ca>
 8010818:	fe00e800 	.word	0xfe00e800
 801081c:	40020010 	.word	0x40020010
 8010820:	40020028 	.word	0x40020028
 8010824:	40020040 	.word	0x40020040
 8010828:	40020058 	.word	0x40020058
 801082c:	40020070 	.word	0x40020070
 8010830:	40020088 	.word	0x40020088
 8010834:	400200a0 	.word	0x400200a0
 8010838:	400200b8 	.word	0x400200b8
 801083c:	40020410 	.word	0x40020410
 8010840:	40020428 	.word	0x40020428
 8010844:	40020440 	.word	0x40020440
 8010848:	40020458 	.word	0x40020458
 801084c:	40020470 	.word	0x40020470
 8010850:	40020488 	.word	0x40020488
 8010854:	400204a0 	.word	0x400204a0
 8010858:	400204b8 	.word	0x400204b8
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	685b      	ldr	r3, [r3, #4]
 8010864:	b29b      	uxth	r3, r3
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 801086a:	697b      	ldr	r3, [r7, #20]
 801086c:	089b      	lsrs	r3, r3, #2
 801086e:	f003 0301 	and.w	r3, r3, #1
 8010872:	2b00      	cmp	r3, #0
 8010874:	d020      	beq.n	80108b8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	f023 0304 	bic.w	r3, r3, #4
 801087c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010888:	b2d2      	uxtb	r2, r2
 801088a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010890:	1c5a      	adds	r2, r3, #1
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801089a:	2b00      	cmp	r3, #0
 801089c:	d00c      	beq.n	80108b8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80108a2:	3b01      	subs	r3, #1
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	3b01      	subs	r3, #1
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80108bc:	b29b      	uxth	r3, r3
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d005      	beq.n	80108ce <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108c6:	f043 0204 	orr.w	r2, r3, #4
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2200      	movs	r2, #0
 80108d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2200      	movs	r2, #0
 80108da:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d010      	beq.n	8010906 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108e8:	4619      	mov	r1, r3
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 f8a4 	bl	8010a38 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80108f6:	b2db      	uxtb	r3, r3
 80108f8:	2b28      	cmp	r3, #40	; 0x28
 80108fa:	d141      	bne.n	8010980 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80108fc:	6979      	ldr	r1, [r7, #20]
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f000 f844 	bl	801098c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010904:	e03c      	b.n	8010980 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801090a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801090e:	d014      	beq.n	801093a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f7ff fd1a 	bl	801034a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	4a1b      	ldr	r2, [pc, #108]	; (8010988 <I2C_ITSlaveCplt+0x3ec>)
 801091a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2220      	movs	r2, #32
 8010920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2200      	movs	r2, #0
 8010928:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2200      	movs	r2, #0
 801092e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f7fe fe79 	bl	800f62a <HAL_I2C_ListenCpltCallback>
}
 8010938:	e022      	b.n	8010980 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010940:	b2db      	uxtb	r3, r3
 8010942:	2b22      	cmp	r3, #34	; 0x22
 8010944:	d10e      	bne.n	8010964 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2220      	movs	r2, #32
 801094a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2200      	movs	r2, #0
 8010952:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2200      	movs	r2, #0
 8010958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f7fe fe4c 	bl	800f5fa <HAL_I2C_SlaveRxCpltCallback>
}
 8010962:	e00d      	b.n	8010980 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2220      	movs	r2, #32
 8010968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2200      	movs	r2, #0
 8010970:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2200      	movs	r2, #0
 8010976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f7fe fe33 	bl	800f5e6 <HAL_I2C_SlaveTxCpltCallback>
}
 8010980:	bf00      	nop
 8010982:	3718      	adds	r7, #24
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}
 8010988:	ffff0000 	.word	0xffff0000

0801098c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	4a26      	ldr	r2, [pc, #152]	; (8010a34 <I2C_ITListenCplt+0xa8>)
 801099a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2200      	movs	r2, #0
 80109a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2220      	movs	r2, #32
 80109a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2200      	movs	r2, #0
 80109ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2200      	movs	r2, #0
 80109b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	089b      	lsrs	r3, r3, #2
 80109bc:	f003 0301 	and.w	r3, r3, #1
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d022      	beq.n	8010a0a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ce:	b2d2      	uxtb	r2, r2
 80109d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109d6:	1c5a      	adds	r2, r3, #1
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d012      	beq.n	8010a0a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109e8:	3b01      	subs	r3, #1
 80109ea:	b29a      	uxth	r2, r3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80109f4:	b29b      	uxth	r3, r3
 80109f6:	3b01      	subs	r3, #1
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a02:	f043 0204 	orr.w	r2, r3, #4
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010a0a:	f248 0103 	movw	r1, #32771	; 0x8003
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f000 fc82 	bl	8011318 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2210      	movs	r2, #16
 8010a1a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f7fe fe00 	bl	800f62a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8010a2a:	bf00      	nop
 8010a2c:	3708      	adds	r7, #8
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
 8010a32:	bf00      	nop
 8010a34:	ffff0000 	.word	0xffff0000

08010a38 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b084      	sub	sp, #16
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010a48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4a5d      	ldr	r2, [pc, #372]	; (8010bcc <I2C_ITError+0x194>)
 8010a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	431a      	orrs	r2, r3
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8010a6a:	7bfb      	ldrb	r3, [r7, #15]
 8010a6c:	2b28      	cmp	r3, #40	; 0x28
 8010a6e:	d005      	beq.n	8010a7c <I2C_ITError+0x44>
 8010a70:	7bfb      	ldrb	r3, [r7, #15]
 8010a72:	2b29      	cmp	r3, #41	; 0x29
 8010a74:	d002      	beq.n	8010a7c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8010a76:	7bfb      	ldrb	r3, [r7, #15]
 8010a78:	2b2a      	cmp	r3, #42	; 0x2a
 8010a7a:	d10b      	bne.n	8010a94 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010a7c:	2103      	movs	r1, #3
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f000 fc4a 	bl	8011318 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2228      	movs	r2, #40	; 0x28
 8010a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	4a50      	ldr	r2, [pc, #320]	; (8010bd0 <I2C_ITError+0x198>)
 8010a90:	635a      	str	r2, [r3, #52]	; 0x34
 8010a92:	e011      	b.n	8010ab8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010a94:	f248 0103 	movw	r1, #32771	; 0x8003
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f000 fc3d 	bl	8011318 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010aa4:	b2db      	uxtb	r3, r3
 8010aa6:	2b60      	cmp	r3, #96	; 0x60
 8010aa8:	d003      	beq.n	8010ab2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2220      	movs	r2, #32
 8010aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010abc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d039      	beq.n	8010b3a <I2C_ITError+0x102>
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	2b11      	cmp	r3, #17
 8010aca:	d002      	beq.n	8010ad2 <I2C_ITError+0x9a>
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	2b21      	cmp	r3, #33	; 0x21
 8010ad0:	d133      	bne.n	8010b3a <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010ae0:	d107      	bne.n	8010af2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8010af0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7fd fab6 	bl	800e068 <HAL_DMA_GetState>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d017      	beq.n	8010b32 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b06:	4a33      	ldr	r2, [pc, #204]	; (8010bd4 <I2C_ITError+0x19c>)
 8010b08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fc f938 	bl	800cd8c <HAL_DMA_Abort_IT>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d04d      	beq.n	8010bbe <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b28:	687a      	ldr	r2, [r7, #4]
 8010b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010b2c:	4610      	mov	r0, r2
 8010b2e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010b30:	e045      	b.n	8010bbe <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f000 f850 	bl	8010bd8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010b38:	e041      	b.n	8010bbe <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d039      	beq.n	8010bb6 <I2C_ITError+0x17e>
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	2b12      	cmp	r3, #18
 8010b46:	d002      	beq.n	8010b4e <I2C_ITError+0x116>
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	2b22      	cmp	r3, #34	; 0x22
 8010b4c:	d133      	bne.n	8010bb6 <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b5c:	d107      	bne.n	8010b6e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010b6c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7fd fa78 	bl	800e068 <HAL_DMA_GetState>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	2b01      	cmp	r3, #1
 8010b7c:	d017      	beq.n	8010bae <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b82:	4a14      	ldr	r2, [pc, #80]	; (8010bd4 <I2C_ITError+0x19c>)
 8010b84:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7fc f8fa 	bl	800cd8c <HAL_DMA_Abort_IT>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d011      	beq.n	8010bc2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010ba8:	4610      	mov	r0, r2
 8010baa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010bac:	e009      	b.n	8010bc2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f000 f812 	bl	8010bd8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010bb4:	e005      	b.n	8010bc2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 f80e 	bl	8010bd8 <I2C_TreatErrorCallback>
  }
}
 8010bbc:	e002      	b.n	8010bc4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010bbe:	bf00      	nop
 8010bc0:	e000      	b.n	8010bc4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010bc2:	bf00      	nop
}
 8010bc4:	bf00      	nop
 8010bc6:	3710      	adds	r7, #16
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}
 8010bcc:	ffff0000 	.word	0xffff0000
 8010bd0:	0800f8cd 	.word	0x0800f8cd
 8010bd4:	08010f75 	.word	0x08010f75

08010bd8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010be6:	b2db      	uxtb	r3, r3
 8010be8:	2b60      	cmp	r3, #96	; 0x60
 8010bea:	d10e      	bne.n	8010c0a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2220      	movs	r2, #32
 8010bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f7fe fd2f 	bl	800f666 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010c08:	e009      	b.n	8010c1e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2200      	movs	r2, #0
 8010c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f7fe fd1a 	bl	800f652 <HAL_I2C_ErrorCallback>
}
 8010c1e:	bf00      	nop
 8010c20:	3708      	adds	r7, #8
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}

08010c26 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010c26:	b480      	push	{r7}
 8010c28:	b083      	sub	sp, #12
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	699b      	ldr	r3, [r3, #24]
 8010c34:	f003 0302 	and.w	r3, r3, #2
 8010c38:	2b02      	cmp	r3, #2
 8010c3a:	d103      	bne.n	8010c44 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	2200      	movs	r2, #0
 8010c42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	699b      	ldr	r3, [r3, #24]
 8010c4a:	f003 0301 	and.w	r3, r3, #1
 8010c4e:	2b01      	cmp	r3, #1
 8010c50:	d007      	beq.n	8010c62 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	699a      	ldr	r2, [r3, #24]
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f042 0201 	orr.w	r2, r2, #1
 8010c60:	619a      	str	r2, [r3, #24]
  }
}
 8010c62:	bf00      	nop
 8010c64:	370c      	adds	r7, #12
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr

08010c6e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b084      	sub	sp, #16
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c7a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	681a      	ldr	r2, [r3, #0]
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010c8a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d104      	bne.n	8010ca0 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010c96:	2120      	movs	r1, #32
 8010c98:	68f8      	ldr	r0, [r7, #12]
 8010c9a:	f000 fad9 	bl	8011250 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8010c9e:	e02d      	b.n	8010cfc <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca4:	68fa      	ldr	r2, [r7, #12]
 8010ca6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010ca8:	441a      	add	r2, r3
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	2bff      	cmp	r3, #255	; 0xff
 8010cb6:	d903      	bls.n	8010cc0 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	22ff      	movs	r2, #255	; 0xff
 8010cbc:	851a      	strh	r2, [r3, #40]	; 0x28
 8010cbe:	e004      	b.n	8010cca <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010cc4:	b29a      	uxth	r2, r3
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	3324      	adds	r3, #36	; 0x24
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cda:	461a      	mov	r2, r3
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ce0:	f7fb fdea 	bl	800c8b8 <HAL_DMA_Start_IT>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d004      	beq.n	8010cf4 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8010cea:	2110      	movs	r1, #16
 8010cec:	68f8      	ldr	r0, [r7, #12]
 8010cee:	f7ff fea3 	bl	8010a38 <I2C_ITError>
}
 8010cf2:	e003      	b.n	8010cfc <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8010cf4:	2140      	movs	r1, #64	; 0x40
 8010cf6:	68f8      	ldr	r0, [r7, #12]
 8010cf8:	f000 faaa 	bl	8011250 <I2C_Enable_IRQ>
}
 8010cfc:	bf00      	nop
 8010cfe:	3710      	adds	r7, #16
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b084      	sub	sp, #16
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d14:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d076      	beq.n	8010e0c <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	4a83      	ldr	r2, [pc, #524]	; (8010f34 <I2C_DMAError+0x230>)
 8010d26:	4293      	cmp	r3, r2
 8010d28:	d059      	beq.n	8010dde <I2C_DMAError+0xda>
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	4a81      	ldr	r2, [pc, #516]	; (8010f38 <I2C_DMAError+0x234>)
 8010d32:	4293      	cmp	r3, r2
 8010d34:	d053      	beq.n	8010dde <I2C_DMAError+0xda>
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	4a7f      	ldr	r2, [pc, #508]	; (8010f3c <I2C_DMAError+0x238>)
 8010d3e:	4293      	cmp	r3, r2
 8010d40:	d04d      	beq.n	8010dde <I2C_DMAError+0xda>
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	4a7d      	ldr	r2, [pc, #500]	; (8010f40 <I2C_DMAError+0x23c>)
 8010d4a:	4293      	cmp	r3, r2
 8010d4c:	d047      	beq.n	8010dde <I2C_DMAError+0xda>
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	4a7b      	ldr	r2, [pc, #492]	; (8010f44 <I2C_DMAError+0x240>)
 8010d56:	4293      	cmp	r3, r2
 8010d58:	d041      	beq.n	8010dde <I2C_DMAError+0xda>
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	4a79      	ldr	r2, [pc, #484]	; (8010f48 <I2C_DMAError+0x244>)
 8010d62:	4293      	cmp	r3, r2
 8010d64:	d03b      	beq.n	8010dde <I2C_DMAError+0xda>
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	4a77      	ldr	r2, [pc, #476]	; (8010f4c <I2C_DMAError+0x248>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d035      	beq.n	8010dde <I2C_DMAError+0xda>
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	4a75      	ldr	r2, [pc, #468]	; (8010f50 <I2C_DMAError+0x24c>)
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	d02f      	beq.n	8010dde <I2C_DMAError+0xda>
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	4a73      	ldr	r2, [pc, #460]	; (8010f54 <I2C_DMAError+0x250>)
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d029      	beq.n	8010dde <I2C_DMAError+0xda>
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	4a71      	ldr	r2, [pc, #452]	; (8010f58 <I2C_DMAError+0x254>)
 8010d92:	4293      	cmp	r3, r2
 8010d94:	d023      	beq.n	8010dde <I2C_DMAError+0xda>
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4a6f      	ldr	r2, [pc, #444]	; (8010f5c <I2C_DMAError+0x258>)
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d01d      	beq.n	8010dde <I2C_DMAError+0xda>
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	4a6d      	ldr	r2, [pc, #436]	; (8010f60 <I2C_DMAError+0x25c>)
 8010daa:	4293      	cmp	r3, r2
 8010dac:	d017      	beq.n	8010dde <I2C_DMAError+0xda>
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4a6b      	ldr	r2, [pc, #428]	; (8010f64 <I2C_DMAError+0x260>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d011      	beq.n	8010dde <I2C_DMAError+0xda>
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	4a69      	ldr	r2, [pc, #420]	; (8010f68 <I2C_DMAError+0x264>)
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d00b      	beq.n	8010dde <I2C_DMAError+0xda>
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	4a67      	ldr	r2, [pc, #412]	; (8010f6c <I2C_DMAError+0x268>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d005      	beq.n	8010dde <I2C_DMAError+0xda>
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	4a65      	ldr	r2, [pc, #404]	; (8010f70 <I2C_DMAError+0x26c>)
 8010dda:	4293      	cmp	r3, r2
 8010ddc:	d109      	bne.n	8010df2 <I2C_DMAError+0xee>
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	685b      	ldr	r3, [r3, #4]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	bf0c      	ite	eq
 8010dea:	2301      	moveq	r3, #1
 8010dec:	2300      	movne	r3, #0
 8010dee:	b2db      	uxtb	r3, r3
 8010df0:	e008      	b.n	8010e04 <I2C_DMAError+0x100>
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	685b      	ldr	r3, [r3, #4]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	bf0c      	ite	eq
 8010dfe:	2301      	moveq	r3, #1
 8010e00:	2300      	movne	r3, #0
 8010e02:	b2db      	uxtb	r3, r3
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d001      	beq.n	8010e0c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8010e08:	2301      	movs	r3, #1
 8010e0a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d076      	beq.n	8010f02 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	4a46      	ldr	r2, [pc, #280]	; (8010f34 <I2C_DMAError+0x230>)
 8010e1c:	4293      	cmp	r3, r2
 8010e1e:	d059      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	4a44      	ldr	r2, [pc, #272]	; (8010f38 <I2C_DMAError+0x234>)
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	d053      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	4a42      	ldr	r2, [pc, #264]	; (8010f3c <I2C_DMAError+0x238>)
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d04d      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	4a40      	ldr	r2, [pc, #256]	; (8010f40 <I2C_DMAError+0x23c>)
 8010e40:	4293      	cmp	r3, r2
 8010e42:	d047      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	4a3e      	ldr	r2, [pc, #248]	; (8010f44 <I2C_DMAError+0x240>)
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	d041      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	4a3c      	ldr	r2, [pc, #240]	; (8010f48 <I2C_DMAError+0x244>)
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	d03b      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	4a3a      	ldr	r2, [pc, #232]	; (8010f4c <I2C_DMAError+0x248>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d035      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	4a38      	ldr	r2, [pc, #224]	; (8010f50 <I2C_DMAError+0x24c>)
 8010e70:	4293      	cmp	r3, r2
 8010e72:	d02f      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	4a36      	ldr	r2, [pc, #216]	; (8010f54 <I2C_DMAError+0x250>)
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	d029      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	4a34      	ldr	r2, [pc, #208]	; (8010f58 <I2C_DMAError+0x254>)
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	d023      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	4a32      	ldr	r2, [pc, #200]	; (8010f5c <I2C_DMAError+0x258>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d01d      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	4a30      	ldr	r2, [pc, #192]	; (8010f60 <I2C_DMAError+0x25c>)
 8010ea0:	4293      	cmp	r3, r2
 8010ea2:	d017      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	4a2e      	ldr	r2, [pc, #184]	; (8010f64 <I2C_DMAError+0x260>)
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d011      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	4a2c      	ldr	r2, [pc, #176]	; (8010f68 <I2C_DMAError+0x264>)
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	d00b      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	4a2a      	ldr	r2, [pc, #168]	; (8010f6c <I2C_DMAError+0x268>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d005      	beq.n	8010ed4 <I2C_DMAError+0x1d0>
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	4a28      	ldr	r2, [pc, #160]	; (8010f70 <I2C_DMAError+0x26c>)
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d109      	bne.n	8010ee8 <I2C_DMAError+0x1e4>
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	bf0c      	ite	eq
 8010ee0:	2301      	moveq	r3, #1
 8010ee2:	2300      	movne	r3, #0
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	e008      	b.n	8010efa <I2C_DMAError+0x1f6>
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	bf0c      	ite	eq
 8010ef4:	2301      	moveq	r3, #1
 8010ef6:	2300      	movne	r3, #0
 8010ef8:	b2db      	uxtb	r3, r3
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d001      	beq.n	8010f02 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 8010efe:	2301      	movs	r3, #1
 8010f00:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f7fd f8be 	bl	800e084 <HAL_DMA_GetError>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	2b02      	cmp	r3, #2
 8010f0c:	d00e      	beq.n	8010f2c <I2C_DMAError+0x228>
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d00b      	beq.n	8010f2c <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	685a      	ldr	r2, [r3, #4]
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010f22:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8010f24:	2110      	movs	r1, #16
 8010f26:	68b8      	ldr	r0, [r7, #8]
 8010f28:	f7ff fd86 	bl	8010a38 <I2C_ITError>
  }
}
 8010f2c:	bf00      	nop
 8010f2e:	3710      	adds	r7, #16
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}
 8010f34:	40020010 	.word	0x40020010
 8010f38:	40020028 	.word	0x40020028
 8010f3c:	40020040 	.word	0x40020040
 8010f40:	40020058 	.word	0x40020058
 8010f44:	40020070 	.word	0x40020070
 8010f48:	40020088 	.word	0x40020088
 8010f4c:	400200a0 	.word	0x400200a0
 8010f50:	400200b8 	.word	0x400200b8
 8010f54:	40020410 	.word	0x40020410
 8010f58:	40020428 	.word	0x40020428
 8010f5c:	40020440 	.word	0x40020440
 8010f60:	40020458 	.word	0x40020458
 8010f64:	40020470 	.word	0x40020470
 8010f68:	40020488 	.word	0x40020488
 8010f6c:	400204a0 	.word	0x400204a0
 8010f70:	400204b8 	.word	0x400204b8

08010f74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b084      	sub	sp, #16
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f80:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d003      	beq.n	8010f92 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f8e:	2200      	movs	r2, #0
 8010f90:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d003      	beq.n	8010fa2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8010fa2:	68f8      	ldr	r0, [r7, #12]
 8010fa4:	f7ff fe18 	bl	8010bd8 <I2C_TreatErrorCallback>
}
 8010fa8:	bf00      	nop
 8010faa:	3710      	adds	r7, #16
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	60f8      	str	r0, [r7, #12]
 8010fb8:	60b9      	str	r1, [r7, #8]
 8010fba:	603b      	str	r3, [r7, #0]
 8010fbc:	4613      	mov	r3, r2
 8010fbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010fc0:	e022      	b.n	8011008 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fc8:	d01e      	beq.n	8011008 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010fca:	f7fa f8b1 	bl	800b130 <HAL_GetTick>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	69bb      	ldr	r3, [r7, #24]
 8010fd2:	1ad3      	subs	r3, r2, r3
 8010fd4:	683a      	ldr	r2, [r7, #0]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d302      	bcc.n	8010fe0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d113      	bne.n	8011008 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fe4:	f043 0220 	orr.w	r2, r3, #32
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2220      	movs	r2, #32
 8010ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	2200      	movs	r2, #0
 8011000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8011004:	2301      	movs	r3, #1
 8011006:	e00f      	b.n	8011028 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	699a      	ldr	r2, [r3, #24]
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	4013      	ands	r3, r2
 8011012:	68ba      	ldr	r2, [r7, #8]
 8011014:	429a      	cmp	r2, r3
 8011016:	bf0c      	ite	eq
 8011018:	2301      	moveq	r3, #1
 801101a:	2300      	movne	r3, #0
 801101c:	b2db      	uxtb	r3, r3
 801101e:	461a      	mov	r2, r3
 8011020:	79fb      	ldrb	r3, [r7, #7]
 8011022:	429a      	cmp	r2, r3
 8011024:	d0cd      	beq.n	8010fc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011026:	2300      	movs	r3, #0
}
 8011028:	4618      	mov	r0, r3
 801102a:	3710      	adds	r7, #16
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}

08011030 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b084      	sub	sp, #16
 8011034:	af00      	add	r7, sp, #0
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	60b9      	str	r1, [r7, #8]
 801103a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801103c:	e02c      	b.n	8011098 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 801103e:	687a      	ldr	r2, [r7, #4]
 8011040:	68b9      	ldr	r1, [r7, #8]
 8011042:	68f8      	ldr	r0, [r7, #12]
 8011044:	f000 f870 	bl	8011128 <I2C_IsAcknowledgeFailed>
 8011048:	4603      	mov	r3, r0
 801104a:	2b00      	cmp	r3, #0
 801104c:	d001      	beq.n	8011052 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801104e:	2301      	movs	r3, #1
 8011050:	e02a      	b.n	80110a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011058:	d01e      	beq.n	8011098 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801105a:	f7fa f869 	bl	800b130 <HAL_GetTick>
 801105e:	4602      	mov	r2, r0
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	1ad3      	subs	r3, r2, r3
 8011064:	68ba      	ldr	r2, [r7, #8]
 8011066:	429a      	cmp	r2, r3
 8011068:	d302      	bcc.n	8011070 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d113      	bne.n	8011098 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011074:	f043 0220 	orr.w	r2, r3, #32
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	2220      	movs	r2, #32
 8011080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	2200      	movs	r2, #0
 8011088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	2200      	movs	r2, #0
 8011090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8011094:	2301      	movs	r3, #1
 8011096:	e007      	b.n	80110a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	699b      	ldr	r3, [r3, #24]
 801109e:	f003 0302 	and.w	r3, r3, #2
 80110a2:	2b02      	cmp	r3, #2
 80110a4:	d1cb      	bne.n	801103e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80110a6:	2300      	movs	r3, #0
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3710      	adds	r7, #16
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	60f8      	str	r0, [r7, #12]
 80110b8:	60b9      	str	r1, [r7, #8]
 80110ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80110bc:	e028      	b.n	8011110 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80110be:	687a      	ldr	r2, [r7, #4]
 80110c0:	68b9      	ldr	r1, [r7, #8]
 80110c2:	68f8      	ldr	r0, [r7, #12]
 80110c4:	f000 f830 	bl	8011128 <I2C_IsAcknowledgeFailed>
 80110c8:	4603      	mov	r3, r0
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d001      	beq.n	80110d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80110ce:	2301      	movs	r3, #1
 80110d0:	e026      	b.n	8011120 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80110d2:	f7fa f82d 	bl	800b130 <HAL_GetTick>
 80110d6:	4602      	mov	r2, r0
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	1ad3      	subs	r3, r2, r3
 80110dc:	68ba      	ldr	r2, [r7, #8]
 80110de:	429a      	cmp	r2, r3
 80110e0:	d302      	bcc.n	80110e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d113      	bne.n	8011110 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110ec:	f043 0220 	orr.w	r2, r3, #32
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2220      	movs	r2, #32
 80110f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2200      	movs	r2, #0
 8011100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	2200      	movs	r2, #0
 8011108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801110c:	2301      	movs	r3, #1
 801110e:	e007      	b.n	8011120 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	699b      	ldr	r3, [r3, #24]
 8011116:	f003 0320 	and.w	r3, r3, #32
 801111a:	2b20      	cmp	r3, #32
 801111c:	d1cf      	bne.n	80110be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801111e:	2300      	movs	r3, #0
}
 8011120:	4618      	mov	r0, r3
 8011122:	3710      	adds	r7, #16
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	699b      	ldr	r3, [r3, #24]
 801113a:	f003 0310 	and.w	r3, r3, #16
 801113e:	2b10      	cmp	r3, #16
 8011140:	d151      	bne.n	80111e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011142:	e022      	b.n	801118a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801114a:	d01e      	beq.n	801118a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801114c:	f7f9 fff0 	bl	800b130 <HAL_GetTick>
 8011150:	4602      	mov	r2, r0
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	1ad3      	subs	r3, r2, r3
 8011156:	68ba      	ldr	r2, [r7, #8]
 8011158:	429a      	cmp	r2, r3
 801115a:	d302      	bcc.n	8011162 <I2C_IsAcknowledgeFailed+0x3a>
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d113      	bne.n	801118a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011166:	f043 0220 	orr.w	r2, r3, #32
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	2220      	movs	r2, #32
 8011172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	2200      	movs	r2, #0
 801117a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	2200      	movs	r2, #0
 8011182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8011186:	2301      	movs	r3, #1
 8011188:	e02e      	b.n	80111e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	699b      	ldr	r3, [r3, #24]
 8011190:	f003 0320 	and.w	r3, r3, #32
 8011194:	2b20      	cmp	r3, #32
 8011196:	d1d5      	bne.n	8011144 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	2210      	movs	r2, #16
 801119e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	2220      	movs	r2, #32
 80111a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80111a8:	68f8      	ldr	r0, [r7, #12]
 80111aa:	f7ff fd3c 	bl	8010c26 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	6859      	ldr	r1, [r3, #4]
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	4b0d      	ldr	r3, [pc, #52]	; (80111f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80111ba:	400b      	ands	r3, r1
 80111bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111c2:	f043 0204 	orr.w	r2, r3, #4
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	2220      	movs	r2, #32
 80111ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2200      	movs	r2, #0
 80111d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	2200      	movs	r2, #0
 80111de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80111e2:	2301      	movs	r3, #1
 80111e4:	e000      	b.n	80111e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80111e6:	2300      	movs	r3, #0
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3710      	adds	r7, #16
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	fe00e800 	.word	0xfe00e800

080111f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b085      	sub	sp, #20
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	607b      	str	r3, [r7, #4]
 80111fe:	460b      	mov	r3, r1
 8011200:	817b      	strh	r3, [r7, #10]
 8011202:	4613      	mov	r3, r2
 8011204:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	685a      	ldr	r2, [r3, #4]
 801120c:	69bb      	ldr	r3, [r7, #24]
 801120e:	0d5b      	lsrs	r3, r3, #21
 8011210:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8011214:	4b0d      	ldr	r3, [pc, #52]	; (801124c <I2C_TransferConfig+0x58>)
 8011216:	430b      	orrs	r3, r1
 8011218:	43db      	mvns	r3, r3
 801121a:	ea02 0103 	and.w	r1, r2, r3
 801121e:	897b      	ldrh	r3, [r7, #10]
 8011220:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8011224:	7a7b      	ldrb	r3, [r7, #9]
 8011226:	041b      	lsls	r3, r3, #16
 8011228:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801122c:	431a      	orrs	r2, r3
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	431a      	orrs	r2, r3
 8011232:	69bb      	ldr	r3, [r7, #24]
 8011234:	431a      	orrs	r2, r3
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	430a      	orrs	r2, r1
 801123c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 801123e:	bf00      	nop
 8011240:	3714      	adds	r7, #20
 8011242:	46bd      	mov	sp, r7
 8011244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011248:	4770      	bx	lr
 801124a:	bf00      	nop
 801124c:	03ff63ff 	.word	0x03ff63ff

08011250 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011250:	b480      	push	{r7}
 8011252:	b085      	sub	sp, #20
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	460b      	mov	r3, r1
 801125a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 801125c:	2300      	movs	r3, #0
 801125e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011264:	4a2a      	ldr	r2, [pc, #168]	; (8011310 <I2C_Enable_IRQ+0xc0>)
 8011266:	4293      	cmp	r3, r2
 8011268:	d004      	beq.n	8011274 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 801126e:	4a29      	ldr	r2, [pc, #164]	; (8011314 <I2C_Enable_IRQ+0xc4>)
 8011270:	4293      	cmp	r3, r2
 8011272:	d11d      	bne.n	80112b0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011274:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011278:	2b00      	cmp	r3, #0
 801127a:	da03      	bge.n	8011284 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8011282:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011284:	887b      	ldrh	r3, [r7, #2]
 8011286:	2b10      	cmp	r3, #16
 8011288:	d103      	bne.n	8011292 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8011290:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011292:	887b      	ldrh	r3, [r7, #2]
 8011294:	2b20      	cmp	r3, #32
 8011296:	d103      	bne.n	80112a0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801129e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80112a0:	887b      	ldrh	r3, [r7, #2]
 80112a2:	2b40      	cmp	r3, #64	; 0x40
 80112a4:	d125      	bne.n	80112f2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112ac:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80112ae:	e020      	b.n	80112f2 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80112b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	da03      	bge.n	80112c0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80112be:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80112c0:	887b      	ldrh	r3, [r7, #2]
 80112c2:	f003 0301 	and.w	r3, r3, #1
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d003      	beq.n	80112d2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80112d0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80112d2:	887b      	ldrh	r3, [r7, #2]
 80112d4:	f003 0302 	and.w	r3, r3, #2
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d003      	beq.n	80112e4 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80112e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80112e4:	887b      	ldrh	r3, [r7, #2]
 80112e6:	2b20      	cmp	r3, #32
 80112e8:	d103      	bne.n	80112f2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	f043 0320 	orr.w	r3, r3, #32
 80112f0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	6819      	ldr	r1, [r3, #0]
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	68fa      	ldr	r2, [r7, #12]
 80112fe:	430a      	orrs	r2, r1
 8011300:	601a      	str	r2, [r3, #0]
}
 8011302:	bf00      	nop
 8011304:	3714      	adds	r7, #20
 8011306:	46bd      	mov	sp, r7
 8011308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130c:	4770      	bx	lr
 801130e:	bf00      	nop
 8011310:	0800fad3 	.word	0x0800fad3
 8011314:	0800fcb9 	.word	0x0800fcb9

08011318 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011318:	b480      	push	{r7}
 801131a:	b085      	sub	sp, #20
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	460b      	mov	r3, r1
 8011322:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8011324:	2300      	movs	r3, #0
 8011326:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011328:	887b      	ldrh	r3, [r7, #2]
 801132a:	f003 0301 	and.w	r3, r3, #1
 801132e:	2b00      	cmp	r3, #0
 8011330:	d00f      	beq.n	8011352 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8011338:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011340:	b2db      	uxtb	r3, r3
 8011342:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8011346:	2b28      	cmp	r3, #40	; 0x28
 8011348:	d003      	beq.n	8011352 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8011350:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011352:	887b      	ldrh	r3, [r7, #2]
 8011354:	f003 0302 	and.w	r3, r3, #2
 8011358:	2b00      	cmp	r3, #0
 801135a:	d00f      	beq.n	801137c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8011362:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801136a:	b2db      	uxtb	r3, r3
 801136c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8011370:	2b28      	cmp	r3, #40	; 0x28
 8011372:	d003      	beq.n	801137c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 801137a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801137c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011380:	2b00      	cmp	r3, #0
 8011382:	da03      	bge.n	801138c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 801138a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 801138c:	887b      	ldrh	r3, [r7, #2]
 801138e:	2b10      	cmp	r3, #16
 8011390:	d103      	bne.n	801139a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8011398:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 801139a:	887b      	ldrh	r3, [r7, #2]
 801139c:	2b20      	cmp	r3, #32
 801139e:	d103      	bne.n	80113a8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	f043 0320 	orr.w	r3, r3, #32
 80113a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80113a8:	887b      	ldrh	r3, [r7, #2]
 80113aa:	2b40      	cmp	r3, #64	; 0x40
 80113ac:	d103      	bne.n	80113b6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113b4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	6819      	ldr	r1, [r3, #0]
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	43da      	mvns	r2, r3
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	400a      	ands	r2, r1
 80113c6:	601a      	str	r2, [r3, #0]
}
 80113c8:	bf00      	nop
 80113ca:	3714      	adds	r7, #20
 80113cc:	46bd      	mov	sp, r7
 80113ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d2:	4770      	bx	lr

080113d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80113d4:	b480      	push	{r7}
 80113d6:	b083      	sub	sp, #12
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	2b20      	cmp	r3, #32
 80113e8:	d138      	bne.n	801145c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	d101      	bne.n	80113f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80113f4:	2302      	movs	r3, #2
 80113f6:	e032      	b.n	801145e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2201      	movs	r2, #1
 80113fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2224      	movs	r2, #36	; 0x24
 8011404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	681a      	ldr	r2, [r3, #0]
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	f022 0201 	bic.w	r2, r2, #1
 8011416:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	681a      	ldr	r2, [r3, #0]
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011426:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	6819      	ldr	r1, [r3, #0]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	683a      	ldr	r2, [r7, #0]
 8011434:	430a      	orrs	r2, r1
 8011436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	681a      	ldr	r2, [r3, #0]
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	f042 0201 	orr.w	r2, r2, #1
 8011446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2220      	movs	r2, #32
 801144c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2200      	movs	r2, #0
 8011454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011458:	2300      	movs	r3, #0
 801145a:	e000      	b.n	801145e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801145c:	2302      	movs	r3, #2
  }
}
 801145e:	4618      	mov	r0, r3
 8011460:	370c      	adds	r7, #12
 8011462:	46bd      	mov	sp, r7
 8011464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011468:	4770      	bx	lr

0801146a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801146a:	b480      	push	{r7}
 801146c:	b085      	sub	sp, #20
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
 8011472:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801147a:	b2db      	uxtb	r3, r3
 801147c:	2b20      	cmp	r3, #32
 801147e:	d139      	bne.n	80114f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011486:	2b01      	cmp	r3, #1
 8011488:	d101      	bne.n	801148e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801148a:	2302      	movs	r3, #2
 801148c:	e033      	b.n	80114f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	2201      	movs	r2, #1
 8011492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2224      	movs	r2, #36	; 0x24
 801149a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	f022 0201 	bic.w	r2, r2, #1
 80114ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80114bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	021b      	lsls	r3, r3, #8
 80114c2:	68fa      	ldr	r2, [r7, #12]
 80114c4:	4313      	orrs	r3, r2
 80114c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	68fa      	ldr	r2, [r7, #12]
 80114ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	681a      	ldr	r2, [r3, #0]
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f042 0201 	orr.w	r2, r2, #1
 80114de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2220      	movs	r2, #32
 80114e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2200      	movs	r2, #0
 80114ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80114f0:	2300      	movs	r3, #0
 80114f2:	e000      	b.n	80114f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80114f4:	2302      	movs	r3, #2
  }
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3714      	adds	r7, #20
 80114fa:	46bd      	mov	sp, r7
 80114fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011500:	4770      	bx	lr

08011502 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8011502:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011504:	b08f      	sub	sp, #60	; 0x3c
 8011506:	af0a      	add	r7, sp, #40	; 0x28
 8011508:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d101      	bne.n	8011514 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8011510:	2301      	movs	r3, #1
 8011512:	e116      	b.n	8011742 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8011520:	b2db      	uxtb	r3, r3
 8011522:	2b00      	cmp	r3, #0
 8011524:	d106      	bne.n	8011534 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2200      	movs	r2, #0
 801152a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f7f9 fd2c 	bl	800af8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2203      	movs	r2, #3
 8011538:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011544:	2b00      	cmp	r3, #0
 8011546:	d102      	bne.n	801154e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2200      	movs	r2, #0
 801154c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	4618      	mov	r0, r3
 8011554:	f008 fc98 	bl	8019e88 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	603b      	str	r3, [r7, #0]
 801155e:	687e      	ldr	r6, [r7, #4]
 8011560:	466d      	mov	r5, sp
 8011562:	f106 0410 	add.w	r4, r6, #16
 8011566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801156a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801156c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801156e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011572:	e885 0003 	stmia.w	r5, {r0, r1}
 8011576:	1d33      	adds	r3, r6, #4
 8011578:	cb0e      	ldmia	r3, {r1, r2, r3}
 801157a:	6838      	ldr	r0, [r7, #0]
 801157c:	f008 fc22 	bl	8019dc4 <USB_CoreInit>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d005      	beq.n	8011592 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2202      	movs	r2, #2
 801158a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 801158e:	2301      	movs	r3, #1
 8011590:	e0d7      	b.n	8011742 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	2100      	movs	r1, #0
 8011598:	4618      	mov	r0, r3
 801159a:	f008 fc86 	bl	8019eaa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801159e:	2300      	movs	r3, #0
 80115a0:	73fb      	strb	r3, [r7, #15]
 80115a2:	e04a      	b.n	801163a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80115a4:	7bfa      	ldrb	r2, [r7, #15]
 80115a6:	6879      	ldr	r1, [r7, #4]
 80115a8:	4613      	mov	r3, r2
 80115aa:	00db      	lsls	r3, r3, #3
 80115ac:	1a9b      	subs	r3, r3, r2
 80115ae:	009b      	lsls	r3, r3, #2
 80115b0:	440b      	add	r3, r1
 80115b2:	333d      	adds	r3, #61	; 0x3d
 80115b4:	2201      	movs	r2, #1
 80115b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80115b8:	7bfa      	ldrb	r2, [r7, #15]
 80115ba:	6879      	ldr	r1, [r7, #4]
 80115bc:	4613      	mov	r3, r2
 80115be:	00db      	lsls	r3, r3, #3
 80115c0:	1a9b      	subs	r3, r3, r2
 80115c2:	009b      	lsls	r3, r3, #2
 80115c4:	440b      	add	r3, r1
 80115c6:	333c      	adds	r3, #60	; 0x3c
 80115c8:	7bfa      	ldrb	r2, [r7, #15]
 80115ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80115cc:	7bfa      	ldrb	r2, [r7, #15]
 80115ce:	7bfb      	ldrb	r3, [r7, #15]
 80115d0:	b298      	uxth	r0, r3
 80115d2:	6879      	ldr	r1, [r7, #4]
 80115d4:	4613      	mov	r3, r2
 80115d6:	00db      	lsls	r3, r3, #3
 80115d8:	1a9b      	subs	r3, r3, r2
 80115da:	009b      	lsls	r3, r3, #2
 80115dc:	440b      	add	r3, r1
 80115de:	3342      	adds	r3, #66	; 0x42
 80115e0:	4602      	mov	r2, r0
 80115e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80115e4:	7bfa      	ldrb	r2, [r7, #15]
 80115e6:	6879      	ldr	r1, [r7, #4]
 80115e8:	4613      	mov	r3, r2
 80115ea:	00db      	lsls	r3, r3, #3
 80115ec:	1a9b      	subs	r3, r3, r2
 80115ee:	009b      	lsls	r3, r3, #2
 80115f0:	440b      	add	r3, r1
 80115f2:	333f      	adds	r3, #63	; 0x3f
 80115f4:	2200      	movs	r2, #0
 80115f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80115f8:	7bfa      	ldrb	r2, [r7, #15]
 80115fa:	6879      	ldr	r1, [r7, #4]
 80115fc:	4613      	mov	r3, r2
 80115fe:	00db      	lsls	r3, r3, #3
 8011600:	1a9b      	subs	r3, r3, r2
 8011602:	009b      	lsls	r3, r3, #2
 8011604:	440b      	add	r3, r1
 8011606:	3344      	adds	r3, #68	; 0x44
 8011608:	2200      	movs	r2, #0
 801160a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801160c:	7bfa      	ldrb	r2, [r7, #15]
 801160e:	6879      	ldr	r1, [r7, #4]
 8011610:	4613      	mov	r3, r2
 8011612:	00db      	lsls	r3, r3, #3
 8011614:	1a9b      	subs	r3, r3, r2
 8011616:	009b      	lsls	r3, r3, #2
 8011618:	440b      	add	r3, r1
 801161a:	3348      	adds	r3, #72	; 0x48
 801161c:	2200      	movs	r2, #0
 801161e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011620:	7bfa      	ldrb	r2, [r7, #15]
 8011622:	6879      	ldr	r1, [r7, #4]
 8011624:	4613      	mov	r3, r2
 8011626:	00db      	lsls	r3, r3, #3
 8011628:	1a9b      	subs	r3, r3, r2
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	440b      	add	r3, r1
 801162e:	3350      	adds	r3, #80	; 0x50
 8011630:	2200      	movs	r2, #0
 8011632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011634:	7bfb      	ldrb	r3, [r7, #15]
 8011636:	3301      	adds	r3, #1
 8011638:	73fb      	strb	r3, [r7, #15]
 801163a:	7bfa      	ldrb	r2, [r7, #15]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	685b      	ldr	r3, [r3, #4]
 8011640:	429a      	cmp	r2, r3
 8011642:	d3af      	bcc.n	80115a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011644:	2300      	movs	r3, #0
 8011646:	73fb      	strb	r3, [r7, #15]
 8011648:	e044      	b.n	80116d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801164a:	7bfa      	ldrb	r2, [r7, #15]
 801164c:	6879      	ldr	r1, [r7, #4]
 801164e:	4613      	mov	r3, r2
 8011650:	00db      	lsls	r3, r3, #3
 8011652:	1a9b      	subs	r3, r3, r2
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	440b      	add	r3, r1
 8011658:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 801165c:	2200      	movs	r2, #0
 801165e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8011660:	7bfa      	ldrb	r2, [r7, #15]
 8011662:	6879      	ldr	r1, [r7, #4]
 8011664:	4613      	mov	r3, r2
 8011666:	00db      	lsls	r3, r3, #3
 8011668:	1a9b      	subs	r3, r3, r2
 801166a:	009b      	lsls	r3, r3, #2
 801166c:	440b      	add	r3, r1
 801166e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8011672:	7bfa      	ldrb	r2, [r7, #15]
 8011674:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8011676:	7bfa      	ldrb	r2, [r7, #15]
 8011678:	6879      	ldr	r1, [r7, #4]
 801167a:	4613      	mov	r3, r2
 801167c:	00db      	lsls	r3, r3, #3
 801167e:	1a9b      	subs	r3, r3, r2
 8011680:	009b      	lsls	r3, r3, #2
 8011682:	440b      	add	r3, r1
 8011684:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011688:	2200      	movs	r2, #0
 801168a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801168c:	7bfa      	ldrb	r2, [r7, #15]
 801168e:	6879      	ldr	r1, [r7, #4]
 8011690:	4613      	mov	r3, r2
 8011692:	00db      	lsls	r3, r3, #3
 8011694:	1a9b      	subs	r3, r3, r2
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	440b      	add	r3, r1
 801169a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801169e:	2200      	movs	r2, #0
 80116a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80116a2:	7bfa      	ldrb	r2, [r7, #15]
 80116a4:	6879      	ldr	r1, [r7, #4]
 80116a6:	4613      	mov	r3, r2
 80116a8:	00db      	lsls	r3, r3, #3
 80116aa:	1a9b      	subs	r3, r3, r2
 80116ac:	009b      	lsls	r3, r3, #2
 80116ae:	440b      	add	r3, r1
 80116b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80116b4:	2200      	movs	r2, #0
 80116b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80116b8:	7bfa      	ldrb	r2, [r7, #15]
 80116ba:	6879      	ldr	r1, [r7, #4]
 80116bc:	4613      	mov	r3, r2
 80116be:	00db      	lsls	r3, r3, #3
 80116c0:	1a9b      	subs	r3, r3, r2
 80116c2:	009b      	lsls	r3, r3, #2
 80116c4:	440b      	add	r3, r1
 80116c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80116ca:	2200      	movs	r2, #0
 80116cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80116ce:	7bfb      	ldrb	r3, [r7, #15]
 80116d0:	3301      	adds	r3, #1
 80116d2:	73fb      	strb	r3, [r7, #15]
 80116d4:	7bfa      	ldrb	r2, [r7, #15]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	429a      	cmp	r2, r3
 80116dc:	d3b5      	bcc.n	801164a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	603b      	str	r3, [r7, #0]
 80116e4:	687e      	ldr	r6, [r7, #4]
 80116e6:	466d      	mov	r5, sp
 80116e8:	f106 0410 	add.w	r4, r6, #16
 80116ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80116ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80116f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80116f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80116f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80116f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80116fc:	1d33      	adds	r3, r6, #4
 80116fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011700:	6838      	ldr	r0, [r7, #0]
 8011702:	f008 fbfd 	bl	8019f00 <USB_DevInit>
 8011706:	4603      	mov	r3, r0
 8011708:	2b00      	cmp	r3, #0
 801170a:	d005      	beq.n	8011718 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2202      	movs	r2, #2
 8011710:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8011714:	2301      	movs	r3, #1
 8011716:	e014      	b.n	8011742 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2200      	movs	r2, #0
 801171c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2201      	movs	r2, #1
 8011724:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801172c:	2b01      	cmp	r3, #1
 801172e:	d102      	bne.n	8011736 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f000 f80b 	bl	801174c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	4618      	mov	r0, r3
 801173c:	f008 fd9f 	bl	801a27e <USB_DevDisconnect>

  return HAL_OK;
 8011740:	2300      	movs	r3, #0
}
 8011742:	4618      	mov	r0, r3
 8011744:	3714      	adds	r7, #20
 8011746:	46bd      	mov	sp, r7
 8011748:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801174c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801174c:	b480      	push	{r7}
 801174e:	b085      	sub	sp, #20
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2201      	movs	r2, #1
 801175e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	2200      	movs	r2, #0
 8011766:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	699b      	ldr	r3, [r3, #24]
 801176e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801177a:	4b05      	ldr	r3, [pc, #20]	; (8011790 <HAL_PCDEx_ActivateLPM+0x44>)
 801177c:	4313      	orrs	r3, r2
 801177e:	68fa      	ldr	r2, [r7, #12]
 8011780:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8011782:	2300      	movs	r3, #0
}
 8011784:	4618      	mov	r0, r3
 8011786:	3714      	adds	r7, #20
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr
 8011790:	10000003 	.word	0x10000003

08011794 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b084      	sub	sp, #16
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801179c:	4b19      	ldr	r3, [pc, #100]	; (8011804 <HAL_PWREx_ConfigSupply+0x70>)
 801179e:	68db      	ldr	r3, [r3, #12]
 80117a0:	f003 0304 	and.w	r3, r3, #4
 80117a4:	2b04      	cmp	r3, #4
 80117a6:	d00a      	beq.n	80117be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80117a8:	4b16      	ldr	r3, [pc, #88]	; (8011804 <HAL_PWREx_ConfigSupply+0x70>)
 80117aa:	68db      	ldr	r3, [r3, #12]
 80117ac:	f003 0307 	and.w	r3, r3, #7
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d001      	beq.n	80117ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80117b6:	2301      	movs	r3, #1
 80117b8:	e01f      	b.n	80117fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80117ba:	2300      	movs	r3, #0
 80117bc:	e01d      	b.n	80117fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80117be:	4b11      	ldr	r3, [pc, #68]	; (8011804 <HAL_PWREx_ConfigSupply+0x70>)
 80117c0:	68db      	ldr	r3, [r3, #12]
 80117c2:	f023 0207 	bic.w	r2, r3, #7
 80117c6:	490f      	ldr	r1, [pc, #60]	; (8011804 <HAL_PWREx_ConfigSupply+0x70>)
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	4313      	orrs	r3, r2
 80117cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80117ce:	f7f9 fcaf 	bl	800b130 <HAL_GetTick>
 80117d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80117d4:	e009      	b.n	80117ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80117d6:	f7f9 fcab 	bl	800b130 <HAL_GetTick>
 80117da:	4602      	mov	r2, r0
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	1ad3      	subs	r3, r2, r3
 80117e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80117e4:	d901      	bls.n	80117ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80117e6:	2301      	movs	r3, #1
 80117e8:	e007      	b.n	80117fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80117ea:	4b06      	ldr	r3, [pc, #24]	; (8011804 <HAL_PWREx_ConfigSupply+0x70>)
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80117f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80117f6:	d1ee      	bne.n	80117d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80117f8:	2300      	movs	r3, #0
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3710      	adds	r7, #16
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	58024800 	.word	0x58024800

08011808 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8011808:	b480      	push	{r7}
 801180a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 801180c:	4b05      	ldr	r3, [pc, #20]	; (8011824 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 801180e:	68db      	ldr	r3, [r3, #12]
 8011810:	4a04      	ldr	r2, [pc, #16]	; (8011824 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8011812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011816:	60d3      	str	r3, [r2, #12]
}
 8011818:	bf00      	nop
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr
 8011822:	bf00      	nop
 8011824:	58024800 	.word	0x58024800

08011828 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b08c      	sub	sp, #48	; 0x30
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d101      	bne.n	801183a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011836:	2301      	movs	r3, #1
 8011838:	e3ff      	b.n	801203a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	f003 0301 	and.w	r3, r3, #1
 8011842:	2b00      	cmp	r3, #0
 8011844:	f000 8087 	beq.w	8011956 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011848:	4b99      	ldr	r3, [pc, #612]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 801184a:	691b      	ldr	r3, [r3, #16]
 801184c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011850:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011852:	4b97      	ldr	r3, [pc, #604]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011856:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8011858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801185a:	2b10      	cmp	r3, #16
 801185c:	d007      	beq.n	801186e <HAL_RCC_OscConfig+0x46>
 801185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011860:	2b18      	cmp	r3, #24
 8011862:	d110      	bne.n	8011886 <HAL_RCC_OscConfig+0x5e>
 8011864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011866:	f003 0303 	and.w	r3, r3, #3
 801186a:	2b02      	cmp	r3, #2
 801186c:	d10b      	bne.n	8011886 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801186e:	4b90      	ldr	r3, [pc, #576]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011876:	2b00      	cmp	r3, #0
 8011878:	d06c      	beq.n	8011954 <HAL_RCC_OscConfig+0x12c>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d168      	bne.n	8011954 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8011882:	2301      	movs	r3, #1
 8011884:	e3d9      	b.n	801203a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801188e:	d106      	bne.n	801189e <HAL_RCC_OscConfig+0x76>
 8011890:	4b87      	ldr	r3, [pc, #540]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	4a86      	ldr	r2, [pc, #536]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801189a:	6013      	str	r3, [r2, #0]
 801189c:	e02e      	b.n	80118fc <HAL_RCC_OscConfig+0xd4>
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d10c      	bne.n	80118c0 <HAL_RCC_OscConfig+0x98>
 80118a6:	4b82      	ldr	r3, [pc, #520]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	4a81      	ldr	r2, [pc, #516]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80118ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80118b0:	6013      	str	r3, [r2, #0]
 80118b2:	4b7f      	ldr	r3, [pc, #508]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	4a7e      	ldr	r2, [pc, #504]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80118b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80118bc:	6013      	str	r3, [r2, #0]
 80118be:	e01d      	b.n	80118fc <HAL_RCC_OscConfig+0xd4>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80118c8:	d10c      	bne.n	80118e4 <HAL_RCC_OscConfig+0xbc>
 80118ca:	4b79      	ldr	r3, [pc, #484]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	4a78      	ldr	r2, [pc, #480]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80118d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80118d4:	6013      	str	r3, [r2, #0]
 80118d6:	4b76      	ldr	r3, [pc, #472]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	4a75      	ldr	r2, [pc, #468]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80118dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80118e0:	6013      	str	r3, [r2, #0]
 80118e2:	e00b      	b.n	80118fc <HAL_RCC_OscConfig+0xd4>
 80118e4:	4b72      	ldr	r3, [pc, #456]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4a71      	ldr	r2, [pc, #452]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80118ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80118ee:	6013      	str	r3, [r2, #0]
 80118f0:	4b6f      	ldr	r3, [pc, #444]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	4a6e      	ldr	r2, [pc, #440]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80118f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80118fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d013      	beq.n	801192c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011904:	f7f9 fc14 	bl	800b130 <HAL_GetTick>
 8011908:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801190a:	e008      	b.n	801191e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801190c:	f7f9 fc10 	bl	800b130 <HAL_GetTick>
 8011910:	4602      	mov	r2, r0
 8011912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011914:	1ad3      	subs	r3, r2, r3
 8011916:	2b64      	cmp	r3, #100	; 0x64
 8011918:	d901      	bls.n	801191e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801191a:	2303      	movs	r3, #3
 801191c:	e38d      	b.n	801203a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801191e:	4b64      	ldr	r3, [pc, #400]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011926:	2b00      	cmp	r3, #0
 8011928:	d0f0      	beq.n	801190c <HAL_RCC_OscConfig+0xe4>
 801192a:	e014      	b.n	8011956 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801192c:	f7f9 fc00 	bl	800b130 <HAL_GetTick>
 8011930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011932:	e008      	b.n	8011946 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011934:	f7f9 fbfc 	bl	800b130 <HAL_GetTick>
 8011938:	4602      	mov	r2, r0
 801193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193c:	1ad3      	subs	r3, r2, r3
 801193e:	2b64      	cmp	r3, #100	; 0x64
 8011940:	d901      	bls.n	8011946 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8011942:	2303      	movs	r3, #3
 8011944:	e379      	b.n	801203a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011946:	4b5a      	ldr	r3, [pc, #360]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801194e:	2b00      	cmp	r3, #0
 8011950:	d1f0      	bne.n	8011934 <HAL_RCC_OscConfig+0x10c>
 8011952:	e000      	b.n	8011956 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	f003 0302 	and.w	r3, r3, #2
 801195e:	2b00      	cmp	r3, #0
 8011960:	f000 80ae 	beq.w	8011ac0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011964:	4b52      	ldr	r3, [pc, #328]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011966:	691b      	ldr	r3, [r3, #16]
 8011968:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801196c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801196e:	4b50      	ldr	r3, [pc, #320]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011972:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011974:	6a3b      	ldr	r3, [r7, #32]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d007      	beq.n	801198a <HAL_RCC_OscConfig+0x162>
 801197a:	6a3b      	ldr	r3, [r7, #32]
 801197c:	2b18      	cmp	r3, #24
 801197e:	d13a      	bne.n	80119f6 <HAL_RCC_OscConfig+0x1ce>
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	f003 0303 	and.w	r3, r3, #3
 8011986:	2b00      	cmp	r3, #0
 8011988:	d135      	bne.n	80119f6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801198a:	4b49      	ldr	r3, [pc, #292]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f003 0304 	and.w	r3, r3, #4
 8011992:	2b00      	cmp	r3, #0
 8011994:	d005      	beq.n	80119a2 <HAL_RCC_OscConfig+0x17a>
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d101      	bne.n	80119a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801199e:	2301      	movs	r3, #1
 80119a0:	e34b      	b.n	801203a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80119a2:	f7f9 fbf3 	bl	800b18c <HAL_GetREVID>
 80119a6:	4602      	mov	r2, r0
 80119a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d817      	bhi.n	80119e0 <HAL_RCC_OscConfig+0x1b8>
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	691b      	ldr	r3, [r3, #16]
 80119b4:	2b40      	cmp	r3, #64	; 0x40
 80119b6:	d108      	bne.n	80119ca <HAL_RCC_OscConfig+0x1a2>
 80119b8:	4b3d      	ldr	r3, [pc, #244]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80119c0:	4a3b      	ldr	r2, [pc, #236]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80119c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80119c6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80119c8:	e07a      	b.n	8011ac0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80119ca:	4b39      	ldr	r3, [pc, #228]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	691b      	ldr	r3, [r3, #16]
 80119d6:	031b      	lsls	r3, r3, #12
 80119d8:	4935      	ldr	r1, [pc, #212]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80119da:	4313      	orrs	r3, r2
 80119dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80119de:	e06f      	b.n	8011ac0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80119e0:	4b33      	ldr	r3, [pc, #204]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80119e2:	685b      	ldr	r3, [r3, #4]
 80119e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	691b      	ldr	r3, [r3, #16]
 80119ec:	061b      	lsls	r3, r3, #24
 80119ee:	4930      	ldr	r1, [pc, #192]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 80119f0:	4313      	orrs	r3, r2
 80119f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80119f4:	e064      	b.n	8011ac0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	68db      	ldr	r3, [r3, #12]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d045      	beq.n	8011a8a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80119fe:	4b2c      	ldr	r3, [pc, #176]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	f023 0219 	bic.w	r2, r3, #25
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	68db      	ldr	r3, [r3, #12]
 8011a0a:	4929      	ldr	r1, [pc, #164]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011a0c:	4313      	orrs	r3, r2
 8011a0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011a10:	f7f9 fb8e 	bl	800b130 <HAL_GetTick>
 8011a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011a16:	e008      	b.n	8011a2a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011a18:	f7f9 fb8a 	bl	800b130 <HAL_GetTick>
 8011a1c:	4602      	mov	r2, r0
 8011a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a20:	1ad3      	subs	r3, r2, r3
 8011a22:	2b02      	cmp	r3, #2
 8011a24:	d901      	bls.n	8011a2a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8011a26:	2303      	movs	r3, #3
 8011a28:	e307      	b.n	801203a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011a2a:	4b21      	ldr	r3, [pc, #132]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f003 0304 	and.w	r3, r3, #4
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d0f0      	beq.n	8011a18 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011a36:	f7f9 fba9 	bl	800b18c <HAL_GetREVID>
 8011a3a:	4602      	mov	r2, r0
 8011a3c:	f241 0303 	movw	r3, #4099	; 0x1003
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d817      	bhi.n	8011a74 <HAL_RCC_OscConfig+0x24c>
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	691b      	ldr	r3, [r3, #16]
 8011a48:	2b40      	cmp	r3, #64	; 0x40
 8011a4a:	d108      	bne.n	8011a5e <HAL_RCC_OscConfig+0x236>
 8011a4c:	4b18      	ldr	r3, [pc, #96]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011a4e:	685b      	ldr	r3, [r3, #4]
 8011a50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8011a54:	4a16      	ldr	r2, [pc, #88]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a5a:	6053      	str	r3, [r2, #4]
 8011a5c:	e030      	b.n	8011ac0 <HAL_RCC_OscConfig+0x298>
 8011a5e:	4b14      	ldr	r3, [pc, #80]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	691b      	ldr	r3, [r3, #16]
 8011a6a:	031b      	lsls	r3, r3, #12
 8011a6c:	4910      	ldr	r1, [pc, #64]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011a6e:	4313      	orrs	r3, r2
 8011a70:	604b      	str	r3, [r1, #4]
 8011a72:	e025      	b.n	8011ac0 <HAL_RCC_OscConfig+0x298>
 8011a74:	4b0e      	ldr	r3, [pc, #56]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011a76:	685b      	ldr	r3, [r3, #4]
 8011a78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	691b      	ldr	r3, [r3, #16]
 8011a80:	061b      	lsls	r3, r3, #24
 8011a82:	490b      	ldr	r1, [pc, #44]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011a84:	4313      	orrs	r3, r2
 8011a86:	604b      	str	r3, [r1, #4]
 8011a88:	e01a      	b.n	8011ac0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011a8a:	4b09      	ldr	r3, [pc, #36]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	4a08      	ldr	r2, [pc, #32]	; (8011ab0 <HAL_RCC_OscConfig+0x288>)
 8011a90:	f023 0301 	bic.w	r3, r3, #1
 8011a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011a96:	f7f9 fb4b 	bl	800b130 <HAL_GetTick>
 8011a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011a9c:	e00a      	b.n	8011ab4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011a9e:	f7f9 fb47 	bl	800b130 <HAL_GetTick>
 8011aa2:	4602      	mov	r2, r0
 8011aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa6:	1ad3      	subs	r3, r2, r3
 8011aa8:	2b02      	cmp	r3, #2
 8011aaa:	d903      	bls.n	8011ab4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8011aac:	2303      	movs	r3, #3
 8011aae:	e2c4      	b.n	801203a <HAL_RCC_OscConfig+0x812>
 8011ab0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011ab4:	4ba4      	ldr	r3, [pc, #656]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	f003 0304 	and.w	r3, r3, #4
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d1ee      	bne.n	8011a9e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	f003 0310 	and.w	r3, r3, #16
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f000 80a9 	beq.w	8011c20 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011ace:	4b9e      	ldr	r3, [pc, #632]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011ad0:	691b      	ldr	r3, [r3, #16]
 8011ad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011ad6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011ad8:	4b9b      	ldr	r3, [pc, #620]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011adc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	2b08      	cmp	r3, #8
 8011ae2:	d007      	beq.n	8011af4 <HAL_RCC_OscConfig+0x2cc>
 8011ae4:	69bb      	ldr	r3, [r7, #24]
 8011ae6:	2b18      	cmp	r3, #24
 8011ae8:	d13a      	bne.n	8011b60 <HAL_RCC_OscConfig+0x338>
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	f003 0303 	and.w	r3, r3, #3
 8011af0:	2b01      	cmp	r3, #1
 8011af2:	d135      	bne.n	8011b60 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011af4:	4b94      	ldr	r3, [pc, #592]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d005      	beq.n	8011b0c <HAL_RCC_OscConfig+0x2e4>
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	69db      	ldr	r3, [r3, #28]
 8011b04:	2b80      	cmp	r3, #128	; 0x80
 8011b06:	d001      	beq.n	8011b0c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8011b08:	2301      	movs	r3, #1
 8011b0a:	e296      	b.n	801203a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011b0c:	f7f9 fb3e 	bl	800b18c <HAL_GetREVID>
 8011b10:	4602      	mov	r2, r0
 8011b12:	f241 0303 	movw	r3, #4099	; 0x1003
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d817      	bhi.n	8011b4a <HAL_RCC_OscConfig+0x322>
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6a1b      	ldr	r3, [r3, #32]
 8011b1e:	2b20      	cmp	r3, #32
 8011b20:	d108      	bne.n	8011b34 <HAL_RCC_OscConfig+0x30c>
 8011b22:	4b89      	ldr	r3, [pc, #548]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8011b2a:	4a87      	ldr	r2, [pc, #540]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011b30:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011b32:	e075      	b.n	8011c20 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011b34:	4b84      	ldr	r3, [pc, #528]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011b36:	685b      	ldr	r3, [r3, #4]
 8011b38:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6a1b      	ldr	r3, [r3, #32]
 8011b40:	069b      	lsls	r3, r3, #26
 8011b42:	4981      	ldr	r1, [pc, #516]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011b44:	4313      	orrs	r3, r2
 8011b46:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011b48:	e06a      	b.n	8011c20 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011b4a:	4b7f      	ldr	r3, [pc, #508]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011b4c:	68db      	ldr	r3, [r3, #12]
 8011b4e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6a1b      	ldr	r3, [r3, #32]
 8011b56:	061b      	lsls	r3, r3, #24
 8011b58:	497b      	ldr	r1, [pc, #492]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011b5a:	4313      	orrs	r3, r2
 8011b5c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011b5e:	e05f      	b.n	8011c20 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	69db      	ldr	r3, [r3, #28]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d042      	beq.n	8011bee <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8011b68:	4b77      	ldr	r3, [pc, #476]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	4a76      	ldr	r2, [pc, #472]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011b74:	f7f9 fadc 	bl	800b130 <HAL_GetTick>
 8011b78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011b7a:	e008      	b.n	8011b8e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8011b7c:	f7f9 fad8 	bl	800b130 <HAL_GetTick>
 8011b80:	4602      	mov	r2, r0
 8011b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b84:	1ad3      	subs	r3, r2, r3
 8011b86:	2b02      	cmp	r3, #2
 8011b88:	d901      	bls.n	8011b8e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8011b8a:	2303      	movs	r3, #3
 8011b8c:	e255      	b.n	801203a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011b8e:	4b6e      	ldr	r3, [pc, #440]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d0f0      	beq.n	8011b7c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011b9a:	f7f9 faf7 	bl	800b18c <HAL_GetREVID>
 8011b9e:	4602      	mov	r2, r0
 8011ba0:	f241 0303 	movw	r3, #4099	; 0x1003
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d817      	bhi.n	8011bd8 <HAL_RCC_OscConfig+0x3b0>
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	6a1b      	ldr	r3, [r3, #32]
 8011bac:	2b20      	cmp	r3, #32
 8011bae:	d108      	bne.n	8011bc2 <HAL_RCC_OscConfig+0x39a>
 8011bb0:	4b65      	ldr	r3, [pc, #404]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011bb2:	685b      	ldr	r3, [r3, #4]
 8011bb4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8011bb8:	4a63      	ldr	r2, [pc, #396]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011bbe:	6053      	str	r3, [r2, #4]
 8011bc0:	e02e      	b.n	8011c20 <HAL_RCC_OscConfig+0x3f8>
 8011bc2:	4b61      	ldr	r3, [pc, #388]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6a1b      	ldr	r3, [r3, #32]
 8011bce:	069b      	lsls	r3, r3, #26
 8011bd0:	495d      	ldr	r1, [pc, #372]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011bd2:	4313      	orrs	r3, r2
 8011bd4:	604b      	str	r3, [r1, #4]
 8011bd6:	e023      	b.n	8011c20 <HAL_RCC_OscConfig+0x3f8>
 8011bd8:	4b5b      	ldr	r3, [pc, #364]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6a1b      	ldr	r3, [r3, #32]
 8011be4:	061b      	lsls	r3, r3, #24
 8011be6:	4958      	ldr	r1, [pc, #352]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011be8:	4313      	orrs	r3, r2
 8011bea:	60cb      	str	r3, [r1, #12]
 8011bec:	e018      	b.n	8011c20 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8011bee:	4b56      	ldr	r3, [pc, #344]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	4a55      	ldr	r2, [pc, #340]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011bfa:	f7f9 fa99 	bl	800b130 <HAL_GetTick>
 8011bfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011c00:	e008      	b.n	8011c14 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8011c02:	f7f9 fa95 	bl	800b130 <HAL_GetTick>
 8011c06:	4602      	mov	r2, r0
 8011c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0a:	1ad3      	subs	r3, r2, r3
 8011c0c:	2b02      	cmp	r3, #2
 8011c0e:	d901      	bls.n	8011c14 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8011c10:	2303      	movs	r3, #3
 8011c12:	e212      	b.n	801203a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011c14:	4b4c      	ldr	r3, [pc, #304]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d1f0      	bne.n	8011c02 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	f003 0308 	and.w	r3, r3, #8
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d036      	beq.n	8011c9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	695b      	ldr	r3, [r3, #20]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d019      	beq.n	8011c68 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011c34:	4b44      	ldr	r3, [pc, #272]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c38:	4a43      	ldr	r2, [pc, #268]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011c3a:	f043 0301 	orr.w	r3, r3, #1
 8011c3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011c40:	f7f9 fa76 	bl	800b130 <HAL_GetTick>
 8011c44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011c46:	e008      	b.n	8011c5a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011c48:	f7f9 fa72 	bl	800b130 <HAL_GetTick>
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c50:	1ad3      	subs	r3, r2, r3
 8011c52:	2b02      	cmp	r3, #2
 8011c54:	d901      	bls.n	8011c5a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8011c56:	2303      	movs	r3, #3
 8011c58:	e1ef      	b.n	801203a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011c5a:	4b3b      	ldr	r3, [pc, #236]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c5e:	f003 0302 	and.w	r3, r3, #2
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d0f0      	beq.n	8011c48 <HAL_RCC_OscConfig+0x420>
 8011c66:	e018      	b.n	8011c9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011c68:	4b37      	ldr	r3, [pc, #220]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c6c:	4a36      	ldr	r2, [pc, #216]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011c6e:	f023 0301 	bic.w	r3, r3, #1
 8011c72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011c74:	f7f9 fa5c 	bl	800b130 <HAL_GetTick>
 8011c78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011c7a:	e008      	b.n	8011c8e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011c7c:	f7f9 fa58 	bl	800b130 <HAL_GetTick>
 8011c80:	4602      	mov	r2, r0
 8011c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c84:	1ad3      	subs	r3, r2, r3
 8011c86:	2b02      	cmp	r3, #2
 8011c88:	d901      	bls.n	8011c8e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8011c8a:	2303      	movs	r3, #3
 8011c8c:	e1d5      	b.n	801203a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011c8e:	4b2e      	ldr	r3, [pc, #184]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c92:	f003 0302 	and.w	r3, r3, #2
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d1f0      	bne.n	8011c7c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	f003 0320 	and.w	r3, r3, #32
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d036      	beq.n	8011d14 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	699b      	ldr	r3, [r3, #24]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d019      	beq.n	8011ce2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011cae:	4b26      	ldr	r3, [pc, #152]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	4a25      	ldr	r2, [pc, #148]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011cb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011cb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011cba:	f7f9 fa39 	bl	800b130 <HAL_GetTick>
 8011cbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011cc0:	e008      	b.n	8011cd4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8011cc2:	f7f9 fa35 	bl	800b130 <HAL_GetTick>
 8011cc6:	4602      	mov	r2, r0
 8011cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cca:	1ad3      	subs	r3, r2, r3
 8011ccc:	2b02      	cmp	r3, #2
 8011cce:	d901      	bls.n	8011cd4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8011cd0:	2303      	movs	r3, #3
 8011cd2:	e1b2      	b.n	801203a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011cd4:	4b1c      	ldr	r3, [pc, #112]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d0f0      	beq.n	8011cc2 <HAL_RCC_OscConfig+0x49a>
 8011ce0:	e018      	b.n	8011d14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8011ce2:	4b19      	ldr	r3, [pc, #100]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	4a18      	ldr	r2, [pc, #96]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011cec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011cee:	f7f9 fa1f 	bl	800b130 <HAL_GetTick>
 8011cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011cf4:	e008      	b.n	8011d08 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8011cf6:	f7f9 fa1b 	bl	800b130 <HAL_GetTick>
 8011cfa:	4602      	mov	r2, r0
 8011cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfe:	1ad3      	subs	r3, r2, r3
 8011d00:	2b02      	cmp	r3, #2
 8011d02:	d901      	bls.n	8011d08 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8011d04:	2303      	movs	r3, #3
 8011d06:	e198      	b.n	801203a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011d08:	4b0f      	ldr	r3, [pc, #60]	; (8011d48 <HAL_RCC_OscConfig+0x520>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d1f0      	bne.n	8011cf6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	f003 0304 	and.w	r3, r3, #4
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f000 8085 	beq.w	8011e2c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8011d22:	4b0a      	ldr	r3, [pc, #40]	; (8011d4c <HAL_RCC_OscConfig+0x524>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	4a09      	ldr	r2, [pc, #36]	; (8011d4c <HAL_RCC_OscConfig+0x524>)
 8011d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011d2e:	f7f9 f9ff 	bl	800b130 <HAL_GetTick>
 8011d32:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011d34:	e00c      	b.n	8011d50 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8011d36:	f7f9 f9fb 	bl	800b130 <HAL_GetTick>
 8011d3a:	4602      	mov	r2, r0
 8011d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3e:	1ad3      	subs	r3, r2, r3
 8011d40:	2b64      	cmp	r3, #100	; 0x64
 8011d42:	d905      	bls.n	8011d50 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8011d44:	2303      	movs	r3, #3
 8011d46:	e178      	b.n	801203a <HAL_RCC_OscConfig+0x812>
 8011d48:	58024400 	.word	0x58024400
 8011d4c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011d50:	4b96      	ldr	r3, [pc, #600]	; (8011fac <HAL_RCC_OscConfig+0x784>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d0ec      	beq.n	8011d36 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	689b      	ldr	r3, [r3, #8]
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d106      	bne.n	8011d72 <HAL_RCC_OscConfig+0x54a>
 8011d64:	4b92      	ldr	r3, [pc, #584]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d68:	4a91      	ldr	r2, [pc, #580]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011d6a:	f043 0301 	orr.w	r3, r3, #1
 8011d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8011d70:	e02d      	b.n	8011dce <HAL_RCC_OscConfig+0x5a6>
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	689b      	ldr	r3, [r3, #8]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d10c      	bne.n	8011d94 <HAL_RCC_OscConfig+0x56c>
 8011d7a:	4b8d      	ldr	r3, [pc, #564]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d7e:	4a8c      	ldr	r2, [pc, #560]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011d80:	f023 0301 	bic.w	r3, r3, #1
 8011d84:	6713      	str	r3, [r2, #112]	; 0x70
 8011d86:	4b8a      	ldr	r3, [pc, #552]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d8a:	4a89      	ldr	r2, [pc, #548]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011d8c:	f023 0304 	bic.w	r3, r3, #4
 8011d90:	6713      	str	r3, [r2, #112]	; 0x70
 8011d92:	e01c      	b.n	8011dce <HAL_RCC_OscConfig+0x5a6>
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	689b      	ldr	r3, [r3, #8]
 8011d98:	2b05      	cmp	r3, #5
 8011d9a:	d10c      	bne.n	8011db6 <HAL_RCC_OscConfig+0x58e>
 8011d9c:	4b84      	ldr	r3, [pc, #528]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011da0:	4a83      	ldr	r2, [pc, #524]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011da2:	f043 0304 	orr.w	r3, r3, #4
 8011da6:	6713      	str	r3, [r2, #112]	; 0x70
 8011da8:	4b81      	ldr	r3, [pc, #516]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dac:	4a80      	ldr	r2, [pc, #512]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011dae:	f043 0301 	orr.w	r3, r3, #1
 8011db2:	6713      	str	r3, [r2, #112]	; 0x70
 8011db4:	e00b      	b.n	8011dce <HAL_RCC_OscConfig+0x5a6>
 8011db6:	4b7e      	ldr	r3, [pc, #504]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dba:	4a7d      	ldr	r2, [pc, #500]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011dbc:	f023 0301 	bic.w	r3, r3, #1
 8011dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8011dc2:	4b7b      	ldr	r3, [pc, #492]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dc6:	4a7a      	ldr	r2, [pc, #488]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011dc8:	f023 0304 	bic.w	r3, r3, #4
 8011dcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	689b      	ldr	r3, [r3, #8]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d015      	beq.n	8011e02 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011dd6:	f7f9 f9ab 	bl	800b130 <HAL_GetTick>
 8011dda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011ddc:	e00a      	b.n	8011df4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011dde:	f7f9 f9a7 	bl	800b130 <HAL_GetTick>
 8011de2:	4602      	mov	r2, r0
 8011de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de6:	1ad3      	subs	r3, r2, r3
 8011de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011dec:	4293      	cmp	r3, r2
 8011dee:	d901      	bls.n	8011df4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8011df0:	2303      	movs	r3, #3
 8011df2:	e122      	b.n	801203a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011df4:	4b6e      	ldr	r3, [pc, #440]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011df8:	f003 0302 	and.w	r3, r3, #2
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d0ee      	beq.n	8011dde <HAL_RCC_OscConfig+0x5b6>
 8011e00:	e014      	b.n	8011e2c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011e02:	f7f9 f995 	bl	800b130 <HAL_GetTick>
 8011e06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011e08:	e00a      	b.n	8011e20 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011e0a:	f7f9 f991 	bl	800b130 <HAL_GetTick>
 8011e0e:	4602      	mov	r2, r0
 8011e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e12:	1ad3      	subs	r3, r2, r3
 8011e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	d901      	bls.n	8011e20 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8011e1c:	2303      	movs	r3, #3
 8011e1e:	e10c      	b.n	801203a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011e20:	4b63      	ldr	r3, [pc, #396]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e24:	f003 0302 	and.w	r3, r3, #2
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d1ee      	bne.n	8011e0a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	f000 8101 	beq.w	8012038 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8011e36:	4b5e      	ldr	r3, [pc, #376]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011e38:	691b      	ldr	r3, [r3, #16]
 8011e3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011e3e:	2b18      	cmp	r3, #24
 8011e40:	f000 80bc 	beq.w	8011fbc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e48:	2b02      	cmp	r3, #2
 8011e4a:	f040 8095 	bne.w	8011f78 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011e4e:	4b58      	ldr	r3, [pc, #352]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	4a57      	ldr	r2, [pc, #348]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011e54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e5a:	f7f9 f969 	bl	800b130 <HAL_GetTick>
 8011e5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011e60:	e008      	b.n	8011e74 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011e62:	f7f9 f965 	bl	800b130 <HAL_GetTick>
 8011e66:	4602      	mov	r2, r0
 8011e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e6a:	1ad3      	subs	r3, r2, r3
 8011e6c:	2b02      	cmp	r3, #2
 8011e6e:	d901      	bls.n	8011e74 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8011e70:	2303      	movs	r3, #3
 8011e72:	e0e2      	b.n	801203a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011e74:	4b4e      	ldr	r3, [pc, #312]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d1f0      	bne.n	8011e62 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011e80:	4b4b      	ldr	r3, [pc, #300]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011e82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e84:	4b4b      	ldr	r3, [pc, #300]	; (8011fb4 <HAL_RCC_OscConfig+0x78c>)
 8011e86:	4013      	ands	r3, r2
 8011e88:	687a      	ldr	r2, [r7, #4]
 8011e8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8011e8c:	687a      	ldr	r2, [r7, #4]
 8011e8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011e90:	0112      	lsls	r2, r2, #4
 8011e92:	430a      	orrs	r2, r1
 8011e94:	4946      	ldr	r1, [pc, #280]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011e96:	4313      	orrs	r3, r2
 8011e98:	628b      	str	r3, [r1, #40]	; 0x28
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e9e:	3b01      	subs	r3, #1
 8011ea0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ea8:	3b01      	subs	r3, #1
 8011eaa:	025b      	lsls	r3, r3, #9
 8011eac:	b29b      	uxth	r3, r3
 8011eae:	431a      	orrs	r2, r3
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011eb4:	3b01      	subs	r3, #1
 8011eb6:	041b      	lsls	r3, r3, #16
 8011eb8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011ebc:	431a      	orrs	r2, r3
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ec2:	3b01      	subs	r3, #1
 8011ec4:	061b      	lsls	r3, r3, #24
 8011ec6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011eca:	4939      	ldr	r1, [pc, #228]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011ecc:	4313      	orrs	r3, r2
 8011ece:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8011ed0:	4b37      	ldr	r3, [pc, #220]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ed4:	4a36      	ldr	r2, [pc, #216]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011ed6:	f023 0301 	bic.w	r3, r3, #1
 8011eda:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011edc:	4b34      	ldr	r3, [pc, #208]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011ee0:	4b35      	ldr	r3, [pc, #212]	; (8011fb8 <HAL_RCC_OscConfig+0x790>)
 8011ee2:	4013      	ands	r3, r2
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8011ee8:	00d2      	lsls	r2, r2, #3
 8011eea:	4931      	ldr	r1, [pc, #196]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011eec:	4313      	orrs	r3, r2
 8011eee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8011ef0:	4b2f      	ldr	r3, [pc, #188]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ef4:	f023 020c 	bic.w	r2, r3, #12
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011efc:	492c      	ldr	r1, [pc, #176]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011efe:	4313      	orrs	r3, r2
 8011f00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8011f02:	4b2b      	ldr	r3, [pc, #172]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f06:	f023 0202 	bic.w	r2, r3, #2
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f0e:	4928      	ldr	r1, [pc, #160]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f10:	4313      	orrs	r3, r2
 8011f12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011f14:	4b26      	ldr	r3, [pc, #152]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f18:	4a25      	ldr	r2, [pc, #148]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011f20:	4b23      	ldr	r3, [pc, #140]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f24:	4a22      	ldr	r2, [pc, #136]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011f2c:	4b20      	ldr	r3, [pc, #128]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f30:	4a1f      	ldr	r2, [pc, #124]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011f36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8011f38:	4b1d      	ldr	r3, [pc, #116]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f3c:	4a1c      	ldr	r2, [pc, #112]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f3e:	f043 0301 	orr.w	r3, r3, #1
 8011f42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011f44:	4b1a      	ldr	r3, [pc, #104]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	4a19      	ldr	r2, [pc, #100]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011f50:	f7f9 f8ee 	bl	800b130 <HAL_GetTick>
 8011f54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011f56:	e008      	b.n	8011f6a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011f58:	f7f9 f8ea 	bl	800b130 <HAL_GetTick>
 8011f5c:	4602      	mov	r2, r0
 8011f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f60:	1ad3      	subs	r3, r2, r3
 8011f62:	2b02      	cmp	r3, #2
 8011f64:	d901      	bls.n	8011f6a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8011f66:	2303      	movs	r3, #3
 8011f68:	e067      	b.n	801203a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011f6a:	4b11      	ldr	r3, [pc, #68]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d0f0      	beq.n	8011f58 <HAL_RCC_OscConfig+0x730>
 8011f76:	e05f      	b.n	8012038 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011f78:	4b0d      	ldr	r3, [pc, #52]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	4a0c      	ldr	r2, [pc, #48]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011f84:	f7f9 f8d4 	bl	800b130 <HAL_GetTick>
 8011f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011f8a:	e008      	b.n	8011f9e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011f8c:	f7f9 f8d0 	bl	800b130 <HAL_GetTick>
 8011f90:	4602      	mov	r2, r0
 8011f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f94:	1ad3      	subs	r3, r2, r3
 8011f96:	2b02      	cmp	r3, #2
 8011f98:	d901      	bls.n	8011f9e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8011f9a:	2303      	movs	r3, #3
 8011f9c:	e04d      	b.n	801203a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011f9e:	4b04      	ldr	r3, [pc, #16]	; (8011fb0 <HAL_RCC_OscConfig+0x788>)
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d1f0      	bne.n	8011f8c <HAL_RCC_OscConfig+0x764>
 8011faa:	e045      	b.n	8012038 <HAL_RCC_OscConfig+0x810>
 8011fac:	58024800 	.word	0x58024800
 8011fb0:	58024400 	.word	0x58024400
 8011fb4:	fffffc0c 	.word	0xfffffc0c
 8011fb8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8011fbc:	4b21      	ldr	r3, [pc, #132]	; (8012044 <HAL_RCC_OscConfig+0x81c>)
 8011fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8011fc2:	4b20      	ldr	r3, [pc, #128]	; (8012044 <HAL_RCC_OscConfig+0x81c>)
 8011fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fc6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fcc:	2b01      	cmp	r3, #1
 8011fce:	d031      	beq.n	8012034 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011fd0:	693b      	ldr	r3, [r7, #16]
 8011fd2:	f003 0203 	and.w	r2, r3, #3
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d12a      	bne.n	8012034 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	091b      	lsrs	r3, r3, #4
 8011fe2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011fea:	429a      	cmp	r2, r3
 8011fec:	d122      	bne.n	8012034 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ff8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d11a      	bne.n	8012034 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	0a5b      	lsrs	r3, r3, #9
 8012002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801200a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801200c:	429a      	cmp	r2, r3
 801200e:	d111      	bne.n	8012034 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	0c1b      	lsrs	r3, r3, #16
 8012014:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801201c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801201e:	429a      	cmp	r2, r3
 8012020:	d108      	bne.n	8012034 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	0e1b      	lsrs	r3, r3, #24
 8012026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801202e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012030:	429a      	cmp	r2, r3
 8012032:	d001      	beq.n	8012038 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8012034:	2301      	movs	r3, #1
 8012036:	e000      	b.n	801203a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8012038:	2300      	movs	r3, #0
}
 801203a:	4618      	mov	r0, r3
 801203c:	3730      	adds	r7, #48	; 0x30
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop
 8012044:	58024400 	.word	0x58024400

08012048 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b086      	sub	sp, #24
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d101      	bne.n	801205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012058:	2301      	movs	r3, #1
 801205a:	e19c      	b.n	8012396 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801205c:	4b8a      	ldr	r3, [pc, #552]	; (8012288 <HAL_RCC_ClockConfig+0x240>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	f003 030f 	and.w	r3, r3, #15
 8012064:	683a      	ldr	r2, [r7, #0]
 8012066:	429a      	cmp	r2, r3
 8012068:	d910      	bls.n	801208c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801206a:	4b87      	ldr	r3, [pc, #540]	; (8012288 <HAL_RCC_ClockConfig+0x240>)
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	f023 020f 	bic.w	r2, r3, #15
 8012072:	4985      	ldr	r1, [pc, #532]	; (8012288 <HAL_RCC_ClockConfig+0x240>)
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	4313      	orrs	r3, r2
 8012078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801207a:	4b83      	ldr	r3, [pc, #524]	; (8012288 <HAL_RCC_ClockConfig+0x240>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	f003 030f 	and.w	r3, r3, #15
 8012082:	683a      	ldr	r2, [r7, #0]
 8012084:	429a      	cmp	r2, r3
 8012086:	d001      	beq.n	801208c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8012088:	2301      	movs	r3, #1
 801208a:	e184      	b.n	8012396 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	f003 0304 	and.w	r3, r3, #4
 8012094:	2b00      	cmp	r3, #0
 8012096:	d010      	beq.n	80120ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	691a      	ldr	r2, [r3, #16]
 801209c:	4b7b      	ldr	r3, [pc, #492]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 801209e:	699b      	ldr	r3, [r3, #24]
 80120a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d908      	bls.n	80120ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80120a8:	4b78      	ldr	r3, [pc, #480]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 80120aa:	699b      	ldr	r3, [r3, #24]
 80120ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	691b      	ldr	r3, [r3, #16]
 80120b4:	4975      	ldr	r1, [pc, #468]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 80120b6:	4313      	orrs	r3, r2
 80120b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	f003 0308 	and.w	r3, r3, #8
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d010      	beq.n	80120e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	695a      	ldr	r2, [r3, #20]
 80120ca:	4b70      	ldr	r3, [pc, #448]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 80120cc:	69db      	ldr	r3, [r3, #28]
 80120ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d908      	bls.n	80120e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80120d6:	4b6d      	ldr	r3, [pc, #436]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 80120d8:	69db      	ldr	r3, [r3, #28]
 80120da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	695b      	ldr	r3, [r3, #20]
 80120e2:	496a      	ldr	r1, [pc, #424]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 80120e4:	4313      	orrs	r3, r2
 80120e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	f003 0310 	and.w	r3, r3, #16
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d010      	beq.n	8012116 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	699a      	ldr	r2, [r3, #24]
 80120f8:	4b64      	ldr	r3, [pc, #400]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 80120fa:	69db      	ldr	r3, [r3, #28]
 80120fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012100:	429a      	cmp	r2, r3
 8012102:	d908      	bls.n	8012116 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8012104:	4b61      	ldr	r3, [pc, #388]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 8012106:	69db      	ldr	r3, [r3, #28]
 8012108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	699b      	ldr	r3, [r3, #24]
 8012110:	495e      	ldr	r1, [pc, #376]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 8012112:	4313      	orrs	r3, r2
 8012114:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	f003 0320 	and.w	r3, r3, #32
 801211e:	2b00      	cmp	r3, #0
 8012120:	d010      	beq.n	8012144 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	69da      	ldr	r2, [r3, #28]
 8012126:	4b59      	ldr	r3, [pc, #356]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 8012128:	6a1b      	ldr	r3, [r3, #32]
 801212a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801212e:	429a      	cmp	r2, r3
 8012130:	d908      	bls.n	8012144 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8012132:	4b56      	ldr	r3, [pc, #344]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 8012134:	6a1b      	ldr	r3, [r3, #32]
 8012136:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	69db      	ldr	r3, [r3, #28]
 801213e:	4953      	ldr	r1, [pc, #332]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 8012140:	4313      	orrs	r3, r2
 8012142:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	f003 0302 	and.w	r3, r3, #2
 801214c:	2b00      	cmp	r3, #0
 801214e:	d010      	beq.n	8012172 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	68da      	ldr	r2, [r3, #12]
 8012154:	4b4d      	ldr	r3, [pc, #308]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 8012156:	699b      	ldr	r3, [r3, #24]
 8012158:	f003 030f 	and.w	r3, r3, #15
 801215c:	429a      	cmp	r2, r3
 801215e:	d908      	bls.n	8012172 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012160:	4b4a      	ldr	r3, [pc, #296]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 8012162:	699b      	ldr	r3, [r3, #24]
 8012164:	f023 020f 	bic.w	r2, r3, #15
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	68db      	ldr	r3, [r3, #12]
 801216c:	4947      	ldr	r1, [pc, #284]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 801216e:	4313      	orrs	r3, r2
 8012170:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	f003 0301 	and.w	r3, r3, #1
 801217a:	2b00      	cmp	r3, #0
 801217c:	d055      	beq.n	801222a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801217e:	4b43      	ldr	r3, [pc, #268]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 8012180:	699b      	ldr	r3, [r3, #24]
 8012182:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	689b      	ldr	r3, [r3, #8]
 801218a:	4940      	ldr	r1, [pc, #256]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 801218c:	4313      	orrs	r3, r2
 801218e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	2b02      	cmp	r3, #2
 8012196:	d107      	bne.n	80121a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012198:	4b3c      	ldr	r3, [pc, #240]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d121      	bne.n	80121e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80121a4:	2301      	movs	r3, #1
 80121a6:	e0f6      	b.n	8012396 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	685b      	ldr	r3, [r3, #4]
 80121ac:	2b03      	cmp	r3, #3
 80121ae:	d107      	bne.n	80121c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80121b0:	4b36      	ldr	r3, [pc, #216]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d115      	bne.n	80121e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80121bc:	2301      	movs	r3, #1
 80121be:	e0ea      	b.n	8012396 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	2b01      	cmp	r3, #1
 80121c6:	d107      	bne.n	80121d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80121c8:	4b30      	ldr	r3, [pc, #192]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d109      	bne.n	80121e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80121d4:	2301      	movs	r3, #1
 80121d6:	e0de      	b.n	8012396 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80121d8:	4b2c      	ldr	r3, [pc, #176]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	f003 0304 	and.w	r3, r3, #4
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d101      	bne.n	80121e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80121e4:	2301      	movs	r3, #1
 80121e6:	e0d6      	b.n	8012396 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80121e8:	4b28      	ldr	r3, [pc, #160]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 80121ea:	691b      	ldr	r3, [r3, #16]
 80121ec:	f023 0207 	bic.w	r2, r3, #7
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	685b      	ldr	r3, [r3, #4]
 80121f4:	4925      	ldr	r1, [pc, #148]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 80121f6:	4313      	orrs	r3, r2
 80121f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80121fa:	f7f8 ff99 	bl	800b130 <HAL_GetTick>
 80121fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012200:	e00a      	b.n	8012218 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012202:	f7f8 ff95 	bl	800b130 <HAL_GetTick>
 8012206:	4602      	mov	r2, r0
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	1ad3      	subs	r3, r2, r3
 801220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012210:	4293      	cmp	r3, r2
 8012212:	d901      	bls.n	8012218 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8012214:	2303      	movs	r3, #3
 8012216:	e0be      	b.n	8012396 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012218:	4b1c      	ldr	r3, [pc, #112]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 801221a:	691b      	ldr	r3, [r3, #16]
 801221c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	00db      	lsls	r3, r3, #3
 8012226:	429a      	cmp	r2, r3
 8012228:	d1eb      	bne.n	8012202 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	f003 0302 	and.w	r3, r3, #2
 8012232:	2b00      	cmp	r3, #0
 8012234:	d010      	beq.n	8012258 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	68da      	ldr	r2, [r3, #12]
 801223a:	4b14      	ldr	r3, [pc, #80]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 801223c:	699b      	ldr	r3, [r3, #24]
 801223e:	f003 030f 	and.w	r3, r3, #15
 8012242:	429a      	cmp	r2, r3
 8012244:	d208      	bcs.n	8012258 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012246:	4b11      	ldr	r3, [pc, #68]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 8012248:	699b      	ldr	r3, [r3, #24]
 801224a:	f023 020f 	bic.w	r2, r3, #15
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	68db      	ldr	r3, [r3, #12]
 8012252:	490e      	ldr	r1, [pc, #56]	; (801228c <HAL_RCC_ClockConfig+0x244>)
 8012254:	4313      	orrs	r3, r2
 8012256:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012258:	4b0b      	ldr	r3, [pc, #44]	; (8012288 <HAL_RCC_ClockConfig+0x240>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f003 030f 	and.w	r3, r3, #15
 8012260:	683a      	ldr	r2, [r7, #0]
 8012262:	429a      	cmp	r2, r3
 8012264:	d214      	bcs.n	8012290 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012266:	4b08      	ldr	r3, [pc, #32]	; (8012288 <HAL_RCC_ClockConfig+0x240>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	f023 020f 	bic.w	r2, r3, #15
 801226e:	4906      	ldr	r1, [pc, #24]	; (8012288 <HAL_RCC_ClockConfig+0x240>)
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	4313      	orrs	r3, r2
 8012274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012276:	4b04      	ldr	r3, [pc, #16]	; (8012288 <HAL_RCC_ClockConfig+0x240>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f003 030f 	and.w	r3, r3, #15
 801227e:	683a      	ldr	r2, [r7, #0]
 8012280:	429a      	cmp	r2, r3
 8012282:	d005      	beq.n	8012290 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8012284:	2301      	movs	r3, #1
 8012286:	e086      	b.n	8012396 <HAL_RCC_ClockConfig+0x34e>
 8012288:	52002000 	.word	0x52002000
 801228c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	f003 0304 	and.w	r3, r3, #4
 8012298:	2b00      	cmp	r3, #0
 801229a:	d010      	beq.n	80122be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	691a      	ldr	r2, [r3, #16]
 80122a0:	4b3f      	ldr	r3, [pc, #252]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 80122a2:	699b      	ldr	r3, [r3, #24]
 80122a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d208      	bcs.n	80122be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80122ac:	4b3c      	ldr	r3, [pc, #240]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 80122ae:	699b      	ldr	r3, [r3, #24]
 80122b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	691b      	ldr	r3, [r3, #16]
 80122b8:	4939      	ldr	r1, [pc, #228]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 80122ba:	4313      	orrs	r3, r2
 80122bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	f003 0308 	and.w	r3, r3, #8
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d010      	beq.n	80122ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	695a      	ldr	r2, [r3, #20]
 80122ce:	4b34      	ldr	r3, [pc, #208]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 80122d0:	69db      	ldr	r3, [r3, #28]
 80122d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d208      	bcs.n	80122ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80122da:	4b31      	ldr	r3, [pc, #196]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 80122dc:	69db      	ldr	r3, [r3, #28]
 80122de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	695b      	ldr	r3, [r3, #20]
 80122e6:	492e      	ldr	r1, [pc, #184]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 80122e8:	4313      	orrs	r3, r2
 80122ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	f003 0310 	and.w	r3, r3, #16
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d010      	beq.n	801231a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	699a      	ldr	r2, [r3, #24]
 80122fc:	4b28      	ldr	r3, [pc, #160]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 80122fe:	69db      	ldr	r3, [r3, #28]
 8012300:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012304:	429a      	cmp	r2, r3
 8012306:	d208      	bcs.n	801231a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8012308:	4b25      	ldr	r3, [pc, #148]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 801230a:	69db      	ldr	r3, [r3, #28]
 801230c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	699b      	ldr	r3, [r3, #24]
 8012314:	4922      	ldr	r1, [pc, #136]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 8012316:	4313      	orrs	r3, r2
 8012318:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	f003 0320 	and.w	r3, r3, #32
 8012322:	2b00      	cmp	r3, #0
 8012324:	d010      	beq.n	8012348 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	69da      	ldr	r2, [r3, #28]
 801232a:	4b1d      	ldr	r3, [pc, #116]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 801232c:	6a1b      	ldr	r3, [r3, #32]
 801232e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012332:	429a      	cmp	r2, r3
 8012334:	d208      	bcs.n	8012348 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8012336:	4b1a      	ldr	r3, [pc, #104]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 8012338:	6a1b      	ldr	r3, [r3, #32]
 801233a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	69db      	ldr	r3, [r3, #28]
 8012342:	4917      	ldr	r1, [pc, #92]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 8012344:	4313      	orrs	r3, r2
 8012346:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012348:	f000 f834 	bl	80123b4 <HAL_RCC_GetSysClockFreq>
 801234c:	4601      	mov	r1, r0
 801234e:	4b14      	ldr	r3, [pc, #80]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 8012350:	699b      	ldr	r3, [r3, #24]
 8012352:	0a1b      	lsrs	r3, r3, #8
 8012354:	f003 030f 	and.w	r3, r3, #15
 8012358:	4a12      	ldr	r2, [pc, #72]	; (80123a4 <HAL_RCC_ClockConfig+0x35c>)
 801235a:	5cd3      	ldrb	r3, [r2, r3]
 801235c:	f003 031f 	and.w	r3, r3, #31
 8012360:	fa21 f303 	lsr.w	r3, r1, r3
 8012364:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012366:	4b0e      	ldr	r3, [pc, #56]	; (80123a0 <HAL_RCC_ClockConfig+0x358>)
 8012368:	699b      	ldr	r3, [r3, #24]
 801236a:	f003 030f 	and.w	r3, r3, #15
 801236e:	4a0d      	ldr	r2, [pc, #52]	; (80123a4 <HAL_RCC_ClockConfig+0x35c>)
 8012370:	5cd3      	ldrb	r3, [r2, r3]
 8012372:	f003 031f 	and.w	r3, r3, #31
 8012376:	693a      	ldr	r2, [r7, #16]
 8012378:	fa22 f303 	lsr.w	r3, r2, r3
 801237c:	4a0a      	ldr	r2, [pc, #40]	; (80123a8 <HAL_RCC_ClockConfig+0x360>)
 801237e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012380:	4a0a      	ldr	r2, [pc, #40]	; (80123ac <HAL_RCC_ClockConfig+0x364>)
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8012386:	4b0a      	ldr	r3, [pc, #40]	; (80123b0 <HAL_RCC_ClockConfig+0x368>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	4618      	mov	r0, r3
 801238c:	f7f7 fa96 	bl	80098bc <HAL_InitTick>
 8012390:	4603      	mov	r3, r0
 8012392:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8012394:	7bfb      	ldrb	r3, [r7, #15]
}
 8012396:	4618      	mov	r0, r3
 8012398:	3718      	adds	r7, #24
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	58024400 	.word	0x58024400
 80123a4:	08023b80 	.word	0x08023b80
 80123a8:	240000d0 	.word	0x240000d0
 80123ac:	240000cc 	.word	0x240000cc
 80123b0:	240000d4 	.word	0x240000d4

080123b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80123b4:	b480      	push	{r7}
 80123b6:	b089      	sub	sp, #36	; 0x24
 80123b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80123ba:	4baf      	ldr	r3, [pc, #700]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80123bc:	691b      	ldr	r3, [r3, #16]
 80123be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80123c2:	2b18      	cmp	r3, #24
 80123c4:	f200 814e 	bhi.w	8012664 <HAL_RCC_GetSysClockFreq+0x2b0>
 80123c8:	a201      	add	r2, pc, #4	; (adr r2, 80123d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80123ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ce:	bf00      	nop
 80123d0:	08012435 	.word	0x08012435
 80123d4:	08012665 	.word	0x08012665
 80123d8:	08012665 	.word	0x08012665
 80123dc:	08012665 	.word	0x08012665
 80123e0:	08012665 	.word	0x08012665
 80123e4:	08012665 	.word	0x08012665
 80123e8:	08012665 	.word	0x08012665
 80123ec:	08012665 	.word	0x08012665
 80123f0:	0801245b 	.word	0x0801245b
 80123f4:	08012665 	.word	0x08012665
 80123f8:	08012665 	.word	0x08012665
 80123fc:	08012665 	.word	0x08012665
 8012400:	08012665 	.word	0x08012665
 8012404:	08012665 	.word	0x08012665
 8012408:	08012665 	.word	0x08012665
 801240c:	08012665 	.word	0x08012665
 8012410:	08012461 	.word	0x08012461
 8012414:	08012665 	.word	0x08012665
 8012418:	08012665 	.word	0x08012665
 801241c:	08012665 	.word	0x08012665
 8012420:	08012665 	.word	0x08012665
 8012424:	08012665 	.word	0x08012665
 8012428:	08012665 	.word	0x08012665
 801242c:	08012665 	.word	0x08012665
 8012430:	08012467 	.word	0x08012467
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012434:	4b90      	ldr	r3, [pc, #576]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	f003 0320 	and.w	r3, r3, #32
 801243c:	2b00      	cmp	r3, #0
 801243e:	d009      	beq.n	8012454 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012440:	4b8d      	ldr	r3, [pc, #564]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	08db      	lsrs	r3, r3, #3
 8012446:	f003 0303 	and.w	r3, r3, #3
 801244a:	4a8c      	ldr	r2, [pc, #560]	; (801267c <HAL_RCC_GetSysClockFreq+0x2c8>)
 801244c:	fa22 f303 	lsr.w	r3, r2, r3
 8012450:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8012452:	e10a      	b.n	801266a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8012454:	4b89      	ldr	r3, [pc, #548]	; (801267c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8012456:	61bb      	str	r3, [r7, #24]
    break;
 8012458:	e107      	b.n	801266a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 801245a:	4b89      	ldr	r3, [pc, #548]	; (8012680 <HAL_RCC_GetSysClockFreq+0x2cc>)
 801245c:	61bb      	str	r3, [r7, #24]
    break;
 801245e:	e104      	b.n	801266a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8012460:	4b88      	ldr	r3, [pc, #544]	; (8012684 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8012462:	61bb      	str	r3, [r7, #24]
    break;
 8012464:	e101      	b.n	801266a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012466:	4b84      	ldr	r3, [pc, #528]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8012468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801246a:	f003 0303 	and.w	r3, r3, #3
 801246e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8012470:	4b81      	ldr	r3, [pc, #516]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8012472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012474:	091b      	lsrs	r3, r3, #4
 8012476:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801247a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 801247c:	4b7e      	ldr	r3, [pc, #504]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012480:	f003 0301 	and.w	r3, r3, #1
 8012484:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012486:	4b7c      	ldr	r3, [pc, #496]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8012488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801248a:	08db      	lsrs	r3, r3, #3
 801248c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012490:	68fa      	ldr	r2, [r7, #12]
 8012492:	fb02 f303 	mul.w	r3, r2, r3
 8012496:	ee07 3a90 	vmov	s15, r3
 801249a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801249e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80124a2:	693b      	ldr	r3, [r7, #16]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	f000 80da 	beq.w	801265e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80124aa:	697b      	ldr	r3, [r7, #20]
 80124ac:	2b01      	cmp	r3, #1
 80124ae:	d05a      	beq.n	8012566 <HAL_RCC_GetSysClockFreq+0x1b2>
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	d302      	bcc.n	80124ba <HAL_RCC_GetSysClockFreq+0x106>
 80124b4:	2b02      	cmp	r3, #2
 80124b6:	d078      	beq.n	80125aa <HAL_RCC_GetSysClockFreq+0x1f6>
 80124b8:	e099      	b.n	80125ee <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80124ba:	4b6f      	ldr	r3, [pc, #444]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	f003 0320 	and.w	r3, r3, #32
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d02d      	beq.n	8012522 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80124c6:	4b6c      	ldr	r3, [pc, #432]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	08db      	lsrs	r3, r3, #3
 80124cc:	f003 0303 	and.w	r3, r3, #3
 80124d0:	4a6a      	ldr	r2, [pc, #424]	; (801267c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80124d2:	fa22 f303 	lsr.w	r3, r2, r3
 80124d6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	ee07 3a90 	vmov	s15, r3
 80124de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80124e2:	693b      	ldr	r3, [r7, #16]
 80124e4:	ee07 3a90 	vmov	s15, r3
 80124e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80124f0:	4b61      	ldr	r3, [pc, #388]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80124f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124f8:	ee07 3a90 	vmov	s15, r3
 80124fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012500:	ed97 6a02 	vldr	s12, [r7, #8]
 8012504:	eddf 5a60 	vldr	s11, [pc, #384]	; 8012688 <HAL_RCC_GetSysClockFreq+0x2d4>
 8012508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801250c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012518:	ee67 7a27 	vmul.f32	s15, s14, s15
 801251c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8012520:	e087      	b.n	8012632 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	ee07 3a90 	vmov	s15, r3
 8012528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801252c:	eddf 6a57 	vldr	s13, [pc, #348]	; 801268c <HAL_RCC_GetSysClockFreq+0x2d8>
 8012530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012534:	4b50      	ldr	r3, [pc, #320]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8012536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801253c:	ee07 3a90 	vmov	s15, r3
 8012540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012544:	ed97 6a02 	vldr	s12, [r7, #8]
 8012548:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8012688 <HAL_RCC_GetSysClockFreq+0x2d4>
 801254c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801255c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012560:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012564:	e065      	b.n	8012632 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	ee07 3a90 	vmov	s15, r3
 801256c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012570:	eddf 6a47 	vldr	s13, [pc, #284]	; 8012690 <HAL_RCC_GetSysClockFreq+0x2dc>
 8012574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012578:	4b3f      	ldr	r3, [pc, #252]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801257c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012580:	ee07 3a90 	vmov	s15, r3
 8012584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012588:	ed97 6a02 	vldr	s12, [r7, #8]
 801258c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8012688 <HAL_RCC_GetSysClockFreq+0x2d4>
 8012590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801259c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80125a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80125a8:	e043      	b.n	8012632 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80125aa:	693b      	ldr	r3, [r7, #16]
 80125ac:	ee07 3a90 	vmov	s15, r3
 80125b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125b4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8012694 <HAL_RCC_GetSysClockFreq+0x2e0>
 80125b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80125bc:	4b2e      	ldr	r3, [pc, #184]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80125be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125c4:	ee07 3a90 	vmov	s15, r3
 80125c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80125cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80125d0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8012688 <HAL_RCC_GetSysClockFreq+0x2d4>
 80125d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80125d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80125dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80125e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80125e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80125ec:	e021      	b.n	8012632 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80125ee:	693b      	ldr	r3, [r7, #16]
 80125f0:	ee07 3a90 	vmov	s15, r3
 80125f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125f8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8012690 <HAL_RCC_GetSysClockFreq+0x2dc>
 80125fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012600:	4b1d      	ldr	r3, [pc, #116]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8012602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012608:	ee07 3a90 	vmov	s15, r3
 801260c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012610:	ed97 6a02 	vldr	s12, [r7, #8]
 8012614:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8012688 <HAL_RCC_GetSysClockFreq+0x2d4>
 8012618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801261c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012628:	ee67 7a27 	vmul.f32	s15, s14, s15
 801262c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012630:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8012632:	4b11      	ldr	r3, [pc, #68]	; (8012678 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8012634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012636:	0a5b      	lsrs	r3, r3, #9
 8012638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801263c:	3301      	adds	r3, #1
 801263e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	ee07 3a90 	vmov	s15, r3
 8012646:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801264a:	edd7 6a07 	vldr	s13, [r7, #28]
 801264e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012656:	ee17 3a90 	vmov	r3, s15
 801265a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 801265c:	e005      	b.n	801266a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 801265e:	2300      	movs	r3, #0
 8012660:	61bb      	str	r3, [r7, #24]
    break;
 8012662:	e002      	b.n	801266a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8012664:	4b06      	ldr	r3, [pc, #24]	; (8012680 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8012666:	61bb      	str	r3, [r7, #24]
    break;
 8012668:	bf00      	nop
  }

  return sysclockfreq;
 801266a:	69bb      	ldr	r3, [r7, #24]
}
 801266c:	4618      	mov	r0, r3
 801266e:	3724      	adds	r7, #36	; 0x24
 8012670:	46bd      	mov	sp, r7
 8012672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012676:	4770      	bx	lr
 8012678:	58024400 	.word	0x58024400
 801267c:	03d09000 	.word	0x03d09000
 8012680:	003d0900 	.word	0x003d0900
 8012684:	007a1200 	.word	0x007a1200
 8012688:	46000000 	.word	0x46000000
 801268c:	4c742400 	.word	0x4c742400
 8012690:	4a742400 	.word	0x4a742400
 8012694:	4af42400 	.word	0x4af42400

08012698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801269e:	f7ff fe89 	bl	80123b4 <HAL_RCC_GetSysClockFreq>
 80126a2:	4601      	mov	r1, r0
 80126a4:	4b10      	ldr	r3, [pc, #64]	; (80126e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80126a6:	699b      	ldr	r3, [r3, #24]
 80126a8:	0a1b      	lsrs	r3, r3, #8
 80126aa:	f003 030f 	and.w	r3, r3, #15
 80126ae:	4a0f      	ldr	r2, [pc, #60]	; (80126ec <HAL_RCC_GetHCLKFreq+0x54>)
 80126b0:	5cd3      	ldrb	r3, [r2, r3]
 80126b2:	f003 031f 	and.w	r3, r3, #31
 80126b6:	fa21 f303 	lsr.w	r3, r1, r3
 80126ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80126bc:	4b0a      	ldr	r3, [pc, #40]	; (80126e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80126be:	699b      	ldr	r3, [r3, #24]
 80126c0:	f003 030f 	and.w	r3, r3, #15
 80126c4:	4a09      	ldr	r2, [pc, #36]	; (80126ec <HAL_RCC_GetHCLKFreq+0x54>)
 80126c6:	5cd3      	ldrb	r3, [r2, r3]
 80126c8:	f003 031f 	and.w	r3, r3, #31
 80126cc:	687a      	ldr	r2, [r7, #4]
 80126ce:	fa22 f303 	lsr.w	r3, r2, r3
 80126d2:	4a07      	ldr	r2, [pc, #28]	; (80126f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80126d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80126d6:	4a07      	ldr	r2, [pc, #28]	; (80126f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80126dc:	4b04      	ldr	r3, [pc, #16]	; (80126f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80126de:	681b      	ldr	r3, [r3, #0]
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	58024400 	.word	0x58024400
 80126ec:	08023b80 	.word	0x08023b80
 80126f0:	240000d0 	.word	0x240000d0
 80126f4:	240000cc 	.word	0x240000cc

080126f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80126fc:	f7ff ffcc 	bl	8012698 <HAL_RCC_GetHCLKFreq>
 8012700:	4601      	mov	r1, r0
 8012702:	4b06      	ldr	r3, [pc, #24]	; (801271c <HAL_RCC_GetPCLK1Freq+0x24>)
 8012704:	69db      	ldr	r3, [r3, #28]
 8012706:	091b      	lsrs	r3, r3, #4
 8012708:	f003 0307 	and.w	r3, r3, #7
 801270c:	4a04      	ldr	r2, [pc, #16]	; (8012720 <HAL_RCC_GetPCLK1Freq+0x28>)
 801270e:	5cd3      	ldrb	r3, [r2, r3]
 8012710:	f003 031f 	and.w	r3, r3, #31
 8012714:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8012718:	4618      	mov	r0, r3
 801271a:	bd80      	pop	{r7, pc}
 801271c:	58024400 	.word	0x58024400
 8012720:	08023b80 	.word	0x08023b80

08012724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8012728:	f7ff ffb6 	bl	8012698 <HAL_RCC_GetHCLKFreq>
 801272c:	4601      	mov	r1, r0
 801272e:	4b06      	ldr	r3, [pc, #24]	; (8012748 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012730:	69db      	ldr	r3, [r3, #28]
 8012732:	0a1b      	lsrs	r3, r3, #8
 8012734:	f003 0307 	and.w	r3, r3, #7
 8012738:	4a04      	ldr	r2, [pc, #16]	; (801274c <HAL_RCC_GetPCLK2Freq+0x28>)
 801273a:	5cd3      	ldrb	r3, [r2, r3]
 801273c:	f003 031f 	and.w	r3, r3, #31
 8012740:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8012744:	4618      	mov	r0, r3
 8012746:	bd80      	pop	{r7, pc}
 8012748:	58024400 	.word	0x58024400
 801274c:	08023b80 	.word	0x08023b80

08012750 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	223f      	movs	r2, #63	; 0x3f
 801275e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012760:	4b1a      	ldr	r3, [pc, #104]	; (80127cc <HAL_RCC_GetClockConfig+0x7c>)
 8012762:	691b      	ldr	r3, [r3, #16]
 8012764:	f003 0207 	and.w	r2, r3, #7
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 801276c:	4b17      	ldr	r3, [pc, #92]	; (80127cc <HAL_RCC_GetClockConfig+0x7c>)
 801276e:	699b      	ldr	r3, [r3, #24]
 8012770:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8012778:	4b14      	ldr	r3, [pc, #80]	; (80127cc <HAL_RCC_GetClockConfig+0x7c>)
 801277a:	699b      	ldr	r3, [r3, #24]
 801277c:	f003 020f 	and.w	r2, r3, #15
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8012784:	4b11      	ldr	r3, [pc, #68]	; (80127cc <HAL_RCC_GetClockConfig+0x7c>)
 8012786:	699b      	ldr	r3, [r3, #24]
 8012788:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8012790:	4b0e      	ldr	r3, [pc, #56]	; (80127cc <HAL_RCC_GetClockConfig+0x7c>)
 8012792:	69db      	ldr	r3, [r3, #28]
 8012794:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 801279c:	4b0b      	ldr	r3, [pc, #44]	; (80127cc <HAL_RCC_GetClockConfig+0x7c>)
 801279e:	69db      	ldr	r3, [r3, #28]
 80127a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80127a8:	4b08      	ldr	r3, [pc, #32]	; (80127cc <HAL_RCC_GetClockConfig+0x7c>)
 80127aa:	6a1b      	ldr	r3, [r3, #32]
 80127ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80127b4:	4b06      	ldr	r3, [pc, #24]	; (80127d0 <HAL_RCC_GetClockConfig+0x80>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	f003 020f 	and.w	r2, r3, #15
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	601a      	str	r2, [r3, #0]
}
 80127c0:	bf00      	nop
 80127c2:	370c      	adds	r7, #12
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr
 80127cc:	58024400 	.word	0x58024400
 80127d0:	52002000 	.word	0x52002000

080127d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b086      	sub	sp, #24
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80127dc:	2300      	movs	r3, #0
 80127de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80127e0:	2300      	movs	r3, #0
 80127e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d03d      	beq.n	801286c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80127f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80127f8:	d013      	beq.n	8012822 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80127fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80127fe:	d802      	bhi.n	8012806 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8012800:	2b00      	cmp	r3, #0
 8012802:	d007      	beq.n	8012814 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8012804:	e01f      	b.n	8012846 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8012806:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801280a:	d013      	beq.n	8012834 <HAL_RCCEx_PeriphCLKConfig+0x60>
 801280c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012810:	d01c      	beq.n	801284c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8012812:	e018      	b.n	8012846 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012814:	4baf      	ldr	r3, [pc, #700]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8012816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012818:	4aae      	ldr	r2, [pc, #696]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801281a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801281e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012820:	e015      	b.n	801284e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	3304      	adds	r3, #4
 8012826:	2102      	movs	r1, #2
 8012828:	4618      	mov	r0, r3
 801282a:	f001 fd33 	bl	8014294 <RCCEx_PLL2_Config>
 801282e:	4603      	mov	r3, r0
 8012830:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012832:	e00c      	b.n	801284e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	3324      	adds	r3, #36	; 0x24
 8012838:	2102      	movs	r1, #2
 801283a:	4618      	mov	r0, r3
 801283c:	f001 fddc 	bl	80143f8 <RCCEx_PLL3_Config>
 8012840:	4603      	mov	r3, r0
 8012842:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8012844:	e003      	b.n	801284e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012846:	2301      	movs	r3, #1
 8012848:	75fb      	strb	r3, [r7, #23]
      break;
 801284a:	e000      	b.n	801284e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 801284c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801284e:	7dfb      	ldrb	r3, [r7, #23]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d109      	bne.n	8012868 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8012854:	4b9f      	ldr	r3, [pc, #636]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8012856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012858:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012860:	499c      	ldr	r1, [pc, #624]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8012862:	4313      	orrs	r3, r2
 8012864:	650b      	str	r3, [r1, #80]	; 0x50
 8012866:	e001      	b.n	801286c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012868:	7dfb      	ldrb	r3, [r7, #23]
 801286a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012874:	2b00      	cmp	r3, #0
 8012876:	d03d      	beq.n	80128f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801287c:	2b04      	cmp	r3, #4
 801287e:	d826      	bhi.n	80128ce <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8012880:	a201      	add	r2, pc, #4	; (adr r2, 8012888 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8012882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012886:	bf00      	nop
 8012888:	0801289d 	.word	0x0801289d
 801288c:	080128ab 	.word	0x080128ab
 8012890:	080128bd 	.word	0x080128bd
 8012894:	080128d5 	.word	0x080128d5
 8012898:	080128d5 	.word	0x080128d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801289c:	4b8d      	ldr	r3, [pc, #564]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128a0:	4a8c      	ldr	r2, [pc, #560]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80128a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80128a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80128a8:	e015      	b.n	80128d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	3304      	adds	r3, #4
 80128ae:	2100      	movs	r1, #0
 80128b0:	4618      	mov	r0, r3
 80128b2:	f001 fcef 	bl	8014294 <RCCEx_PLL2_Config>
 80128b6:	4603      	mov	r3, r0
 80128b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80128ba:	e00c      	b.n	80128d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	3324      	adds	r3, #36	; 0x24
 80128c0:	2100      	movs	r1, #0
 80128c2:	4618      	mov	r0, r3
 80128c4:	f001 fd98 	bl	80143f8 <RCCEx_PLL3_Config>
 80128c8:	4603      	mov	r3, r0
 80128ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80128cc:	e003      	b.n	80128d6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80128ce:	2301      	movs	r3, #1
 80128d0:	75fb      	strb	r3, [r7, #23]
      break;
 80128d2:	e000      	b.n	80128d6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80128d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80128d6:	7dfb      	ldrb	r3, [r7, #23]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d109      	bne.n	80128f0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80128dc:	4b7d      	ldr	r3, [pc, #500]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80128de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128e0:	f023 0207 	bic.w	r2, r3, #7
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128e8:	497a      	ldr	r1, [pc, #488]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80128ea:	4313      	orrs	r3, r2
 80128ec:	650b      	str	r3, [r1, #80]	; 0x50
 80128ee:	e001      	b.n	80128f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80128f0:	7dfb      	ldrb	r3, [r7, #23]
 80128f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d03e      	beq.n	801297e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012904:	2b80      	cmp	r3, #128	; 0x80
 8012906:	d01c      	beq.n	8012942 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8012908:	2b80      	cmp	r3, #128	; 0x80
 801290a:	d804      	bhi.n	8012916 <HAL_RCCEx_PeriphCLKConfig+0x142>
 801290c:	2b00      	cmp	r3, #0
 801290e:	d008      	beq.n	8012922 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8012910:	2b40      	cmp	r3, #64	; 0x40
 8012912:	d00d      	beq.n	8012930 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8012914:	e01e      	b.n	8012954 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8012916:	2bc0      	cmp	r3, #192	; 0xc0
 8012918:	d01f      	beq.n	801295a <HAL_RCCEx_PeriphCLKConfig+0x186>
 801291a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801291e:	d01e      	beq.n	801295e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8012920:	e018      	b.n	8012954 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012922:	4b6c      	ldr	r3, [pc, #432]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8012924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012926:	4a6b      	ldr	r2, [pc, #428]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8012928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801292c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 801292e:	e017      	b.n	8012960 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	3304      	adds	r3, #4
 8012934:	2100      	movs	r1, #0
 8012936:	4618      	mov	r0, r3
 8012938:	f001 fcac 	bl	8014294 <RCCEx_PLL2_Config>
 801293c:	4603      	mov	r3, r0
 801293e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012940:	e00e      	b.n	8012960 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	3324      	adds	r3, #36	; 0x24
 8012946:	2100      	movs	r1, #0
 8012948:	4618      	mov	r0, r3
 801294a:	f001 fd55 	bl	80143f8 <RCCEx_PLL3_Config>
 801294e:	4603      	mov	r3, r0
 8012950:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8012952:	e005      	b.n	8012960 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012954:	2301      	movs	r3, #1
 8012956:	75fb      	strb	r3, [r7, #23]
      break;
 8012958:	e002      	b.n	8012960 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 801295a:	bf00      	nop
 801295c:	e000      	b.n	8012960 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 801295e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012960:	7dfb      	ldrb	r3, [r7, #23]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d109      	bne.n	801297a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8012966:	4b5b      	ldr	r3, [pc, #364]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8012968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801296a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012972:	4958      	ldr	r1, [pc, #352]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8012974:	4313      	orrs	r3, r2
 8012976:	650b      	str	r3, [r1, #80]	; 0x50
 8012978:	e001      	b.n	801297e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801297a:	7dfb      	ldrb	r3, [r7, #23]
 801297c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012986:	2b00      	cmp	r3, #0
 8012988:	d044      	beq.n	8012a14 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012994:	d01f      	beq.n	80129d6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8012996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801299a:	d805      	bhi.n	80129a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 801299c:	2b00      	cmp	r3, #0
 801299e:	d00a      	beq.n	80129b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80129a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80129a4:	d00e      	beq.n	80129c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80129a6:	e01f      	b.n	80129e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80129a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80129ac:	d01f      	beq.n	80129ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80129ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80129b2:	d01e      	beq.n	80129f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80129b4:	e018      	b.n	80129e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80129b6:	4b47      	ldr	r3, [pc, #284]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80129b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129ba:	4a46      	ldr	r2, [pc, #280]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80129bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80129c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80129c2:	e017      	b.n	80129f4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	3304      	adds	r3, #4
 80129c8:	2100      	movs	r1, #0
 80129ca:	4618      	mov	r0, r3
 80129cc:	f001 fc62 	bl	8014294 <RCCEx_PLL2_Config>
 80129d0:	4603      	mov	r3, r0
 80129d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80129d4:	e00e      	b.n	80129f4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	3324      	adds	r3, #36	; 0x24
 80129da:	2100      	movs	r1, #0
 80129dc:	4618      	mov	r0, r3
 80129de:	f001 fd0b 	bl	80143f8 <RCCEx_PLL3_Config>
 80129e2:	4603      	mov	r3, r0
 80129e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80129e6:	e005      	b.n	80129f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80129e8:	2301      	movs	r3, #1
 80129ea:	75fb      	strb	r3, [r7, #23]
      break;
 80129ec:	e002      	b.n	80129f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80129ee:	bf00      	nop
 80129f0:	e000      	b.n	80129f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80129f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80129f4:	7dfb      	ldrb	r3, [r7, #23]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d10a      	bne.n	8012a10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80129fa:	4b36      	ldr	r3, [pc, #216]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80129fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129fe:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012a08:	4932      	ldr	r1, [pc, #200]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8012a0a:	4313      	orrs	r3, r2
 8012a0c:	658b      	str	r3, [r1, #88]	; 0x58
 8012a0e:	e001      	b.n	8012a14 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012a10:	7dfb      	ldrb	r3, [r7, #23]
 8012a12:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d044      	beq.n	8012aaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012a26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012a2a:	d01f      	beq.n	8012a6c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8012a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012a30:	d805      	bhi.n	8012a3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d00a      	beq.n	8012a4c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8012a36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012a3a:	d00e      	beq.n	8012a5a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8012a3c:	e01f      	b.n	8012a7e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8012a3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8012a42:	d01f      	beq.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8012a44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8012a48:	d01e      	beq.n	8012a88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8012a4a:	e018      	b.n	8012a7e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012a4c:	4b21      	ldr	r3, [pc, #132]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8012a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a50:	4a20      	ldr	r2, [pc, #128]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8012a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012a58:	e017      	b.n	8012a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	3304      	adds	r3, #4
 8012a5e:	2100      	movs	r1, #0
 8012a60:	4618      	mov	r0, r3
 8012a62:	f001 fc17 	bl	8014294 <RCCEx_PLL2_Config>
 8012a66:	4603      	mov	r3, r0
 8012a68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8012a6a:	e00e      	b.n	8012a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	3324      	adds	r3, #36	; 0x24
 8012a70:	2100      	movs	r1, #0
 8012a72:	4618      	mov	r0, r3
 8012a74:	f001 fcc0 	bl	80143f8 <RCCEx_PLL3_Config>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8012a7c:	e005      	b.n	8012a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8012a7e:	2301      	movs	r3, #1
 8012a80:	75fb      	strb	r3, [r7, #23]
      break;
 8012a82:	e002      	b.n	8012a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8012a84:	bf00      	nop
 8012a86:	e000      	b.n	8012a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8012a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012a8a:	7dfb      	ldrb	r3, [r7, #23]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d10a      	bne.n	8012aa6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8012a90:	4b10      	ldr	r3, [pc, #64]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8012a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a94:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012a9e:	490d      	ldr	r1, [pc, #52]	; (8012ad4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8012aa0:	4313      	orrs	r3, r2
 8012aa2:	658b      	str	r3, [r1, #88]	; 0x58
 8012aa4:	e001      	b.n	8012aaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012aa6:	7dfb      	ldrb	r3, [r7, #23]
 8012aa8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d035      	beq.n	8012b22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012aba:	2b10      	cmp	r3, #16
 8012abc:	d00c      	beq.n	8012ad8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8012abe:	2b10      	cmp	r3, #16
 8012ac0:	d802      	bhi.n	8012ac8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d01b      	beq.n	8012afe <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8012ac6:	e017      	b.n	8012af8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8012ac8:	2b20      	cmp	r3, #32
 8012aca:	d00c      	beq.n	8012ae6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8012acc:	2b30      	cmp	r3, #48	; 0x30
 8012ace:	d018      	beq.n	8012b02 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8012ad0:	e012      	b.n	8012af8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8012ad2:	bf00      	nop
 8012ad4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012ad8:	4baf      	ldr	r3, [pc, #700]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012adc:	4aae      	ldr	r2, [pc, #696]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8012ae4:	e00e      	b.n	8012b04 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	3304      	adds	r3, #4
 8012aea:	2102      	movs	r1, #2
 8012aec:	4618      	mov	r0, r3
 8012aee:	f001 fbd1 	bl	8014294 <RCCEx_PLL2_Config>
 8012af2:	4603      	mov	r3, r0
 8012af4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8012af6:	e005      	b.n	8012b04 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8012af8:	2301      	movs	r3, #1
 8012afa:	75fb      	strb	r3, [r7, #23]
      break;
 8012afc:	e002      	b.n	8012b04 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8012afe:	bf00      	nop
 8012b00:	e000      	b.n	8012b04 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8012b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012b04:	7dfb      	ldrb	r3, [r7, #23]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d109      	bne.n	8012b1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8012b0a:	4ba3      	ldr	r3, [pc, #652]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012b16:	49a0      	ldr	r1, [pc, #640]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012b18:	4313      	orrs	r3, r2
 8012b1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8012b1c:	e001      	b.n	8012b22 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b1e:	7dfb      	ldrb	r3, [r7, #23]
 8012b20:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d042      	beq.n	8012bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012b36:	d01f      	beq.n	8012b78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8012b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012b3c:	d805      	bhi.n	8012b4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d00a      	beq.n	8012b58 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8012b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b46:	d00e      	beq.n	8012b66 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8012b48:	e01f      	b.n	8012b8a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8012b4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012b4e:	d01f      	beq.n	8012b90 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8012b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012b54:	d01e      	beq.n	8012b94 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8012b56:	e018      	b.n	8012b8a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012b58:	4b8f      	ldr	r3, [pc, #572]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b5c:	4a8e      	ldr	r2, [pc, #568]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012b62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8012b64:	e017      	b.n	8012b96 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	3304      	adds	r3, #4
 8012b6a:	2100      	movs	r1, #0
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f001 fb91 	bl	8014294 <RCCEx_PLL2_Config>
 8012b72:	4603      	mov	r3, r0
 8012b74:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8012b76:	e00e      	b.n	8012b96 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	3324      	adds	r3, #36	; 0x24
 8012b7c:	2100      	movs	r1, #0
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f001 fc3a 	bl	80143f8 <RCCEx_PLL3_Config>
 8012b84:	4603      	mov	r3, r0
 8012b86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8012b88:	e005      	b.n	8012b96 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8012b8e:	e002      	b.n	8012b96 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8012b90:	bf00      	nop
 8012b92:	e000      	b.n	8012b96 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8012b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012b96:	7dfb      	ldrb	r3, [r7, #23]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d109      	bne.n	8012bb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8012b9c:	4b7e      	ldr	r3, [pc, #504]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ba0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012ba8:	497b      	ldr	r1, [pc, #492]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012baa:	4313      	orrs	r3, r2
 8012bac:	650b      	str	r3, [r1, #80]	; 0x50
 8012bae:	e001      	b.n	8012bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012bb0:	7dfb      	ldrb	r3, [r7, #23]
 8012bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d042      	beq.n	8012c46 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012bc8:	d01b      	beq.n	8012c02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8012bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012bce:	d805      	bhi.n	8012bdc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d022      	beq.n	8012c1a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8012bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012bd8:	d00a      	beq.n	8012bf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8012bda:	e01b      	b.n	8012c14 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8012bdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012be0:	d01d      	beq.n	8012c1e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8012be2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8012be6:	d01c      	beq.n	8012c22 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8012be8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012bec:	d01b      	beq.n	8012c26 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8012bee:	e011      	b.n	8012c14 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	3304      	adds	r3, #4
 8012bf4:	2101      	movs	r1, #1
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f001 fb4c 	bl	8014294 <RCCEx_PLL2_Config>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8012c00:	e012      	b.n	8012c28 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	3324      	adds	r3, #36	; 0x24
 8012c06:	2101      	movs	r1, #1
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f001 fbf5 	bl	80143f8 <RCCEx_PLL3_Config>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8012c12:	e009      	b.n	8012c28 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012c14:	2301      	movs	r3, #1
 8012c16:	75fb      	strb	r3, [r7, #23]
      break;
 8012c18:	e006      	b.n	8012c28 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8012c1a:	bf00      	nop
 8012c1c:	e004      	b.n	8012c28 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8012c1e:	bf00      	nop
 8012c20:	e002      	b.n	8012c28 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8012c22:	bf00      	nop
 8012c24:	e000      	b.n	8012c28 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8012c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012c28:	7dfb      	ldrb	r3, [r7, #23]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d109      	bne.n	8012c42 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8012c2e:	4b5a      	ldr	r3, [pc, #360]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c32:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c3a:	4957      	ldr	r1, [pc, #348]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012c3c:	4313      	orrs	r3, r2
 8012c3e:	650b      	str	r3, [r1, #80]	; 0x50
 8012c40:	e001      	b.n	8012c46 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c42:	7dfb      	ldrb	r3, [r7, #23]
 8012c44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d044      	beq.n	8012cdc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012c5c:	d01b      	beq.n	8012c96 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8012c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012c62:	d805      	bhi.n	8012c70 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d022      	beq.n	8012cae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8012c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012c6c:	d00a      	beq.n	8012c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8012c6e:	e01b      	b.n	8012ca8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8012c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c74:	d01d      	beq.n	8012cb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8012c76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012c7a:	d01c      	beq.n	8012cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8012c7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012c80:	d01b      	beq.n	8012cba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8012c82:	e011      	b.n	8012ca8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	3304      	adds	r3, #4
 8012c88:	2101      	movs	r1, #1
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f001 fb02 	bl	8014294 <RCCEx_PLL2_Config>
 8012c90:	4603      	mov	r3, r0
 8012c92:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8012c94:	e012      	b.n	8012cbc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	3324      	adds	r3, #36	; 0x24
 8012c9a:	2101      	movs	r1, #1
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f001 fbab 	bl	80143f8 <RCCEx_PLL3_Config>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8012ca6:	e009      	b.n	8012cbc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8012ca8:	2301      	movs	r3, #1
 8012caa:	75fb      	strb	r3, [r7, #23]
      break;
 8012cac:	e006      	b.n	8012cbc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8012cae:	bf00      	nop
 8012cb0:	e004      	b.n	8012cbc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8012cb2:	bf00      	nop
 8012cb4:	e002      	b.n	8012cbc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8012cb6:	bf00      	nop
 8012cb8:	e000      	b.n	8012cbc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8012cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012cbc:	7dfb      	ldrb	r3, [r7, #23]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d10a      	bne.n	8012cd8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8012cc2:	4b35      	ldr	r3, [pc, #212]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cc6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012cd0:	4931      	ldr	r1, [pc, #196]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012cd2:	4313      	orrs	r3, r2
 8012cd4:	658b      	str	r3, [r1, #88]	; 0x58
 8012cd6:	e001      	b.n	8012cdc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012cd8:	7dfb      	ldrb	r3, [r7, #23]
 8012cda:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d02d      	beq.n	8012d44 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012cf0:	d005      	beq.n	8012cfe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8012cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012cf6:	d009      	beq.n	8012d0c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d013      	beq.n	8012d24 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8012cfc:	e00f      	b.n	8012d1e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012cfe:	4b26      	ldr	r3, [pc, #152]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d02:	4a25      	ldr	r2, [pc, #148]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012d08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8012d0a:	e00c      	b.n	8012d26 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	3304      	adds	r3, #4
 8012d10:	2101      	movs	r1, #1
 8012d12:	4618      	mov	r0, r3
 8012d14:	f001 fabe 	bl	8014294 <RCCEx_PLL2_Config>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8012d1c:	e003      	b.n	8012d26 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012d1e:	2301      	movs	r3, #1
 8012d20:	75fb      	strb	r3, [r7, #23]
      break;
 8012d22:	e000      	b.n	8012d26 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8012d24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012d26:	7dfb      	ldrb	r3, [r7, #23]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d109      	bne.n	8012d40 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8012d2c:	4b1a      	ldr	r3, [pc, #104]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d38:	4917      	ldr	r1, [pc, #92]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012d3a:	4313      	orrs	r3, r2
 8012d3c:	650b      	str	r3, [r1, #80]	; 0x50
 8012d3e:	e001      	b.n	8012d44 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012d40:	7dfb      	ldrb	r3, [r7, #23]
 8012d42:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d035      	beq.n	8012dbc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d54:	2b03      	cmp	r3, #3
 8012d56:	d81b      	bhi.n	8012d90 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8012d58:	a201      	add	r2, pc, #4	; (adr r2, 8012d60 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8012d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d5e:	bf00      	nop
 8012d60:	08012d9d 	.word	0x08012d9d
 8012d64:	08012d71 	.word	0x08012d71
 8012d68:	08012d7f 	.word	0x08012d7f
 8012d6c:	08012d9d 	.word	0x08012d9d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012d70:	4b09      	ldr	r3, [pc, #36]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d74:	4a08      	ldr	r2, [pc, #32]	; (8012d98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8012d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8012d7c:	e00f      	b.n	8012d9e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	3304      	adds	r3, #4
 8012d82:	2102      	movs	r1, #2
 8012d84:	4618      	mov	r0, r3
 8012d86:	f001 fa85 	bl	8014294 <RCCEx_PLL2_Config>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8012d8e:	e006      	b.n	8012d9e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8012d90:	2301      	movs	r3, #1
 8012d92:	75fb      	strb	r3, [r7, #23]
      break;
 8012d94:	e003      	b.n	8012d9e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8012d96:	bf00      	nop
 8012d98:	58024400 	.word	0x58024400
      break;
 8012d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012d9e:	7dfb      	ldrb	r3, [r7, #23]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d109      	bne.n	8012db8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8012da4:	4bba      	ldr	r3, [pc, #744]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012da8:	f023 0203 	bic.w	r2, r3, #3
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012db0:	49b7      	ldr	r1, [pc, #732]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012db2:	4313      	orrs	r3, r2
 8012db4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8012db6:	e001      	b.n	8012dbc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012db8:	7dfb      	ldrb	r3, [r7, #23]
 8012dba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	f000 8086 	beq.w	8012ed6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012dca:	4bb2      	ldr	r3, [pc, #712]	; (8013094 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	4ab1      	ldr	r2, [pc, #708]	; (8013094 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8012dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012dd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012dd6:	f7f8 f9ab 	bl	800b130 <HAL_GetTick>
 8012dda:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012ddc:	e009      	b.n	8012df2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012dde:	f7f8 f9a7 	bl	800b130 <HAL_GetTick>
 8012de2:	4602      	mov	r2, r0
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	1ad3      	subs	r3, r2, r3
 8012de8:	2b64      	cmp	r3, #100	; 0x64
 8012dea:	d902      	bls.n	8012df2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8012dec:	2303      	movs	r3, #3
 8012dee:	75fb      	strb	r3, [r7, #23]
        break;
 8012df0:	e005      	b.n	8012dfe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012df2:	4ba8      	ldr	r3, [pc, #672]	; (8013094 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d0ef      	beq.n	8012dde <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8012dfe:	7dfb      	ldrb	r3, [r7, #23]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d166      	bne.n	8012ed2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012e04:	4ba2      	ldr	r3, [pc, #648]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012e06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012e0e:	4053      	eors	r3, r2
 8012e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d013      	beq.n	8012e40 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012e18:	4b9d      	ldr	r3, [pc, #628]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012e20:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012e22:	4b9b      	ldr	r3, [pc, #620]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e26:	4a9a      	ldr	r2, [pc, #616]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012e2c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8012e2e:	4b98      	ldr	r3, [pc, #608]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e32:	4a97      	ldr	r2, [pc, #604]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012e38:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8012e3a:	4a95      	ldr	r2, [pc, #596]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e4a:	d115      	bne.n	8012e78 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012e4c:	f7f8 f970 	bl	800b130 <HAL_GetTick>
 8012e50:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012e52:	e00b      	b.n	8012e6c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012e54:	f7f8 f96c 	bl	800b130 <HAL_GetTick>
 8012e58:	4602      	mov	r2, r0
 8012e5a:	693b      	ldr	r3, [r7, #16]
 8012e5c:	1ad3      	subs	r3, r2, r3
 8012e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e62:	4293      	cmp	r3, r2
 8012e64:	d902      	bls.n	8012e6c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8012e66:	2303      	movs	r3, #3
 8012e68:	75fb      	strb	r3, [r7, #23]
            break;
 8012e6a:	e005      	b.n	8012e78 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012e6c:	4b88      	ldr	r3, [pc, #544]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e70:	f003 0302 	and.w	r3, r3, #2
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d0ed      	beq.n	8012e54 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8012e78:	7dfb      	ldrb	r3, [r7, #23]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d126      	bne.n	8012ecc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012e8c:	d10d      	bne.n	8012eaa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8012e8e:	4b80      	ldr	r3, [pc, #512]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012e90:	691b      	ldr	r3, [r3, #16]
 8012e92:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012e9c:	0919      	lsrs	r1, r3, #4
 8012e9e:	4b7e      	ldr	r3, [pc, #504]	; (8013098 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8012ea0:	400b      	ands	r3, r1
 8012ea2:	497b      	ldr	r1, [pc, #492]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012ea4:	4313      	orrs	r3, r2
 8012ea6:	610b      	str	r3, [r1, #16]
 8012ea8:	e005      	b.n	8012eb6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8012eaa:	4b79      	ldr	r3, [pc, #484]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012eac:	691b      	ldr	r3, [r3, #16]
 8012eae:	4a78      	ldr	r2, [pc, #480]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012eb0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012eb4:	6113      	str	r3, [r2, #16]
 8012eb6:	4b76      	ldr	r3, [pc, #472]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012ec4:	4972      	ldr	r1, [pc, #456]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012ec6:	4313      	orrs	r3, r2
 8012ec8:	670b      	str	r3, [r1, #112]	; 0x70
 8012eca:	e004      	b.n	8012ed6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012ecc:	7dfb      	ldrb	r3, [r7, #23]
 8012ece:	75bb      	strb	r3, [r7, #22]
 8012ed0:	e001      	b.n	8012ed6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ed2:	7dfb      	ldrb	r3, [r7, #23]
 8012ed4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	f003 0301 	and.w	r3, r3, #1
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d07d      	beq.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ee6:	2b28      	cmp	r3, #40	; 0x28
 8012ee8:	d866      	bhi.n	8012fb8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8012eea:	a201      	add	r2, pc, #4	; (adr r2, 8012ef0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8012eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ef0:	08012fbf 	.word	0x08012fbf
 8012ef4:	08012fb9 	.word	0x08012fb9
 8012ef8:	08012fb9 	.word	0x08012fb9
 8012efc:	08012fb9 	.word	0x08012fb9
 8012f00:	08012fb9 	.word	0x08012fb9
 8012f04:	08012fb9 	.word	0x08012fb9
 8012f08:	08012fb9 	.word	0x08012fb9
 8012f0c:	08012fb9 	.word	0x08012fb9
 8012f10:	08012f95 	.word	0x08012f95
 8012f14:	08012fb9 	.word	0x08012fb9
 8012f18:	08012fb9 	.word	0x08012fb9
 8012f1c:	08012fb9 	.word	0x08012fb9
 8012f20:	08012fb9 	.word	0x08012fb9
 8012f24:	08012fb9 	.word	0x08012fb9
 8012f28:	08012fb9 	.word	0x08012fb9
 8012f2c:	08012fb9 	.word	0x08012fb9
 8012f30:	08012fa7 	.word	0x08012fa7
 8012f34:	08012fb9 	.word	0x08012fb9
 8012f38:	08012fb9 	.word	0x08012fb9
 8012f3c:	08012fb9 	.word	0x08012fb9
 8012f40:	08012fb9 	.word	0x08012fb9
 8012f44:	08012fb9 	.word	0x08012fb9
 8012f48:	08012fb9 	.word	0x08012fb9
 8012f4c:	08012fb9 	.word	0x08012fb9
 8012f50:	08012fbf 	.word	0x08012fbf
 8012f54:	08012fb9 	.word	0x08012fb9
 8012f58:	08012fb9 	.word	0x08012fb9
 8012f5c:	08012fb9 	.word	0x08012fb9
 8012f60:	08012fb9 	.word	0x08012fb9
 8012f64:	08012fb9 	.word	0x08012fb9
 8012f68:	08012fb9 	.word	0x08012fb9
 8012f6c:	08012fb9 	.word	0x08012fb9
 8012f70:	08012fbf 	.word	0x08012fbf
 8012f74:	08012fb9 	.word	0x08012fb9
 8012f78:	08012fb9 	.word	0x08012fb9
 8012f7c:	08012fb9 	.word	0x08012fb9
 8012f80:	08012fb9 	.word	0x08012fb9
 8012f84:	08012fb9 	.word	0x08012fb9
 8012f88:	08012fb9 	.word	0x08012fb9
 8012f8c:	08012fb9 	.word	0x08012fb9
 8012f90:	08012fbf 	.word	0x08012fbf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	3304      	adds	r3, #4
 8012f98:	2101      	movs	r1, #1
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f001 f97a 	bl	8014294 <RCCEx_PLL2_Config>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8012fa4:	e00c      	b.n	8012fc0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	3324      	adds	r3, #36	; 0x24
 8012faa:	2101      	movs	r1, #1
 8012fac:	4618      	mov	r0, r3
 8012fae:	f001 fa23 	bl	80143f8 <RCCEx_PLL3_Config>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8012fb6:	e003      	b.n	8012fc0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8012fb8:	2301      	movs	r3, #1
 8012fba:	75fb      	strb	r3, [r7, #23]
      break;
 8012fbc:	e000      	b.n	8012fc0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8012fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8012fc0:	7dfb      	ldrb	r3, [r7, #23]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d109      	bne.n	8012fda <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012fc6:	4b32      	ldr	r3, [pc, #200]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012fd2:	492f      	ldr	r1, [pc, #188]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8012fd4:	4313      	orrs	r3, r2
 8012fd6:	654b      	str	r3, [r1, #84]	; 0x54
 8012fd8:	e001      	b.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012fda:	7dfb      	ldrb	r3, [r7, #23]
 8012fdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f003 0302 	and.w	r3, r3, #2
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d037      	beq.n	801305a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fee:	2b05      	cmp	r3, #5
 8012ff0:	d820      	bhi.n	8013034 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8012ff2:	a201      	add	r2, pc, #4	; (adr r2, 8012ff8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8012ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ff8:	0801303b 	.word	0x0801303b
 8012ffc:	08013011 	.word	0x08013011
 8013000:	08013023 	.word	0x08013023
 8013004:	0801303b 	.word	0x0801303b
 8013008:	0801303b 	.word	0x0801303b
 801300c:	0801303b 	.word	0x0801303b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	3304      	adds	r3, #4
 8013014:	2101      	movs	r1, #1
 8013016:	4618      	mov	r0, r3
 8013018:	f001 f93c 	bl	8014294 <RCCEx_PLL2_Config>
 801301c:	4603      	mov	r3, r0
 801301e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8013020:	e00c      	b.n	801303c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	3324      	adds	r3, #36	; 0x24
 8013026:	2101      	movs	r1, #1
 8013028:	4618      	mov	r0, r3
 801302a:	f001 f9e5 	bl	80143f8 <RCCEx_PLL3_Config>
 801302e:	4603      	mov	r3, r0
 8013030:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8013032:	e003      	b.n	801303c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013034:	2301      	movs	r3, #1
 8013036:	75fb      	strb	r3, [r7, #23]
      break;
 8013038:	e000      	b.n	801303c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 801303a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801303c:	7dfb      	ldrb	r3, [r7, #23]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d109      	bne.n	8013056 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8013042:	4b13      	ldr	r3, [pc, #76]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8013044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013046:	f023 0207 	bic.w	r2, r3, #7
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801304e:	4910      	ldr	r1, [pc, #64]	; (8013090 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8013050:	4313      	orrs	r3, r2
 8013052:	654b      	str	r3, [r1, #84]	; 0x54
 8013054:	e001      	b.n	801305a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013056:	7dfb      	ldrb	r3, [r7, #23]
 8013058:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	f003 0304 	and.w	r3, r3, #4
 8013062:	2b00      	cmp	r3, #0
 8013064:	d040      	beq.n	80130e8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801306c:	2b05      	cmp	r3, #5
 801306e:	d827      	bhi.n	80130c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8013070:	a201      	add	r2, pc, #4	; (adr r2, 8013078 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8013072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013076:	bf00      	nop
 8013078:	080130c7 	.word	0x080130c7
 801307c:	0801309d 	.word	0x0801309d
 8013080:	080130af 	.word	0x080130af
 8013084:	080130c7 	.word	0x080130c7
 8013088:	080130c7 	.word	0x080130c7
 801308c:	080130c7 	.word	0x080130c7
 8013090:	58024400 	.word	0x58024400
 8013094:	58024800 	.word	0x58024800
 8013098:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	3304      	adds	r3, #4
 80130a0:	2101      	movs	r1, #1
 80130a2:	4618      	mov	r0, r3
 80130a4:	f001 f8f6 	bl	8014294 <RCCEx_PLL2_Config>
 80130a8:	4603      	mov	r3, r0
 80130aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80130ac:	e00c      	b.n	80130c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	3324      	adds	r3, #36	; 0x24
 80130b2:	2101      	movs	r1, #1
 80130b4:	4618      	mov	r0, r3
 80130b6:	f001 f99f 	bl	80143f8 <RCCEx_PLL3_Config>
 80130ba:	4603      	mov	r3, r0
 80130bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80130be:	e003      	b.n	80130c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80130c0:	2301      	movs	r3, #1
 80130c2:	75fb      	strb	r3, [r7, #23]
      break;
 80130c4:	e000      	b.n	80130c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80130c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80130c8:	7dfb      	ldrb	r3, [r7, #23]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d10a      	bne.n	80130e4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80130ce:	4bb2      	ldr	r3, [pc, #712]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80130d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130d2:	f023 0207 	bic.w	r2, r3, #7
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130dc:	49ae      	ldr	r1, [pc, #696]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80130de:	4313      	orrs	r3, r2
 80130e0:	658b      	str	r3, [r1, #88]	; 0x58
 80130e2:	e001      	b.n	80130e8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130e4:	7dfb      	ldrb	r3, [r7, #23]
 80130e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	f003 0320 	and.w	r3, r3, #32
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d044      	beq.n	801317e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80130fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80130fe:	d01b      	beq.n	8013138 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8013100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013104:	d805      	bhi.n	8013112 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8013106:	2b00      	cmp	r3, #0
 8013108:	d022      	beq.n	8013150 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 801310a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801310e:	d00a      	beq.n	8013126 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8013110:	e01b      	b.n	801314a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8013112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013116:	d01d      	beq.n	8013154 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8013118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801311c:	d01c      	beq.n	8013158 <HAL_RCCEx_PeriphCLKConfig+0x984>
 801311e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013122:	d01b      	beq.n	801315c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8013124:	e011      	b.n	801314a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	3304      	adds	r3, #4
 801312a:	2100      	movs	r1, #0
 801312c:	4618      	mov	r0, r3
 801312e:	f001 f8b1 	bl	8014294 <RCCEx_PLL2_Config>
 8013132:	4603      	mov	r3, r0
 8013134:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8013136:	e012      	b.n	801315e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	3324      	adds	r3, #36	; 0x24
 801313c:	2102      	movs	r1, #2
 801313e:	4618      	mov	r0, r3
 8013140:	f001 f95a 	bl	80143f8 <RCCEx_PLL3_Config>
 8013144:	4603      	mov	r3, r0
 8013146:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8013148:	e009      	b.n	801315e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801314a:	2301      	movs	r3, #1
 801314c:	75fb      	strb	r3, [r7, #23]
      break;
 801314e:	e006      	b.n	801315e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8013150:	bf00      	nop
 8013152:	e004      	b.n	801315e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8013154:	bf00      	nop
 8013156:	e002      	b.n	801315e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8013158:	bf00      	nop
 801315a:	e000      	b.n	801315e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801315c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801315e:	7dfb      	ldrb	r3, [r7, #23]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d10a      	bne.n	801317a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8013164:	4b8c      	ldr	r3, [pc, #560]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8013166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013168:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013172:	4989      	ldr	r1, [pc, #548]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8013174:	4313      	orrs	r3, r2
 8013176:	654b      	str	r3, [r1, #84]	; 0x54
 8013178:	e001      	b.n	801317e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801317a:	7dfb      	ldrb	r3, [r7, #23]
 801317c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013186:	2b00      	cmp	r3, #0
 8013188:	d044      	beq.n	8013214 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013194:	d01b      	beq.n	80131ce <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8013196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801319a:	d805      	bhi.n	80131a8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 801319c:	2b00      	cmp	r3, #0
 801319e:	d022      	beq.n	80131e6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80131a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80131a4:	d00a      	beq.n	80131bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80131a6:	e01b      	b.n	80131e0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80131a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80131ac:	d01d      	beq.n	80131ea <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80131ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80131b2:	d01c      	beq.n	80131ee <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80131b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80131b8:	d01b      	beq.n	80131f2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80131ba:	e011      	b.n	80131e0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	3304      	adds	r3, #4
 80131c0:	2100      	movs	r1, #0
 80131c2:	4618      	mov	r0, r3
 80131c4:	f001 f866 	bl	8014294 <RCCEx_PLL2_Config>
 80131c8:	4603      	mov	r3, r0
 80131ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80131cc:	e012      	b.n	80131f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	3324      	adds	r3, #36	; 0x24
 80131d2:	2102      	movs	r1, #2
 80131d4:	4618      	mov	r0, r3
 80131d6:	f001 f90f 	bl	80143f8 <RCCEx_PLL3_Config>
 80131da:	4603      	mov	r3, r0
 80131dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80131de:	e009      	b.n	80131f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80131e0:	2301      	movs	r3, #1
 80131e2:	75fb      	strb	r3, [r7, #23]
      break;
 80131e4:	e006      	b.n	80131f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80131e6:	bf00      	nop
 80131e8:	e004      	b.n	80131f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80131ea:	bf00      	nop
 80131ec:	e002      	b.n	80131f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80131ee:	bf00      	nop
 80131f0:	e000      	b.n	80131f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80131f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80131f4:	7dfb      	ldrb	r3, [r7, #23]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d10a      	bne.n	8013210 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80131fa:	4b67      	ldr	r3, [pc, #412]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80131fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013208:	4963      	ldr	r1, [pc, #396]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801320a:	4313      	orrs	r3, r2
 801320c:	658b      	str	r3, [r1, #88]	; 0x58
 801320e:	e001      	b.n	8013214 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013210:	7dfb      	ldrb	r3, [r7, #23]
 8013212:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801321c:	2b00      	cmp	r3, #0
 801321e:	d044      	beq.n	80132aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801322a:	d01b      	beq.n	8013264 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 801322c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013230:	d805      	bhi.n	801323e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8013232:	2b00      	cmp	r3, #0
 8013234:	d022      	beq.n	801327c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8013236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801323a:	d00a      	beq.n	8013252 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 801323c:	e01b      	b.n	8013276 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 801323e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013242:	d01d      	beq.n	8013280 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8013244:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8013248:	d01c      	beq.n	8013284 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 801324a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801324e:	d01b      	beq.n	8013288 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8013250:	e011      	b.n	8013276 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	3304      	adds	r3, #4
 8013256:	2100      	movs	r1, #0
 8013258:	4618      	mov	r0, r3
 801325a:	f001 f81b 	bl	8014294 <RCCEx_PLL2_Config>
 801325e:	4603      	mov	r3, r0
 8013260:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8013262:	e012      	b.n	801328a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	3324      	adds	r3, #36	; 0x24
 8013268:	2102      	movs	r1, #2
 801326a:	4618      	mov	r0, r3
 801326c:	f001 f8c4 	bl	80143f8 <RCCEx_PLL3_Config>
 8013270:	4603      	mov	r3, r0
 8013272:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8013274:	e009      	b.n	801328a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013276:	2301      	movs	r3, #1
 8013278:	75fb      	strb	r3, [r7, #23]
      break;
 801327a:	e006      	b.n	801328a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801327c:	bf00      	nop
 801327e:	e004      	b.n	801328a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8013280:	bf00      	nop
 8013282:	e002      	b.n	801328a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8013284:	bf00      	nop
 8013286:	e000      	b.n	801328a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8013288:	bf00      	nop
    }

    if(ret == HAL_OK)
 801328a:	7dfb      	ldrb	r3, [r7, #23]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d10a      	bne.n	80132a6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8013290:	4b41      	ldr	r3, [pc, #260]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8013292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013294:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801329e:	493e      	ldr	r1, [pc, #248]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80132a0:	4313      	orrs	r3, r2
 80132a2:	658b      	str	r3, [r1, #88]	; 0x58
 80132a4:	e001      	b.n	80132aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80132a6:	7dfb      	ldrb	r3, [r7, #23]
 80132a8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	f003 0308 	and.w	r3, r3, #8
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d01a      	beq.n	80132ec <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80132bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80132c0:	d10a      	bne.n	80132d8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	3324      	adds	r3, #36	; 0x24
 80132c6:	2102      	movs	r1, #2
 80132c8:	4618      	mov	r0, r3
 80132ca:	f001 f895 	bl	80143f8 <RCCEx_PLL3_Config>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d001      	beq.n	80132d8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80132d4:	2301      	movs	r3, #1
 80132d6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80132d8:	4b2f      	ldr	r3, [pc, #188]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80132da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80132e6:	492c      	ldr	r1, [pc, #176]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80132e8:	4313      	orrs	r3, r2
 80132ea:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	f003 0310 	and.w	r3, r3, #16
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d01a      	beq.n	801332e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80132fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013302:	d10a      	bne.n	801331a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	3324      	adds	r3, #36	; 0x24
 8013308:	2102      	movs	r1, #2
 801330a:	4618      	mov	r0, r3
 801330c:	f001 f874 	bl	80143f8 <RCCEx_PLL3_Config>
 8013310:	4603      	mov	r3, r0
 8013312:	2b00      	cmp	r3, #0
 8013314:	d001      	beq.n	801331a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8013316:	2301      	movs	r3, #1
 8013318:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801331a:	4b1f      	ldr	r3, [pc, #124]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801331e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013328:	491b      	ldr	r1, [pc, #108]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801332a:	4313      	orrs	r3, r2
 801332c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013336:	2b00      	cmp	r3, #0
 8013338:	d032      	beq.n	80133a0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013344:	d00d      	beq.n	8013362 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8013346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801334a:	d016      	beq.n	801337a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 801334c:	2b00      	cmp	r3, #0
 801334e:	d111      	bne.n	8013374 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	3304      	adds	r3, #4
 8013354:	2100      	movs	r1, #0
 8013356:	4618      	mov	r0, r3
 8013358:	f000 ff9c 	bl	8014294 <RCCEx_PLL2_Config>
 801335c:	4603      	mov	r3, r0
 801335e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8013360:	e00c      	b.n	801337c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	3324      	adds	r3, #36	; 0x24
 8013366:	2102      	movs	r1, #2
 8013368:	4618      	mov	r0, r3
 801336a:	f001 f845 	bl	80143f8 <RCCEx_PLL3_Config>
 801336e:	4603      	mov	r3, r0
 8013370:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8013372:	e003      	b.n	801337c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8013374:	2301      	movs	r3, #1
 8013376:	75fb      	strb	r3, [r7, #23]
      break;
 8013378:	e000      	b.n	801337c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 801337a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801337c:	7dfb      	ldrb	r3, [r7, #23]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d10c      	bne.n	801339c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8013382:	4b05      	ldr	r3, [pc, #20]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8013384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013386:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013390:	4901      	ldr	r1, [pc, #4]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8013392:	4313      	orrs	r3, r2
 8013394:	658b      	str	r3, [r1, #88]	; 0x58
 8013396:	e003      	b.n	80133a0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8013398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801339c:	7dfb      	ldrb	r3, [r7, #23]
 801339e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d02f      	beq.n	801340c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80133b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80133b6:	d00c      	beq.n	80133d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80133b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80133bc:	d015      	beq.n	80133ea <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80133be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80133c2:	d10f      	bne.n	80133e4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80133c4:	4b79      	ldr	r3, [pc, #484]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80133c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133c8:	4a78      	ldr	r2, [pc, #480]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80133ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80133ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80133d0:	e00c      	b.n	80133ec <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	3324      	adds	r3, #36	; 0x24
 80133d6:	2101      	movs	r1, #1
 80133d8:	4618      	mov	r0, r3
 80133da:	f001 f80d 	bl	80143f8 <RCCEx_PLL3_Config>
 80133de:	4603      	mov	r3, r0
 80133e0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80133e2:	e003      	b.n	80133ec <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80133e4:	2301      	movs	r3, #1
 80133e6:	75fb      	strb	r3, [r7, #23]
      break;
 80133e8:	e000      	b.n	80133ec <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80133ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80133ec:	7dfb      	ldrb	r3, [r7, #23]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d10a      	bne.n	8013408 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80133f2:	4b6e      	ldr	r3, [pc, #440]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80133f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013400:	496a      	ldr	r1, [pc, #424]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013402:	4313      	orrs	r3, r2
 8013404:	654b      	str	r3, [r1, #84]	; 0x54
 8013406:	e001      	b.n	801340c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013408:	7dfb      	ldrb	r3, [r7, #23]
 801340a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013414:	2b00      	cmp	r3, #0
 8013416:	d029      	beq.n	801346c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801341c:	2b00      	cmp	r3, #0
 801341e:	d003      	beq.n	8013428 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8013420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013424:	d007      	beq.n	8013436 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8013426:	e00f      	b.n	8013448 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013428:	4b60      	ldr	r3, [pc, #384]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801342c:	4a5f      	ldr	r2, [pc, #380]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801342e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8013434:	e00b      	b.n	801344e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	3304      	adds	r3, #4
 801343a:	2102      	movs	r1, #2
 801343c:	4618      	mov	r0, r3
 801343e:	f000 ff29 	bl	8014294 <RCCEx_PLL2_Config>
 8013442:	4603      	mov	r3, r0
 8013444:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8013446:	e002      	b.n	801344e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8013448:	2301      	movs	r3, #1
 801344a:	75fb      	strb	r3, [r7, #23]
      break;
 801344c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801344e:	7dfb      	ldrb	r3, [r7, #23]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d109      	bne.n	8013468 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8013454:	4b55      	ldr	r3, [pc, #340]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013458:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013460:	4952      	ldr	r1, [pc, #328]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013462:	4313      	orrs	r3, r2
 8013464:	64cb      	str	r3, [r1, #76]	; 0x4c
 8013466:	e001      	b.n	801346c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013468:	7dfb      	ldrb	r3, [r7, #23]
 801346a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8013474:	2b00      	cmp	r3, #0
 8013476:	d00a      	beq.n	801348e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	3324      	adds	r3, #36	; 0x24
 801347c:	2102      	movs	r1, #2
 801347e:	4618      	mov	r0, r3
 8013480:	f000 ffba 	bl	80143f8 <RCCEx_PLL3_Config>
 8013484:	4603      	mov	r3, r0
 8013486:	2b00      	cmp	r3, #0
 8013488:	d001      	beq.n	801348e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 801348a:	2301      	movs	r3, #1
 801348c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013496:	2b00      	cmp	r3, #0
 8013498:	d02f      	beq.n	80134fa <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801349e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134a2:	d00c      	beq.n	80134be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80134a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134a8:	d802      	bhi.n	80134b0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d011      	beq.n	80134d2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80134ae:	e00d      	b.n	80134cc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80134b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80134b4:	d00f      	beq.n	80134d6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80134b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80134ba:	d00e      	beq.n	80134da <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80134bc:	e006      	b.n	80134cc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80134be:	4b3b      	ldr	r3, [pc, #236]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80134c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134c2:	4a3a      	ldr	r2, [pc, #232]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80134c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80134c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80134ca:	e007      	b.n	80134dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80134cc:	2301      	movs	r3, #1
 80134ce:	75fb      	strb	r3, [r7, #23]
      break;
 80134d0:	e004      	b.n	80134dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80134d2:	bf00      	nop
 80134d4:	e002      	b.n	80134dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80134d6:	bf00      	nop
 80134d8:	e000      	b.n	80134dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80134da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80134dc:	7dfb      	ldrb	r3, [r7, #23]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d109      	bne.n	80134f6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80134e2:	4b32      	ldr	r3, [pc, #200]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80134e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134ee:	492f      	ldr	r1, [pc, #188]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80134f0:	4313      	orrs	r3, r2
 80134f2:	654b      	str	r3, [r1, #84]	; 0x54
 80134f4:	e001      	b.n	80134fa <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80134f6:	7dfb      	ldrb	r3, [r7, #23]
 80134f8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013502:	2b00      	cmp	r3, #0
 8013504:	d008      	beq.n	8013518 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013506:	4b29      	ldr	r3, [pc, #164]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801350a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013512:	4926      	ldr	r1, [pc, #152]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013514:	4313      	orrs	r3, r2
 8013516:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013520:	2b00      	cmp	r3, #0
 8013522:	d009      	beq.n	8013538 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8013524:	4b21      	ldr	r3, [pc, #132]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013526:	691b      	ldr	r3, [r3, #16]
 8013528:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013532:	491e      	ldr	r1, [pc, #120]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013534:	4313      	orrs	r3, r2
 8013536:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013540:	2b00      	cmp	r3, #0
 8013542:	d008      	beq.n	8013556 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013544:	4b19      	ldr	r3, [pc, #100]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013548:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013550:	4916      	ldr	r1, [pc, #88]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013552:	4313      	orrs	r3, r2
 8013554:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801355e:	2b00      	cmp	r3, #0
 8013560:	d00d      	beq.n	801357e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013562:	4b12      	ldr	r3, [pc, #72]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013564:	691b      	ldr	r3, [r3, #16]
 8013566:	4a11      	ldr	r2, [pc, #68]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801356c:	6113      	str	r3, [r2, #16]
 801356e:	4b0f      	ldr	r3, [pc, #60]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013570:	691a      	ldr	r2, [r3, #16]
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8013578:	490c      	ldr	r1, [pc, #48]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 801357a:	4313      	orrs	r3, r2
 801357c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	2b00      	cmp	r3, #0
 8013584:	da08      	bge.n	8013598 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8013586:	4b09      	ldr	r3, [pc, #36]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801358a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013592:	4906      	ldr	r1, [pc, #24]	; (80135ac <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8013594:	4313      	orrs	r3, r2
 8013596:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8013598:	7dbb      	ldrb	r3, [r7, #22]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d101      	bne.n	80135a2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 801359e:	2300      	movs	r3, #0
 80135a0:	e000      	b.n	80135a4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80135a2:	2301      	movs	r3, #1
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3718      	adds	r7, #24
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}
 80135ac:	58024400 	.word	0x58024400

080135b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b090      	sub	sp, #64	; 0x40
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80135be:	d150      	bne.n	8013662 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80135c0:	4ba1      	ldr	r3, [pc, #644]	; (8013848 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80135c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135c4:	f003 0307 	and.w	r3, r3, #7
 80135c8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80135ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135cc:	2b04      	cmp	r3, #4
 80135ce:	d844      	bhi.n	801365a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80135d0:	a201      	add	r2, pc, #4	; (adr r2, 80135d8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80135d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135d6:	bf00      	nop
 80135d8:	080135ed 	.word	0x080135ed
 80135dc:	080135fd 	.word	0x080135fd
 80135e0:	0801360d 	.word	0x0801360d
 80135e4:	08013655 	.word	0x08013655
 80135e8:	0801361d 	.word	0x0801361d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80135ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80135f0:	4618      	mov	r0, r3
 80135f2:	f000 fd03 	bl	8013ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80135f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80135fa:	e241      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80135fc:	f107 0318 	add.w	r3, r7, #24
 8013600:	4618      	mov	r0, r3
 8013602:	f000 fa63 	bl	8013acc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801360a:	e239      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801360c:	f107 030c 	add.w	r3, r7, #12
 8013610:	4618      	mov	r0, r3
 8013612:	f000 fba7 	bl	8013d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801361a:	e231      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801361c:	4b8a      	ldr	r3, [pc, #552]	; (8013848 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801361e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013620:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8013624:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8013626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013628:	2b00      	cmp	r3, #0
 801362a:	d102      	bne.n	8013632 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 801362c:	4b87      	ldr	r3, [pc, #540]	; (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801362e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8013630:	e226      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8013632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013638:	d102      	bne.n	8013640 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 801363a:	4b85      	ldr	r3, [pc, #532]	; (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801363c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801363e:	e21f      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8013640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013646:	d102      	bne.n	801364e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8013648:	4b82      	ldr	r3, [pc, #520]	; (8013854 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801364a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801364c:	e218      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801364e:	2300      	movs	r3, #0
 8013650:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013652:	e215      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8013654:	4b80      	ldr	r3, [pc, #512]	; (8013858 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8013656:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013658:	e212      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 801365a:	2300      	movs	r3, #0
 801365c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801365e:	bf00      	nop
 8013660:	e20e      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013668:	d14f      	bne.n	801370a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 801366a:	4b77      	ldr	r3, [pc, #476]	; (8013848 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801366c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801366e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8013672:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8013674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013676:	2b80      	cmp	r3, #128	; 0x80
 8013678:	d01c      	beq.n	80136b4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 801367a:	2b80      	cmp	r3, #128	; 0x80
 801367c:	d804      	bhi.n	8013688 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 801367e:	2b00      	cmp	r3, #0
 8013680:	d008      	beq.n	8013694 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8013682:	2b40      	cmp	r3, #64	; 0x40
 8013684:	d00e      	beq.n	80136a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8013686:	e03c      	b.n	8013702 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8013688:	2bc0      	cmp	r3, #192	; 0xc0
 801368a:	d037      	beq.n	80136fc <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 801368c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013690:	d018      	beq.n	80136c4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8013692:	e036      	b.n	8013702 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013698:	4618      	mov	r0, r3
 801369a:	f000 fcaf 	bl	8013ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80136a2:	e1ed      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80136a4:	f107 0318 	add.w	r3, r7, #24
 80136a8:	4618      	mov	r0, r3
 80136aa:	f000 fa0f 	bl	8013acc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80136ae:	69bb      	ldr	r3, [r7, #24]
 80136b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80136b2:	e1e5      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80136b4:	f107 030c 	add.w	r3, r7, #12
 80136b8:	4618      	mov	r0, r3
 80136ba:	f000 fb53 	bl	8013d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80136c2:	e1dd      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80136c4:	4b60      	ldr	r3, [pc, #384]	; (8013848 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80136c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80136cc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80136ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d102      	bne.n	80136da <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80136d4:	4b5d      	ldr	r3, [pc, #372]	; (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80136d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80136d8:	e1d2      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80136da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80136e0:	d102      	bne.n	80136e8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80136e2:	4b5b      	ldr	r3, [pc, #364]	; (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80136e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80136e6:	e1cb      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80136e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80136ee:	d102      	bne.n	80136f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80136f0:	4b58      	ldr	r3, [pc, #352]	; (8013854 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80136f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80136f4:	e1c4      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80136f6:	2300      	movs	r3, #0
 80136f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80136fa:	e1c1      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80136fc:	4b56      	ldr	r3, [pc, #344]	; (8013858 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80136fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013700:	e1be      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8013702:	2300      	movs	r3, #0
 8013704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013706:	bf00      	nop
 8013708:	e1ba      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013710:	d153      	bne.n	80137ba <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8013712:	4b4d      	ldr	r3, [pc, #308]	; (8013848 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013716:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801371a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013722:	d01f      	beq.n	8013764 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8013724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013728:	d805      	bhi.n	8013736 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 801372a:	2b00      	cmp	r3, #0
 801372c:	d00a      	beq.n	8013744 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 801372e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013732:	d00f      	beq.n	8013754 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8013734:	e03d      	b.n	80137b2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8013736:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801373a:	d037      	beq.n	80137ac <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 801373c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013740:	d018      	beq.n	8013774 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8013742:	e036      	b.n	80137b2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013748:	4618      	mov	r0, r3
 801374a:	f000 fc57 	bl	8013ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013752:	e195      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013754:	f107 0318 	add.w	r3, r7, #24
 8013758:	4618      	mov	r0, r3
 801375a:	f000 f9b7 	bl	8013acc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013762:	e18d      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013764:	f107 030c 	add.w	r3, r7, #12
 8013768:	4618      	mov	r0, r3
 801376a:	f000 fafb 	bl	8013d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013772:	e185      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8013774:	4b34      	ldr	r3, [pc, #208]	; (8013848 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801377c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013780:	2b00      	cmp	r3, #0
 8013782:	d102      	bne.n	801378a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8013784:	4b31      	ldr	r3, [pc, #196]	; (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8013786:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8013788:	e17a      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801378c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013790:	d102      	bne.n	8013798 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8013792:	4b2f      	ldr	r3, [pc, #188]	; (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8013794:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013796:	e173      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8013798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801379a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801379e:	d102      	bne.n	80137a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80137a0:	4b2c      	ldr	r3, [pc, #176]	; (8013854 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80137a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80137a4:	e16c      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80137a6:	2300      	movs	r3, #0
 80137a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80137aa:	e169      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80137ac:	4b2a      	ldr	r3, [pc, #168]	; (8013858 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80137ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80137b0:	e166      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80137b2:	2300      	movs	r3, #0
 80137b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80137b6:	bf00      	nop
 80137b8:	e162      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80137c0:	d15d      	bne.n	801387e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80137c2:	4b21      	ldr	r3, [pc, #132]	; (8013848 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80137c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80137c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80137ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80137cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80137d2:	d01f      	beq.n	8013814 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80137d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80137d8:	d805      	bhi.n	80137e6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d00a      	beq.n	80137f4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80137de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80137e2:	d00f      	beq.n	8013804 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80137e4:	e047      	b.n	8013876 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80137e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80137ea:	d041      	beq.n	8013870 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80137ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80137f0:	d018      	beq.n	8013824 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80137f2:	e040      	b.n	8013876 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80137f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80137f8:	4618      	mov	r0, r3
 80137fa:	f000 fbff 	bl	8013ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80137fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013802:	e13d      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013804:	f107 0318 	add.w	r3, r7, #24
 8013808:	4618      	mov	r0, r3
 801380a:	f000 f95f 	bl	8013acc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801380e:	69bb      	ldr	r3, [r7, #24]
 8013810:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013812:	e135      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013814:	f107 030c 	add.w	r3, r7, #12
 8013818:	4618      	mov	r0, r3
 801381a:	f000 faa3 	bl	8013d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013822:	e12d      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8013824:	4b08      	ldr	r3, [pc, #32]	; (8013848 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013828:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801382c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013830:	2b00      	cmp	r3, #0
 8013832:	d102      	bne.n	801383a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8013834:	4b05      	ldr	r3, [pc, #20]	; (801384c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8013836:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8013838:	e122      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 801383a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801383c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013840:	d10c      	bne.n	801385c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8013842:	4b03      	ldr	r3, [pc, #12]	; (8013850 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8013844:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013846:	e11b      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8013848:	58024400 	.word	0x58024400
 801384c:	03d09000 	.word	0x03d09000
 8013850:	003d0900 	.word	0x003d0900
 8013854:	007a1200 	.word	0x007a1200
 8013858:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801385c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801385e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013862:	d102      	bne.n	801386a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8013864:	4b89      	ldr	r3, [pc, #548]	; (8013a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8013866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013868:	e10a      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801386a:	2300      	movs	r3, #0
 801386c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801386e:	e107      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8013870:	4b87      	ldr	r3, [pc, #540]	; (8013a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8013872:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013874:	e104      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8013876:	2300      	movs	r3, #0
 8013878:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801387a:	bf00      	nop
 801387c:	e100      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013884:	d153      	bne.n	801392e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8013886:	4b83      	ldr	r3, [pc, #524]	; (8013a94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8013888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801388a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801388e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8013890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013896:	d01f      	beq.n	80138d8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8013898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801389c:	d805      	bhi.n	80138aa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d00a      	beq.n	80138b8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80138a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80138a6:	d00f      	beq.n	80138c8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80138a8:	e03d      	b.n	8013926 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80138aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80138ae:	d037      	beq.n	8013920 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80138b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80138b4:	d018      	beq.n	80138e8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80138b6:	e036      	b.n	8013926 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80138b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80138bc:	4618      	mov	r0, r3
 80138be:	f000 fb9d 	bl	8013ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80138c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80138c6:	e0db      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80138c8:	f107 0318 	add.w	r3, r7, #24
 80138cc:	4618      	mov	r0, r3
 80138ce:	f000 f8fd 	bl	8013acc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80138d2:	69bb      	ldr	r3, [r7, #24]
 80138d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80138d6:	e0d3      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80138d8:	f107 030c 	add.w	r3, r7, #12
 80138dc:	4618      	mov	r0, r3
 80138de:	f000 fa41 	bl	8013d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80138e6:	e0cb      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80138e8:	4b6a      	ldr	r3, [pc, #424]	; (8013a94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80138ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80138f0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80138f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d102      	bne.n	80138fe <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80138f8:	4b67      	ldr	r3, [pc, #412]	; (8013a98 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80138fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80138fc:	e0c0      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80138fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013904:	d102      	bne.n	801390c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8013906:	4b65      	ldr	r3, [pc, #404]	; (8013a9c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8013908:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801390a:	e0b9      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 801390c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801390e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013912:	d102      	bne.n	801391a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8013914:	4b5d      	ldr	r3, [pc, #372]	; (8013a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8013916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013918:	e0b2      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 801391a:	2300      	movs	r3, #0
 801391c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801391e:	e0af      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8013920:	4b5b      	ldr	r3, [pc, #364]	; (8013a90 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8013922:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013924:	e0ac      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8013926:	2300      	movs	r3, #0
 8013928:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801392a:	bf00      	nop
 801392c:	e0a8      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8013934:	d13d      	bne.n	80139b2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8013936:	4b57      	ldr	r3, [pc, #348]	; (8013a94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8013938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801393a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801393e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8013940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013946:	d00c      	beq.n	8013962 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8013948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801394c:	d011      	beq.n	8013972 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 801394e:	2b00      	cmp	r3, #0
 8013950:	d12b      	bne.n	80139aa <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013952:	f107 0318 	add.w	r3, r7, #24
 8013956:	4618      	mov	r0, r3
 8013958:	f000 f8b8 	bl	8013acc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801395c:	69bb      	ldr	r3, [r7, #24]
 801395e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013960:	e08e      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013962:	f107 030c 	add.w	r3, r7, #12
 8013966:	4618      	mov	r0, r3
 8013968:	f000 f9fc 	bl	8013d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013970:	e086      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8013972:	4b48      	ldr	r3, [pc, #288]	; (8013a94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8013974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013976:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801397a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 801397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801397e:	2b00      	cmp	r3, #0
 8013980:	d102      	bne.n	8013988 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8013982:	4b45      	ldr	r3, [pc, #276]	; (8013a98 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8013984:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8013986:	e07b      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8013988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801398a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801398e:	d102      	bne.n	8013996 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8013990:	4b42      	ldr	r3, [pc, #264]	; (8013a9c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8013992:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013994:	e074      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8013996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801399c:	d102      	bne.n	80139a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 801399e:	4b3b      	ldr	r3, [pc, #236]	; (8013a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80139a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80139a2:	e06d      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80139a4:	2300      	movs	r3, #0
 80139a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80139a8:	e06a      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80139aa:	2300      	movs	r3, #0
 80139ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80139ae:	bf00      	nop
 80139b0:	e066      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80139b8:	d11f      	bne.n	80139fa <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80139ba:	4b36      	ldr	r3, [pc, #216]	; (8013a94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80139bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80139be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80139c2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80139c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d003      	beq.n	80139d2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80139ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80139ce:	d008      	beq.n	80139e2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80139d0:	e00f      	b.n	80139f2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80139d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80139d6:	4618      	mov	r0, r3
 80139d8:	f000 fb10 	bl	8013ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80139dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80139e0:	e04e      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80139e2:	f107 0318 	add.w	r3, r7, #24
 80139e6:	4618      	mov	r0, r3
 80139e8:	f000 f870 	bl	8013acc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80139ec:	6a3b      	ldr	r3, [r7, #32]
 80139ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80139f0:	e046      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80139f2:	2300      	movs	r3, #0
 80139f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80139f6:	bf00      	nop
 80139f8:	e042      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013a00:	d13c      	bne.n	8013a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8013a02:	4b24      	ldr	r3, [pc, #144]	; (8013a94 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8013a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a06:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8013a0a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8013a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013a12:	d01e      	beq.n	8013a52 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8013a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013a18:	d805      	bhi.n	8013a26 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d00d      	beq.n	8013a3a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8013a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013a22:	d00e      	beq.n	8013a42 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8013a24:	e026      	b.n	8013a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8013a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013a2a:	d01d      	beq.n	8013a68 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8013a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013a30:	d01d      	beq.n	8013a6e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8013a32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013a36:	d014      	beq.n	8013a62 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8013a38:	e01c      	b.n	8013a74 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8013a3a:	f000 f831 	bl	8013aa0 <HAL_RCCEx_GetD3PCLK1Freq>
 8013a3e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8013a40:	e01e      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a42:	f107 0318 	add.w	r3, r7, #24
 8013a46:	4618      	mov	r0, r3
 8013a48:	f000 f840 	bl	8013acc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013a4c:	69fb      	ldr	r3, [r7, #28]
 8013a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013a50:	e016      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013a52:	f107 030c 	add.w	r3, r7, #12
 8013a56:	4618      	mov	r0, r3
 8013a58:	f000 f984 	bl	8013d64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013a60:	e00e      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8013a62:	4b0d      	ldr	r3, [pc, #52]	; (8013a98 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8013a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013a66:	e00b      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8013a68:	4b0c      	ldr	r3, [pc, #48]	; (8013a9c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8013a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013a6c:	e008      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8013a6e:	4b07      	ldr	r3, [pc, #28]	; (8013a8c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8013a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013a72:	e005      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8013a74:	2300      	movs	r3, #0
 8013a76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8013a78:	bf00      	nop
 8013a7a:	e001      	b.n	8013a80 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8013a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013a82:	4618      	mov	r0, r3
 8013a84:	3740      	adds	r7, #64	; 0x40
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}
 8013a8a:	bf00      	nop
 8013a8c:	007a1200 	.word	0x007a1200
 8013a90:	00bb8000 	.word	0x00bb8000
 8013a94:	58024400 	.word	0x58024400
 8013a98:	03d09000 	.word	0x03d09000
 8013a9c:	003d0900 	.word	0x003d0900

08013aa0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013aa4:	f7fe fdf8 	bl	8012698 <HAL_RCC_GetHCLKFreq>
 8013aa8:	4601      	mov	r1, r0
 8013aaa:	4b06      	ldr	r3, [pc, #24]	; (8013ac4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8013aac:	6a1b      	ldr	r3, [r3, #32]
 8013aae:	091b      	lsrs	r3, r3, #4
 8013ab0:	f003 0307 	and.w	r3, r3, #7
 8013ab4:	4a04      	ldr	r2, [pc, #16]	; (8013ac8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8013ab6:	5cd3      	ldrb	r3, [r2, r3]
 8013ab8:	f003 031f 	and.w	r3, r3, #31
 8013abc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	bd80      	pop	{r7, pc}
 8013ac4:	58024400 	.word	0x58024400
 8013ac8:	08023b80 	.word	0x08023b80

08013acc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8013acc:	b480      	push	{r7}
 8013ace:	b089      	sub	sp, #36	; 0x24
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013ad4:	4b9d      	ldr	r3, [pc, #628]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ad8:	f003 0303 	and.w	r3, r3, #3
 8013adc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8013ade:	4b9b      	ldr	r3, [pc, #620]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ae2:	0b1b      	lsrs	r3, r3, #12
 8013ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013ae8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013aea:	4b98      	ldr	r3, [pc, #608]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aee:	091b      	lsrs	r3, r3, #4
 8013af0:	f003 0301 	and.w	r3, r3, #1
 8013af4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8013af6:	4b95      	ldr	r3, [pc, #596]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013afa:	08db      	lsrs	r3, r3, #3
 8013afc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b00:	693a      	ldr	r2, [r7, #16]
 8013b02:	fb02 f303 	mul.w	r3, r2, r3
 8013b06:	ee07 3a90 	vmov	s15, r3
 8013b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	f000 810a 	beq.w	8013d2e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8013b1a:	69bb      	ldr	r3, [r7, #24]
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	d05a      	beq.n	8013bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8013b20:	2b01      	cmp	r3, #1
 8013b22:	d302      	bcc.n	8013b2a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8013b24:	2b02      	cmp	r3, #2
 8013b26:	d078      	beq.n	8013c1a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8013b28:	e099      	b.n	8013c5e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013b2a:	4b88      	ldr	r3, [pc, #544]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	f003 0320 	and.w	r3, r3, #32
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d02d      	beq.n	8013b92 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013b36:	4b85      	ldr	r3, [pc, #532]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	08db      	lsrs	r3, r3, #3
 8013b3c:	f003 0303 	and.w	r3, r3, #3
 8013b40:	4a83      	ldr	r2, [pc, #524]	; (8013d50 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8013b42:	fa22 f303 	lsr.w	r3, r2, r3
 8013b46:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	ee07 3a90 	vmov	s15, r3
 8013b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	ee07 3a90 	vmov	s15, r3
 8013b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013b60:	4b7a      	ldr	r3, [pc, #488]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b68:	ee07 3a90 	vmov	s15, r3
 8013b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013b70:	ed97 6a03 	vldr	s12, [r7, #12]
 8013b74:	eddf 5a77 	vldr	s11, [pc, #476]	; 8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8013b78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013b7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013b80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b8c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8013b90:	e087      	b.n	8013ca2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	ee07 3a90 	vmov	s15, r3
 8013b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b9c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8013d58 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8013ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ba4:	4b69      	ldr	r3, [pc, #420]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bac:	ee07 3a90 	vmov	s15, r3
 8013bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8013bb8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8013bbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013bc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013bc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013bd4:	e065      	b.n	8013ca2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013bd6:	697b      	ldr	r3, [r7, #20]
 8013bd8:	ee07 3a90 	vmov	s15, r3
 8013bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013be0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8013d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8013be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013be8:	4b58      	ldr	r3, [pc, #352]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bf0:	ee07 3a90 	vmov	s15, r3
 8013bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013bf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8013bfc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8013c00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013c18:	e043      	b.n	8013ca2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013c1a:	697b      	ldr	r3, [r7, #20]
 8013c1c:	ee07 3a90 	vmov	s15, r3
 8013c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c24:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8013d60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8013c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c2c:	4b47      	ldr	r3, [pc, #284]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c34:	ee07 3a90 	vmov	s15, r3
 8013c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c40:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8013c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013c5c:	e021      	b.n	8013ca2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013c5e:	697b      	ldr	r3, [r7, #20]
 8013c60:	ee07 3a90 	vmov	s15, r3
 8013c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c68:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8013d5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8013c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c70:	4b36      	ldr	r3, [pc, #216]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c78:	ee07 3a90 	vmov	s15, r3
 8013c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013c80:	ed97 6a03 	vldr	s12, [r7, #12]
 8013c84:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013d54 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8013c88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013c90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013ca0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8013ca2:	4b2a      	ldr	r3, [pc, #168]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ca6:	0a5b      	lsrs	r3, r3, #9
 8013ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cac:	ee07 3a90 	vmov	s15, r3
 8013cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013cb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013cb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013cbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8013cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013cc8:	ee17 2a90 	vmov	r2, s15
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8013cd0:	4b1e      	ldr	r3, [pc, #120]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cd4:	0c1b      	lsrs	r3, r3, #16
 8013cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cda:	ee07 3a90 	vmov	s15, r3
 8013cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ce2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013ce6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013cea:	edd7 6a07 	vldr	s13, [r7, #28]
 8013cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013cf6:	ee17 2a90 	vmov	r2, s15
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8013cfe:	4b13      	ldr	r3, [pc, #76]	; (8013d4c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8013d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d02:	0e1b      	lsrs	r3, r3, #24
 8013d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d08:	ee07 3a90 	vmov	s15, r3
 8013d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013d14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013d18:	edd7 6a07 	vldr	s13, [r7, #28]
 8013d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013d24:	ee17 2a90 	vmov	r2, s15
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8013d2c:	e008      	b.n	8013d40 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	2200      	movs	r2, #0
 8013d32:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2200      	movs	r2, #0
 8013d38:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	609a      	str	r2, [r3, #8]
}
 8013d40:	bf00      	nop
 8013d42:	3724      	adds	r7, #36	; 0x24
 8013d44:	46bd      	mov	sp, r7
 8013d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4a:	4770      	bx	lr
 8013d4c:	58024400 	.word	0x58024400
 8013d50:	03d09000 	.word	0x03d09000
 8013d54:	46000000 	.word	0x46000000
 8013d58:	4c742400 	.word	0x4c742400
 8013d5c:	4a742400 	.word	0x4a742400
 8013d60:	4af42400 	.word	0x4af42400

08013d64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8013d64:	b480      	push	{r7}
 8013d66:	b089      	sub	sp, #36	; 0x24
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013d6c:	4b9d      	ldr	r3, [pc, #628]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d70:	f003 0303 	and.w	r3, r3, #3
 8013d74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8013d76:	4b9b      	ldr	r3, [pc, #620]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d7a:	0d1b      	lsrs	r3, r3, #20
 8013d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013d82:	4b98      	ldr	r3, [pc, #608]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d86:	0a1b      	lsrs	r3, r3, #8
 8013d88:	f003 0301 	and.w	r3, r3, #1
 8013d8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8013d8e:	4b95      	ldr	r3, [pc, #596]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d92:	08db      	lsrs	r3, r3, #3
 8013d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d98:	693a      	ldr	r2, [r7, #16]
 8013d9a:	fb02 f303 	mul.w	r3, r2, r3
 8013d9e:	ee07 3a90 	vmov	s15, r3
 8013da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013da6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	f000 810a 	beq.w	8013fc6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8013db2:	69bb      	ldr	r3, [r7, #24]
 8013db4:	2b01      	cmp	r3, #1
 8013db6:	d05a      	beq.n	8013e6e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8013db8:	2b01      	cmp	r3, #1
 8013dba:	d302      	bcc.n	8013dc2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8013dbc:	2b02      	cmp	r3, #2
 8013dbe:	d078      	beq.n	8013eb2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8013dc0:	e099      	b.n	8013ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013dc2:	4b88      	ldr	r3, [pc, #544]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	f003 0320 	and.w	r3, r3, #32
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d02d      	beq.n	8013e2a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013dce:	4b85      	ldr	r3, [pc, #532]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	08db      	lsrs	r3, r3, #3
 8013dd4:	f003 0303 	and.w	r3, r3, #3
 8013dd8:	4a83      	ldr	r2, [pc, #524]	; (8013fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8013dda:	fa22 f303 	lsr.w	r3, r2, r3
 8013dde:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	ee07 3a90 	vmov	s15, r3
 8013de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013dea:	697b      	ldr	r3, [r7, #20]
 8013dec:	ee07 3a90 	vmov	s15, r3
 8013df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013df8:	4b7a      	ldr	r3, [pc, #488]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e00:	ee07 3a90 	vmov	s15, r3
 8013e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e08:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e0c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8013fec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8013e10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e24:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8013e28:	e087      	b.n	8013f3a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	ee07 3a90 	vmov	s15, r3
 8013e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e34:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8013ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8013e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e3c:	4b69      	ldr	r3, [pc, #420]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e44:	ee07 3a90 	vmov	s15, r3
 8013e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e50:	eddf 5a66 	vldr	s11, [pc, #408]	; 8013fec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8013e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013e68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013e6c:	e065      	b.n	8013f3a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013e6e:	697b      	ldr	r3, [r7, #20]
 8013e70:	ee07 3a90 	vmov	s15, r3
 8013e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e78:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8013ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8013e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e80:	4b58      	ldr	r3, [pc, #352]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e88:	ee07 3a90 	vmov	s15, r3
 8013e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013e90:	ed97 6a03 	vldr	s12, [r7, #12]
 8013e94:	eddf 5a55 	vldr	s11, [pc, #340]	; 8013fec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8013e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013eb0:	e043      	b.n	8013f3a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	ee07 3a90 	vmov	s15, r3
 8013eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ebc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8013ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8013ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013ec4:	4b47      	ldr	r3, [pc, #284]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ecc:	ee07 3a90 	vmov	s15, r3
 8013ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013ed4:	ed97 6a03 	vldr	s12, [r7, #12]
 8013ed8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013fec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8013edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ef0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013ef4:	e021      	b.n	8013f3a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013ef6:	697b      	ldr	r3, [r7, #20]
 8013ef8:	ee07 3a90 	vmov	s15, r3
 8013efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f00:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8013ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8013f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013f08:	4b36      	ldr	r3, [pc, #216]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f10:	ee07 3a90 	vmov	s15, r3
 8013f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013f18:	ed97 6a03 	vldr	s12, [r7, #12]
 8013f1c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013fec <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8013f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013f28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8013f38:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8013f3a:	4b2a      	ldr	r3, [pc, #168]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f3e:	0a5b      	lsrs	r3, r3, #9
 8013f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f44:	ee07 3a90 	vmov	s15, r3
 8013f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013f50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f60:	ee17 2a90 	vmov	r2, s15
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8013f68:	4b1e      	ldr	r3, [pc, #120]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f6c:	0c1b      	lsrs	r3, r3, #16
 8013f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f72:	ee07 3a90 	vmov	s15, r3
 8013f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8013f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013f8e:	ee17 2a90 	vmov	r2, s15
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8013f96:	4b13      	ldr	r3, [pc, #76]	; (8013fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8013f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f9a:	0e1b      	lsrs	r3, r3, #24
 8013f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fa0:	ee07 3a90 	vmov	s15, r3
 8013fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013fac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013fb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8013fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013fbc:	ee17 2a90 	vmov	r2, s15
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8013fc4:	e008      	b.n	8013fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2200      	movs	r2, #0
 8013fca:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	609a      	str	r2, [r3, #8]
}
 8013fd8:	bf00      	nop
 8013fda:	3724      	adds	r7, #36	; 0x24
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe2:	4770      	bx	lr
 8013fe4:	58024400 	.word	0x58024400
 8013fe8:	03d09000 	.word	0x03d09000
 8013fec:	46000000 	.word	0x46000000
 8013ff0:	4c742400 	.word	0x4c742400
 8013ff4:	4a742400 	.word	0x4a742400
 8013ff8:	4af42400 	.word	0x4af42400

08013ffc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	b089      	sub	sp, #36	; 0x24
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014004:	4b9d      	ldr	r3, [pc, #628]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8014006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014008:	f003 0303 	and.w	r3, r3, #3
 801400c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 801400e:	4b9b      	ldr	r3, [pc, #620]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8014010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014012:	091b      	lsrs	r3, r3, #4
 8014014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014018:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801401a:	4b98      	ldr	r3, [pc, #608]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801401e:	f003 0301 	and.w	r3, r3, #1
 8014022:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8014024:	4b95      	ldr	r3, [pc, #596]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8014026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014028:	08db      	lsrs	r3, r3, #3
 801402a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801402e:	693a      	ldr	r2, [r7, #16]
 8014030:	fb02 f303 	mul.w	r3, r2, r3
 8014034:	ee07 3a90 	vmov	s15, r3
 8014038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801403c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	2b00      	cmp	r3, #0
 8014044:	f000 810a 	beq.w	801425c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8014048:	69bb      	ldr	r3, [r7, #24]
 801404a:	2b01      	cmp	r3, #1
 801404c:	d05a      	beq.n	8014104 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 801404e:	2b01      	cmp	r3, #1
 8014050:	d302      	bcc.n	8014058 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8014052:	2b02      	cmp	r3, #2
 8014054:	d078      	beq.n	8014148 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8014056:	e099      	b.n	801418c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014058:	4b88      	ldr	r3, [pc, #544]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	f003 0320 	and.w	r3, r3, #32
 8014060:	2b00      	cmp	r3, #0
 8014062:	d02d      	beq.n	80140c0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8014064:	4b85      	ldr	r3, [pc, #532]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	08db      	lsrs	r3, r3, #3
 801406a:	f003 0303 	and.w	r3, r3, #3
 801406e:	4a84      	ldr	r2, [pc, #528]	; (8014280 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8014070:	fa22 f303 	lsr.w	r3, r2, r3
 8014074:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	ee07 3a90 	vmov	s15, r3
 801407c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	ee07 3a90 	vmov	s15, r3
 8014086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801408a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801408e:	4b7b      	ldr	r3, [pc, #492]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8014090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014096:	ee07 3a90 	vmov	s15, r3
 801409a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801409e:	ed97 6a03 	vldr	s12, [r7, #12]
 80140a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8014284 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80140a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80140aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80140b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80140be:	e087      	b.n	80141d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	ee07 3a90 	vmov	s15, r3
 80140c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80140ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8014288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80140ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80140d2:	4b6a      	ldr	r3, [pc, #424]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80140d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140da:	ee07 3a90 	vmov	s15, r3
 80140de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80140e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80140e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8014284 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80140ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80140ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80140f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80140f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80140fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8014102:	e065      	b.n	80141d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8014104:	697b      	ldr	r3, [r7, #20]
 8014106:	ee07 3a90 	vmov	s15, r3
 801410a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801410e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801428c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8014112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014116:	4b59      	ldr	r3, [pc, #356]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8014118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801411a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801411e:	ee07 3a90 	vmov	s15, r3
 8014122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014126:	ed97 6a03 	vldr	s12, [r7, #12]
 801412a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8014284 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 801412e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801413a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801413e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8014146:	e043      	b.n	80141d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8014148:	697b      	ldr	r3, [r7, #20]
 801414a:	ee07 3a90 	vmov	s15, r3
 801414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014152:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8014290 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801415a:	4b48      	ldr	r3, [pc, #288]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801415e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014162:	ee07 3a90 	vmov	s15, r3
 8014166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801416a:	ed97 6a03 	vldr	s12, [r7, #12]
 801416e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8014284 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8014172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801417a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801417e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801418a:	e021      	b.n	80141d0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	ee07 3a90 	vmov	s15, r3
 8014192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014196:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801428c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 801419a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801419e:	4b37      	ldr	r3, [pc, #220]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80141a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80141a6:	ee07 3a90 	vmov	s15, r3
 80141aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80141ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80141b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8014284 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80141b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80141ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80141be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80141c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80141ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80141ce:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80141d0:	4b2a      	ldr	r3, [pc, #168]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80141d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141d4:	0a5b      	lsrs	r3, r3, #9
 80141d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80141da:	ee07 3a90 	vmov	s15, r3
 80141de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80141e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80141ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80141ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80141f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80141f6:	ee17 2a90 	vmov	r2, s15
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80141fe:	4b1f      	ldr	r3, [pc, #124]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8014200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014202:	0c1b      	lsrs	r3, r3, #16
 8014204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014208:	ee07 3a90 	vmov	s15, r3
 801420c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014218:	edd7 6a07 	vldr	s13, [r7, #28]
 801421c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014224:	ee17 2a90 	vmov	r2, s15
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 801422c:	4b13      	ldr	r3, [pc, #76]	; (801427c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 801422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014230:	0e1b      	lsrs	r3, r3, #24
 8014232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014236:	ee07 3a90 	vmov	s15, r3
 801423a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801423e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014246:	edd7 6a07 	vldr	s13, [r7, #28]
 801424a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801424e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014252:	ee17 2a90 	vmov	r2, s15
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801425a:	e008      	b.n	801426e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2200      	movs	r2, #0
 8014260:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	2200      	movs	r2, #0
 8014266:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	2200      	movs	r2, #0
 801426c:	609a      	str	r2, [r3, #8]
}
 801426e:	bf00      	nop
 8014270:	3724      	adds	r7, #36	; 0x24
 8014272:	46bd      	mov	sp, r7
 8014274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014278:	4770      	bx	lr
 801427a:	bf00      	nop
 801427c:	58024400 	.word	0x58024400
 8014280:	03d09000 	.word	0x03d09000
 8014284:	46000000 	.word	0x46000000
 8014288:	4c742400 	.word	0x4c742400
 801428c:	4a742400 	.word	0x4a742400
 8014290:	4af42400 	.word	0x4af42400

08014294 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b084      	sub	sp, #16
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801429e:	2300      	movs	r3, #0
 80142a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80142a2:	4b53      	ldr	r3, [pc, #332]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 80142a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142a6:	f003 0303 	and.w	r3, r3, #3
 80142aa:	2b03      	cmp	r3, #3
 80142ac:	d101      	bne.n	80142b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80142ae:	2301      	movs	r3, #1
 80142b0:	e099      	b.n	80143e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80142b2:	4b4f      	ldr	r3, [pc, #316]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	4a4e      	ldr	r2, [pc, #312]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 80142b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80142bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80142be:	f7f6 ff37 	bl	800b130 <HAL_GetTick>
 80142c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80142c4:	e008      	b.n	80142d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80142c6:	f7f6 ff33 	bl	800b130 <HAL_GetTick>
 80142ca:	4602      	mov	r2, r0
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	1ad3      	subs	r3, r2, r3
 80142d0:	2b02      	cmp	r3, #2
 80142d2:	d901      	bls.n	80142d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80142d4:	2303      	movs	r3, #3
 80142d6:	e086      	b.n	80143e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80142d8:	4b45      	ldr	r3, [pc, #276]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d1f0      	bne.n	80142c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80142e4:	4b42      	ldr	r3, [pc, #264]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 80142e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	031b      	lsls	r3, r3, #12
 80142f2:	493f      	ldr	r1, [pc, #252]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 80142f4:	4313      	orrs	r3, r2
 80142f6:	628b      	str	r3, [r1, #40]	; 0x28
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	685b      	ldr	r3, [r3, #4]
 80142fc:	3b01      	subs	r3, #1
 80142fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	689b      	ldr	r3, [r3, #8]
 8014306:	3b01      	subs	r3, #1
 8014308:	025b      	lsls	r3, r3, #9
 801430a:	b29b      	uxth	r3, r3
 801430c:	431a      	orrs	r2, r3
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	68db      	ldr	r3, [r3, #12]
 8014312:	3b01      	subs	r3, #1
 8014314:	041b      	lsls	r3, r3, #16
 8014316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801431a:	431a      	orrs	r2, r3
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	691b      	ldr	r3, [r3, #16]
 8014320:	3b01      	subs	r3, #1
 8014322:	061b      	lsls	r3, r3, #24
 8014324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014328:	4931      	ldr	r1, [pc, #196]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 801432a:	4313      	orrs	r3, r2
 801432c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801432e:	4b30      	ldr	r3, [pc, #192]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 8014330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014332:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	695b      	ldr	r3, [r3, #20]
 801433a:	492d      	ldr	r1, [pc, #180]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 801433c:	4313      	orrs	r3, r2
 801433e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8014340:	4b2b      	ldr	r3, [pc, #172]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 8014342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014344:	f023 0220 	bic.w	r2, r3, #32
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	699b      	ldr	r3, [r3, #24]
 801434c:	4928      	ldr	r1, [pc, #160]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 801434e:	4313      	orrs	r3, r2
 8014350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8014352:	4b27      	ldr	r3, [pc, #156]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 8014354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014356:	4a26      	ldr	r2, [pc, #152]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 8014358:	f023 0310 	bic.w	r3, r3, #16
 801435c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801435e:	4b24      	ldr	r3, [pc, #144]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 8014360:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014362:	4b24      	ldr	r3, [pc, #144]	; (80143f4 <RCCEx_PLL2_Config+0x160>)
 8014364:	4013      	ands	r3, r2
 8014366:	687a      	ldr	r2, [r7, #4]
 8014368:	69d2      	ldr	r2, [r2, #28]
 801436a:	00d2      	lsls	r2, r2, #3
 801436c:	4920      	ldr	r1, [pc, #128]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 801436e:	4313      	orrs	r3, r2
 8014370:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8014372:	4b1f      	ldr	r3, [pc, #124]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 8014374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014376:	4a1e      	ldr	r2, [pc, #120]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 8014378:	f043 0310 	orr.w	r3, r3, #16
 801437c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801437e:	683b      	ldr	r3, [r7, #0]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d106      	bne.n	8014392 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8014384:	4b1a      	ldr	r3, [pc, #104]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 8014386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014388:	4a19      	ldr	r2, [pc, #100]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 801438a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801438e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014390:	e00f      	b.n	80143b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	2b01      	cmp	r3, #1
 8014396:	d106      	bne.n	80143a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8014398:	4b15      	ldr	r3, [pc, #84]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 801439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801439c:	4a14      	ldr	r2, [pc, #80]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 801439e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80143a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80143a4:	e005      	b.n	80143b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80143a6:	4b12      	ldr	r3, [pc, #72]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 80143a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143aa:	4a11      	ldr	r2, [pc, #68]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 80143ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80143b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80143b2:	4b0f      	ldr	r3, [pc, #60]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	4a0e      	ldr	r2, [pc, #56]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 80143b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80143bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80143be:	f7f6 feb7 	bl	800b130 <HAL_GetTick>
 80143c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80143c4:	e008      	b.n	80143d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80143c6:	f7f6 feb3 	bl	800b130 <HAL_GetTick>
 80143ca:	4602      	mov	r2, r0
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	1ad3      	subs	r3, r2, r3
 80143d0:	2b02      	cmp	r3, #2
 80143d2:	d901      	bls.n	80143d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80143d4:	2303      	movs	r3, #3
 80143d6:	e006      	b.n	80143e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80143d8:	4b05      	ldr	r3, [pc, #20]	; (80143f0 <RCCEx_PLL2_Config+0x15c>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d0f0      	beq.n	80143c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80143e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	3710      	adds	r7, #16
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	bf00      	nop
 80143f0:	58024400 	.word	0x58024400
 80143f4:	ffff0007 	.word	0xffff0007

080143f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b084      	sub	sp, #16
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
 8014400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014402:	2300      	movs	r3, #0
 8014404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014406:	4b53      	ldr	r3, [pc, #332]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 8014408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801440a:	f003 0303 	and.w	r3, r3, #3
 801440e:	2b03      	cmp	r3, #3
 8014410:	d101      	bne.n	8014416 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8014412:	2301      	movs	r3, #1
 8014414:	e099      	b.n	801454a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8014416:	4b4f      	ldr	r3, [pc, #316]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	4a4e      	ldr	r2, [pc, #312]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 801441c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014422:	f7f6 fe85 	bl	800b130 <HAL_GetTick>
 8014426:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014428:	e008      	b.n	801443c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801442a:	f7f6 fe81 	bl	800b130 <HAL_GetTick>
 801442e:	4602      	mov	r2, r0
 8014430:	68bb      	ldr	r3, [r7, #8]
 8014432:	1ad3      	subs	r3, r2, r3
 8014434:	2b02      	cmp	r3, #2
 8014436:	d901      	bls.n	801443c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014438:	2303      	movs	r3, #3
 801443a:	e086      	b.n	801454a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801443c:	4b45      	ldr	r3, [pc, #276]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014444:	2b00      	cmp	r3, #0
 8014446:	d1f0      	bne.n	801442a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014448:	4b42      	ldr	r3, [pc, #264]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 801444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801444c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	051b      	lsls	r3, r3, #20
 8014456:	493f      	ldr	r1, [pc, #252]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 8014458:	4313      	orrs	r3, r2
 801445a:	628b      	str	r3, [r1, #40]	; 0x28
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	3b01      	subs	r3, #1
 8014462:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	689b      	ldr	r3, [r3, #8]
 801446a:	3b01      	subs	r3, #1
 801446c:	025b      	lsls	r3, r3, #9
 801446e:	b29b      	uxth	r3, r3
 8014470:	431a      	orrs	r2, r3
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	68db      	ldr	r3, [r3, #12]
 8014476:	3b01      	subs	r3, #1
 8014478:	041b      	lsls	r3, r3, #16
 801447a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801447e:	431a      	orrs	r2, r3
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	691b      	ldr	r3, [r3, #16]
 8014484:	3b01      	subs	r3, #1
 8014486:	061b      	lsls	r3, r3, #24
 8014488:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801448c:	4931      	ldr	r1, [pc, #196]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 801448e:	4313      	orrs	r3, r2
 8014490:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8014492:	4b30      	ldr	r3, [pc, #192]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 8014494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014496:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	695b      	ldr	r3, [r3, #20]
 801449e:	492d      	ldr	r1, [pc, #180]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 80144a0:	4313      	orrs	r3, r2
 80144a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80144a4:	4b2b      	ldr	r3, [pc, #172]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 80144a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	699b      	ldr	r3, [r3, #24]
 80144b0:	4928      	ldr	r1, [pc, #160]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 80144b2:	4313      	orrs	r3, r2
 80144b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80144b6:	4b27      	ldr	r3, [pc, #156]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 80144b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ba:	4a26      	ldr	r2, [pc, #152]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 80144bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80144c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80144c2:	4b24      	ldr	r3, [pc, #144]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 80144c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144c6:	4b24      	ldr	r3, [pc, #144]	; (8014558 <RCCEx_PLL3_Config+0x160>)
 80144c8:	4013      	ands	r3, r2
 80144ca:	687a      	ldr	r2, [r7, #4]
 80144cc:	69d2      	ldr	r2, [r2, #28]
 80144ce:	00d2      	lsls	r2, r2, #3
 80144d0:	4920      	ldr	r1, [pc, #128]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 80144d2:	4313      	orrs	r3, r2
 80144d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80144d6:	4b1f      	ldr	r3, [pc, #124]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 80144d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144da:	4a1e      	ldr	r2, [pc, #120]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 80144dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80144e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d106      	bne.n	80144f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80144e8:	4b1a      	ldr	r3, [pc, #104]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 80144ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144ec:	4a19      	ldr	r2, [pc, #100]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 80144ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80144f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80144f4:	e00f      	b.n	8014516 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80144f6:	683b      	ldr	r3, [r7, #0]
 80144f8:	2b01      	cmp	r3, #1
 80144fa:	d106      	bne.n	801450a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80144fc:	4b15      	ldr	r3, [pc, #84]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 80144fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014500:	4a14      	ldr	r2, [pc, #80]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 8014502:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014506:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014508:	e005      	b.n	8014516 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801450a:	4b12      	ldr	r3, [pc, #72]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 801450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801450e:	4a11      	ldr	r2, [pc, #68]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 8014510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014514:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8014516:	4b0f      	ldr	r3, [pc, #60]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	4a0e      	ldr	r2, [pc, #56]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 801451c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014522:	f7f6 fe05 	bl	800b130 <HAL_GetTick>
 8014526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014528:	e008      	b.n	801453c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801452a:	f7f6 fe01 	bl	800b130 <HAL_GetTick>
 801452e:	4602      	mov	r2, r0
 8014530:	68bb      	ldr	r3, [r7, #8]
 8014532:	1ad3      	subs	r3, r2, r3
 8014534:	2b02      	cmp	r3, #2
 8014536:	d901      	bls.n	801453c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014538:	2303      	movs	r3, #3
 801453a:	e006      	b.n	801454a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801453c:	4b05      	ldr	r3, [pc, #20]	; (8014554 <RCCEx_PLL3_Config+0x15c>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014544:	2b00      	cmp	r3, #0
 8014546:	d0f0      	beq.n	801452a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014548:	7bfb      	ldrb	r3, [r7, #15]
}
 801454a:	4618      	mov	r0, r3
 801454c:	3710      	adds	r7, #16
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}
 8014552:	bf00      	nop
 8014554:	58024400 	.word	0x58024400
 8014558:	ffff0007 	.word	0xffff0007

0801455c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b08a      	sub	sp, #40	; 0x28
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d101      	bne.n	801456e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801456a:	2301      	movs	r3, #1
 801456c:	e07c      	b.n	8014668 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014574:	b2db      	uxtb	r3, r3
 8014576:	2b00      	cmp	r3, #0
 8014578:	d10c      	bne.n	8014594 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2200      	movs	r2, #0
 801457e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	699b      	ldr	r3, [r3, #24]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d102      	bne.n	801458e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2202      	movs	r2, #2
 801458c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f7f5 f8f6 	bl	8009780 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2203      	movs	r2, #3
 8014598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f000 f867 	bl	8014670 <HAL_SD_InitCard>
 80145a2:	4603      	mov	r3, r0
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d001      	beq.n	80145ac <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80145a8:	2301      	movs	r3, #1
 80145aa:	e05d      	b.n	8014668 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80145ac:	f107 0308 	add.w	r3, r7, #8
 80145b0:	4619      	mov	r1, r3
 80145b2:	6878      	ldr	r0, [r7, #4]
 80145b4:	f000 fdb6 	bl	8015124 <HAL_SD_GetCardStatus>
 80145b8:	4603      	mov	r3, r0
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d001      	beq.n	80145c2 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80145be:	2301      	movs	r3, #1
 80145c0:	e052      	b.n	8014668 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80145c2:	7e3b      	ldrb	r3, [r7, #24]
 80145c4:	b2db      	uxtb	r3, r3
 80145c6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80145c8:	7e7b      	ldrb	r3, [r7, #25]
 80145ca:	b2db      	uxtb	r3, r3
 80145cc:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145d2:	2b01      	cmp	r3, #1
 80145d4:	d10a      	bne.n	80145ec <HAL_SD_Init+0x90>
 80145d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d102      	bne.n	80145e2 <HAL_SD_Init+0x86>
 80145dc:	6a3b      	ldr	r3, [r7, #32]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d004      	beq.n	80145ec <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80145e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80145ea:	e00b      	b.n	8014604 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145f0:	2b01      	cmp	r3, #1
 80145f2:	d104      	bne.n	80145fe <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80145fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80145fc:	e002      	b.n	8014604 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2200      	movs	r2, #0
 8014602:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	68db      	ldr	r3, [r3, #12]
 8014608:	4619      	mov	r1, r3
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f000 fe6c 	bl	80152e8 <HAL_SD_ConfigWideBusOperation>
 8014610:	4603      	mov	r3, r0
 8014612:	2b00      	cmp	r3, #0
 8014614:	d001      	beq.n	801461a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8014616:	2301      	movs	r3, #1
 8014618:	e026      	b.n	8014668 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 801461a:	f7f6 fd89 	bl	800b130 <HAL_GetTick>
 801461e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8014620:	e011      	b.n	8014646 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8014622:	f7f6 fd85 	bl	800b130 <HAL_GetTick>
 8014626:	4602      	mov	r2, r0
 8014628:	69fb      	ldr	r3, [r7, #28]
 801462a:	1ad3      	subs	r3, r2, r3
 801462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014630:	d109      	bne.n	8014646 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014638:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	2201      	movs	r2, #1
 801463e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8014642:	2303      	movs	r3, #3
 8014644:	e010      	b.n	8014668 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f000 fef8 	bl	801543c <HAL_SD_GetCardState>
 801464c:	4603      	mov	r3, r0
 801464e:	2b04      	cmp	r3, #4
 8014650:	d1e7      	bne.n	8014622 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	2200      	movs	r2, #0
 8014656:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	2200      	movs	r2, #0
 801465c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	2201      	movs	r2, #1
 8014662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8014666:	2300      	movs	r3, #0
}
 8014668:	4618      	mov	r0, r3
 801466a:	3728      	adds	r7, #40	; 0x28
 801466c:	46bd      	mov	sp, r7
 801466e:	bd80      	pop	{r7, pc}

08014670 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8014670:	b5b0      	push	{r4, r5, r7, lr}
 8014672:	b08e      	sub	sp, #56	; 0x38
 8014674:	af04      	add	r7, sp, #16
 8014676:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8014678:	2300      	movs	r3, #0
 801467a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801467c:	2300      	movs	r3, #0
 801467e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8014680:	2300      	movs	r3, #0
 8014682:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8014684:	2300      	movs	r3, #0
 8014686:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8014688:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801468c:	f7fe ff90 	bl	80135b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8014690:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8014692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014694:	0a1b      	lsrs	r3, r3, #8
 8014696:	4a40      	ldr	r2, [pc, #256]	; (8014798 <HAL_SD_InitCard+0x128>)
 8014698:	fba2 2303 	umull	r2, r3, r2, r3
 801469c:	091b      	lsrs	r3, r3, #4
 801469e:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	699b      	ldr	r3, [r3, #24]
 80146a4:	2b02      	cmp	r3, #2
 80146a6:	d107      	bne.n	80146b8 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	f042 0210 	orr.w	r2, r2, #16
 80146b6:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681d      	ldr	r5, [r3, #0]
 80146bc:	466c      	mov	r4, sp
 80146be:	f107 0314 	add.w	r3, r7, #20
 80146c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80146c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80146ca:	f107 0308 	add.w	r3, r7, #8
 80146ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80146d0:	4628      	mov	r0, r5
 80146d2:	f004 fd8b 	bl	80191ec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	4618      	mov	r0, r3
 80146dc:	f004 fdce 	bl	801927c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80146e0:	69bb      	ldr	r3, [r7, #24]
 80146e2:	005b      	lsls	r3, r3, #1
 80146e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80146ea:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 80146ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d008      	beq.n	8014704 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80146f2:	4a2a      	ldr	r2, [pc, #168]	; (801479c <HAL_SD_InitCard+0x12c>)
 80146f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80146fa:	3301      	adds	r3, #1
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7f6 fd23 	bl	800b148 <HAL_Delay>
 8014702:	e002      	b.n	801470a <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8014704:	2002      	movs	r0, #2
 8014706:	f7f6 fd1f 	bl	800b148 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f000 ff74 	bl	80155f8 <SD_PowerON>
 8014710:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8014712:	6a3b      	ldr	r3, [r7, #32]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d00b      	beq.n	8014730 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2201      	movs	r2, #1
 801471c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014724:	6a3b      	ldr	r3, [r7, #32]
 8014726:	431a      	orrs	r2, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801472c:	2301      	movs	r3, #1
 801472e:	e02e      	b.n	801478e <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f000 fea3 	bl	801547c <SD_InitCard>
 8014736:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8014738:	6a3b      	ldr	r3, [r7, #32]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d00b      	beq.n	8014756 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2201      	movs	r2, #1
 8014742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801474a:	6a3b      	ldr	r3, [r7, #32]
 801474c:	431a      	orrs	r2, r3
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8014752:	2301      	movs	r3, #1
 8014754:	e01b      	b.n	801478e <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801475e:	4618      	mov	r0, r3
 8014760:	f004 fe22 	bl	80193a8 <SDMMC_CmdBlockLength>
 8014764:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8014766:	6a3b      	ldr	r3, [r7, #32]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d00f      	beq.n	801478c <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	4a0b      	ldr	r2, [pc, #44]	; (80147a0 <HAL_SD_InitCard+0x130>)
 8014772:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014778:	6a3b      	ldr	r3, [r7, #32]
 801477a:	431a      	orrs	r2, r3
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2201      	movs	r2, #1
 8014784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8014788:	2301      	movs	r3, #1
 801478a:	e000      	b.n	801478e <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 801478c:	2300      	movs	r3, #0
}
 801478e:	4618      	mov	r0, r3
 8014790:	3728      	adds	r7, #40	; 0x28
 8014792:	46bd      	mov	sp, r7
 8014794:	bdb0      	pop	{r4, r5, r7, pc}
 8014796:	bf00      	nop
 8014798:	014f8b59 	.word	0x014f8b59
 801479c:	00012110 	.word	0x00012110
 80147a0:	1fe00fff 	.word	0x1fe00fff

080147a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b08c      	sub	sp, #48	; 0x30
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	60f8      	str	r0, [r7, #12]
 80147ac:	60b9      	str	r1, [r7, #8]
 80147ae:	607a      	str	r2, [r7, #4]
 80147b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80147b6:	68bb      	ldr	r3, [r7, #8]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d107      	bne.n	80147cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80147c8:	2301      	movs	r3, #1
 80147ca:	e08d      	b.n	80148e8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80147d2:	b2db      	uxtb	r3, r3
 80147d4:	2b01      	cmp	r3, #1
 80147d6:	f040 8086 	bne.w	80148e6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	2200      	movs	r2, #0
 80147de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80147e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	441a      	add	r2, r3
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d907      	bls.n	80147fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80147fa:	2301      	movs	r3, #1
 80147fc:	e074      	b.n	80148e8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	2203      	movs	r2, #3
 8014802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	2200      	movs	r2, #0
 801480c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	68ba      	ldr	r2, [r7, #8]
 8014812:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8014814:	683b      	ldr	r3, [r7, #0]
 8014816:	025a      	lsls	r2, r3, #9
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014820:	2b01      	cmp	r3, #1
 8014822:	d002      	beq.n	801482a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8014824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014826:	025b      	lsls	r3, r3, #9
 8014828:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801482a:	f04f 33ff 	mov.w	r3, #4294967295
 801482e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	025b      	lsls	r3, r3, #9
 8014834:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8014836:	2390      	movs	r3, #144	; 0x90
 8014838:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801483a:	2302      	movs	r3, #2
 801483c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801483e:	2300      	movs	r3, #0
 8014840:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8014842:	2300      	movs	r3, #0
 8014844:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	f107 0210 	add.w	r2, r7, #16
 801484e:	4611      	mov	r1, r2
 8014850:	4618      	mov	r0, r3
 8014852:	f004 fd7d 	bl	8019350 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	68da      	ldr	r2, [r3, #12]
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014864:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	68ba      	ldr	r2, [r7, #8]
 801486c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	2201      	movs	r2, #1
 8014874:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	2b01      	cmp	r3, #1
 801487a:	d90a      	bls.n	8014892 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	2282      	movs	r2, #130	; 0x82
 8014880:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014888:	4618      	mov	r0, r3
 801488a:	f004 fdd3 	bl	8019434 <SDMMC_CmdReadMultiBlock>
 801488e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8014890:	e009      	b.n	80148a6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	2281      	movs	r2, #129	; 0x81
 8014896:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801489e:	4618      	mov	r0, r3
 80148a0:	f004 fda5 	bl	80193ee <SDMMC_CmdReadSingleBlock>
 80148a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80148a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d012      	beq.n	80148d2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	4a0f      	ldr	r2, [pc, #60]	; (80148f0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80148b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80148b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ba:	431a      	orrs	r2, r3
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	2201      	movs	r2, #1
 80148c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	2200      	movs	r2, #0
 80148cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80148ce:	2301      	movs	r3, #1
 80148d0:	e00a      	b.n	80148e8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80148e0:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80148e2:	2300      	movs	r3, #0
 80148e4:	e000      	b.n	80148e8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80148e6:	2302      	movs	r3, #2
  }
}
 80148e8:	4618      	mov	r0, r3
 80148ea:	3730      	adds	r7, #48	; 0x30
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}
 80148f0:	1fe00fff 	.word	0x1fe00fff

080148f4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b08c      	sub	sp, #48	; 0x30
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	60f8      	str	r0, [r7, #12]
 80148fc:	60b9      	str	r1, [r7, #8]
 80148fe:	607a      	str	r2, [r7, #4]
 8014900:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8014906:	68bb      	ldr	r3, [r7, #8]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d107      	bne.n	801491c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014910:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8014918:	2301      	movs	r3, #1
 801491a:	e08d      	b.n	8014a38 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014922:	b2db      	uxtb	r3, r3
 8014924:	2b01      	cmp	r3, #1
 8014926:	f040 8086 	bne.w	8014a36 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	2200      	movs	r2, #0
 801492e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8014930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	441a      	add	r2, r3
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801493a:	429a      	cmp	r2, r3
 801493c:	d907      	bls.n	801494e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014942:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 801494a:	2301      	movs	r3, #1
 801494c:	e074      	b.n	8014a38 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	2203      	movs	r2, #3
 8014952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	2200      	movs	r2, #0
 801495c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	68ba      	ldr	r2, [r7, #8]
 8014962:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	025a      	lsls	r2, r3, #9
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014970:	2b01      	cmp	r3, #1
 8014972:	d002      	beq.n	801497a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8014974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014976:	025b      	lsls	r3, r3, #9
 8014978:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801497a:	f04f 33ff 	mov.w	r3, #4294967295
 801497e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	025b      	lsls	r3, r3, #9
 8014984:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8014986:	2390      	movs	r3, #144	; 0x90
 8014988:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801498a:	2300      	movs	r3, #0
 801498c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801498e:	2300      	movs	r3, #0
 8014990:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8014992:	2300      	movs	r3, #0
 8014994:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	f107 0210 	add.w	r2, r7, #16
 801499e:	4611      	mov	r1, r2
 80149a0:	4618      	mov	r0, r3
 80149a2:	f004 fcd5 	bl	8019350 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	68da      	ldr	r2, [r3, #12]
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80149b4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	68ba      	ldr	r2, [r7, #8]
 80149bc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	2201      	movs	r2, #1
 80149c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	2b01      	cmp	r3, #1
 80149ca:	d90a      	bls.n	80149e2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	22a0      	movs	r2, #160	; 0xa0
 80149d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80149d8:	4618      	mov	r0, r3
 80149da:	f004 fd71 	bl	80194c0 <SDMMC_CmdWriteMultiBlock>
 80149de:	62f8      	str	r0, [r7, #44]	; 0x2c
 80149e0:	e009      	b.n	80149f6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	2290      	movs	r2, #144	; 0x90
 80149e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80149ee:	4618      	mov	r0, r3
 80149f0:	f004 fd43 	bl	801947a <SDMMC_CmdWriteSingleBlock>
 80149f4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80149f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d012      	beq.n	8014a22 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	4a0f      	ldr	r2, [pc, #60]	; (8014a40 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8014a02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a0a:	431a      	orrs	r2, r3
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	2201      	movs	r2, #1
 8014a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8014a1e:	2301      	movs	r3, #1
 8014a20:	e00a      	b.n	8014a38 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8014a30:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8014a32:	2300      	movs	r3, #0
 8014a34:	e000      	b.n	8014a38 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8014a36:	2302      	movs	r3, #2
  }
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3730      	adds	r7, #48	; 0x30
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bd80      	pop	{r7, pc}
 8014a40:	1fe00fff 	.word	0x1fe00fff

08014a44 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b084      	sub	sp, #16
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a50:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d008      	beq.n	8014a72 <HAL_SD_IRQHandler+0x2e>
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	f003 0308 	and.w	r3, r3, #8
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d003      	beq.n	8014a72 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f001 f92a 	bl	8015cc4 <SD_Read_IT>
 8014a70:	e19a      	b.n	8014da8 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	f000 80ac 	beq.w	8014bda <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014a8a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	681a      	ldr	r2, [r3, #0]
 8014a96:	4b9d      	ldr	r3, [pc, #628]	; (8014d0c <HAL_SD_IRQHandler+0x2c8>)
 8014a98:	400b      	ands	r3, r1
 8014a9a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8014aaa:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	68da      	ldr	r2, [r3, #12]
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014aba:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	f003 0308 	and.w	r3, r3, #8
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d038      	beq.n	8014b38 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	f003 0302 	and.w	r3, r3, #2
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d104      	bne.n	8014ada <HAL_SD_IRQHandler+0x96>
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	f003 0320 	and.w	r3, r3, #32
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d011      	beq.n	8014afe <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f004 fd12 	bl	8019508 <SDMMC_CmdStopTransfer>
 8014ae4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8014ae6:	68bb      	ldr	r3, [r7, #8]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d008      	beq.n	8014afe <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	431a      	orrs	r2, r3
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f000 f959 	bl	8014db0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	4a83      	ldr	r2, [pc, #524]	; (8014d10 <HAL_SD_IRQHandler+0x2cc>)
 8014b04:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2201      	movs	r2, #1
 8014b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	2200      	movs	r2, #0
 8014b12:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	f003 0301 	and.w	r3, r3, #1
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d104      	bne.n	8014b28 <HAL_SD_IRQHandler+0xe4>
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	f003 0302 	and.w	r3, r3, #2
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d003      	beq.n	8014b30 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f005 fc91 	bl	801a450 <HAL_SD_RxCpltCallback>
 8014b2e:	e13b      	b.n	8014da8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8014b30:	6878      	ldr	r0, [r7, #4]
 8014b32:	f005 fc83 	bl	801a43c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8014b36:	e137      	b.n	8014da8 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	f000 8132 	beq.w	8014da8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	2200      	movs	r2, #0
 8014b4a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	2200      	movs	r2, #0
 8014b52:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	2200      	movs	r2, #0
 8014b5a:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	f003 0302 	and.w	r3, r3, #2
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d104      	bne.n	8014b70 <HAL_SD_IRQHandler+0x12c>
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	f003 0320 	and.w	r3, r3, #32
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d011      	beq.n	8014b94 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	4618      	mov	r0, r3
 8014b76:	f004 fcc7 	bl	8019508 <SDMMC_CmdStopTransfer>
 8014b7a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d008      	beq.n	8014b94 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	431a      	orrs	r2, r3
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f000 f90e 	bl	8014db0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2201      	movs	r2, #1
 8014b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	f003 0310 	and.w	r3, r3, #16
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d104      	bne.n	8014bb6 <HAL_SD_IRQHandler+0x172>
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	f003 0320 	and.w	r3, r3, #32
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d002      	beq.n	8014bbc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f005 fc40 	bl	801a43c <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	f003 0301 	and.w	r3, r3, #1
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d105      	bne.n	8014bd2 <HAL_SD_IRQHandler+0x18e>
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	f003 0302 	and.w	r3, r3, #2
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	f000 80eb 	beq.w	8014da8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8014bd2:	6878      	ldr	r0, [r7, #4]
 8014bd4:	f005 fc3c 	bl	801a450 <HAL_SD_RxCpltCallback>
}
 8014bd8:	e0e6      	b.n	8014da8 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d008      	beq.n	8014bfa <HAL_SD_IRQHandler+0x1b6>
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	f003 0308 	and.w	r3, r3, #8
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d003      	beq.n	8014bfa <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	f001 f8ac 	bl	8015d50 <SD_Write_IT>
 8014bf8:	e0d6      	b.n	8014da8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c00:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	f000 80a2 	beq.w	8014d4e <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c10:	f003 0302 	and.w	r3, r3, #2
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d005      	beq.n	8014c24 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c1c:	f043 0202 	orr.w	r2, r3, #2
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c2a:	f003 0308 	and.w	r3, r3, #8
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d005      	beq.n	8014c3e <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c36:	f043 0208 	orr.w	r2, r3, #8
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c44:	f003 0320 	and.w	r3, r3, #32
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d005      	beq.n	8014c58 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c50:	f043 0220 	orr.w	r2, r3, #32
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c5e:	f003 0310 	and.w	r3, r3, #16
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d005      	beq.n	8014c72 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c6a:	f043 0210 	orr.w	r2, r3, #16
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	4a26      	ldr	r2, [pc, #152]	; (8014d10 <HAL_SD_IRQHandler+0x2cc>)
 8014c78:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8014c88:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	68da      	ldr	r2, [r3, #12]
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014c98:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	68da      	ldr	r2, [r3, #12]
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014cb8:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f004 fc22 	bl	8019508 <SDMMC_CmdStopTransfer>
 8014cc4:	4602      	mov	r2, r0
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cca:	431a      	orrs	r2, r3
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	68da      	ldr	r2, [r3, #12]
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014cde:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014ce8:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	f003 0308 	and.w	r3, r3, #8
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d00f      	beq.n	8014d14 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8014d02:	6878      	ldr	r0, [r7, #4]
 8014d04:	f000 f854 	bl	8014db0 <HAL_SD_ErrorCallback>
}
 8014d08:	e04e      	b.n	8014da8 <HAL_SD_IRQHandler+0x364>
 8014d0a:	bf00      	nop
 8014d0c:	ffff3ec5 	.word	0xffff3ec5
 8014d10:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d044      	beq.n	8014da8 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d040      	beq.n	8014da8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8014d34:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	2201      	movs	r2, #1
 8014d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	f000 f832 	bl	8014db0 <HAL_SD_ErrorCallback>
}
 8014d4c:	e02c      	b.n	8014da8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d025      	beq.n	8014da8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d64:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d6c:	f003 0304 	and.w	r3, r3, #4
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d10c      	bne.n	8014d8e <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	f003 0320 	and.w	r3, r3, #32
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d003      	beq.n	8014d86 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8014d7e:	6878      	ldr	r0, [r7, #4]
 8014d80:	f001 f84e 	bl	8015e20 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8014d84:	e010      	b.n	8014da8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f001 f836 	bl	8015df8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8014d8c:	e00c      	b.n	8014da8 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	f003 0320 	and.w	r3, r3, #32
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d003      	beq.n	8014da0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8014d98:	6878      	ldr	r0, [r7, #4]
 8014d9a:	f001 f837 	bl	8015e0c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8014d9e:	e003      	b.n	8014da8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f001 f81f 	bl	8015de4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8014da6:	e7ff      	b.n	8014da8 <HAL_SD_IRQHandler+0x364>
 8014da8:	bf00      	nop
 8014daa:	3710      	adds	r7, #16
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}

08014db0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8014db0:	b480      	push	{r7}
 8014db2:	b083      	sub	sp, #12
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8014db8:	bf00      	nop
 8014dba:	370c      	adds	r7, #12
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc2:	4770      	bx	lr

08014dc4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8014dc4:	b480      	push	{r7}
 8014dc6:	b083      	sub	sp, #12
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	4603      	mov	r3, r0
 8014dcc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8014dce:	bf00      	nop
 8014dd0:	370c      	adds	r7, #12
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd8:	4770      	bx	lr
	...

08014ddc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8014ddc:	b480      	push	{r7}
 8014dde:	b083      	sub	sp, #12
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014dea:	0f9b      	lsrs	r3, r3, #30
 8014dec:	b2da      	uxtb	r2, r3
 8014dee:	683b      	ldr	r3, [r7, #0]
 8014df0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014df6:	0e9b      	lsrs	r3, r3, #26
 8014df8:	b2db      	uxtb	r3, r3
 8014dfa:	f003 030f 	and.w	r3, r3, #15
 8014dfe:	b2da      	uxtb	r2, r3
 8014e00:	683b      	ldr	r3, [r7, #0]
 8014e02:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014e08:	0e1b      	lsrs	r3, r3, #24
 8014e0a:	b2db      	uxtb	r3, r3
 8014e0c:	f003 0303 	and.w	r3, r3, #3
 8014e10:	b2da      	uxtb	r2, r3
 8014e12:	683b      	ldr	r3, [r7, #0]
 8014e14:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014e1a:	0c1b      	lsrs	r3, r3, #16
 8014e1c:	b2da      	uxtb	r2, r3
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014e26:	0a1b      	lsrs	r3, r3, #8
 8014e28:	b2da      	uxtb	r2, r3
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014e32:	b2da      	uxtb	r2, r3
 8014e34:	683b      	ldr	r3, [r7, #0]
 8014e36:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014e3c:	0d1b      	lsrs	r3, r3, #20
 8014e3e:	b29a      	uxth	r2, r3
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014e48:	0c1b      	lsrs	r3, r3, #16
 8014e4a:	b2db      	uxtb	r3, r3
 8014e4c:	f003 030f 	and.w	r3, r3, #15
 8014e50:	b2da      	uxtb	r2, r3
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014e5a:	0bdb      	lsrs	r3, r3, #15
 8014e5c:	b2db      	uxtb	r3, r3
 8014e5e:	f003 0301 	and.w	r3, r3, #1
 8014e62:	b2da      	uxtb	r2, r3
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014e6c:	0b9b      	lsrs	r3, r3, #14
 8014e6e:	b2db      	uxtb	r3, r3
 8014e70:	f003 0301 	and.w	r3, r3, #1
 8014e74:	b2da      	uxtb	r2, r3
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014e7e:	0b5b      	lsrs	r3, r3, #13
 8014e80:	b2db      	uxtb	r3, r3
 8014e82:	f003 0301 	and.w	r3, r3, #1
 8014e86:	b2da      	uxtb	r2, r3
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014e90:	0b1b      	lsrs	r3, r3, #12
 8014e92:	b2db      	uxtb	r3, r3
 8014e94:	f003 0301 	and.w	r3, r3, #1
 8014e98:	b2da      	uxtb	r2, r3
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8014e9e:	683b      	ldr	r3, [r7, #0]
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d163      	bne.n	8014f74 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014eb0:	009a      	lsls	r2, r3, #2
 8014eb2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8014eb6:	4013      	ands	r3, r2
 8014eb8:	687a      	ldr	r2, [r7, #4]
 8014eba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8014ebc:	0f92      	lsrs	r2, r2, #30
 8014ebe:	431a      	orrs	r2, r3
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014ec8:	0edb      	lsrs	r3, r3, #27
 8014eca:	b2db      	uxtb	r3, r3
 8014ecc:	f003 0307 	and.w	r3, r3, #7
 8014ed0:	b2da      	uxtb	r2, r3
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014eda:	0e1b      	lsrs	r3, r3, #24
 8014edc:	b2db      	uxtb	r3, r3
 8014ede:	f003 0307 	and.w	r3, r3, #7
 8014ee2:	b2da      	uxtb	r2, r3
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014eec:	0d5b      	lsrs	r3, r3, #21
 8014eee:	b2db      	uxtb	r3, r3
 8014ef0:	f003 0307 	and.w	r3, r3, #7
 8014ef4:	b2da      	uxtb	r2, r3
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014efe:	0c9b      	lsrs	r3, r3, #18
 8014f00:	b2db      	uxtb	r3, r3
 8014f02:	f003 0307 	and.w	r3, r3, #7
 8014f06:	b2da      	uxtb	r2, r3
 8014f08:	683b      	ldr	r3, [r7, #0]
 8014f0a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014f10:	0bdb      	lsrs	r3, r3, #15
 8014f12:	b2db      	uxtb	r3, r3
 8014f14:	f003 0307 	and.w	r3, r3, #7
 8014f18:	b2da      	uxtb	r2, r3
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8014f1e:	683b      	ldr	r3, [r7, #0]
 8014f20:	691b      	ldr	r3, [r3, #16]
 8014f22:	1c5a      	adds	r2, r3, #1
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8014f28:	683b      	ldr	r3, [r7, #0]
 8014f2a:	7e1b      	ldrb	r3, [r3, #24]
 8014f2c:	b2db      	uxtb	r3, r3
 8014f2e:	f003 0307 	and.w	r3, r3, #7
 8014f32:	3302      	adds	r3, #2
 8014f34:	2201      	movs	r2, #1
 8014f36:	fa02 f303 	lsl.w	r3, r2, r3
 8014f3a:	687a      	ldr	r2, [r7, #4]
 8014f3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8014f3e:	fb02 f203 	mul.w	r2, r2, r3
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	7a1b      	ldrb	r3, [r3, #8]
 8014f4a:	b2db      	uxtb	r3, r3
 8014f4c:	f003 030f 	and.w	r3, r3, #15
 8014f50:	2201      	movs	r2, #1
 8014f52:	409a      	lsls	r2, r3
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f5c:	687a      	ldr	r2, [r7, #4]
 8014f5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8014f60:	0a52      	lsrs	r2, r2, #9
 8014f62:	fb02 f203 	mul.w	r2, r2, r3
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014f70:	659a      	str	r2, [r3, #88]	; 0x58
 8014f72:	e031      	b.n	8014fd8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f78:	2b01      	cmp	r3, #1
 8014f7a:	d11d      	bne.n	8014fb8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014f80:	041b      	lsls	r3, r3, #16
 8014f82:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014f8a:	0c1b      	lsrs	r3, r3, #16
 8014f8c:	431a      	orrs	r2, r3
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	691b      	ldr	r3, [r3, #16]
 8014f96:	3301      	adds	r3, #1
 8014f98:	029a      	lsls	r2, r3, #10
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014fac:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	659a      	str	r2, [r3, #88]	; 0x58
 8014fb6:	e00f      	b.n	8014fd8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	4a58      	ldr	r2, [pc, #352]	; (8015120 <HAL_SD_GetCardCSD+0x344>)
 8014fbe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	2201      	movs	r2, #1
 8014fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8014fd4:	2301      	movs	r3, #1
 8014fd6:	e09d      	b.n	8015114 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014fdc:	0b9b      	lsrs	r3, r3, #14
 8014fde:	b2db      	uxtb	r3, r3
 8014fe0:	f003 0301 	and.w	r3, r3, #1
 8014fe4:	b2da      	uxtb	r2, r3
 8014fe6:	683b      	ldr	r3, [r7, #0]
 8014fe8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014fee:	09db      	lsrs	r3, r3, #7
 8014ff0:	b2db      	uxtb	r3, r3
 8014ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014ff6:	b2da      	uxtb	r2, r3
 8014ff8:	683b      	ldr	r3, [r7, #0]
 8014ffa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015000:	b2db      	uxtb	r3, r3
 8015002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015006:	b2da      	uxtb	r2, r3
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015010:	0fdb      	lsrs	r3, r3, #31
 8015012:	b2da      	uxtb	r2, r3
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801501c:	0f5b      	lsrs	r3, r3, #29
 801501e:	b2db      	uxtb	r3, r3
 8015020:	f003 0303 	and.w	r3, r3, #3
 8015024:	b2da      	uxtb	r2, r3
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801502e:	0e9b      	lsrs	r3, r3, #26
 8015030:	b2db      	uxtb	r3, r3
 8015032:	f003 0307 	and.w	r3, r3, #7
 8015036:	b2da      	uxtb	r2, r3
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015040:	0d9b      	lsrs	r3, r3, #22
 8015042:	b2db      	uxtb	r3, r3
 8015044:	f003 030f 	and.w	r3, r3, #15
 8015048:	b2da      	uxtb	r2, r3
 801504a:	683b      	ldr	r3, [r7, #0]
 801504c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015052:	0d5b      	lsrs	r3, r3, #21
 8015054:	b2db      	uxtb	r3, r3
 8015056:	f003 0301 	and.w	r3, r3, #1
 801505a:	b2da      	uxtb	r2, r3
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8015062:	683b      	ldr	r3, [r7, #0]
 8015064:	2200      	movs	r2, #0
 8015066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801506e:	0c1b      	lsrs	r3, r3, #16
 8015070:	b2db      	uxtb	r3, r3
 8015072:	f003 0301 	and.w	r3, r3, #1
 8015076:	b2da      	uxtb	r2, r3
 8015078:	683b      	ldr	r3, [r7, #0]
 801507a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015082:	0bdb      	lsrs	r3, r3, #15
 8015084:	b2db      	uxtb	r3, r3
 8015086:	f003 0301 	and.w	r3, r3, #1
 801508a:	b2da      	uxtb	r2, r3
 801508c:	683b      	ldr	r3, [r7, #0]
 801508e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015096:	0b9b      	lsrs	r3, r3, #14
 8015098:	b2db      	uxtb	r3, r3
 801509a:	f003 0301 	and.w	r3, r3, #1
 801509e:	b2da      	uxtb	r2, r3
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150aa:	0b5b      	lsrs	r3, r3, #13
 80150ac:	b2db      	uxtb	r3, r3
 80150ae:	f003 0301 	and.w	r3, r3, #1
 80150b2:	b2da      	uxtb	r2, r3
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150be:	0b1b      	lsrs	r3, r3, #12
 80150c0:	b2db      	uxtb	r3, r3
 80150c2:	f003 0301 	and.w	r3, r3, #1
 80150c6:	b2da      	uxtb	r2, r3
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150d2:	0a9b      	lsrs	r3, r3, #10
 80150d4:	b2db      	uxtb	r3, r3
 80150d6:	f003 0303 	and.w	r3, r3, #3
 80150da:	b2da      	uxtb	r2, r3
 80150dc:	683b      	ldr	r3, [r7, #0]
 80150de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150e6:	0a1b      	lsrs	r3, r3, #8
 80150e8:	b2db      	uxtb	r3, r3
 80150ea:	f003 0303 	and.w	r3, r3, #3
 80150ee:	b2da      	uxtb	r2, r3
 80150f0:	683b      	ldr	r3, [r7, #0]
 80150f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150fa:	085b      	lsrs	r3, r3, #1
 80150fc:	b2db      	uxtb	r3, r3
 80150fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015102:	b2da      	uxtb	r2, r3
 8015104:	683b      	ldr	r3, [r7, #0]
 8015106:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	2201      	movs	r2, #1
 801510e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8015112:	2300      	movs	r3, #0
}
 8015114:	4618      	mov	r0, r3
 8015116:	370c      	adds	r7, #12
 8015118:	46bd      	mov	sp, r7
 801511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511e:	4770      	bx	lr
 8015120:	1fe00fff 	.word	0x1fe00fff

08015124 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b094      	sub	sp, #80	; 0x50
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
 801512c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 801512e:	2300      	movs	r3, #0
 8015130:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8015134:	f107 0308 	add.w	r3, r7, #8
 8015138:	4619      	mov	r1, r3
 801513a:	6878      	ldr	r0, [r7, #4]
 801513c:	f000 fb64 	bl	8015808 <SD_SendSDStatus>
 8015140:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8015142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015144:	2b00      	cmp	r3, #0
 8015146:	d011      	beq.n	801516c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	4a4f      	ldr	r2, [pc, #316]	; (801528c <HAL_SD_GetCardStatus+0x168>)
 801514e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015156:	431a      	orrs	r2, r3
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2201      	movs	r2, #1
 8015160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8015164:	2301      	movs	r3, #1
 8015166:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801516a:	e070      	b.n	801524e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	099b      	lsrs	r3, r3, #6
 8015170:	b2db      	uxtb	r3, r3
 8015172:	f003 0303 	and.w	r3, r3, #3
 8015176:	b2da      	uxtb	r2, r3
 8015178:	683b      	ldr	r3, [r7, #0]
 801517a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	095b      	lsrs	r3, r3, #5
 8015180:	b2db      	uxtb	r3, r3
 8015182:	f003 0301 	and.w	r3, r3, #1
 8015186:	b2da      	uxtb	r2, r3
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	0a1b      	lsrs	r3, r3, #8
 8015190:	b29b      	uxth	r3, r3
 8015192:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8015196:	b29a      	uxth	r2, r3
 8015198:	68bb      	ldr	r3, [r7, #8]
 801519a:	0e1b      	lsrs	r3, r3, #24
 801519c:	b29b      	uxth	r3, r3
 801519e:	4313      	orrs	r3, r2
 80151a0:	b29a      	uxth	r2, r3
 80151a2:	683b      	ldr	r3, [r7, #0]
 80151a4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	061a      	lsls	r2, r3, #24
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	021b      	lsls	r3, r3, #8
 80151ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80151b2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	0a1b      	lsrs	r3, r3, #8
 80151b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80151bc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	0e1b      	lsrs	r3, r3, #24
 80151c2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	b2da      	uxtb	r2, r3
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	0a1b      	lsrs	r3, r3, #8
 80151d4:	b2da      	uxtb	r2, r3
 80151d6:	683b      	ldr	r3, [r7, #0]
 80151d8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	0d1b      	lsrs	r3, r3, #20
 80151de:	b2db      	uxtb	r3, r3
 80151e0:	f003 030f 	and.w	r3, r3, #15
 80151e4:	b2da      	uxtb	r2, r3
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80151ea:	693b      	ldr	r3, [r7, #16]
 80151ec:	0c1b      	lsrs	r3, r3, #16
 80151ee:	b29b      	uxth	r3, r3
 80151f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80151f4:	b29a      	uxth	r2, r3
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	b29b      	uxth	r3, r3
 80151fa:	b2db      	uxtb	r3, r3
 80151fc:	b29b      	uxth	r3, r3
 80151fe:	4313      	orrs	r3, r2
 8015200:	b29a      	uxth	r2, r3
 8015202:	683b      	ldr	r3, [r7, #0]
 8015204:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8015206:	697b      	ldr	r3, [r7, #20]
 8015208:	0a9b      	lsrs	r3, r3, #10
 801520a:	b2db      	uxtb	r3, r3
 801520c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015210:	b2da      	uxtb	r2, r3
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8015216:	697b      	ldr	r3, [r7, #20]
 8015218:	0a1b      	lsrs	r3, r3, #8
 801521a:	b2db      	uxtb	r3, r3
 801521c:	f003 0303 	and.w	r3, r3, #3
 8015220:	b2da      	uxtb	r2, r3
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8015226:	697b      	ldr	r3, [r7, #20]
 8015228:	091b      	lsrs	r3, r3, #4
 801522a:	b2db      	uxtb	r3, r3
 801522c:	f003 030f 	and.w	r3, r3, #15
 8015230:	b2da      	uxtb	r2, r3
 8015232:	683b      	ldr	r3, [r7, #0]
 8015234:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8015236:	697b      	ldr	r3, [r7, #20]
 8015238:	b2db      	uxtb	r3, r3
 801523a:	f003 030f 	and.w	r3, r3, #15
 801523e:	b2da      	uxtb	r2, r3
 8015240:	683b      	ldr	r3, [r7, #0]
 8015242:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8015244:	69bb      	ldr	r3, [r7, #24]
 8015246:	0e1b      	lsrs	r3, r3, #24
 8015248:	b2da      	uxtb	r2, r3
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015256:	4618      	mov	r0, r3
 8015258:	f004 f8a6 	bl	80193a8 <SDMMC_CmdBlockLength>
 801525c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 801525e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015260:	2b00      	cmp	r3, #0
 8015262:	d00d      	beq.n	8015280 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	4a08      	ldr	r2, [pc, #32]	; (801528c <HAL_SD_GetCardStatus+0x168>)
 801526a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015270:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2201      	movs	r2, #1
 8015276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 801527a:	2301      	movs	r3, #1
 801527c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8015280:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8015284:	4618      	mov	r0, r3
 8015286:	3750      	adds	r7, #80	; 0x50
 8015288:	46bd      	mov	sp, r7
 801528a:	bd80      	pop	{r7, pc}
 801528c:	1fe00fff 	.word	0x1fe00fff

08015290 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8015290:	b480      	push	{r7}
 8015292:	b083      	sub	sp, #12
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
 8015298:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80152b6:	683b      	ldr	r3, [r7, #0]
 80152b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80152be:	683b      	ldr	r3, [r7, #0]
 80152c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80152d6:	683b      	ldr	r3, [r7, #0]
 80152d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80152da:	2300      	movs	r3, #0
}
 80152dc:	4618      	mov	r0, r3
 80152de:	370c      	adds	r7, #12
 80152e0:	46bd      	mov	sp, r7
 80152e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e6:	4770      	bx	lr

080152e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80152e8:	b5b0      	push	{r4, r5, r7, lr}
 80152ea:	b08e      	sub	sp, #56	; 0x38
 80152ec:	af04      	add	r7, sp, #16
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80152f2:	2300      	movs	r3, #0
 80152f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	2203      	movs	r2, #3
 80152fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015304:	2b03      	cmp	r3, #3
 8015306:	d02e      	beq.n	8015366 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801530e:	d106      	bne.n	801531e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015314:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	639a      	str	r2, [r3, #56]	; 0x38
 801531c:	e029      	b.n	8015372 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 801531e:	683b      	ldr	r3, [r7, #0]
 8015320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015324:	d10a      	bne.n	801533c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f000 fb66 	bl	80159f8 <SD_WideBus_Enable>
 801532c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015332:	6a3b      	ldr	r3, [r7, #32]
 8015334:	431a      	orrs	r2, r3
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	639a      	str	r2, [r3, #56]	; 0x38
 801533a:	e01a      	b.n	8015372 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 801533c:	683b      	ldr	r3, [r7, #0]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d10a      	bne.n	8015358 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8015342:	6878      	ldr	r0, [r7, #4]
 8015344:	f000 fba3 	bl	8015a8e <SD_WideBus_Disable>
 8015348:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801534e:	6a3b      	ldr	r3, [r7, #32]
 8015350:	431a      	orrs	r2, r3
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	639a      	str	r2, [r3, #56]	; 0x38
 8015356:	e00c      	b.n	8015372 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801535c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	639a      	str	r2, [r3, #56]	; 0x38
 8015364:	e005      	b.n	8015372 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801536a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015376:	2b00      	cmp	r3, #0
 8015378:	d007      	beq.n	801538a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	4a2e      	ldr	r2, [pc, #184]	; (8015438 <HAL_SD_ConfigWideBusOperation+0x150>)
 8015380:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8015382:	2301      	movs	r3, #1
 8015384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015388:	e034      	b.n	80153f4 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	685b      	ldr	r3, [r3, #4]
 801538e:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	689b      	ldr	r3, [r3, #8]
 8015394:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8015396:	683b      	ldr	r3, [r7, #0]
 8015398:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	691b      	ldr	r3, [r3, #16]
 801539e:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	695b      	ldr	r3, [r3, #20]
 80153a4:	2b03      	cmp	r3, #3
 80153a6:	d903      	bls.n	80153b0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	695b      	ldr	r3, [r3, #20]
 80153ac:	61bb      	str	r3, [r7, #24]
 80153ae:	e012      	b.n	80153d6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80153b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80153b8:	d103      	bne.n	80153c2 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	695b      	ldr	r3, [r3, #20]
 80153be:	61bb      	str	r3, [r7, #24]
 80153c0:	e009      	b.n	80153d6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80153c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153ca:	d102      	bne.n	80153d2 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80153cc:	2302      	movs	r3, #2
 80153ce:	61bb      	str	r3, [r7, #24]
 80153d0:	e001      	b.n	80153d6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80153d2:	2304      	movs	r3, #4
 80153d4:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	681d      	ldr	r5, [r3, #0]
 80153da:	466c      	mov	r4, sp
 80153dc:	f107 0314 	add.w	r3, r7, #20
 80153e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80153e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80153e8:	f107 0308 	add.w	r3, r7, #8
 80153ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80153ee:	4628      	mov	r0, r5
 80153f0:	f003 fefc 	bl	80191ec <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80153fc:	4618      	mov	r0, r3
 80153fe:	f003 ffd3 	bl	80193a8 <SDMMC_CmdBlockLength>
 8015402:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8015404:	6a3b      	ldr	r3, [r7, #32]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d00c      	beq.n	8015424 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	4a0a      	ldr	r2, [pc, #40]	; (8015438 <HAL_SD_ConfigWideBusOperation+0x150>)
 8015410:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015416:	6a3b      	ldr	r3, [r7, #32]
 8015418:	431a      	orrs	r2, r3
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 801541e:	2301      	movs	r3, #1
 8015420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2201      	movs	r2, #1
 8015428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 801542c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015430:	4618      	mov	r0, r3
 8015432:	3728      	adds	r7, #40	; 0x28
 8015434:	46bd      	mov	sp, r7
 8015436:	bdb0      	pop	{r4, r5, r7, pc}
 8015438:	1fe00fff 	.word	0x1fe00fff

0801543c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b086      	sub	sp, #24
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8015444:	2300      	movs	r3, #0
 8015446:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8015448:	f107 030c 	add.w	r3, r7, #12
 801544c:	4619      	mov	r1, r3
 801544e:	6878      	ldr	r0, [r7, #4]
 8015450:	f000 faaa 	bl	80159a8 <SD_SendStatus>
 8015454:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8015456:	697b      	ldr	r3, [r7, #20]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d005      	beq.n	8015468 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	431a      	orrs	r2, r3
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	0a5b      	lsrs	r3, r3, #9
 801546c:	f003 030f 	and.w	r3, r3, #15
 8015470:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8015472:	693b      	ldr	r3, [r7, #16]
}
 8015474:	4618      	mov	r0, r3
 8015476:	3718      	adds	r7, #24
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}

0801547c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 801547c:	b590      	push	{r4, r7, lr}
 801547e:	b091      	sub	sp, #68	; 0x44
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8015484:	2301      	movs	r3, #1
 8015486:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	4618      	mov	r0, r3
 801548e:	f003 ff06 	bl	801929e <SDMMC_GetPowerState>
 8015492:	4603      	mov	r3, r0
 8015494:	2b00      	cmp	r3, #0
 8015496:	d102      	bne.n	801549e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8015498:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801549c:	e0a8      	b.n	80155f0 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154a2:	2b03      	cmp	r3, #3
 80154a4:	d02e      	beq.n	8015504 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	4618      	mov	r0, r3
 80154ac:	f004 f952 	bl	8019754 <SDMMC_CmdSendCID>
 80154b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80154b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d001      	beq.n	80154bc <SD_InitCard+0x40>
    {
      return errorstate;
 80154b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154ba:	e099      	b.n	80155f0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	2100      	movs	r1, #0
 80154c2:	4618      	mov	r0, r3
 80154c4:	f003 ff31 	bl	801932a <SDMMC_GetResponse>
 80154c8:	4602      	mov	r2, r0
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	2104      	movs	r1, #4
 80154d4:	4618      	mov	r0, r3
 80154d6:	f003 ff28 	bl	801932a <SDMMC_GetResponse>
 80154da:	4602      	mov	r2, r0
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	2108      	movs	r1, #8
 80154e6:	4618      	mov	r0, r3
 80154e8:	f003 ff1f 	bl	801932a <SDMMC_GetResponse>
 80154ec:	4602      	mov	r2, r0
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	210c      	movs	r1, #12
 80154f8:	4618      	mov	r0, r3
 80154fa:	f003 ff16 	bl	801932a <SDMMC_GetResponse>
 80154fe:	4602      	mov	r2, r0
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015508:	2b03      	cmp	r3, #3
 801550a:	d00d      	beq.n	8015528 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	f107 020e 	add.w	r2, r7, #14
 8015514:	4611      	mov	r1, r2
 8015516:	4618      	mov	r0, r3
 8015518:	f004 f95b 	bl	80197d2 <SDMMC_CmdSetRelAdd>
 801551c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015520:	2b00      	cmp	r3, #0
 8015522:	d001      	beq.n	8015528 <SD_InitCard+0xac>
    {
      return errorstate;
 8015524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015526:	e063      	b.n	80155f0 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801552c:	2b03      	cmp	r3, #3
 801552e:	d036      	beq.n	801559e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8015530:	89fb      	ldrh	r3, [r7, #14]
 8015532:	461a      	mov	r2, r3
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015540:	041b      	lsls	r3, r3, #16
 8015542:	4619      	mov	r1, r3
 8015544:	4610      	mov	r0, r2
 8015546:	f004 f924 	bl	8019792 <SDMMC_CmdSendCSD>
 801554a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 801554c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801554e:	2b00      	cmp	r3, #0
 8015550:	d001      	beq.n	8015556 <SD_InitCard+0xda>
    {
      return errorstate;
 8015552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015554:	e04c      	b.n	80155f0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	2100      	movs	r1, #0
 801555c:	4618      	mov	r0, r3
 801555e:	f003 fee4 	bl	801932a <SDMMC_GetResponse>
 8015562:	4602      	mov	r2, r0
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	2104      	movs	r1, #4
 801556e:	4618      	mov	r0, r3
 8015570:	f003 fedb 	bl	801932a <SDMMC_GetResponse>
 8015574:	4602      	mov	r2, r0
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	2108      	movs	r1, #8
 8015580:	4618      	mov	r0, r3
 8015582:	f003 fed2 	bl	801932a <SDMMC_GetResponse>
 8015586:	4602      	mov	r2, r0
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	210c      	movs	r1, #12
 8015592:	4618      	mov	r0, r3
 8015594:	f003 fec9 	bl	801932a <SDMMC_GetResponse>
 8015598:	4602      	mov	r2, r0
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	2104      	movs	r1, #4
 80155a4:	4618      	mov	r0, r3
 80155a6:	f003 fec0 	bl	801932a <SDMMC_GetResponse>
 80155aa:	4603      	mov	r3, r0
 80155ac:	0d1a      	lsrs	r2, r3, #20
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80155b2:	f107 0310 	add.w	r3, r7, #16
 80155b6:	4619      	mov	r1, r3
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f7ff fc0f 	bl	8014ddc <HAL_SD_GetCardCSD>
 80155be:	4603      	mov	r3, r0
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d002      	beq.n	80155ca <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80155c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80155c8:	e012      	b.n	80155f0 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6819      	ldr	r1, [r3, #0]
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80155d2:	041b      	lsls	r3, r3, #16
 80155d4:	f04f 0400 	mov.w	r4, #0
 80155d8:	461a      	mov	r2, r3
 80155da:	4623      	mov	r3, r4
 80155dc:	4608      	mov	r0, r1
 80155de:	f003 ffcf 	bl	8019580 <SDMMC_CmdSelDesel>
 80155e2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80155e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d001      	beq.n	80155ee <SD_InitCard+0x172>
  {
    return errorstate;
 80155ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155ec:	e000      	b.n	80155f0 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80155ee:	2300      	movs	r3, #0
}
 80155f0:	4618      	mov	r0, r3
 80155f2:	3744      	adds	r7, #68	; 0x44
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd90      	pop	{r4, r7, pc}

080155f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b088      	sub	sp, #32
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015600:	2300      	movs	r3, #0
 8015602:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8015604:	2300      	movs	r3, #0
 8015606:	61fb      	str	r3, [r7, #28]
 8015608:	2300      	movs	r3, #0
 801560a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 801560c:	f7f5 fd90 	bl	800b130 <HAL_GetTick>
 8015610:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	4618      	mov	r0, r3
 8015618:	f003 ffd6 	bl	80195c8 <SDMMC_CmdGoIdleState>
 801561c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 801561e:	693b      	ldr	r3, [r7, #16]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d001      	beq.n	8015628 <SD_PowerON+0x30>
  {
    return errorstate;
 8015624:	693b      	ldr	r3, [r7, #16]
 8015626:	e0e9      	b.n	80157fc <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	4618      	mov	r0, r3
 801562e:	f003 ffe9 	bl	8019604 <SDMMC_CmdOperCond>
 8015632:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8015634:	693b      	ldr	r3, [r7, #16]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d00d      	beq.n	8015656 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	2200      	movs	r2, #0
 801563e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	4618      	mov	r0, r3
 8015646:	f003 ffbf 	bl	80195c8 <SDMMC_CmdGoIdleState>
 801564a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801564c:	693b      	ldr	r3, [r7, #16]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d004      	beq.n	801565c <SD_PowerON+0x64>
    {
      return errorstate;
 8015652:	693b      	ldr	r3, [r7, #16]
 8015654:	e0d2      	b.n	80157fc <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	2201      	movs	r2, #1
 801565a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015660:	2b01      	cmp	r3, #1
 8015662:	d137      	bne.n	80156d4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	2100      	movs	r1, #0
 801566a:	4618      	mov	r0, r3
 801566c:	f003 ffea 	bl	8019644 <SDMMC_CmdAppCommand>
 8015670:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8015672:	693b      	ldr	r3, [r7, #16]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d02d      	beq.n	80156d4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015678:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801567c:	e0be      	b.n	80157fc <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	2100      	movs	r1, #0
 8015684:	4618      	mov	r0, r3
 8015686:	f003 ffdd 	bl	8019644 <SDMMC_CmdAppCommand>
 801568a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 801568c:	693b      	ldr	r3, [r7, #16]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d001      	beq.n	8015696 <SD_PowerON+0x9e>
    {
      return errorstate;
 8015692:	693b      	ldr	r3, [r7, #16]
 8015694:	e0b2      	b.n	80157fc <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	495a      	ldr	r1, [pc, #360]	; (8015804 <SD_PowerON+0x20c>)
 801569c:	4618      	mov	r0, r3
 801569e:	f003 fff4 	bl	801968a <SDMMC_CmdAppOperCommand>
 80156a2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80156a4:	693b      	ldr	r3, [r7, #16]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d002      	beq.n	80156b0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80156aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80156ae:	e0a5      	b.n	80157fc <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	2100      	movs	r1, #0
 80156b6:	4618      	mov	r0, r3
 80156b8:	f003 fe37 	bl	801932a <SDMMC_GetResponse>
 80156bc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80156be:	69fb      	ldr	r3, [r7, #28]
 80156c0:	0fdb      	lsrs	r3, r3, #31
 80156c2:	2b01      	cmp	r3, #1
 80156c4:	d101      	bne.n	80156ca <SD_PowerON+0xd2>
 80156c6:	2301      	movs	r3, #1
 80156c8:	e000      	b.n	80156cc <SD_PowerON+0xd4>
 80156ca:	2300      	movs	r3, #0
 80156cc:	61bb      	str	r3, [r7, #24]

    count++;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	3301      	adds	r3, #1
 80156d2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80156da:	4293      	cmp	r3, r2
 80156dc:	d802      	bhi.n	80156e4 <SD_PowerON+0xec>
 80156de:	69bb      	ldr	r3, [r7, #24]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d0cc      	beq.n	801567e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80156ea:	4293      	cmp	r3, r2
 80156ec:	d902      	bls.n	80156f4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80156ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80156f2:	e083      	b.n	80157fc <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80156f4:	69fb      	ldr	r3, [r7, #28]
 80156f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d07d      	beq.n	80157fa <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2201      	movs	r2, #1
 8015702:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	699b      	ldr	r3, [r3, #24]
 8015708:	2b02      	cmp	r3, #2
 801570a:	d176      	bne.n	80157fa <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 801570c:	69fb      	ldr	r3, [r7, #28]
 801570e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015712:	2b00      	cmp	r3, #0
 8015714:	d071      	beq.n	80157fa <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	f44f 7200 	mov.w	r2, #512	; 0x200
 801571c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	681a      	ldr	r2, [r3, #0]
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	f042 0208 	orr.w	r2, r2, #8
 801572c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	4618      	mov	r0, r3
 8015734:	f004 f8b4 	bl	80198a0 <SDMMC_CmdVoltageSwitch>
 8015738:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 801573a:	693b      	ldr	r3, [r7, #16]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d00c      	beq.n	801575a <SD_PowerON+0x162>
        {
          return errorstate;
 8015740:	693b      	ldr	r3, [r7, #16]
 8015742:	e05b      	b.n	80157fc <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8015744:	f7f5 fcf4 	bl	800b130 <HAL_GetTick>
 8015748:	4602      	mov	r2, r0
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	1ad3      	subs	r3, r2, r3
 801574e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015752:	d102      	bne.n	801575a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8015754:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015758:	e050      	b.n	80157fc <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015768:	d1ec      	bne.n	8015744 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8015772:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801577a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801577e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015782:	d002      	beq.n	801578a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8015784:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015788:	e038      	b.n	80157fc <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 801578a:	2001      	movs	r0, #1
 801578c:	f7ff fb1a 	bl	8014dc4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	681a      	ldr	r2, [r3, #0]
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	f042 0204 	orr.w	r2, r2, #4
 801579e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80157a0:	e00a      	b.n	80157b8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80157a2:	f7f5 fcc5 	bl	800b130 <HAL_GetTick>
 80157a6:	4602      	mov	r2, r0
 80157a8:	697b      	ldr	r3, [r7, #20]
 80157aa:	1ad3      	subs	r3, r2, r3
 80157ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157b0:	d102      	bne.n	80157b8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80157b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80157b6:	e021      	b.n	80157fc <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80157c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80157c6:	d1ec      	bne.n	80157a2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80157d0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80157dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80157e0:	d102      	bne.n	80157e8 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80157e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80157e6:	e009      	b.n	80157fc <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	2213      	movs	r2, #19
 80157ee:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	f04f 32ff 	mov.w	r2, #4294967295
 80157f8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80157fa:	2300      	movs	r3, #0
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	3720      	adds	r7, #32
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}
 8015804:	c1100000 	.word	0xc1100000

08015808 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b08c      	sub	sp, #48	; 0x30
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
 8015810:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8015812:	f7f5 fc8d 	bl	800b130 <HAL_GetTick>
 8015816:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	2100      	movs	r1, #0
 8015822:	4618      	mov	r0, r3
 8015824:	f003 fd81 	bl	801932a <SDMMC_GetResponse>
 8015828:	4603      	mov	r3, r0
 801582a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801582e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015832:	d102      	bne.n	801583a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8015834:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015838:	e0b0      	b.n	801599c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	2140      	movs	r1, #64	; 0x40
 8015840:	4618      	mov	r0, r3
 8015842:	f003 fdb1 	bl	80193a8 <SDMMC_CmdBlockLength>
 8015846:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8015848:	6a3b      	ldr	r3, [r7, #32]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d005      	beq.n	801585a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8015856:	6a3b      	ldr	r3, [r7, #32]
 8015858:	e0a0      	b.n	801599c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	681a      	ldr	r2, [r3, #0]
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015862:	041b      	lsls	r3, r3, #16
 8015864:	4619      	mov	r1, r3
 8015866:	4610      	mov	r0, r2
 8015868:	f003 feec 	bl	8019644 <SDMMC_CmdAppCommand>
 801586c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801586e:	6a3b      	ldr	r3, [r7, #32]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d005      	beq.n	8015880 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 801587c:	6a3b      	ldr	r3, [r7, #32]
 801587e:	e08d      	b.n	801599c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8015880:	f04f 33ff 	mov.w	r3, #4294967295
 8015884:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8015886:	2340      	movs	r3, #64	; 0x40
 8015888:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 801588a:	2360      	movs	r3, #96	; 0x60
 801588c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801588e:	2302      	movs	r3, #2
 8015890:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8015892:	2300      	movs	r3, #0
 8015894:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8015896:	2301      	movs	r3, #1
 8015898:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	f107 0208 	add.w	r2, r7, #8
 80158a2:	4611      	mov	r1, r2
 80158a4:	4618      	mov	r0, r3
 80158a6:	f003 fd53 	bl	8019350 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	4618      	mov	r0, r3
 80158b0:	f003 ffd4 	bl	801985c <SDMMC_CmdStatusRegister>
 80158b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80158b6:	6a3b      	ldr	r3, [r7, #32]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d02b      	beq.n	8015914 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80158c4:	6a3b      	ldr	r3, [r7, #32]
 80158c6:	e069      	b.n	801599c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d013      	beq.n	80158fe <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80158d6:	2300      	movs	r3, #0
 80158d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80158da:	e00d      	b.n	80158f8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	4618      	mov	r0, r3
 80158e2:	f003 fcad 	bl	8019240 <SDMMC_ReadFIFO>
 80158e6:	4602      	mov	r2, r0
 80158e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ea:	601a      	str	r2, [r3, #0]
        pData++;
 80158ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ee:	3304      	adds	r3, #4
 80158f0:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 80158f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f4:	3301      	adds	r3, #1
 80158f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80158f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158fa:	2b07      	cmp	r3, #7
 80158fc:	d9ee      	bls.n	80158dc <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80158fe:	f7f5 fc17 	bl	800b130 <HAL_GetTick>
 8015902:	4602      	mov	r2, r0
 8015904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015906:	1ad3      	subs	r3, r2, r3
 8015908:	f1b3 3fff 	cmp.w	r3, #4294967295
 801590c:	d102      	bne.n	8015914 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801590e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015912:	e043      	b.n	801599c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801591a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 801591e:	2b00      	cmp	r3, #0
 8015920:	d0d2      	beq.n	80158c8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015928:	f003 0308 	and.w	r3, r3, #8
 801592c:	2b00      	cmp	r3, #0
 801592e:	d001      	beq.n	8015934 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8015930:	2308      	movs	r3, #8
 8015932:	e033      	b.n	801599c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801593a:	f003 0302 	and.w	r3, r3, #2
 801593e:	2b00      	cmp	r3, #0
 8015940:	d001      	beq.n	8015946 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8015942:	2302      	movs	r3, #2
 8015944:	e02a      	b.n	801599c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801594c:	f003 0320 	and.w	r3, r3, #32
 8015950:	2b00      	cmp	r3, #0
 8015952:	d017      	beq.n	8015984 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8015954:	2320      	movs	r3, #32
 8015956:	e021      	b.n	801599c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	4618      	mov	r0, r3
 801595e:	f003 fc6f 	bl	8019240 <SDMMC_ReadFIFO>
 8015962:	4602      	mov	r2, r0
 8015964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015966:	601a      	str	r2, [r3, #0]
    pData++;
 8015968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596a:	3304      	adds	r3, #4
 801596c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801596e:	f7f5 fbdf 	bl	800b130 <HAL_GetTick>
 8015972:	4602      	mov	r2, r0
 8015974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015976:	1ad3      	subs	r3, r2, r3
 8015978:	f1b3 3fff 	cmp.w	r3, #4294967295
 801597c:	d102      	bne.n	8015984 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801597e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015982:	e00b      	b.n	801599c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801598a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801598e:	2b00      	cmp	r3, #0
 8015990:	d1e2      	bne.n	8015958 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	4a03      	ldr	r2, [pc, #12]	; (80159a4 <SD_SendSDStatus+0x19c>)
 8015998:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 801599a:	2300      	movs	r3, #0
}
 801599c:	4618      	mov	r0, r3
 801599e:	3730      	adds	r7, #48	; 0x30
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bd80      	pop	{r7, pc}
 80159a4:	18000f3a 	.word	0x18000f3a

080159a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b084      	sub	sp, #16
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
 80159b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d102      	bne.n	80159be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80159b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80159bc:	e018      	b.n	80159f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681a      	ldr	r2, [r3, #0]
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80159c6:	041b      	lsls	r3, r3, #16
 80159c8:	4619      	mov	r1, r3
 80159ca:	4610      	mov	r0, r2
 80159cc:	f003 ff23 	bl	8019816 <SDMMC_CmdSendStatus>
 80159d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d001      	beq.n	80159dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	e009      	b.n	80159f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	2100      	movs	r1, #0
 80159e2:	4618      	mov	r0, r3
 80159e4:	f003 fca1 	bl	801932a <SDMMC_GetResponse>
 80159e8:	4602      	mov	r2, r0
 80159ea:	683b      	ldr	r3, [r7, #0]
 80159ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80159ee:	2300      	movs	r3, #0
}
 80159f0:	4618      	mov	r0, r3
 80159f2:	3710      	adds	r7, #16
 80159f4:	46bd      	mov	sp, r7
 80159f6:	bd80      	pop	{r7, pc}

080159f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b086      	sub	sp, #24
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8015a00:	2300      	movs	r3, #0
 8015a02:	60fb      	str	r3, [r7, #12]
 8015a04:	2300      	movs	r3, #0
 8015a06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	2100      	movs	r1, #0
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f003 fc8b 	bl	801932a <SDMMC_GetResponse>
 8015a14:	4603      	mov	r3, r0
 8015a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015a1e:	d102      	bne.n	8015a26 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8015a20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a24:	e02f      	b.n	8015a86 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8015a26:	f107 030c 	add.w	r3, r7, #12
 8015a2a:	4619      	mov	r1, r3
 8015a2c:	6878      	ldr	r0, [r7, #4]
 8015a2e:	f000 f879 	bl	8015b24 <SD_FindSCR>
 8015a32:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8015a34:	697b      	ldr	r3, [r7, #20]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d001      	beq.n	8015a3e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8015a3a:	697b      	ldr	r3, [r7, #20]
 8015a3c:	e023      	b.n	8015a86 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d01c      	beq.n	8015a82 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	681a      	ldr	r2, [r3, #0]
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a50:	041b      	lsls	r3, r3, #16
 8015a52:	4619      	mov	r1, r3
 8015a54:	4610      	mov	r0, r2
 8015a56:	f003 fdf5 	bl	8019644 <SDMMC_CmdAppCommand>
 8015a5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8015a5c:	697b      	ldr	r3, [r7, #20]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d001      	beq.n	8015a66 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8015a62:	697b      	ldr	r3, [r7, #20]
 8015a64:	e00f      	b.n	8015a86 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	2102      	movs	r1, #2
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f003 fe2c 	bl	80196ca <SDMMC_CmdBusWidth>
 8015a72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8015a74:	697b      	ldr	r3, [r7, #20]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d001      	beq.n	8015a7e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8015a7a:	697b      	ldr	r3, [r7, #20]
 8015a7c:	e003      	b.n	8015a86 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	e001      	b.n	8015a86 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8015a82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3718      	adds	r7, #24
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}

08015a8e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8015a8e:	b580      	push	{r7, lr}
 8015a90:	b086      	sub	sp, #24
 8015a92:	af00      	add	r7, sp, #0
 8015a94:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8015a96:	2300      	movs	r3, #0
 8015a98:	60fb      	str	r3, [r7, #12]
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	2100      	movs	r1, #0
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f003 fc40 	bl	801932a <SDMMC_GetResponse>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015ab4:	d102      	bne.n	8015abc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8015ab6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015aba:	e02f      	b.n	8015b1c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8015abc:	f107 030c 	add.w	r3, r7, #12
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	6878      	ldr	r0, [r7, #4]
 8015ac4:	f000 f82e 	bl	8015b24 <SD_FindSCR>
 8015ac8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8015aca:	697b      	ldr	r3, [r7, #20]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d001      	beq.n	8015ad4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8015ad0:	697b      	ldr	r3, [r7, #20]
 8015ad2:	e023      	b.n	8015b1c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8015ad4:	693b      	ldr	r3, [r7, #16]
 8015ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d01c      	beq.n	8015b18 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	681a      	ldr	r2, [r3, #0]
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015ae6:	041b      	lsls	r3, r3, #16
 8015ae8:	4619      	mov	r1, r3
 8015aea:	4610      	mov	r0, r2
 8015aec:	f003 fdaa 	bl	8019644 <SDMMC_CmdAppCommand>
 8015af0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8015af2:	697b      	ldr	r3, [r7, #20]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d001      	beq.n	8015afc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	e00f      	b.n	8015b1c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	2100      	movs	r1, #0
 8015b02:	4618      	mov	r0, r3
 8015b04:	f003 fde1 	bl	80196ca <SDMMC_CmdBusWidth>
 8015b08:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8015b0a:	697b      	ldr	r3, [r7, #20]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d001      	beq.n	8015b14 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8015b10:	697b      	ldr	r3, [r7, #20]
 8015b12:	e003      	b.n	8015b1c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8015b14:	2300      	movs	r3, #0
 8015b16:	e001      	b.n	8015b1c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8015b18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	3718      	adds	r7, #24
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd80      	pop	{r7, pc}

08015b24 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b08e      	sub	sp, #56	; 0x38
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
 8015b2c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8015b2e:	f7f5 faff 	bl	800b130 <HAL_GetTick>
 8015b32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8015b34:	2300      	movs	r3, #0
 8015b36:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8015b38:	2300      	movs	r3, #0
 8015b3a:	60bb      	str	r3, [r7, #8]
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8015b40:	683b      	ldr	r3, [r7, #0]
 8015b42:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	2108      	movs	r1, #8
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f003 fc2c 	bl	80193a8 <SDMMC_CmdBlockLength>
 8015b50:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8015b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d001      	beq.n	8015b5c <SD_FindSCR+0x38>
  {
    return errorstate;
 8015b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b5a:	e0ad      	b.n	8015cb8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015b64:	041b      	lsls	r3, r3, #16
 8015b66:	4619      	mov	r1, r3
 8015b68:	4610      	mov	r0, r2
 8015b6a:	f003 fd6b 	bl	8019644 <SDMMC_CmdAppCommand>
 8015b6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8015b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d001      	beq.n	8015b7a <SD_FindSCR+0x56>
  {
    return errorstate;
 8015b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b78:	e09e      	b.n	8015cb8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8015b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8015b7e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8015b80:	2308      	movs	r3, #8
 8015b82:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8015b84:	2330      	movs	r3, #48	; 0x30
 8015b86:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8015b88:	2302      	movs	r3, #2
 8015b8a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8015b90:	2301      	movs	r3, #1
 8015b92:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	f107 0210 	add.w	r2, r7, #16
 8015b9c:	4611      	mov	r1, r2
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f003 fbd6 	bl	8019350 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f003 fdb1 	bl	8019710 <SDMMC_CmdSendSCR>
 8015bae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8015bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d027      	beq.n	8015c06 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8015bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb8:	e07e      	b.n	8015cb8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d113      	bne.n	8015bf0 <SD_FindSCR+0xcc>
 8015bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d110      	bne.n	8015bf0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f003 fb34 	bl	8019240 <SDMMC_ReadFIFO>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	4618      	mov	r0, r3
 8015be2:	f003 fb2d 	bl	8019240 <SDMMC_ReadFIFO>
 8015be6:	4603      	mov	r3, r0
 8015be8:	60fb      	str	r3, [r7, #12]
      index++;
 8015bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bec:	3301      	adds	r3, #1
 8015bee:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8015bf0:	f7f5 fa9e 	bl	800b130 <HAL_GetTick>
 8015bf4:	4602      	mov	r2, r0
 8015bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bf8:	1ad3      	subs	r3, r2, r3
 8015bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bfe:	d102      	bne.n	8015c06 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8015c00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015c04:	e058      	b.n	8015cb8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015c0c:	f240 532a 	movw	r3, #1322	; 0x52a
 8015c10:	4013      	ands	r3, r2
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d0d1      	beq.n	8015bba <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c1c:	f003 0308 	and.w	r3, r3, #8
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d005      	beq.n	8015c30 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	2208      	movs	r2, #8
 8015c2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8015c2c:	2308      	movs	r3, #8
 8015c2e:	e043      	b.n	8015cb8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c36:	f003 0302 	and.w	r3, r3, #2
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d005      	beq.n	8015c4a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	2202      	movs	r2, #2
 8015c44:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8015c46:	2302      	movs	r3, #2
 8015c48:	e036      	b.n	8015cb8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c50:	f003 0320 	and.w	r3, r3, #32
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d005      	beq.n	8015c64 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	2220      	movs	r2, #32
 8015c5e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8015c60:	2320      	movs	r3, #32
 8015c62:	e029      	b.n	8015cb8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	4a15      	ldr	r2, [pc, #84]	; (8015cc0 <SD_FindSCR+0x19c>)
 8015c6a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	061a      	lsls	r2, r3, #24
 8015c70:	68fb      	ldr	r3, [r7, #12]
 8015c72:	021b      	lsls	r3, r3, #8
 8015c74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015c78:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	0a1b      	lsrs	r3, r3, #8
 8015c7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8015c82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	0e1b      	lsrs	r3, r3, #24
 8015c88:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8015c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8c:	601a      	str	r2, [r3, #0]
    scr++;
 8015c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c90:	3304      	adds	r3, #4
 8015c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8015c94:	68bb      	ldr	r3, [r7, #8]
 8015c96:	061a      	lsls	r2, r3, #24
 8015c98:	68bb      	ldr	r3, [r7, #8]
 8015c9a:	021b      	lsls	r3, r3, #8
 8015c9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015ca0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8015ca2:	68bb      	ldr	r3, [r7, #8]
 8015ca4:	0a1b      	lsrs	r3, r3, #8
 8015ca6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8015caa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8015cac:	68bb      	ldr	r3, [r7, #8]
 8015cae:	0e1b      	lsrs	r3, r3, #24
 8015cb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8015cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cb4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8015cb6:	2300      	movs	r3, #0
}
 8015cb8:	4618      	mov	r0, r3
 8015cba:	3738      	adds	r7, #56	; 0x38
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	bd80      	pop	{r7, pc}
 8015cc0:	18000f3a 	.word	0x18000f3a

08015cc4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b086      	sub	sp, #24
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cd0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cd6:	2b1f      	cmp	r3, #31
 8015cd8:	d936      	bls.n	8015d48 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8015cda:	2300      	movs	r3, #0
 8015cdc:	617b      	str	r3, [r7, #20]
 8015cde:	e027      	b.n	8015d30 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f003 faab 	bl	8019240 <SDMMC_ReadFIFO>
 8015cea:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	b2da      	uxtb	r2, r3
 8015cf0:	693b      	ldr	r3, [r7, #16]
 8015cf2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8015cf4:	693b      	ldr	r3, [r7, #16]
 8015cf6:	3301      	adds	r3, #1
 8015cf8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	0a1b      	lsrs	r3, r3, #8
 8015cfe:	b2da      	uxtb	r2, r3
 8015d00:	693b      	ldr	r3, [r7, #16]
 8015d02:	701a      	strb	r2, [r3, #0]
      tmp++;
 8015d04:	693b      	ldr	r3, [r7, #16]
 8015d06:	3301      	adds	r3, #1
 8015d08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	0c1b      	lsrs	r3, r3, #16
 8015d0e:	b2da      	uxtb	r2, r3
 8015d10:	693b      	ldr	r3, [r7, #16]
 8015d12:	701a      	strb	r2, [r3, #0]
      tmp++;
 8015d14:	693b      	ldr	r3, [r7, #16]
 8015d16:	3301      	adds	r3, #1
 8015d18:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	0e1b      	lsrs	r3, r3, #24
 8015d1e:	b2da      	uxtb	r2, r3
 8015d20:	693b      	ldr	r3, [r7, #16]
 8015d22:	701a      	strb	r2, [r3, #0]
      tmp++;
 8015d24:	693b      	ldr	r3, [r7, #16]
 8015d26:	3301      	adds	r3, #1
 8015d28:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8015d2a:	697b      	ldr	r3, [r7, #20]
 8015d2c:	3301      	adds	r3, #1
 8015d2e:	617b      	str	r3, [r7, #20]
 8015d30:	697b      	ldr	r3, [r7, #20]
 8015d32:	2b07      	cmp	r3, #7
 8015d34:	d9d4      	bls.n	8015ce0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	693a      	ldr	r2, [r7, #16]
 8015d3a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d40:	f1a3 0220 	sub.w	r2, r3, #32
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8015d48:	bf00      	nop
 8015d4a:	3718      	adds	r7, #24
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd80      	pop	{r7, pc}

08015d50 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b086      	sub	sp, #24
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	6a1b      	ldr	r3, [r3, #32]
 8015d5c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d62:	2b1f      	cmp	r3, #31
 8015d64:	d93a      	bls.n	8015ddc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8015d66:	2300      	movs	r3, #0
 8015d68:	617b      	str	r3, [r7, #20]
 8015d6a:	e02b      	b.n	8015dc4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	60fb      	str	r3, [r7, #12]
      tmp++;
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	3301      	adds	r3, #1
 8015d76:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8015d78:	693b      	ldr	r3, [r7, #16]
 8015d7a:	781b      	ldrb	r3, [r3, #0]
 8015d7c:	021a      	lsls	r2, r3, #8
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	4313      	orrs	r3, r2
 8015d82:	60fb      	str	r3, [r7, #12]
      tmp++;
 8015d84:	693b      	ldr	r3, [r7, #16]
 8015d86:	3301      	adds	r3, #1
 8015d88:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8015d8a:	693b      	ldr	r3, [r7, #16]
 8015d8c:	781b      	ldrb	r3, [r3, #0]
 8015d8e:	041a      	lsls	r2, r3, #16
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	4313      	orrs	r3, r2
 8015d94:	60fb      	str	r3, [r7, #12]
      tmp++;
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	3301      	adds	r3, #1
 8015d9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8015d9c:	693b      	ldr	r3, [r7, #16]
 8015d9e:	781b      	ldrb	r3, [r3, #0]
 8015da0:	061a      	lsls	r2, r3, #24
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	4313      	orrs	r3, r2
 8015da6:	60fb      	str	r3, [r7, #12]
      tmp++;
 8015da8:	693b      	ldr	r3, [r7, #16]
 8015daa:	3301      	adds	r3, #1
 8015dac:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	f107 020c 	add.w	r2, r7, #12
 8015db6:	4611      	mov	r1, r2
 8015db8:	4618      	mov	r0, r3
 8015dba:	f003 fa4e 	bl	801925a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8015dbe:	697b      	ldr	r3, [r7, #20]
 8015dc0:	3301      	adds	r3, #1
 8015dc2:	617b      	str	r3, [r7, #20]
 8015dc4:	697b      	ldr	r3, [r7, #20]
 8015dc6:	2b07      	cmp	r3, #7
 8015dc8:	d9d0      	bls.n	8015d6c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	693a      	ldr	r2, [r7, #16]
 8015dce:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd4:	f1a3 0220 	sub.w	r2, r3, #32
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8015ddc:	bf00      	nop
 8015dde:	3718      	adds	r7, #24
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd80      	pop	{r7, pc}

08015de4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8015de4:	b480      	push	{r7}
 8015de6:	b083      	sub	sp, #12
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8015dec:	bf00      	nop
 8015dee:	370c      	adds	r7, #12
 8015df0:	46bd      	mov	sp, r7
 8015df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df6:	4770      	bx	lr

08015df8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8015df8:	b480      	push	{r7}
 8015dfa:	b083      	sub	sp, #12
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8015e00:	bf00      	nop
 8015e02:	370c      	adds	r7, #12
 8015e04:	46bd      	mov	sp, r7
 8015e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0a:	4770      	bx	lr

08015e0c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8015e0c:	b480      	push	{r7}
 8015e0e:	b083      	sub	sp, #12
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8015e14:	bf00      	nop
 8015e16:	370c      	adds	r7, #12
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1e:	4770      	bx	lr

08015e20 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8015e20:	b480      	push	{r7}
 8015e22:	b083      	sub	sp, #12
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8015e28:	bf00      	nop
 8015e2a:	370c      	adds	r7, #12
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e32:	4770      	bx	lr

08015e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b082      	sub	sp, #8
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d101      	bne.n	8015e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015e42:	2301      	movs	r3, #1
 8015e44:	e049      	b.n	8015eda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015e4c:	b2db      	uxtb	r3, r3
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d106      	bne.n	8015e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2200      	movs	r2, #0
 8015e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015e5a:	6878      	ldr	r0, [r7, #4]
 8015e5c:	f7f4 fb64 	bl	800a528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2202      	movs	r2, #2
 8015e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	681a      	ldr	r2, [r3, #0]
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	3304      	adds	r3, #4
 8015e70:	4619      	mov	r1, r3
 8015e72:	4610      	mov	r0, r2
 8015e74:	f000 ff82 	bl	8016d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2201      	movs	r2, #1
 8015e7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	2201      	movs	r2, #1
 8015e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2201      	movs	r2, #1
 8015e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2201      	movs	r2, #1
 8015e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2201      	movs	r2, #1
 8015e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	2201      	movs	r2, #1
 8015ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	2201      	movs	r2, #1
 8015eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2201      	movs	r2, #1
 8015eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2201      	movs	r2, #1
 8015ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2201      	movs	r2, #1
 8015ec4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	2201      	movs	r2, #1
 8015ecc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	2201      	movs	r2, #1
 8015ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015ed8:	2300      	movs	r3, #0
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	3708      	adds	r7, #8
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}
	...

08015ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015ee4:	b480      	push	{r7}
 8015ee6:	b085      	sub	sp, #20
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015ef2:	b2db      	uxtb	r3, r3
 8015ef4:	2b01      	cmp	r3, #1
 8015ef6:	d001      	beq.n	8015efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015ef8:	2301      	movs	r3, #1
 8015efa:	e021      	b.n	8015f40 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	2202      	movs	r2, #2
 8015f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	68da      	ldr	r2, [r3, #12]
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	f042 0201 	orr.w	r2, r2, #1
 8015f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	689a      	ldr	r2, [r3, #8]
 8015f1a:	4b0c      	ldr	r3, [pc, #48]	; (8015f4c <HAL_TIM_Base_Start_IT+0x68>)
 8015f1c:	4013      	ands	r3, r2
 8015f1e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	2b06      	cmp	r3, #6
 8015f24:	d00b      	beq.n	8015f3e <HAL_TIM_Base_Start_IT+0x5a>
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015f2c:	d007      	beq.n	8015f3e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	681a      	ldr	r2, [r3, #0]
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	f042 0201 	orr.w	r2, r2, #1
 8015f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015f3e:	2300      	movs	r3, #0
}
 8015f40:	4618      	mov	r0, r3
 8015f42:	3714      	adds	r7, #20
 8015f44:	46bd      	mov	sp, r7
 8015f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4a:	4770      	bx	lr
 8015f4c:	00010007 	.word	0x00010007

08015f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015f50:	b580      	push	{r7, lr}
 8015f52:	b082      	sub	sp, #8
 8015f54:	af00      	add	r7, sp, #0
 8015f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d101      	bne.n	8015f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015f5e:	2301      	movs	r3, #1
 8015f60:	e049      	b.n	8015ff6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015f68:	b2db      	uxtb	r3, r3
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d106      	bne.n	8015f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	2200      	movs	r2, #0
 8015f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015f76:	6878      	ldr	r0, [r7, #4]
 8015f78:	f7f4 fb52 	bl	800a620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2202      	movs	r2, #2
 8015f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681a      	ldr	r2, [r3, #0]
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	3304      	adds	r3, #4
 8015f8c:	4619      	mov	r1, r3
 8015f8e:	4610      	mov	r0, r2
 8015f90:	f000 fef4 	bl	8016d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	2201      	movs	r2, #1
 8015f98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	2201      	movs	r2, #1
 8015fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2201      	movs	r2, #1
 8015fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	2201      	movs	r2, #1
 8015fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	2201      	movs	r2, #1
 8015fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2201      	movs	r2, #1
 8015fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	2201      	movs	r2, #1
 8015fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	2201      	movs	r2, #1
 8015fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	2201      	movs	r2, #1
 8015fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2201      	movs	r2, #1
 8015fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	2201      	movs	r2, #1
 8015fe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2201      	movs	r2, #1
 8015ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015ff4:	2300      	movs	r3, #0
}
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	3708      	adds	r7, #8
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bd80      	pop	{r7, pc}
	...

08016000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b084      	sub	sp, #16
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
 8016008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d109      	bne.n	8016024 <HAL_TIM_PWM_Start+0x24>
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016016:	b2db      	uxtb	r3, r3
 8016018:	2b01      	cmp	r3, #1
 801601a:	bf14      	ite	ne
 801601c:	2301      	movne	r3, #1
 801601e:	2300      	moveq	r3, #0
 8016020:	b2db      	uxtb	r3, r3
 8016022:	e03c      	b.n	801609e <HAL_TIM_PWM_Start+0x9e>
 8016024:	683b      	ldr	r3, [r7, #0]
 8016026:	2b04      	cmp	r3, #4
 8016028:	d109      	bne.n	801603e <HAL_TIM_PWM_Start+0x3e>
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8016030:	b2db      	uxtb	r3, r3
 8016032:	2b01      	cmp	r3, #1
 8016034:	bf14      	ite	ne
 8016036:	2301      	movne	r3, #1
 8016038:	2300      	moveq	r3, #0
 801603a:	b2db      	uxtb	r3, r3
 801603c:	e02f      	b.n	801609e <HAL_TIM_PWM_Start+0x9e>
 801603e:	683b      	ldr	r3, [r7, #0]
 8016040:	2b08      	cmp	r3, #8
 8016042:	d109      	bne.n	8016058 <HAL_TIM_PWM_Start+0x58>
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801604a:	b2db      	uxtb	r3, r3
 801604c:	2b01      	cmp	r3, #1
 801604e:	bf14      	ite	ne
 8016050:	2301      	movne	r3, #1
 8016052:	2300      	moveq	r3, #0
 8016054:	b2db      	uxtb	r3, r3
 8016056:	e022      	b.n	801609e <HAL_TIM_PWM_Start+0x9e>
 8016058:	683b      	ldr	r3, [r7, #0]
 801605a:	2b0c      	cmp	r3, #12
 801605c:	d109      	bne.n	8016072 <HAL_TIM_PWM_Start+0x72>
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016064:	b2db      	uxtb	r3, r3
 8016066:	2b01      	cmp	r3, #1
 8016068:	bf14      	ite	ne
 801606a:	2301      	movne	r3, #1
 801606c:	2300      	moveq	r3, #0
 801606e:	b2db      	uxtb	r3, r3
 8016070:	e015      	b.n	801609e <HAL_TIM_PWM_Start+0x9e>
 8016072:	683b      	ldr	r3, [r7, #0]
 8016074:	2b10      	cmp	r3, #16
 8016076:	d109      	bne.n	801608c <HAL_TIM_PWM_Start+0x8c>
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801607e:	b2db      	uxtb	r3, r3
 8016080:	2b01      	cmp	r3, #1
 8016082:	bf14      	ite	ne
 8016084:	2301      	movne	r3, #1
 8016086:	2300      	moveq	r3, #0
 8016088:	b2db      	uxtb	r3, r3
 801608a:	e008      	b.n	801609e <HAL_TIM_PWM_Start+0x9e>
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016092:	b2db      	uxtb	r3, r3
 8016094:	2b01      	cmp	r3, #1
 8016096:	bf14      	ite	ne
 8016098:	2301      	movne	r3, #1
 801609a:	2300      	moveq	r3, #0
 801609c:	b2db      	uxtb	r3, r3
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d001      	beq.n	80160a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80160a2:	2301      	movs	r3, #1
 80160a4:	e06e      	b.n	8016184 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d104      	bne.n	80160b6 <HAL_TIM_PWM_Start+0xb6>
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	2202      	movs	r2, #2
 80160b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80160b4:	e023      	b.n	80160fe <HAL_TIM_PWM_Start+0xfe>
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	2b04      	cmp	r3, #4
 80160ba:	d104      	bne.n	80160c6 <HAL_TIM_PWM_Start+0xc6>
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	2202      	movs	r2, #2
 80160c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80160c4:	e01b      	b.n	80160fe <HAL_TIM_PWM_Start+0xfe>
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	2b08      	cmp	r3, #8
 80160ca:	d104      	bne.n	80160d6 <HAL_TIM_PWM_Start+0xd6>
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	2202      	movs	r2, #2
 80160d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80160d4:	e013      	b.n	80160fe <HAL_TIM_PWM_Start+0xfe>
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	2b0c      	cmp	r3, #12
 80160da:	d104      	bne.n	80160e6 <HAL_TIM_PWM_Start+0xe6>
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	2202      	movs	r2, #2
 80160e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80160e4:	e00b      	b.n	80160fe <HAL_TIM_PWM_Start+0xfe>
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	2b10      	cmp	r3, #16
 80160ea:	d104      	bne.n	80160f6 <HAL_TIM_PWM_Start+0xf6>
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2202      	movs	r2, #2
 80160f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80160f4:	e003      	b.n	80160fe <HAL_TIM_PWM_Start+0xfe>
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2202      	movs	r2, #2
 80160fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	2201      	movs	r2, #1
 8016104:	6839      	ldr	r1, [r7, #0]
 8016106:	4618      	mov	r0, r3
 8016108:	f001 fb68 	bl	80177dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	4a1e      	ldr	r2, [pc, #120]	; (801618c <HAL_TIM_PWM_Start+0x18c>)
 8016112:	4293      	cmp	r3, r2
 8016114:	d013      	beq.n	801613e <HAL_TIM_PWM_Start+0x13e>
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	4a1d      	ldr	r2, [pc, #116]	; (8016190 <HAL_TIM_PWM_Start+0x190>)
 801611c:	4293      	cmp	r3, r2
 801611e:	d00e      	beq.n	801613e <HAL_TIM_PWM_Start+0x13e>
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	4a1b      	ldr	r2, [pc, #108]	; (8016194 <HAL_TIM_PWM_Start+0x194>)
 8016126:	4293      	cmp	r3, r2
 8016128:	d009      	beq.n	801613e <HAL_TIM_PWM_Start+0x13e>
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	4a1a      	ldr	r2, [pc, #104]	; (8016198 <HAL_TIM_PWM_Start+0x198>)
 8016130:	4293      	cmp	r3, r2
 8016132:	d004      	beq.n	801613e <HAL_TIM_PWM_Start+0x13e>
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	4a18      	ldr	r2, [pc, #96]	; (801619c <HAL_TIM_PWM_Start+0x19c>)
 801613a:	4293      	cmp	r3, r2
 801613c:	d101      	bne.n	8016142 <HAL_TIM_PWM_Start+0x142>
 801613e:	2301      	movs	r3, #1
 8016140:	e000      	b.n	8016144 <HAL_TIM_PWM_Start+0x144>
 8016142:	2300      	movs	r3, #0
 8016144:	2b00      	cmp	r3, #0
 8016146:	d007      	beq.n	8016158 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016156:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	689a      	ldr	r2, [r3, #8]
 801615e:	4b10      	ldr	r3, [pc, #64]	; (80161a0 <HAL_TIM_PWM_Start+0x1a0>)
 8016160:	4013      	ands	r3, r2
 8016162:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	2b06      	cmp	r3, #6
 8016168:	d00b      	beq.n	8016182 <HAL_TIM_PWM_Start+0x182>
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016170:	d007      	beq.n	8016182 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	681a      	ldr	r2, [r3, #0]
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	f042 0201 	orr.w	r2, r2, #1
 8016180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016182:	2300      	movs	r3, #0
}
 8016184:	4618      	mov	r0, r3
 8016186:	3710      	adds	r7, #16
 8016188:	46bd      	mov	sp, r7
 801618a:	bd80      	pop	{r7, pc}
 801618c:	40010000 	.word	0x40010000
 8016190:	40010400 	.word	0x40010400
 8016194:	40014000 	.word	0x40014000
 8016198:	40014400 	.word	0x40014400
 801619c:	40014800 	.word	0x40014800
 80161a0:	00010007 	.word	0x00010007

080161a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b082      	sub	sp, #8
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
 80161ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	2200      	movs	r2, #0
 80161b4:	6839      	ldr	r1, [r7, #0]
 80161b6:	4618      	mov	r0, r3
 80161b8:	f001 fb10 	bl	80177dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	4a3e      	ldr	r2, [pc, #248]	; (80162bc <HAL_TIM_PWM_Stop+0x118>)
 80161c2:	4293      	cmp	r3, r2
 80161c4:	d013      	beq.n	80161ee <HAL_TIM_PWM_Stop+0x4a>
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	4a3d      	ldr	r2, [pc, #244]	; (80162c0 <HAL_TIM_PWM_Stop+0x11c>)
 80161cc:	4293      	cmp	r3, r2
 80161ce:	d00e      	beq.n	80161ee <HAL_TIM_PWM_Stop+0x4a>
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	4a3b      	ldr	r2, [pc, #236]	; (80162c4 <HAL_TIM_PWM_Stop+0x120>)
 80161d6:	4293      	cmp	r3, r2
 80161d8:	d009      	beq.n	80161ee <HAL_TIM_PWM_Stop+0x4a>
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	4a3a      	ldr	r2, [pc, #232]	; (80162c8 <HAL_TIM_PWM_Stop+0x124>)
 80161e0:	4293      	cmp	r3, r2
 80161e2:	d004      	beq.n	80161ee <HAL_TIM_PWM_Stop+0x4a>
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	4a38      	ldr	r2, [pc, #224]	; (80162cc <HAL_TIM_PWM_Stop+0x128>)
 80161ea:	4293      	cmp	r3, r2
 80161ec:	d101      	bne.n	80161f2 <HAL_TIM_PWM_Stop+0x4e>
 80161ee:	2301      	movs	r3, #1
 80161f0:	e000      	b.n	80161f4 <HAL_TIM_PWM_Stop+0x50>
 80161f2:	2300      	movs	r3, #0
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d017      	beq.n	8016228 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	6a1a      	ldr	r2, [r3, #32]
 80161fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8016202:	4013      	ands	r3, r2
 8016204:	2b00      	cmp	r3, #0
 8016206:	d10f      	bne.n	8016228 <HAL_TIM_PWM_Stop+0x84>
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	6a1a      	ldr	r2, [r3, #32]
 801620e:	f240 4344 	movw	r3, #1092	; 0x444
 8016212:	4013      	ands	r3, r2
 8016214:	2b00      	cmp	r3, #0
 8016216:	d107      	bne.n	8016228 <HAL_TIM_PWM_Stop+0x84>
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8016226:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	6a1a      	ldr	r2, [r3, #32]
 801622e:	f241 1311 	movw	r3, #4369	; 0x1111
 8016232:	4013      	ands	r3, r2
 8016234:	2b00      	cmp	r3, #0
 8016236:	d10f      	bne.n	8016258 <HAL_TIM_PWM_Stop+0xb4>
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	6a1a      	ldr	r2, [r3, #32]
 801623e:	f240 4344 	movw	r3, #1092	; 0x444
 8016242:	4013      	ands	r3, r2
 8016244:	2b00      	cmp	r3, #0
 8016246:	d107      	bne.n	8016258 <HAL_TIM_PWM_Stop+0xb4>
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	681a      	ldr	r2, [r3, #0]
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	f022 0201 	bic.w	r2, r2, #1
 8016256:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8016258:	683b      	ldr	r3, [r7, #0]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d104      	bne.n	8016268 <HAL_TIM_PWM_Stop+0xc4>
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	2201      	movs	r2, #1
 8016262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8016266:	e023      	b.n	80162b0 <HAL_TIM_PWM_Stop+0x10c>
 8016268:	683b      	ldr	r3, [r7, #0]
 801626a:	2b04      	cmp	r3, #4
 801626c:	d104      	bne.n	8016278 <HAL_TIM_PWM_Stop+0xd4>
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	2201      	movs	r2, #1
 8016272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8016276:	e01b      	b.n	80162b0 <HAL_TIM_PWM_Stop+0x10c>
 8016278:	683b      	ldr	r3, [r7, #0]
 801627a:	2b08      	cmp	r3, #8
 801627c:	d104      	bne.n	8016288 <HAL_TIM_PWM_Stop+0xe4>
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2201      	movs	r2, #1
 8016282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8016286:	e013      	b.n	80162b0 <HAL_TIM_PWM_Stop+0x10c>
 8016288:	683b      	ldr	r3, [r7, #0]
 801628a:	2b0c      	cmp	r3, #12
 801628c:	d104      	bne.n	8016298 <HAL_TIM_PWM_Stop+0xf4>
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2201      	movs	r2, #1
 8016292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8016296:	e00b      	b.n	80162b0 <HAL_TIM_PWM_Stop+0x10c>
 8016298:	683b      	ldr	r3, [r7, #0]
 801629a:	2b10      	cmp	r3, #16
 801629c:	d104      	bne.n	80162a8 <HAL_TIM_PWM_Stop+0x104>
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	2201      	movs	r2, #1
 80162a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80162a6:	e003      	b.n	80162b0 <HAL_TIM_PWM_Stop+0x10c>
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	2201      	movs	r2, #1
 80162ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80162b0:	2300      	movs	r3, #0
}
 80162b2:	4618      	mov	r0, r3
 80162b4:	3708      	adds	r7, #8
 80162b6:	46bd      	mov	sp, r7
 80162b8:	bd80      	pop	{r7, pc}
 80162ba:	bf00      	nop
 80162bc:	40010000 	.word	0x40010000
 80162c0:	40010400 	.word	0x40010400
 80162c4:	40014000 	.word	0x40014000
 80162c8:	40014400 	.word	0x40014400
 80162cc:	40014800 	.word	0x40014800

080162d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b082      	sub	sp, #8
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d101      	bne.n	80162e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80162de:	2301      	movs	r3, #1
 80162e0:	e049      	b.n	8016376 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80162e8:	b2db      	uxtb	r3, r3
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d106      	bne.n	80162fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	2200      	movs	r2, #0
 80162f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80162f6:	6878      	ldr	r0, [r7, #4]
 80162f8:	f7f4 f9cc 	bl	800a694 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	2202      	movs	r2, #2
 8016300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	681a      	ldr	r2, [r3, #0]
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	3304      	adds	r3, #4
 801630c:	4619      	mov	r1, r3
 801630e:	4610      	mov	r0, r2
 8016310:	f000 fd34 	bl	8016d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2201      	movs	r2, #1
 8016318:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	2201      	movs	r2, #1
 8016320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2201      	movs	r2, #1
 8016328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	2201      	movs	r2, #1
 8016330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	2201      	movs	r2, #1
 8016338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	2201      	movs	r2, #1
 8016340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	2201      	movs	r2, #1
 8016348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	2201      	movs	r2, #1
 8016350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2201      	movs	r2, #1
 8016358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	2201      	movs	r2, #1
 8016360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	2201      	movs	r2, #1
 8016368:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2201      	movs	r2, #1
 8016370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016374:	2300      	movs	r3, #0
}
 8016376:	4618      	mov	r0, r3
 8016378:	3708      	adds	r7, #8
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
	...

08016380 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b084      	sub	sp, #16
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
 8016388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801638a:	683b      	ldr	r3, [r7, #0]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d104      	bne.n	801639a <HAL_TIM_IC_Start_IT+0x1a>
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016396:	b2db      	uxtb	r3, r3
 8016398:	e023      	b.n	80163e2 <HAL_TIM_IC_Start_IT+0x62>
 801639a:	683b      	ldr	r3, [r7, #0]
 801639c:	2b04      	cmp	r3, #4
 801639e:	d104      	bne.n	80163aa <HAL_TIM_IC_Start_IT+0x2a>
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	e01b      	b.n	80163e2 <HAL_TIM_IC_Start_IT+0x62>
 80163aa:	683b      	ldr	r3, [r7, #0]
 80163ac:	2b08      	cmp	r3, #8
 80163ae:	d104      	bne.n	80163ba <HAL_TIM_IC_Start_IT+0x3a>
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80163b6:	b2db      	uxtb	r3, r3
 80163b8:	e013      	b.n	80163e2 <HAL_TIM_IC_Start_IT+0x62>
 80163ba:	683b      	ldr	r3, [r7, #0]
 80163bc:	2b0c      	cmp	r3, #12
 80163be:	d104      	bne.n	80163ca <HAL_TIM_IC_Start_IT+0x4a>
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80163c6:	b2db      	uxtb	r3, r3
 80163c8:	e00b      	b.n	80163e2 <HAL_TIM_IC_Start_IT+0x62>
 80163ca:	683b      	ldr	r3, [r7, #0]
 80163cc:	2b10      	cmp	r3, #16
 80163ce:	d104      	bne.n	80163da <HAL_TIM_IC_Start_IT+0x5a>
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80163d6:	b2db      	uxtb	r3, r3
 80163d8:	e003      	b.n	80163e2 <HAL_TIM_IC_Start_IT+0x62>
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80163e0:	b2db      	uxtb	r3, r3
 80163e2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80163e4:	683b      	ldr	r3, [r7, #0]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d104      	bne.n	80163f4 <HAL_TIM_IC_Start_IT+0x74>
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80163f0:	b2db      	uxtb	r3, r3
 80163f2:	e013      	b.n	801641c <HAL_TIM_IC_Start_IT+0x9c>
 80163f4:	683b      	ldr	r3, [r7, #0]
 80163f6:	2b04      	cmp	r3, #4
 80163f8:	d104      	bne.n	8016404 <HAL_TIM_IC_Start_IT+0x84>
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016400:	b2db      	uxtb	r3, r3
 8016402:	e00b      	b.n	801641c <HAL_TIM_IC_Start_IT+0x9c>
 8016404:	683b      	ldr	r3, [r7, #0]
 8016406:	2b08      	cmp	r3, #8
 8016408:	d104      	bne.n	8016414 <HAL_TIM_IC_Start_IT+0x94>
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016410:	b2db      	uxtb	r3, r3
 8016412:	e003      	b.n	801641c <HAL_TIM_IC_Start_IT+0x9c>
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801641a:	b2db      	uxtb	r3, r3
 801641c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801641e:	7bfb      	ldrb	r3, [r7, #15]
 8016420:	2b01      	cmp	r3, #1
 8016422:	d102      	bne.n	801642a <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8016424:	7bbb      	ldrb	r3, [r7, #14]
 8016426:	2b01      	cmp	r3, #1
 8016428:	d001      	beq.n	801642e <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 801642a:	2301      	movs	r3, #1
 801642c:	e0aa      	b.n	8016584 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801642e:	683b      	ldr	r3, [r7, #0]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d104      	bne.n	801643e <HAL_TIM_IC_Start_IT+0xbe>
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2202      	movs	r2, #2
 8016438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801643c:	e023      	b.n	8016486 <HAL_TIM_IC_Start_IT+0x106>
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	2b04      	cmp	r3, #4
 8016442:	d104      	bne.n	801644e <HAL_TIM_IC_Start_IT+0xce>
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	2202      	movs	r2, #2
 8016448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801644c:	e01b      	b.n	8016486 <HAL_TIM_IC_Start_IT+0x106>
 801644e:	683b      	ldr	r3, [r7, #0]
 8016450:	2b08      	cmp	r3, #8
 8016452:	d104      	bne.n	801645e <HAL_TIM_IC_Start_IT+0xde>
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	2202      	movs	r2, #2
 8016458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801645c:	e013      	b.n	8016486 <HAL_TIM_IC_Start_IT+0x106>
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	2b0c      	cmp	r3, #12
 8016462:	d104      	bne.n	801646e <HAL_TIM_IC_Start_IT+0xee>
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	2202      	movs	r2, #2
 8016468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801646c:	e00b      	b.n	8016486 <HAL_TIM_IC_Start_IT+0x106>
 801646e:	683b      	ldr	r3, [r7, #0]
 8016470:	2b10      	cmp	r3, #16
 8016472:	d104      	bne.n	801647e <HAL_TIM_IC_Start_IT+0xfe>
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	2202      	movs	r2, #2
 8016478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801647c:	e003      	b.n	8016486 <HAL_TIM_IC_Start_IT+0x106>
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	2202      	movs	r2, #2
 8016482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8016486:	683b      	ldr	r3, [r7, #0]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d104      	bne.n	8016496 <HAL_TIM_IC_Start_IT+0x116>
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	2202      	movs	r2, #2
 8016490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016494:	e013      	b.n	80164be <HAL_TIM_IC_Start_IT+0x13e>
 8016496:	683b      	ldr	r3, [r7, #0]
 8016498:	2b04      	cmp	r3, #4
 801649a:	d104      	bne.n	80164a6 <HAL_TIM_IC_Start_IT+0x126>
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	2202      	movs	r2, #2
 80164a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80164a4:	e00b      	b.n	80164be <HAL_TIM_IC_Start_IT+0x13e>
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	2b08      	cmp	r3, #8
 80164aa:	d104      	bne.n	80164b6 <HAL_TIM_IC_Start_IT+0x136>
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2202      	movs	r2, #2
 80164b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80164b4:	e003      	b.n	80164be <HAL_TIM_IC_Start_IT+0x13e>
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	2202      	movs	r2, #2
 80164ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80164be:	683b      	ldr	r3, [r7, #0]
 80164c0:	2b0c      	cmp	r3, #12
 80164c2:	d841      	bhi.n	8016548 <HAL_TIM_IC_Start_IT+0x1c8>
 80164c4:	a201      	add	r2, pc, #4	; (adr r2, 80164cc <HAL_TIM_IC_Start_IT+0x14c>)
 80164c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164ca:	bf00      	nop
 80164cc:	08016501 	.word	0x08016501
 80164d0:	08016549 	.word	0x08016549
 80164d4:	08016549 	.word	0x08016549
 80164d8:	08016549 	.word	0x08016549
 80164dc:	08016513 	.word	0x08016513
 80164e0:	08016549 	.word	0x08016549
 80164e4:	08016549 	.word	0x08016549
 80164e8:	08016549 	.word	0x08016549
 80164ec:	08016525 	.word	0x08016525
 80164f0:	08016549 	.word	0x08016549
 80164f4:	08016549 	.word	0x08016549
 80164f8:	08016549 	.word	0x08016549
 80164fc:	08016537 	.word	0x08016537
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	68da      	ldr	r2, [r3, #12]
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	f042 0202 	orr.w	r2, r2, #2
 801650e:	60da      	str	r2, [r3, #12]
      break;
 8016510:	e01b      	b.n	801654a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	68da      	ldr	r2, [r3, #12]
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	f042 0204 	orr.w	r2, r2, #4
 8016520:	60da      	str	r2, [r3, #12]
      break;
 8016522:	e012      	b.n	801654a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	68da      	ldr	r2, [r3, #12]
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	f042 0208 	orr.w	r2, r2, #8
 8016532:	60da      	str	r2, [r3, #12]
      break;
 8016534:	e009      	b.n	801654a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	68da      	ldr	r2, [r3, #12]
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	f042 0210 	orr.w	r2, r2, #16
 8016544:	60da      	str	r2, [r3, #12]
      break;
 8016546:	e000      	b.n	801654a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8016548:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	2201      	movs	r2, #1
 8016550:	6839      	ldr	r1, [r7, #0]
 8016552:	4618      	mov	r0, r3
 8016554:	f001 f942 	bl	80177dc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	689a      	ldr	r2, [r3, #8]
 801655e:	4b0b      	ldr	r3, [pc, #44]	; (801658c <HAL_TIM_IC_Start_IT+0x20c>)
 8016560:	4013      	ands	r3, r2
 8016562:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016564:	68bb      	ldr	r3, [r7, #8]
 8016566:	2b06      	cmp	r3, #6
 8016568:	d00b      	beq.n	8016582 <HAL_TIM_IC_Start_IT+0x202>
 801656a:	68bb      	ldr	r3, [r7, #8]
 801656c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016570:	d007      	beq.n	8016582 <HAL_TIM_IC_Start_IT+0x202>
  {
    __HAL_TIM_ENABLE(htim);
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	681a      	ldr	r2, [r3, #0]
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	f042 0201 	orr.w	r2, r2, #1
 8016580:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016582:	2300      	movs	r3, #0
}
 8016584:	4618      	mov	r0, r3
 8016586:	3710      	adds	r7, #16
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}
 801658c:	00010007 	.word	0x00010007

08016590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b082      	sub	sp, #8
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	691b      	ldr	r3, [r3, #16]
 801659e:	f003 0302 	and.w	r3, r3, #2
 80165a2:	2b02      	cmp	r3, #2
 80165a4:	d122      	bne.n	80165ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	68db      	ldr	r3, [r3, #12]
 80165ac:	f003 0302 	and.w	r3, r3, #2
 80165b0:	2b02      	cmp	r3, #2
 80165b2:	d11b      	bne.n	80165ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	f06f 0202 	mvn.w	r2, #2
 80165bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	2201      	movs	r2, #1
 80165c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	699b      	ldr	r3, [r3, #24]
 80165ca:	f003 0303 	and.w	r3, r3, #3
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d003      	beq.n	80165da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80165d2:	6878      	ldr	r0, [r7, #4]
 80165d4:	f7f2 fab4 	bl	8008b40 <HAL_TIM_IC_CaptureCallback>
 80165d8:	e005      	b.n	80165e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80165da:	6878      	ldr	r0, [r7, #4]
 80165dc:	f000 fbb0 	bl	8016d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80165e0:	6878      	ldr	r0, [r7, #4]
 80165e2:	f000 fbb7 	bl	8016d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	2200      	movs	r2, #0
 80165ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	691b      	ldr	r3, [r3, #16]
 80165f2:	f003 0304 	and.w	r3, r3, #4
 80165f6:	2b04      	cmp	r3, #4
 80165f8:	d122      	bne.n	8016640 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	68db      	ldr	r3, [r3, #12]
 8016600:	f003 0304 	and.w	r3, r3, #4
 8016604:	2b04      	cmp	r3, #4
 8016606:	d11b      	bne.n	8016640 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	f06f 0204 	mvn.w	r2, #4
 8016610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	2202      	movs	r2, #2
 8016616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	699b      	ldr	r3, [r3, #24]
 801661e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016622:	2b00      	cmp	r3, #0
 8016624:	d003      	beq.n	801662e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f7f2 fa8a 	bl	8008b40 <HAL_TIM_IC_CaptureCallback>
 801662c:	e005      	b.n	801663a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801662e:	6878      	ldr	r0, [r7, #4]
 8016630:	f000 fb86 	bl	8016d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016634:	6878      	ldr	r0, [r7, #4]
 8016636:	f000 fb8d 	bl	8016d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	2200      	movs	r2, #0
 801663e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	691b      	ldr	r3, [r3, #16]
 8016646:	f003 0308 	and.w	r3, r3, #8
 801664a:	2b08      	cmp	r3, #8
 801664c:	d122      	bne.n	8016694 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	68db      	ldr	r3, [r3, #12]
 8016654:	f003 0308 	and.w	r3, r3, #8
 8016658:	2b08      	cmp	r3, #8
 801665a:	d11b      	bne.n	8016694 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	f06f 0208 	mvn.w	r2, #8
 8016664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	2204      	movs	r2, #4
 801666a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	69db      	ldr	r3, [r3, #28]
 8016672:	f003 0303 	and.w	r3, r3, #3
 8016676:	2b00      	cmp	r3, #0
 8016678:	d003      	beq.n	8016682 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801667a:	6878      	ldr	r0, [r7, #4]
 801667c:	f7f2 fa60 	bl	8008b40 <HAL_TIM_IC_CaptureCallback>
 8016680:	e005      	b.n	801668e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016682:	6878      	ldr	r0, [r7, #4]
 8016684:	f000 fb5c 	bl	8016d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016688:	6878      	ldr	r0, [r7, #4]
 801668a:	f000 fb63 	bl	8016d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	2200      	movs	r2, #0
 8016692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	691b      	ldr	r3, [r3, #16]
 801669a:	f003 0310 	and.w	r3, r3, #16
 801669e:	2b10      	cmp	r3, #16
 80166a0:	d122      	bne.n	80166e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	68db      	ldr	r3, [r3, #12]
 80166a8:	f003 0310 	and.w	r3, r3, #16
 80166ac:	2b10      	cmp	r3, #16
 80166ae:	d11b      	bne.n	80166e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	f06f 0210 	mvn.w	r2, #16
 80166b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2208      	movs	r2, #8
 80166be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	69db      	ldr	r3, [r3, #28]
 80166c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d003      	beq.n	80166d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80166ce:	6878      	ldr	r0, [r7, #4]
 80166d0:	f7f2 fa36 	bl	8008b40 <HAL_TIM_IC_CaptureCallback>
 80166d4:	e005      	b.n	80166e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80166d6:	6878      	ldr	r0, [r7, #4]
 80166d8:	f000 fb32 	bl	8016d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	f000 fb39 	bl	8016d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	2200      	movs	r2, #0
 80166e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	691b      	ldr	r3, [r3, #16]
 80166ee:	f003 0301 	and.w	r3, r3, #1
 80166f2:	2b01      	cmp	r3, #1
 80166f4:	d10e      	bne.n	8016714 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	68db      	ldr	r3, [r3, #12]
 80166fc:	f003 0301 	and.w	r3, r3, #1
 8016700:	2b01      	cmp	r3, #1
 8016702:	d107      	bne.n	8016714 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	f06f 0201 	mvn.w	r2, #1
 801670c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f7f2 fff8 	bl	8009704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	691b      	ldr	r3, [r3, #16]
 801671a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801671e:	2b80      	cmp	r3, #128	; 0x80
 8016720:	d10e      	bne.n	8016740 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	68db      	ldr	r3, [r3, #12]
 8016728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801672c:	2b80      	cmp	r3, #128	; 0x80
 801672e:	d107      	bne.n	8016740 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8016738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801673a:	6878      	ldr	r0, [r7, #4]
 801673c:	f001 f984 	bl	8017a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	691b      	ldr	r3, [r3, #16]
 8016746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801674a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801674e:	d10e      	bne.n	801676e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	68db      	ldr	r3, [r3, #12]
 8016756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801675a:	2b80      	cmp	r3, #128	; 0x80
 801675c:	d107      	bne.n	801676e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8016766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016768:	6878      	ldr	r0, [r7, #4]
 801676a:	f001 f977 	bl	8017a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	691b      	ldr	r3, [r3, #16]
 8016774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016778:	2b40      	cmp	r3, #64	; 0x40
 801677a:	d10e      	bne.n	801679a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	68db      	ldr	r3, [r3, #12]
 8016782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016786:	2b40      	cmp	r3, #64	; 0x40
 8016788:	d107      	bne.n	801679a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8016792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016794:	6878      	ldr	r0, [r7, #4]
 8016796:	f000 fae7 	bl	8016d68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	691b      	ldr	r3, [r3, #16]
 80167a0:	f003 0320 	and.w	r3, r3, #32
 80167a4:	2b20      	cmp	r3, #32
 80167a6:	d10e      	bne.n	80167c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	68db      	ldr	r3, [r3, #12]
 80167ae:	f003 0320 	and.w	r3, r3, #32
 80167b2:	2b20      	cmp	r3, #32
 80167b4:	d107      	bne.n	80167c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	f06f 0220 	mvn.w	r2, #32
 80167be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80167c0:	6878      	ldr	r0, [r7, #4]
 80167c2:	f001 f937 	bl	8017a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80167c6:	bf00      	nop
 80167c8:	3708      	adds	r7, #8
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}

080167ce <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80167ce:	b580      	push	{r7, lr}
 80167d0:	b084      	sub	sp, #16
 80167d2:	af00      	add	r7, sp, #0
 80167d4:	60f8      	str	r0, [r7, #12]
 80167d6:	60b9      	str	r1, [r7, #8]
 80167d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80167e0:	2b01      	cmp	r3, #1
 80167e2:	d101      	bne.n	80167e8 <HAL_TIM_IC_ConfigChannel+0x1a>
 80167e4:	2302      	movs	r3, #2
 80167e6:	e082      	b.n	80168ee <HAL_TIM_IC_ConfigChannel+0x120>
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	2201      	movs	r2, #1
 80167ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d11b      	bne.n	801682e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	6818      	ldr	r0, [r3, #0]
 80167fa:	68bb      	ldr	r3, [r7, #8]
 80167fc:	6819      	ldr	r1, [r3, #0]
 80167fe:	68bb      	ldr	r3, [r7, #8]
 8016800:	685a      	ldr	r2, [r3, #4]
 8016802:	68bb      	ldr	r3, [r7, #8]
 8016804:	68db      	ldr	r3, [r3, #12]
 8016806:	f000 fe21 	bl	801744c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	699a      	ldr	r2, [r3, #24]
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	f022 020c 	bic.w	r2, r2, #12
 8016818:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	6999      	ldr	r1, [r3, #24]
 8016820:	68bb      	ldr	r3, [r7, #8]
 8016822:	689a      	ldr	r2, [r3, #8]
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	430a      	orrs	r2, r1
 801682a:	619a      	str	r2, [r3, #24]
 801682c:	e05a      	b.n	80168e4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	2b04      	cmp	r3, #4
 8016832:	d11c      	bne.n	801686e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	6818      	ldr	r0, [r3, #0]
 8016838:	68bb      	ldr	r3, [r7, #8]
 801683a:	6819      	ldr	r1, [r3, #0]
 801683c:	68bb      	ldr	r3, [r7, #8]
 801683e:	685a      	ldr	r2, [r3, #4]
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	68db      	ldr	r3, [r3, #12]
 8016844:	f000 fea5 	bl	8017592 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	699a      	ldr	r2, [r3, #24]
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8016856:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	6999      	ldr	r1, [r3, #24]
 801685e:	68bb      	ldr	r3, [r7, #8]
 8016860:	689b      	ldr	r3, [r3, #8]
 8016862:	021a      	lsls	r2, r3, #8
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	430a      	orrs	r2, r1
 801686a:	619a      	str	r2, [r3, #24]
 801686c:	e03a      	b.n	80168e4 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	2b08      	cmp	r3, #8
 8016872:	d11b      	bne.n	80168ac <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	6818      	ldr	r0, [r3, #0]
 8016878:	68bb      	ldr	r3, [r7, #8]
 801687a:	6819      	ldr	r1, [r3, #0]
 801687c:	68bb      	ldr	r3, [r7, #8]
 801687e:	685a      	ldr	r2, [r3, #4]
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	68db      	ldr	r3, [r3, #12]
 8016884:	f000 fef2 	bl	801766c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	69da      	ldr	r2, [r3, #28]
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	f022 020c 	bic.w	r2, r2, #12
 8016896:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	69d9      	ldr	r1, [r3, #28]
 801689e:	68bb      	ldr	r3, [r7, #8]
 80168a0:	689a      	ldr	r2, [r3, #8]
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	430a      	orrs	r2, r1
 80168a8:	61da      	str	r2, [r3, #28]
 80168aa:	e01b      	b.n	80168e4 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	6818      	ldr	r0, [r3, #0]
 80168b0:	68bb      	ldr	r3, [r7, #8]
 80168b2:	6819      	ldr	r1, [r3, #0]
 80168b4:	68bb      	ldr	r3, [r7, #8]
 80168b6:	685a      	ldr	r2, [r3, #4]
 80168b8:	68bb      	ldr	r3, [r7, #8]
 80168ba:	68db      	ldr	r3, [r3, #12]
 80168bc:	f000 ff12 	bl	80176e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	69da      	ldr	r2, [r3, #28]
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80168ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	69d9      	ldr	r1, [r3, #28]
 80168d6:	68bb      	ldr	r3, [r7, #8]
 80168d8:	689b      	ldr	r3, [r3, #8]
 80168da:	021a      	lsls	r2, r3, #8
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	430a      	orrs	r2, r1
 80168e2:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	2200      	movs	r2, #0
 80168e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80168ec:	2300      	movs	r3, #0
}
 80168ee:	4618      	mov	r0, r3
 80168f0:	3710      	adds	r7, #16
 80168f2:	46bd      	mov	sp, r7
 80168f4:	bd80      	pop	{r7, pc}
	...

080168f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b084      	sub	sp, #16
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	60f8      	str	r0, [r7, #12]
 8016900:	60b9      	str	r1, [r7, #8]
 8016902:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801690a:	2b01      	cmp	r3, #1
 801690c:	d101      	bne.n	8016912 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801690e:	2302      	movs	r3, #2
 8016910:	e0fd      	b.n	8016b0e <HAL_TIM_PWM_ConfigChannel+0x216>
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	2201      	movs	r2, #1
 8016916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	2b14      	cmp	r3, #20
 801691e:	f200 80f0 	bhi.w	8016b02 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8016922:	a201      	add	r2, pc, #4	; (adr r2, 8016928 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8016924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016928:	0801697d 	.word	0x0801697d
 801692c:	08016b03 	.word	0x08016b03
 8016930:	08016b03 	.word	0x08016b03
 8016934:	08016b03 	.word	0x08016b03
 8016938:	080169bd 	.word	0x080169bd
 801693c:	08016b03 	.word	0x08016b03
 8016940:	08016b03 	.word	0x08016b03
 8016944:	08016b03 	.word	0x08016b03
 8016948:	080169ff 	.word	0x080169ff
 801694c:	08016b03 	.word	0x08016b03
 8016950:	08016b03 	.word	0x08016b03
 8016954:	08016b03 	.word	0x08016b03
 8016958:	08016a3f 	.word	0x08016a3f
 801695c:	08016b03 	.word	0x08016b03
 8016960:	08016b03 	.word	0x08016b03
 8016964:	08016b03 	.word	0x08016b03
 8016968:	08016a81 	.word	0x08016a81
 801696c:	08016b03 	.word	0x08016b03
 8016970:	08016b03 	.word	0x08016b03
 8016974:	08016b03 	.word	0x08016b03
 8016978:	08016ac1 	.word	0x08016ac1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	68b9      	ldr	r1, [r7, #8]
 8016982:	4618      	mov	r0, r3
 8016984:	f000 fa94 	bl	8016eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	699a      	ldr	r2, [r3, #24]
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	f042 0208 	orr.w	r2, r2, #8
 8016996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	699a      	ldr	r2, [r3, #24]
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	f022 0204 	bic.w	r2, r2, #4
 80169a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	6999      	ldr	r1, [r3, #24]
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	691a      	ldr	r2, [r3, #16]
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	430a      	orrs	r2, r1
 80169b8:	619a      	str	r2, [r3, #24]
      break;
 80169ba:	e0a3      	b.n	8016b04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	68b9      	ldr	r1, [r7, #8]
 80169c2:	4618      	mov	r0, r3
 80169c4:	f000 fb04 	bl	8016fd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	699a      	ldr	r2, [r3, #24]
 80169ce:	68fb      	ldr	r3, [r7, #12]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80169d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	699a      	ldr	r2, [r3, #24]
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80169e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	6999      	ldr	r1, [r3, #24]
 80169ee:	68bb      	ldr	r3, [r7, #8]
 80169f0:	691b      	ldr	r3, [r3, #16]
 80169f2:	021a      	lsls	r2, r3, #8
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	430a      	orrs	r2, r1
 80169fa:	619a      	str	r2, [r3, #24]
      break;
 80169fc:	e082      	b.n	8016b04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	68b9      	ldr	r1, [r7, #8]
 8016a04:	4618      	mov	r0, r3
 8016a06:	f000 fb6d 	bl	80170e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	69da      	ldr	r2, [r3, #28]
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	f042 0208 	orr.w	r2, r2, #8
 8016a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	69da      	ldr	r2, [r3, #28]
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	f022 0204 	bic.w	r2, r2, #4
 8016a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	69d9      	ldr	r1, [r3, #28]
 8016a30:	68bb      	ldr	r3, [r7, #8]
 8016a32:	691a      	ldr	r2, [r3, #16]
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	430a      	orrs	r2, r1
 8016a3a:	61da      	str	r2, [r3, #28]
      break;
 8016a3c:	e062      	b.n	8016b04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	68b9      	ldr	r1, [r7, #8]
 8016a44:	4618      	mov	r0, r3
 8016a46:	f000 fbd3 	bl	80171f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	69da      	ldr	r2, [r3, #28]
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	69da      	ldr	r2, [r3, #28]
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	69d9      	ldr	r1, [r3, #28]
 8016a70:	68bb      	ldr	r3, [r7, #8]
 8016a72:	691b      	ldr	r3, [r3, #16]
 8016a74:	021a      	lsls	r2, r3, #8
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	430a      	orrs	r2, r1
 8016a7c:	61da      	str	r2, [r3, #28]
      break;
 8016a7e:	e041      	b.n	8016b04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	68b9      	ldr	r1, [r7, #8]
 8016a86:	4618      	mov	r0, r3
 8016a88:	f000 fc1a 	bl	80172c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	f042 0208 	orr.w	r2, r2, #8
 8016a9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	f022 0204 	bic.w	r2, r2, #4
 8016aaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8016ab2:	68bb      	ldr	r3, [r7, #8]
 8016ab4:	691a      	ldr	r2, [r3, #16]
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	430a      	orrs	r2, r1
 8016abc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8016abe:	e021      	b.n	8016b04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	68b9      	ldr	r1, [r7, #8]
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	f000 fc5c 	bl	8017384 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016ada:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016ae2:	68fb      	ldr	r3, [r7, #12]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016aea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8016af2:	68bb      	ldr	r3, [r7, #8]
 8016af4:	691b      	ldr	r3, [r3, #16]
 8016af6:	021a      	lsls	r2, r3, #8
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	430a      	orrs	r2, r1
 8016afe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8016b00:	e000      	b.n	8016b04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8016b02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	2200      	movs	r2, #0
 8016b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016b0c:	2300      	movs	r3, #0
}
 8016b0e:	4618      	mov	r0, r3
 8016b10:	3710      	adds	r7, #16
 8016b12:	46bd      	mov	sp, r7
 8016b14:	bd80      	pop	{r7, pc}
 8016b16:	bf00      	nop

08016b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b084      	sub	sp, #16
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
 8016b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016b28:	2b01      	cmp	r3, #1
 8016b2a:	d101      	bne.n	8016b30 <HAL_TIM_ConfigClockSource+0x18>
 8016b2c:	2302      	movs	r3, #2
 8016b2e:	e0b7      	b.n	8016ca0 <HAL_TIM_ConfigClockSource+0x188>
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	2201      	movs	r2, #1
 8016b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	2202      	movs	r2, #2
 8016b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	689b      	ldr	r3, [r3, #8]
 8016b46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016b48:	68fa      	ldr	r2, [r7, #12]
 8016b4a:	4b57      	ldr	r3, [pc, #348]	; (8016ca8 <HAL_TIM_ConfigClockSource+0x190>)
 8016b4c:	4013      	ands	r3, r2
 8016b4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8016b56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	68fa      	ldr	r2, [r7, #12]
 8016b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016b60:	683b      	ldr	r3, [r7, #0]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	2b70      	cmp	r3, #112	; 0x70
 8016b66:	d02e      	beq.n	8016bc6 <HAL_TIM_ConfigClockSource+0xae>
 8016b68:	2b70      	cmp	r3, #112	; 0x70
 8016b6a:	d812      	bhi.n	8016b92 <HAL_TIM_ConfigClockSource+0x7a>
 8016b6c:	2b30      	cmp	r3, #48	; 0x30
 8016b6e:	f000 8084 	beq.w	8016c7a <HAL_TIM_ConfigClockSource+0x162>
 8016b72:	2b30      	cmp	r3, #48	; 0x30
 8016b74:	d806      	bhi.n	8016b84 <HAL_TIM_ConfigClockSource+0x6c>
 8016b76:	2b10      	cmp	r3, #16
 8016b78:	d07f      	beq.n	8016c7a <HAL_TIM_ConfigClockSource+0x162>
 8016b7a:	2b20      	cmp	r3, #32
 8016b7c:	d07d      	beq.n	8016c7a <HAL_TIM_ConfigClockSource+0x162>
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d07b      	beq.n	8016c7a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8016b82:	e084      	b.n	8016c8e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8016b84:	2b50      	cmp	r3, #80	; 0x50
 8016b86:	d048      	beq.n	8016c1a <HAL_TIM_ConfigClockSource+0x102>
 8016b88:	2b60      	cmp	r3, #96	; 0x60
 8016b8a:	d056      	beq.n	8016c3a <HAL_TIM_ConfigClockSource+0x122>
 8016b8c:	2b40      	cmp	r3, #64	; 0x40
 8016b8e:	d064      	beq.n	8016c5a <HAL_TIM_ConfigClockSource+0x142>
      break;
 8016b90:	e07d      	b.n	8016c8e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8016b92:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8016b96:	d070      	beq.n	8016c7a <HAL_TIM_ConfigClockSource+0x162>
 8016b98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8016b9c:	d809      	bhi.n	8016bb2 <HAL_TIM_ConfigClockSource+0x9a>
 8016b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016ba2:	d027      	beq.n	8016bf4 <HAL_TIM_ConfigClockSource+0xdc>
 8016ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016ba8:	d067      	beq.n	8016c7a <HAL_TIM_ConfigClockSource+0x162>
 8016baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016bae:	d06d      	beq.n	8016c8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8016bb0:	e06d      	b.n	8016c8e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8016bb2:	4a3e      	ldr	r2, [pc, #248]	; (8016cac <HAL_TIM_ConfigClockSource+0x194>)
 8016bb4:	4293      	cmp	r3, r2
 8016bb6:	d060      	beq.n	8016c7a <HAL_TIM_ConfigClockSource+0x162>
 8016bb8:	4a3d      	ldr	r2, [pc, #244]	; (8016cb0 <HAL_TIM_ConfigClockSource+0x198>)
 8016bba:	4293      	cmp	r3, r2
 8016bbc:	d05d      	beq.n	8016c7a <HAL_TIM_ConfigClockSource+0x162>
 8016bbe:	4a3d      	ldr	r2, [pc, #244]	; (8016cb4 <HAL_TIM_ConfigClockSource+0x19c>)
 8016bc0:	4293      	cmp	r3, r2
 8016bc2:	d05a      	beq.n	8016c7a <HAL_TIM_ConfigClockSource+0x162>
      break;
 8016bc4:	e063      	b.n	8016c8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	6818      	ldr	r0, [r3, #0]
 8016bca:	683b      	ldr	r3, [r7, #0]
 8016bcc:	6899      	ldr	r1, [r3, #8]
 8016bce:	683b      	ldr	r3, [r7, #0]
 8016bd0:	685a      	ldr	r2, [r3, #4]
 8016bd2:	683b      	ldr	r3, [r7, #0]
 8016bd4:	68db      	ldr	r3, [r3, #12]
 8016bd6:	f000 fde1 	bl	801779c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	689b      	ldr	r3, [r3, #8]
 8016be0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8016be8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	68fa      	ldr	r2, [r7, #12]
 8016bf0:	609a      	str	r2, [r3, #8]
      break;
 8016bf2:	e04c      	b.n	8016c8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	6818      	ldr	r0, [r3, #0]
 8016bf8:	683b      	ldr	r3, [r7, #0]
 8016bfa:	6899      	ldr	r1, [r3, #8]
 8016bfc:	683b      	ldr	r3, [r7, #0]
 8016bfe:	685a      	ldr	r2, [r3, #4]
 8016c00:	683b      	ldr	r3, [r7, #0]
 8016c02:	68db      	ldr	r3, [r3, #12]
 8016c04:	f000 fdca 	bl	801779c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	689a      	ldr	r2, [r3, #8]
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016c16:	609a      	str	r2, [r3, #8]
      break;
 8016c18:	e039      	b.n	8016c8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	6818      	ldr	r0, [r3, #0]
 8016c1e:	683b      	ldr	r3, [r7, #0]
 8016c20:	6859      	ldr	r1, [r3, #4]
 8016c22:	683b      	ldr	r3, [r7, #0]
 8016c24:	68db      	ldr	r3, [r3, #12]
 8016c26:	461a      	mov	r2, r3
 8016c28:	f000 fc84 	bl	8017534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	2150      	movs	r1, #80	; 0x50
 8016c32:	4618      	mov	r0, r3
 8016c34:	f000 fd94 	bl	8017760 <TIM_ITRx_SetConfig>
      break;
 8016c38:	e029      	b.n	8016c8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	6818      	ldr	r0, [r3, #0]
 8016c3e:	683b      	ldr	r3, [r7, #0]
 8016c40:	6859      	ldr	r1, [r3, #4]
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	68db      	ldr	r3, [r3, #12]
 8016c46:	461a      	mov	r2, r3
 8016c48:	f000 fce0 	bl	801760c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	2160      	movs	r1, #96	; 0x60
 8016c52:	4618      	mov	r0, r3
 8016c54:	f000 fd84 	bl	8017760 <TIM_ITRx_SetConfig>
      break;
 8016c58:	e019      	b.n	8016c8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	6818      	ldr	r0, [r3, #0]
 8016c5e:	683b      	ldr	r3, [r7, #0]
 8016c60:	6859      	ldr	r1, [r3, #4]
 8016c62:	683b      	ldr	r3, [r7, #0]
 8016c64:	68db      	ldr	r3, [r3, #12]
 8016c66:	461a      	mov	r2, r3
 8016c68:	f000 fc64 	bl	8017534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	2140      	movs	r1, #64	; 0x40
 8016c72:	4618      	mov	r0, r3
 8016c74:	f000 fd74 	bl	8017760 <TIM_ITRx_SetConfig>
      break;
 8016c78:	e009      	b.n	8016c8e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	681a      	ldr	r2, [r3, #0]
 8016c7e:	683b      	ldr	r3, [r7, #0]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	4619      	mov	r1, r3
 8016c84:	4610      	mov	r0, r2
 8016c86:	f000 fd6b 	bl	8017760 <TIM_ITRx_SetConfig>
      break;
 8016c8a:	e000      	b.n	8016c8e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8016c8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	2201      	movs	r2, #1
 8016c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	2200      	movs	r2, #0
 8016c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016c9e:	2300      	movs	r3, #0
}
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	3710      	adds	r7, #16
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	bd80      	pop	{r7, pc}
 8016ca8:	ffceff88 	.word	0xffceff88
 8016cac:	00100030 	.word	0x00100030
 8016cb0:	00100040 	.word	0x00100040
 8016cb4:	00100020 	.word	0x00100020

08016cb8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016cb8:	b480      	push	{r7}
 8016cba:	b085      	sub	sp, #20
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
 8016cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8016cc6:	683b      	ldr	r3, [r7, #0]
 8016cc8:	2b0c      	cmp	r3, #12
 8016cca:	d831      	bhi.n	8016d30 <HAL_TIM_ReadCapturedValue+0x78>
 8016ccc:	a201      	add	r2, pc, #4	; (adr r2, 8016cd4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8016cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cd2:	bf00      	nop
 8016cd4:	08016d09 	.word	0x08016d09
 8016cd8:	08016d31 	.word	0x08016d31
 8016cdc:	08016d31 	.word	0x08016d31
 8016ce0:	08016d31 	.word	0x08016d31
 8016ce4:	08016d13 	.word	0x08016d13
 8016ce8:	08016d31 	.word	0x08016d31
 8016cec:	08016d31 	.word	0x08016d31
 8016cf0:	08016d31 	.word	0x08016d31
 8016cf4:	08016d1d 	.word	0x08016d1d
 8016cf8:	08016d31 	.word	0x08016d31
 8016cfc:	08016d31 	.word	0x08016d31
 8016d00:	08016d31 	.word	0x08016d31
 8016d04:	08016d27 	.word	0x08016d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d0e:	60fb      	str	r3, [r7, #12]

      break;
 8016d10:	e00f      	b.n	8016d32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d18:	60fb      	str	r3, [r7, #12]

      break;
 8016d1a:	e00a      	b.n	8016d32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d22:	60fb      	str	r3, [r7, #12]

      break;
 8016d24:	e005      	b.n	8016d32 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d2c:	60fb      	str	r3, [r7, #12]

      break;
 8016d2e:	e000      	b.n	8016d32 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8016d30:	bf00      	nop
  }

  return tmpreg;
 8016d32:	68fb      	ldr	r3, [r7, #12]
}
 8016d34:	4618      	mov	r0, r3
 8016d36:	3714      	adds	r7, #20
 8016d38:	46bd      	mov	sp, r7
 8016d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d3e:	4770      	bx	lr

08016d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016d40:	b480      	push	{r7}
 8016d42:	b083      	sub	sp, #12
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016d48:	bf00      	nop
 8016d4a:	370c      	adds	r7, #12
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d52:	4770      	bx	lr

08016d54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016d54:	b480      	push	{r7}
 8016d56:	b083      	sub	sp, #12
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016d5c:	bf00      	nop
 8016d5e:	370c      	adds	r7, #12
 8016d60:	46bd      	mov	sp, r7
 8016d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d66:	4770      	bx	lr

08016d68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8016d68:	b480      	push	{r7}
 8016d6a:	b083      	sub	sp, #12
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8016d70:	bf00      	nop
 8016d72:	370c      	adds	r7, #12
 8016d74:	46bd      	mov	sp, r7
 8016d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7a:	4770      	bx	lr

08016d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8016d7c:	b480      	push	{r7}
 8016d7e:	b085      	sub	sp, #20
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
 8016d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	4a40      	ldr	r2, [pc, #256]	; (8016e90 <TIM_Base_SetConfig+0x114>)
 8016d90:	4293      	cmp	r3, r2
 8016d92:	d013      	beq.n	8016dbc <TIM_Base_SetConfig+0x40>
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016d9a:	d00f      	beq.n	8016dbc <TIM_Base_SetConfig+0x40>
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	4a3d      	ldr	r2, [pc, #244]	; (8016e94 <TIM_Base_SetConfig+0x118>)
 8016da0:	4293      	cmp	r3, r2
 8016da2:	d00b      	beq.n	8016dbc <TIM_Base_SetConfig+0x40>
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	4a3c      	ldr	r2, [pc, #240]	; (8016e98 <TIM_Base_SetConfig+0x11c>)
 8016da8:	4293      	cmp	r3, r2
 8016daa:	d007      	beq.n	8016dbc <TIM_Base_SetConfig+0x40>
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	4a3b      	ldr	r2, [pc, #236]	; (8016e9c <TIM_Base_SetConfig+0x120>)
 8016db0:	4293      	cmp	r3, r2
 8016db2:	d003      	beq.n	8016dbc <TIM_Base_SetConfig+0x40>
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	4a3a      	ldr	r2, [pc, #232]	; (8016ea0 <TIM_Base_SetConfig+0x124>)
 8016db8:	4293      	cmp	r3, r2
 8016dba:	d108      	bne.n	8016dce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016dc4:	683b      	ldr	r3, [r7, #0]
 8016dc6:	685b      	ldr	r3, [r3, #4]
 8016dc8:	68fa      	ldr	r2, [r7, #12]
 8016dca:	4313      	orrs	r3, r2
 8016dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	4a2f      	ldr	r2, [pc, #188]	; (8016e90 <TIM_Base_SetConfig+0x114>)
 8016dd2:	4293      	cmp	r3, r2
 8016dd4:	d01f      	beq.n	8016e16 <TIM_Base_SetConfig+0x9a>
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016ddc:	d01b      	beq.n	8016e16 <TIM_Base_SetConfig+0x9a>
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	4a2c      	ldr	r2, [pc, #176]	; (8016e94 <TIM_Base_SetConfig+0x118>)
 8016de2:	4293      	cmp	r3, r2
 8016de4:	d017      	beq.n	8016e16 <TIM_Base_SetConfig+0x9a>
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	4a2b      	ldr	r2, [pc, #172]	; (8016e98 <TIM_Base_SetConfig+0x11c>)
 8016dea:	4293      	cmp	r3, r2
 8016dec:	d013      	beq.n	8016e16 <TIM_Base_SetConfig+0x9a>
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	4a2a      	ldr	r2, [pc, #168]	; (8016e9c <TIM_Base_SetConfig+0x120>)
 8016df2:	4293      	cmp	r3, r2
 8016df4:	d00f      	beq.n	8016e16 <TIM_Base_SetConfig+0x9a>
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	4a29      	ldr	r2, [pc, #164]	; (8016ea0 <TIM_Base_SetConfig+0x124>)
 8016dfa:	4293      	cmp	r3, r2
 8016dfc:	d00b      	beq.n	8016e16 <TIM_Base_SetConfig+0x9a>
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	4a28      	ldr	r2, [pc, #160]	; (8016ea4 <TIM_Base_SetConfig+0x128>)
 8016e02:	4293      	cmp	r3, r2
 8016e04:	d007      	beq.n	8016e16 <TIM_Base_SetConfig+0x9a>
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	4a27      	ldr	r2, [pc, #156]	; (8016ea8 <TIM_Base_SetConfig+0x12c>)
 8016e0a:	4293      	cmp	r3, r2
 8016e0c:	d003      	beq.n	8016e16 <TIM_Base_SetConfig+0x9a>
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	4a26      	ldr	r2, [pc, #152]	; (8016eac <TIM_Base_SetConfig+0x130>)
 8016e12:	4293      	cmp	r3, r2
 8016e14:	d108      	bne.n	8016e28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016e1e:	683b      	ldr	r3, [r7, #0]
 8016e20:	68db      	ldr	r3, [r3, #12]
 8016e22:	68fa      	ldr	r2, [r7, #12]
 8016e24:	4313      	orrs	r3, r2
 8016e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	695b      	ldr	r3, [r3, #20]
 8016e32:	4313      	orrs	r3, r2
 8016e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	68fa      	ldr	r2, [r7, #12]
 8016e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016e3c:	683b      	ldr	r3, [r7, #0]
 8016e3e:	689a      	ldr	r2, [r3, #8]
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016e44:	683b      	ldr	r3, [r7, #0]
 8016e46:	681a      	ldr	r2, [r3, #0]
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	4a10      	ldr	r2, [pc, #64]	; (8016e90 <TIM_Base_SetConfig+0x114>)
 8016e50:	4293      	cmp	r3, r2
 8016e52:	d00f      	beq.n	8016e74 <TIM_Base_SetConfig+0xf8>
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	4a12      	ldr	r2, [pc, #72]	; (8016ea0 <TIM_Base_SetConfig+0x124>)
 8016e58:	4293      	cmp	r3, r2
 8016e5a:	d00b      	beq.n	8016e74 <TIM_Base_SetConfig+0xf8>
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	4a11      	ldr	r2, [pc, #68]	; (8016ea4 <TIM_Base_SetConfig+0x128>)
 8016e60:	4293      	cmp	r3, r2
 8016e62:	d007      	beq.n	8016e74 <TIM_Base_SetConfig+0xf8>
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	4a10      	ldr	r2, [pc, #64]	; (8016ea8 <TIM_Base_SetConfig+0x12c>)
 8016e68:	4293      	cmp	r3, r2
 8016e6a:	d003      	beq.n	8016e74 <TIM_Base_SetConfig+0xf8>
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	4a0f      	ldr	r2, [pc, #60]	; (8016eac <TIM_Base_SetConfig+0x130>)
 8016e70:	4293      	cmp	r3, r2
 8016e72:	d103      	bne.n	8016e7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016e74:	683b      	ldr	r3, [r7, #0]
 8016e76:	691a      	ldr	r2, [r3, #16]
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	2201      	movs	r2, #1
 8016e80:	615a      	str	r2, [r3, #20]
}
 8016e82:	bf00      	nop
 8016e84:	3714      	adds	r7, #20
 8016e86:	46bd      	mov	sp, r7
 8016e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8c:	4770      	bx	lr
 8016e8e:	bf00      	nop
 8016e90:	40010000 	.word	0x40010000
 8016e94:	40000400 	.word	0x40000400
 8016e98:	40000800 	.word	0x40000800
 8016e9c:	40000c00 	.word	0x40000c00
 8016ea0:	40010400 	.word	0x40010400
 8016ea4:	40014000 	.word	0x40014000
 8016ea8:	40014400 	.word	0x40014400
 8016eac:	40014800 	.word	0x40014800

08016eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016eb0:	b480      	push	{r7}
 8016eb2:	b087      	sub	sp, #28
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
 8016eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	6a1b      	ldr	r3, [r3, #32]
 8016ebe:	f023 0201 	bic.w	r2, r3, #1
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	6a1b      	ldr	r3, [r3, #32]
 8016eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	685b      	ldr	r3, [r3, #4]
 8016ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	699b      	ldr	r3, [r3, #24]
 8016ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016ed8:	68fa      	ldr	r2, [r7, #12]
 8016eda:	4b37      	ldr	r3, [pc, #220]	; (8016fb8 <TIM_OC1_SetConfig+0x108>)
 8016edc:	4013      	ands	r3, r2
 8016ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	f023 0303 	bic.w	r3, r3, #3
 8016ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	68fa      	ldr	r2, [r7, #12]
 8016eee:	4313      	orrs	r3, r2
 8016ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016ef2:	697b      	ldr	r3, [r7, #20]
 8016ef4:	f023 0302 	bic.w	r3, r3, #2
 8016ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	689b      	ldr	r3, [r3, #8]
 8016efe:	697a      	ldr	r2, [r7, #20]
 8016f00:	4313      	orrs	r3, r2
 8016f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	4a2d      	ldr	r2, [pc, #180]	; (8016fbc <TIM_OC1_SetConfig+0x10c>)
 8016f08:	4293      	cmp	r3, r2
 8016f0a:	d00f      	beq.n	8016f2c <TIM_OC1_SetConfig+0x7c>
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	4a2c      	ldr	r2, [pc, #176]	; (8016fc0 <TIM_OC1_SetConfig+0x110>)
 8016f10:	4293      	cmp	r3, r2
 8016f12:	d00b      	beq.n	8016f2c <TIM_OC1_SetConfig+0x7c>
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	4a2b      	ldr	r2, [pc, #172]	; (8016fc4 <TIM_OC1_SetConfig+0x114>)
 8016f18:	4293      	cmp	r3, r2
 8016f1a:	d007      	beq.n	8016f2c <TIM_OC1_SetConfig+0x7c>
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	4a2a      	ldr	r2, [pc, #168]	; (8016fc8 <TIM_OC1_SetConfig+0x118>)
 8016f20:	4293      	cmp	r3, r2
 8016f22:	d003      	beq.n	8016f2c <TIM_OC1_SetConfig+0x7c>
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	4a29      	ldr	r2, [pc, #164]	; (8016fcc <TIM_OC1_SetConfig+0x11c>)
 8016f28:	4293      	cmp	r3, r2
 8016f2a:	d10c      	bne.n	8016f46 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8016f2c:	697b      	ldr	r3, [r7, #20]
 8016f2e:	f023 0308 	bic.w	r3, r3, #8
 8016f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8016f34:	683b      	ldr	r3, [r7, #0]
 8016f36:	68db      	ldr	r3, [r3, #12]
 8016f38:	697a      	ldr	r2, [r7, #20]
 8016f3a:	4313      	orrs	r3, r2
 8016f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8016f3e:	697b      	ldr	r3, [r7, #20]
 8016f40:	f023 0304 	bic.w	r3, r3, #4
 8016f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	4a1c      	ldr	r2, [pc, #112]	; (8016fbc <TIM_OC1_SetConfig+0x10c>)
 8016f4a:	4293      	cmp	r3, r2
 8016f4c:	d00f      	beq.n	8016f6e <TIM_OC1_SetConfig+0xbe>
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	4a1b      	ldr	r2, [pc, #108]	; (8016fc0 <TIM_OC1_SetConfig+0x110>)
 8016f52:	4293      	cmp	r3, r2
 8016f54:	d00b      	beq.n	8016f6e <TIM_OC1_SetConfig+0xbe>
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	4a1a      	ldr	r2, [pc, #104]	; (8016fc4 <TIM_OC1_SetConfig+0x114>)
 8016f5a:	4293      	cmp	r3, r2
 8016f5c:	d007      	beq.n	8016f6e <TIM_OC1_SetConfig+0xbe>
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	4a19      	ldr	r2, [pc, #100]	; (8016fc8 <TIM_OC1_SetConfig+0x118>)
 8016f62:	4293      	cmp	r3, r2
 8016f64:	d003      	beq.n	8016f6e <TIM_OC1_SetConfig+0xbe>
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	4a18      	ldr	r2, [pc, #96]	; (8016fcc <TIM_OC1_SetConfig+0x11c>)
 8016f6a:	4293      	cmp	r3, r2
 8016f6c:	d111      	bne.n	8016f92 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8016f6e:	693b      	ldr	r3, [r7, #16]
 8016f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8016f76:	693b      	ldr	r3, [r7, #16]
 8016f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8016f7e:	683b      	ldr	r3, [r7, #0]
 8016f80:	695b      	ldr	r3, [r3, #20]
 8016f82:	693a      	ldr	r2, [r7, #16]
 8016f84:	4313      	orrs	r3, r2
 8016f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016f88:	683b      	ldr	r3, [r7, #0]
 8016f8a:	699b      	ldr	r3, [r3, #24]
 8016f8c:	693a      	ldr	r2, [r7, #16]
 8016f8e:	4313      	orrs	r3, r2
 8016f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	693a      	ldr	r2, [r7, #16]
 8016f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	68fa      	ldr	r2, [r7, #12]
 8016f9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016f9e:	683b      	ldr	r3, [r7, #0]
 8016fa0:	685a      	ldr	r2, [r3, #4]
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	697a      	ldr	r2, [r7, #20]
 8016faa:	621a      	str	r2, [r3, #32]
}
 8016fac:	bf00      	nop
 8016fae:	371c      	adds	r7, #28
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb6:	4770      	bx	lr
 8016fb8:	fffeff8f 	.word	0xfffeff8f
 8016fbc:	40010000 	.word	0x40010000
 8016fc0:	40010400 	.word	0x40010400
 8016fc4:	40014000 	.word	0x40014000
 8016fc8:	40014400 	.word	0x40014400
 8016fcc:	40014800 	.word	0x40014800

08016fd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8016fd0:	b480      	push	{r7}
 8016fd2:	b087      	sub	sp, #28
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
 8016fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	6a1b      	ldr	r3, [r3, #32]
 8016fde:	f023 0210 	bic.w	r2, r3, #16
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	6a1b      	ldr	r3, [r3, #32]
 8016fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	685b      	ldr	r3, [r3, #4]
 8016ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	699b      	ldr	r3, [r3, #24]
 8016ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016ff8:	68fa      	ldr	r2, [r7, #12]
 8016ffa:	4b34      	ldr	r3, [pc, #208]	; (80170cc <TIM_OC2_SetConfig+0xfc>)
 8016ffc:	4013      	ands	r3, r2
 8016ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017008:	683b      	ldr	r3, [r7, #0]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	021b      	lsls	r3, r3, #8
 801700e:	68fa      	ldr	r2, [r7, #12]
 8017010:	4313      	orrs	r3, r2
 8017012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8017014:	697b      	ldr	r3, [r7, #20]
 8017016:	f023 0320 	bic.w	r3, r3, #32
 801701a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801701c:	683b      	ldr	r3, [r7, #0]
 801701e:	689b      	ldr	r3, [r3, #8]
 8017020:	011b      	lsls	r3, r3, #4
 8017022:	697a      	ldr	r2, [r7, #20]
 8017024:	4313      	orrs	r3, r2
 8017026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	4a29      	ldr	r2, [pc, #164]	; (80170d0 <TIM_OC2_SetConfig+0x100>)
 801702c:	4293      	cmp	r3, r2
 801702e:	d003      	beq.n	8017038 <TIM_OC2_SetConfig+0x68>
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	4a28      	ldr	r2, [pc, #160]	; (80170d4 <TIM_OC2_SetConfig+0x104>)
 8017034:	4293      	cmp	r3, r2
 8017036:	d10d      	bne.n	8017054 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801703e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017040:	683b      	ldr	r3, [r7, #0]
 8017042:	68db      	ldr	r3, [r3, #12]
 8017044:	011b      	lsls	r3, r3, #4
 8017046:	697a      	ldr	r2, [r7, #20]
 8017048:	4313      	orrs	r3, r2
 801704a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801704c:	697b      	ldr	r3, [r7, #20]
 801704e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017052:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	4a1e      	ldr	r2, [pc, #120]	; (80170d0 <TIM_OC2_SetConfig+0x100>)
 8017058:	4293      	cmp	r3, r2
 801705a:	d00f      	beq.n	801707c <TIM_OC2_SetConfig+0xac>
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	4a1d      	ldr	r2, [pc, #116]	; (80170d4 <TIM_OC2_SetConfig+0x104>)
 8017060:	4293      	cmp	r3, r2
 8017062:	d00b      	beq.n	801707c <TIM_OC2_SetConfig+0xac>
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	4a1c      	ldr	r2, [pc, #112]	; (80170d8 <TIM_OC2_SetConfig+0x108>)
 8017068:	4293      	cmp	r3, r2
 801706a:	d007      	beq.n	801707c <TIM_OC2_SetConfig+0xac>
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	4a1b      	ldr	r2, [pc, #108]	; (80170dc <TIM_OC2_SetConfig+0x10c>)
 8017070:	4293      	cmp	r3, r2
 8017072:	d003      	beq.n	801707c <TIM_OC2_SetConfig+0xac>
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	4a1a      	ldr	r2, [pc, #104]	; (80170e0 <TIM_OC2_SetConfig+0x110>)
 8017078:	4293      	cmp	r3, r2
 801707a:	d113      	bne.n	80170a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801707c:	693b      	ldr	r3, [r7, #16]
 801707e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8017084:	693b      	ldr	r3, [r7, #16]
 8017086:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801708a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801708c:	683b      	ldr	r3, [r7, #0]
 801708e:	695b      	ldr	r3, [r3, #20]
 8017090:	009b      	lsls	r3, r3, #2
 8017092:	693a      	ldr	r2, [r7, #16]
 8017094:	4313      	orrs	r3, r2
 8017096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	699b      	ldr	r3, [r3, #24]
 801709c:	009b      	lsls	r3, r3, #2
 801709e:	693a      	ldr	r2, [r7, #16]
 80170a0:	4313      	orrs	r3, r2
 80170a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	693a      	ldr	r2, [r7, #16]
 80170a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	68fa      	ldr	r2, [r7, #12]
 80170ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80170b0:	683b      	ldr	r3, [r7, #0]
 80170b2:	685a      	ldr	r2, [r3, #4]
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	697a      	ldr	r2, [r7, #20]
 80170bc:	621a      	str	r2, [r3, #32]
}
 80170be:	bf00      	nop
 80170c0:	371c      	adds	r7, #28
 80170c2:	46bd      	mov	sp, r7
 80170c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c8:	4770      	bx	lr
 80170ca:	bf00      	nop
 80170cc:	feff8fff 	.word	0xfeff8fff
 80170d0:	40010000 	.word	0x40010000
 80170d4:	40010400 	.word	0x40010400
 80170d8:	40014000 	.word	0x40014000
 80170dc:	40014400 	.word	0x40014400
 80170e0:	40014800 	.word	0x40014800

080170e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80170e4:	b480      	push	{r7}
 80170e6:	b087      	sub	sp, #28
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
 80170ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	6a1b      	ldr	r3, [r3, #32]
 80170f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	6a1b      	ldr	r3, [r3, #32]
 80170fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	685b      	ldr	r3, [r3, #4]
 8017104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	69db      	ldr	r3, [r3, #28]
 801710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	f023 0303 	bic.w	r3, r3, #3
 801711a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801711c:	683b      	ldr	r3, [r7, #0]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	68fa      	ldr	r2, [r7, #12]
 8017122:	4313      	orrs	r3, r2
 8017124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8017126:	697b      	ldr	r3, [r7, #20]
 8017128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801712c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	689b      	ldr	r3, [r3, #8]
 8017132:	021b      	lsls	r3, r3, #8
 8017134:	697a      	ldr	r2, [r7, #20]
 8017136:	4313      	orrs	r3, r2
 8017138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	4a27      	ldr	r2, [pc, #156]	; (80171dc <TIM_OC3_SetConfig+0xf8>)
 801713e:	4293      	cmp	r3, r2
 8017140:	d003      	beq.n	801714a <TIM_OC3_SetConfig+0x66>
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	4a26      	ldr	r2, [pc, #152]	; (80171e0 <TIM_OC3_SetConfig+0xfc>)
 8017146:	4293      	cmp	r3, r2
 8017148:	d10d      	bne.n	8017166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801714a:	697b      	ldr	r3, [r7, #20]
 801714c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8017152:	683b      	ldr	r3, [r7, #0]
 8017154:	68db      	ldr	r3, [r3, #12]
 8017156:	021b      	lsls	r3, r3, #8
 8017158:	697a      	ldr	r2, [r7, #20]
 801715a:	4313      	orrs	r3, r2
 801715c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801715e:	697b      	ldr	r3, [r7, #20]
 8017160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	4a1c      	ldr	r2, [pc, #112]	; (80171dc <TIM_OC3_SetConfig+0xf8>)
 801716a:	4293      	cmp	r3, r2
 801716c:	d00f      	beq.n	801718e <TIM_OC3_SetConfig+0xaa>
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	4a1b      	ldr	r2, [pc, #108]	; (80171e0 <TIM_OC3_SetConfig+0xfc>)
 8017172:	4293      	cmp	r3, r2
 8017174:	d00b      	beq.n	801718e <TIM_OC3_SetConfig+0xaa>
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	4a1a      	ldr	r2, [pc, #104]	; (80171e4 <TIM_OC3_SetConfig+0x100>)
 801717a:	4293      	cmp	r3, r2
 801717c:	d007      	beq.n	801718e <TIM_OC3_SetConfig+0xaa>
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	4a19      	ldr	r2, [pc, #100]	; (80171e8 <TIM_OC3_SetConfig+0x104>)
 8017182:	4293      	cmp	r3, r2
 8017184:	d003      	beq.n	801718e <TIM_OC3_SetConfig+0xaa>
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	4a18      	ldr	r2, [pc, #96]	; (80171ec <TIM_OC3_SetConfig+0x108>)
 801718a:	4293      	cmp	r3, r2
 801718c:	d113      	bne.n	80171b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801718e:	693b      	ldr	r3, [r7, #16]
 8017190:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8017196:	693b      	ldr	r3, [r7, #16]
 8017198:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801719c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801719e:	683b      	ldr	r3, [r7, #0]
 80171a0:	695b      	ldr	r3, [r3, #20]
 80171a2:	011b      	lsls	r3, r3, #4
 80171a4:	693a      	ldr	r2, [r7, #16]
 80171a6:	4313      	orrs	r3, r2
 80171a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80171aa:	683b      	ldr	r3, [r7, #0]
 80171ac:	699b      	ldr	r3, [r3, #24]
 80171ae:	011b      	lsls	r3, r3, #4
 80171b0:	693a      	ldr	r2, [r7, #16]
 80171b2:	4313      	orrs	r3, r2
 80171b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	693a      	ldr	r2, [r7, #16]
 80171ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	68fa      	ldr	r2, [r7, #12]
 80171c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80171c2:	683b      	ldr	r3, [r7, #0]
 80171c4:	685a      	ldr	r2, [r3, #4]
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	697a      	ldr	r2, [r7, #20]
 80171ce:	621a      	str	r2, [r3, #32]
}
 80171d0:	bf00      	nop
 80171d2:	371c      	adds	r7, #28
 80171d4:	46bd      	mov	sp, r7
 80171d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171da:	4770      	bx	lr
 80171dc:	40010000 	.word	0x40010000
 80171e0:	40010400 	.word	0x40010400
 80171e4:	40014000 	.word	0x40014000
 80171e8:	40014400 	.word	0x40014400
 80171ec:	40014800 	.word	0x40014800

080171f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80171f0:	b480      	push	{r7}
 80171f2:	b087      	sub	sp, #28
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
 80171f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	6a1b      	ldr	r3, [r3, #32]
 80171fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	6a1b      	ldr	r3, [r3, #32]
 801720a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	685b      	ldr	r3, [r3, #4]
 8017210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	69db      	ldr	r3, [r3, #28]
 8017216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801721e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	021b      	lsls	r3, r3, #8
 801722e:	68fa      	ldr	r2, [r7, #12]
 8017230:	4313      	orrs	r3, r2
 8017232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017234:	693b      	ldr	r3, [r7, #16]
 8017236:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801723a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	689b      	ldr	r3, [r3, #8]
 8017240:	031b      	lsls	r3, r3, #12
 8017242:	693a      	ldr	r2, [r7, #16]
 8017244:	4313      	orrs	r3, r2
 8017246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	4a18      	ldr	r2, [pc, #96]	; (80172ac <TIM_OC4_SetConfig+0xbc>)
 801724c:	4293      	cmp	r3, r2
 801724e:	d00f      	beq.n	8017270 <TIM_OC4_SetConfig+0x80>
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	4a17      	ldr	r2, [pc, #92]	; (80172b0 <TIM_OC4_SetConfig+0xc0>)
 8017254:	4293      	cmp	r3, r2
 8017256:	d00b      	beq.n	8017270 <TIM_OC4_SetConfig+0x80>
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	4a16      	ldr	r2, [pc, #88]	; (80172b4 <TIM_OC4_SetConfig+0xc4>)
 801725c:	4293      	cmp	r3, r2
 801725e:	d007      	beq.n	8017270 <TIM_OC4_SetConfig+0x80>
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	4a15      	ldr	r2, [pc, #84]	; (80172b8 <TIM_OC4_SetConfig+0xc8>)
 8017264:	4293      	cmp	r3, r2
 8017266:	d003      	beq.n	8017270 <TIM_OC4_SetConfig+0x80>
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	4a14      	ldr	r2, [pc, #80]	; (80172bc <TIM_OC4_SetConfig+0xcc>)
 801726c:	4293      	cmp	r3, r2
 801726e:	d109      	bne.n	8017284 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8017270:	697b      	ldr	r3, [r7, #20]
 8017272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017276:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017278:	683b      	ldr	r3, [r7, #0]
 801727a:	695b      	ldr	r3, [r3, #20]
 801727c:	019b      	lsls	r3, r3, #6
 801727e:	697a      	ldr	r2, [r7, #20]
 8017280:	4313      	orrs	r3, r2
 8017282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	697a      	ldr	r2, [r7, #20]
 8017288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	68fa      	ldr	r2, [r7, #12]
 801728e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	685a      	ldr	r2, [r3, #4]
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	693a      	ldr	r2, [r7, #16]
 801729c:	621a      	str	r2, [r3, #32]
}
 801729e:	bf00      	nop
 80172a0:	371c      	adds	r7, #28
 80172a2:	46bd      	mov	sp, r7
 80172a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a8:	4770      	bx	lr
 80172aa:	bf00      	nop
 80172ac:	40010000 	.word	0x40010000
 80172b0:	40010400 	.word	0x40010400
 80172b4:	40014000 	.word	0x40014000
 80172b8:	40014400 	.word	0x40014400
 80172bc:	40014800 	.word	0x40014800

080172c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80172c0:	b480      	push	{r7}
 80172c2:	b087      	sub	sp, #28
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	6078      	str	r0, [r7, #4]
 80172c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	6a1b      	ldr	r3, [r3, #32]
 80172ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	6a1b      	ldr	r3, [r3, #32]
 80172da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	685b      	ldr	r3, [r3, #4]
 80172e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80172e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80172ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80172f0:	683b      	ldr	r3, [r7, #0]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	68fa      	ldr	r2, [r7, #12]
 80172f6:	4313      	orrs	r3, r2
 80172f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80172fa:	693b      	ldr	r3, [r7, #16]
 80172fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8017300:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8017302:	683b      	ldr	r3, [r7, #0]
 8017304:	689b      	ldr	r3, [r3, #8]
 8017306:	041b      	lsls	r3, r3, #16
 8017308:	693a      	ldr	r2, [r7, #16]
 801730a:	4313      	orrs	r3, r2
 801730c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	4a17      	ldr	r2, [pc, #92]	; (8017370 <TIM_OC5_SetConfig+0xb0>)
 8017312:	4293      	cmp	r3, r2
 8017314:	d00f      	beq.n	8017336 <TIM_OC5_SetConfig+0x76>
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	4a16      	ldr	r2, [pc, #88]	; (8017374 <TIM_OC5_SetConfig+0xb4>)
 801731a:	4293      	cmp	r3, r2
 801731c:	d00b      	beq.n	8017336 <TIM_OC5_SetConfig+0x76>
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	4a15      	ldr	r2, [pc, #84]	; (8017378 <TIM_OC5_SetConfig+0xb8>)
 8017322:	4293      	cmp	r3, r2
 8017324:	d007      	beq.n	8017336 <TIM_OC5_SetConfig+0x76>
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	4a14      	ldr	r2, [pc, #80]	; (801737c <TIM_OC5_SetConfig+0xbc>)
 801732a:	4293      	cmp	r3, r2
 801732c:	d003      	beq.n	8017336 <TIM_OC5_SetConfig+0x76>
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	4a13      	ldr	r2, [pc, #76]	; (8017380 <TIM_OC5_SetConfig+0xc0>)
 8017332:	4293      	cmp	r3, r2
 8017334:	d109      	bne.n	801734a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017336:	697b      	ldr	r3, [r7, #20]
 8017338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801733c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801733e:	683b      	ldr	r3, [r7, #0]
 8017340:	695b      	ldr	r3, [r3, #20]
 8017342:	021b      	lsls	r3, r3, #8
 8017344:	697a      	ldr	r2, [r7, #20]
 8017346:	4313      	orrs	r3, r2
 8017348:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	697a      	ldr	r2, [r7, #20]
 801734e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	68fa      	ldr	r2, [r7, #12]
 8017354:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017356:	683b      	ldr	r3, [r7, #0]
 8017358:	685a      	ldr	r2, [r3, #4]
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	693a      	ldr	r2, [r7, #16]
 8017362:	621a      	str	r2, [r3, #32]
}
 8017364:	bf00      	nop
 8017366:	371c      	adds	r7, #28
 8017368:	46bd      	mov	sp, r7
 801736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801736e:	4770      	bx	lr
 8017370:	40010000 	.word	0x40010000
 8017374:	40010400 	.word	0x40010400
 8017378:	40014000 	.word	0x40014000
 801737c:	40014400 	.word	0x40014400
 8017380:	40014800 	.word	0x40014800

08017384 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8017384:	b480      	push	{r7}
 8017386:	b087      	sub	sp, #28
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
 801738c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	6a1b      	ldr	r3, [r3, #32]
 8017392:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	6a1b      	ldr	r3, [r3, #32]
 801739e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	685b      	ldr	r3, [r3, #4]
 80173a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80173b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80173b4:	683b      	ldr	r3, [r7, #0]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	021b      	lsls	r3, r3, #8
 80173ba:	68fa      	ldr	r2, [r7, #12]
 80173bc:	4313      	orrs	r3, r2
 80173be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80173c0:	693b      	ldr	r3, [r7, #16]
 80173c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80173c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80173c8:	683b      	ldr	r3, [r7, #0]
 80173ca:	689b      	ldr	r3, [r3, #8]
 80173cc:	051b      	lsls	r3, r3, #20
 80173ce:	693a      	ldr	r2, [r7, #16]
 80173d0:	4313      	orrs	r3, r2
 80173d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	4a18      	ldr	r2, [pc, #96]	; (8017438 <TIM_OC6_SetConfig+0xb4>)
 80173d8:	4293      	cmp	r3, r2
 80173da:	d00f      	beq.n	80173fc <TIM_OC6_SetConfig+0x78>
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	4a17      	ldr	r2, [pc, #92]	; (801743c <TIM_OC6_SetConfig+0xb8>)
 80173e0:	4293      	cmp	r3, r2
 80173e2:	d00b      	beq.n	80173fc <TIM_OC6_SetConfig+0x78>
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	4a16      	ldr	r2, [pc, #88]	; (8017440 <TIM_OC6_SetConfig+0xbc>)
 80173e8:	4293      	cmp	r3, r2
 80173ea:	d007      	beq.n	80173fc <TIM_OC6_SetConfig+0x78>
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	4a15      	ldr	r2, [pc, #84]	; (8017444 <TIM_OC6_SetConfig+0xc0>)
 80173f0:	4293      	cmp	r3, r2
 80173f2:	d003      	beq.n	80173fc <TIM_OC6_SetConfig+0x78>
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	4a14      	ldr	r2, [pc, #80]	; (8017448 <TIM_OC6_SetConfig+0xc4>)
 80173f8:	4293      	cmp	r3, r2
 80173fa:	d109      	bne.n	8017410 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80173fc:	697b      	ldr	r3, [r7, #20]
 80173fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8017402:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8017404:	683b      	ldr	r3, [r7, #0]
 8017406:	695b      	ldr	r3, [r3, #20]
 8017408:	029b      	lsls	r3, r3, #10
 801740a:	697a      	ldr	r2, [r7, #20]
 801740c:	4313      	orrs	r3, r2
 801740e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	697a      	ldr	r2, [r7, #20]
 8017414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	68fa      	ldr	r2, [r7, #12]
 801741a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801741c:	683b      	ldr	r3, [r7, #0]
 801741e:	685a      	ldr	r2, [r3, #4]
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	693a      	ldr	r2, [r7, #16]
 8017428:	621a      	str	r2, [r3, #32]
}
 801742a:	bf00      	nop
 801742c:	371c      	adds	r7, #28
 801742e:	46bd      	mov	sp, r7
 8017430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017434:	4770      	bx	lr
 8017436:	bf00      	nop
 8017438:	40010000 	.word	0x40010000
 801743c:	40010400 	.word	0x40010400
 8017440:	40014000 	.word	0x40014000
 8017444:	40014400 	.word	0x40014400
 8017448:	40014800 	.word	0x40014800

0801744c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801744c:	b480      	push	{r7}
 801744e:	b087      	sub	sp, #28
 8017450:	af00      	add	r7, sp, #0
 8017452:	60f8      	str	r0, [r7, #12]
 8017454:	60b9      	str	r1, [r7, #8]
 8017456:	607a      	str	r2, [r7, #4]
 8017458:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	6a1b      	ldr	r3, [r3, #32]
 801745e:	f023 0201 	bic.w	r2, r3, #1
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	699b      	ldr	r3, [r3, #24]
 801746a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	6a1b      	ldr	r3, [r3, #32]
 8017470:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	4a28      	ldr	r2, [pc, #160]	; (8017518 <TIM_TI1_SetConfig+0xcc>)
 8017476:	4293      	cmp	r3, r2
 8017478:	d01b      	beq.n	80174b2 <TIM_TI1_SetConfig+0x66>
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017480:	d017      	beq.n	80174b2 <TIM_TI1_SetConfig+0x66>
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	4a25      	ldr	r2, [pc, #148]	; (801751c <TIM_TI1_SetConfig+0xd0>)
 8017486:	4293      	cmp	r3, r2
 8017488:	d013      	beq.n	80174b2 <TIM_TI1_SetConfig+0x66>
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	4a24      	ldr	r2, [pc, #144]	; (8017520 <TIM_TI1_SetConfig+0xd4>)
 801748e:	4293      	cmp	r3, r2
 8017490:	d00f      	beq.n	80174b2 <TIM_TI1_SetConfig+0x66>
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	4a23      	ldr	r2, [pc, #140]	; (8017524 <TIM_TI1_SetConfig+0xd8>)
 8017496:	4293      	cmp	r3, r2
 8017498:	d00b      	beq.n	80174b2 <TIM_TI1_SetConfig+0x66>
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	4a22      	ldr	r2, [pc, #136]	; (8017528 <TIM_TI1_SetConfig+0xdc>)
 801749e:	4293      	cmp	r3, r2
 80174a0:	d007      	beq.n	80174b2 <TIM_TI1_SetConfig+0x66>
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	4a21      	ldr	r2, [pc, #132]	; (801752c <TIM_TI1_SetConfig+0xe0>)
 80174a6:	4293      	cmp	r3, r2
 80174a8:	d003      	beq.n	80174b2 <TIM_TI1_SetConfig+0x66>
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	4a20      	ldr	r2, [pc, #128]	; (8017530 <TIM_TI1_SetConfig+0xe4>)
 80174ae:	4293      	cmp	r3, r2
 80174b0:	d101      	bne.n	80174b6 <TIM_TI1_SetConfig+0x6a>
 80174b2:	2301      	movs	r3, #1
 80174b4:	e000      	b.n	80174b8 <TIM_TI1_SetConfig+0x6c>
 80174b6:	2300      	movs	r3, #0
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d008      	beq.n	80174ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80174bc:	697b      	ldr	r3, [r7, #20]
 80174be:	f023 0303 	bic.w	r3, r3, #3
 80174c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80174c4:	697a      	ldr	r2, [r7, #20]
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	4313      	orrs	r3, r2
 80174ca:	617b      	str	r3, [r7, #20]
 80174cc:	e003      	b.n	80174d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80174ce:	697b      	ldr	r3, [r7, #20]
 80174d0:	f043 0301 	orr.w	r3, r3, #1
 80174d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80174d6:	697b      	ldr	r3, [r7, #20]
 80174d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80174dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80174de:	683b      	ldr	r3, [r7, #0]
 80174e0:	011b      	lsls	r3, r3, #4
 80174e2:	b2db      	uxtb	r3, r3
 80174e4:	697a      	ldr	r2, [r7, #20]
 80174e6:	4313      	orrs	r3, r2
 80174e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80174ea:	693b      	ldr	r3, [r7, #16]
 80174ec:	f023 030a 	bic.w	r3, r3, #10
 80174f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80174f2:	68bb      	ldr	r3, [r7, #8]
 80174f4:	f003 030a 	and.w	r3, r3, #10
 80174f8:	693a      	ldr	r2, [r7, #16]
 80174fa:	4313      	orrs	r3, r2
 80174fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	697a      	ldr	r2, [r7, #20]
 8017502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	693a      	ldr	r2, [r7, #16]
 8017508:	621a      	str	r2, [r3, #32]
}
 801750a:	bf00      	nop
 801750c:	371c      	adds	r7, #28
 801750e:	46bd      	mov	sp, r7
 8017510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017514:	4770      	bx	lr
 8017516:	bf00      	nop
 8017518:	40010000 	.word	0x40010000
 801751c:	40000400 	.word	0x40000400
 8017520:	40000800 	.word	0x40000800
 8017524:	40000c00 	.word	0x40000c00
 8017528:	40010400 	.word	0x40010400
 801752c:	40001800 	.word	0x40001800
 8017530:	40014000 	.word	0x40014000

08017534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017534:	b480      	push	{r7}
 8017536:	b087      	sub	sp, #28
 8017538:	af00      	add	r7, sp, #0
 801753a:	60f8      	str	r0, [r7, #12]
 801753c:	60b9      	str	r1, [r7, #8]
 801753e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	6a1b      	ldr	r3, [r3, #32]
 8017544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	6a1b      	ldr	r3, [r3, #32]
 801754a:	f023 0201 	bic.w	r2, r3, #1
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	699b      	ldr	r3, [r3, #24]
 8017556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017558:	693b      	ldr	r3, [r7, #16]
 801755a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801755e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	011b      	lsls	r3, r3, #4
 8017564:	693a      	ldr	r2, [r7, #16]
 8017566:	4313      	orrs	r3, r2
 8017568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801756a:	697b      	ldr	r3, [r7, #20]
 801756c:	f023 030a 	bic.w	r3, r3, #10
 8017570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017572:	697a      	ldr	r2, [r7, #20]
 8017574:	68bb      	ldr	r3, [r7, #8]
 8017576:	4313      	orrs	r3, r2
 8017578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	693a      	ldr	r2, [r7, #16]
 801757e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	697a      	ldr	r2, [r7, #20]
 8017584:	621a      	str	r2, [r3, #32]
}
 8017586:	bf00      	nop
 8017588:	371c      	adds	r7, #28
 801758a:	46bd      	mov	sp, r7
 801758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017590:	4770      	bx	lr

08017592 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8017592:	b480      	push	{r7}
 8017594:	b087      	sub	sp, #28
 8017596:	af00      	add	r7, sp, #0
 8017598:	60f8      	str	r0, [r7, #12]
 801759a:	60b9      	str	r1, [r7, #8]
 801759c:	607a      	str	r2, [r7, #4]
 801759e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	6a1b      	ldr	r3, [r3, #32]
 80175a4:	f023 0210 	bic.w	r2, r3, #16
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	699b      	ldr	r3, [r3, #24]
 80175b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	6a1b      	ldr	r3, [r3, #32]
 80175b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80175b8:	697b      	ldr	r3, [r7, #20]
 80175ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80175be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	021b      	lsls	r3, r3, #8
 80175c4:	697a      	ldr	r2, [r7, #20]
 80175c6:	4313      	orrs	r3, r2
 80175c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80175ca:	697b      	ldr	r3, [r7, #20]
 80175cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80175d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80175d2:	683b      	ldr	r3, [r7, #0]
 80175d4:	031b      	lsls	r3, r3, #12
 80175d6:	b29b      	uxth	r3, r3
 80175d8:	697a      	ldr	r2, [r7, #20]
 80175da:	4313      	orrs	r3, r2
 80175dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80175e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80175e6:	68bb      	ldr	r3, [r7, #8]
 80175e8:	011b      	lsls	r3, r3, #4
 80175ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80175ee:	693a      	ldr	r2, [r7, #16]
 80175f0:	4313      	orrs	r3, r2
 80175f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	697a      	ldr	r2, [r7, #20]
 80175f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	693a      	ldr	r2, [r7, #16]
 80175fe:	621a      	str	r2, [r3, #32]
}
 8017600:	bf00      	nop
 8017602:	371c      	adds	r7, #28
 8017604:	46bd      	mov	sp, r7
 8017606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760a:	4770      	bx	lr

0801760c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801760c:	b480      	push	{r7}
 801760e:	b087      	sub	sp, #28
 8017610:	af00      	add	r7, sp, #0
 8017612:	60f8      	str	r0, [r7, #12]
 8017614:	60b9      	str	r1, [r7, #8]
 8017616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	6a1b      	ldr	r3, [r3, #32]
 801761c:	f023 0210 	bic.w	r2, r3, #16
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	699b      	ldr	r3, [r3, #24]
 8017628:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	6a1b      	ldr	r3, [r3, #32]
 801762e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017630:	697b      	ldr	r3, [r7, #20]
 8017632:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8017636:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	031b      	lsls	r3, r3, #12
 801763c:	697a      	ldr	r2, [r7, #20]
 801763e:	4313      	orrs	r3, r2
 8017640:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017642:	693b      	ldr	r3, [r7, #16]
 8017644:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8017648:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801764a:	68bb      	ldr	r3, [r7, #8]
 801764c:	011b      	lsls	r3, r3, #4
 801764e:	693a      	ldr	r2, [r7, #16]
 8017650:	4313      	orrs	r3, r2
 8017652:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	697a      	ldr	r2, [r7, #20]
 8017658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	693a      	ldr	r2, [r7, #16]
 801765e:	621a      	str	r2, [r3, #32]
}
 8017660:	bf00      	nop
 8017662:	371c      	adds	r7, #28
 8017664:	46bd      	mov	sp, r7
 8017666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766a:	4770      	bx	lr

0801766c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801766c:	b480      	push	{r7}
 801766e:	b087      	sub	sp, #28
 8017670:	af00      	add	r7, sp, #0
 8017672:	60f8      	str	r0, [r7, #12]
 8017674:	60b9      	str	r1, [r7, #8]
 8017676:	607a      	str	r2, [r7, #4]
 8017678:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	6a1b      	ldr	r3, [r3, #32]
 801767e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	69db      	ldr	r3, [r3, #28]
 801768a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	6a1b      	ldr	r3, [r3, #32]
 8017690:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8017692:	697b      	ldr	r3, [r7, #20]
 8017694:	f023 0303 	bic.w	r3, r3, #3
 8017698:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801769a:	697a      	ldr	r2, [r7, #20]
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	4313      	orrs	r3, r2
 80176a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80176a2:	697b      	ldr	r3, [r7, #20]
 80176a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80176a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80176aa:	683b      	ldr	r3, [r7, #0]
 80176ac:	011b      	lsls	r3, r3, #4
 80176ae:	b2db      	uxtb	r3, r3
 80176b0:	697a      	ldr	r2, [r7, #20]
 80176b2:	4313      	orrs	r3, r2
 80176b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80176b6:	693b      	ldr	r3, [r7, #16]
 80176b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80176bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80176be:	68bb      	ldr	r3, [r7, #8]
 80176c0:	021b      	lsls	r3, r3, #8
 80176c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80176c6:	693a      	ldr	r2, [r7, #16]
 80176c8:	4313      	orrs	r3, r2
 80176ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	697a      	ldr	r2, [r7, #20]
 80176d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	693a      	ldr	r2, [r7, #16]
 80176d6:	621a      	str	r2, [r3, #32]
}
 80176d8:	bf00      	nop
 80176da:	371c      	adds	r7, #28
 80176dc:	46bd      	mov	sp, r7
 80176de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e2:	4770      	bx	lr

080176e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80176e4:	b480      	push	{r7}
 80176e6:	b087      	sub	sp, #28
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	60f8      	str	r0, [r7, #12]
 80176ec:	60b9      	str	r1, [r7, #8]
 80176ee:	607a      	str	r2, [r7, #4]
 80176f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	6a1b      	ldr	r3, [r3, #32]
 80176f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	69db      	ldr	r3, [r3, #28]
 8017702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	6a1b      	ldr	r3, [r3, #32]
 8017708:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801770a:	697b      	ldr	r3, [r7, #20]
 801770c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017710:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	021b      	lsls	r3, r3, #8
 8017716:	697a      	ldr	r2, [r7, #20]
 8017718:	4313      	orrs	r3, r2
 801771a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801771c:	697b      	ldr	r3, [r7, #20]
 801771e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8017722:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8017724:	683b      	ldr	r3, [r7, #0]
 8017726:	031b      	lsls	r3, r3, #12
 8017728:	b29b      	uxth	r3, r3
 801772a:	697a      	ldr	r2, [r7, #20]
 801772c:	4313      	orrs	r3, r2
 801772e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8017730:	693b      	ldr	r3, [r7, #16]
 8017732:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8017736:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	031b      	lsls	r3, r3, #12
 801773c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8017740:	693a      	ldr	r2, [r7, #16]
 8017742:	4313      	orrs	r3, r2
 8017744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	697a      	ldr	r2, [r7, #20]
 801774a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	693a      	ldr	r2, [r7, #16]
 8017750:	621a      	str	r2, [r3, #32]
}
 8017752:	bf00      	nop
 8017754:	371c      	adds	r7, #28
 8017756:	46bd      	mov	sp, r7
 8017758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801775c:	4770      	bx	lr
	...

08017760 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017760:	b480      	push	{r7}
 8017762:	b085      	sub	sp, #20
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	689b      	ldr	r3, [r3, #8]
 801776e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017770:	68fa      	ldr	r2, [r7, #12]
 8017772:	4b09      	ldr	r3, [pc, #36]	; (8017798 <TIM_ITRx_SetConfig+0x38>)
 8017774:	4013      	ands	r3, r2
 8017776:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017778:	683a      	ldr	r2, [r7, #0]
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	4313      	orrs	r3, r2
 801777e:	f043 0307 	orr.w	r3, r3, #7
 8017782:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	68fa      	ldr	r2, [r7, #12]
 8017788:	609a      	str	r2, [r3, #8]
}
 801778a:	bf00      	nop
 801778c:	3714      	adds	r7, #20
 801778e:	46bd      	mov	sp, r7
 8017790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017794:	4770      	bx	lr
 8017796:	bf00      	nop
 8017798:	ffcfff8f 	.word	0xffcfff8f

0801779c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801779c:	b480      	push	{r7}
 801779e:	b087      	sub	sp, #28
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	60f8      	str	r0, [r7, #12]
 80177a4:	60b9      	str	r1, [r7, #8]
 80177a6:	607a      	str	r2, [r7, #4]
 80177a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	689b      	ldr	r3, [r3, #8]
 80177ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80177b0:	697b      	ldr	r3, [r7, #20]
 80177b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80177b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80177b8:	683b      	ldr	r3, [r7, #0]
 80177ba:	021a      	lsls	r2, r3, #8
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	431a      	orrs	r2, r3
 80177c0:	68bb      	ldr	r3, [r7, #8]
 80177c2:	4313      	orrs	r3, r2
 80177c4:	697a      	ldr	r2, [r7, #20]
 80177c6:	4313      	orrs	r3, r2
 80177c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	697a      	ldr	r2, [r7, #20]
 80177ce:	609a      	str	r2, [r3, #8]
}
 80177d0:	bf00      	nop
 80177d2:	371c      	adds	r7, #28
 80177d4:	46bd      	mov	sp, r7
 80177d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177da:	4770      	bx	lr

080177dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80177dc:	b480      	push	{r7}
 80177de:	b087      	sub	sp, #28
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	60f8      	str	r0, [r7, #12]
 80177e4:	60b9      	str	r1, [r7, #8]
 80177e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80177e8:	68bb      	ldr	r3, [r7, #8]
 80177ea:	f003 031f 	and.w	r3, r3, #31
 80177ee:	2201      	movs	r2, #1
 80177f0:	fa02 f303 	lsl.w	r3, r2, r3
 80177f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	6a1a      	ldr	r2, [r3, #32]
 80177fa:	697b      	ldr	r3, [r7, #20]
 80177fc:	43db      	mvns	r3, r3
 80177fe:	401a      	ands	r2, r3
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	6a1a      	ldr	r2, [r3, #32]
 8017808:	68bb      	ldr	r3, [r7, #8]
 801780a:	f003 031f 	and.w	r3, r3, #31
 801780e:	6879      	ldr	r1, [r7, #4]
 8017810:	fa01 f303 	lsl.w	r3, r1, r3
 8017814:	431a      	orrs	r2, r3
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	621a      	str	r2, [r3, #32]
}
 801781a:	bf00      	nop
 801781c:	371c      	adds	r7, #28
 801781e:	46bd      	mov	sp, r7
 8017820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017824:	4770      	bx	lr
	...

08017828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017828:	b480      	push	{r7}
 801782a:	b085      	sub	sp, #20
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
 8017830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017838:	2b01      	cmp	r3, #1
 801783a:	d101      	bne.n	8017840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801783c:	2302      	movs	r3, #2
 801783e:	e068      	b.n	8017912 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	2201      	movs	r2, #1
 8017844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	2202      	movs	r2, #2
 801784c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	685b      	ldr	r3, [r3, #4]
 8017856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	689b      	ldr	r3, [r3, #8]
 801785e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	4a2e      	ldr	r2, [pc, #184]	; (8017920 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8017866:	4293      	cmp	r3, r2
 8017868:	d004      	beq.n	8017874 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	4a2d      	ldr	r2, [pc, #180]	; (8017924 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8017870:	4293      	cmp	r3, r2
 8017872:	d108      	bne.n	8017886 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801787a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801787c:	683b      	ldr	r3, [r7, #0]
 801787e:	685b      	ldr	r3, [r3, #4]
 8017880:	68fa      	ldr	r2, [r7, #12]
 8017882:	4313      	orrs	r3, r2
 8017884:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801788c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	68fa      	ldr	r2, [r7, #12]
 8017894:	4313      	orrs	r3, r2
 8017896:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	68fa      	ldr	r2, [r7, #12]
 801789e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	4a1e      	ldr	r2, [pc, #120]	; (8017920 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80178a6:	4293      	cmp	r3, r2
 80178a8:	d01d      	beq.n	80178e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80178b2:	d018      	beq.n	80178e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	4a1b      	ldr	r2, [pc, #108]	; (8017928 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80178ba:	4293      	cmp	r3, r2
 80178bc:	d013      	beq.n	80178e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	4a1a      	ldr	r2, [pc, #104]	; (801792c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80178c4:	4293      	cmp	r3, r2
 80178c6:	d00e      	beq.n	80178e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	4a18      	ldr	r2, [pc, #96]	; (8017930 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80178ce:	4293      	cmp	r3, r2
 80178d0:	d009      	beq.n	80178e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	4a13      	ldr	r2, [pc, #76]	; (8017924 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80178d8:	4293      	cmp	r3, r2
 80178da:	d004      	beq.n	80178e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	4a14      	ldr	r2, [pc, #80]	; (8017934 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80178e2:	4293      	cmp	r3, r2
 80178e4:	d10c      	bne.n	8017900 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80178e6:	68bb      	ldr	r3, [r7, #8]
 80178e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80178ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	689b      	ldr	r3, [r3, #8]
 80178f2:	68ba      	ldr	r2, [r7, #8]
 80178f4:	4313      	orrs	r3, r2
 80178f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	68ba      	ldr	r2, [r7, #8]
 80178fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	2201      	movs	r2, #1
 8017904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	2200      	movs	r2, #0
 801790c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017910:	2300      	movs	r3, #0
}
 8017912:	4618      	mov	r0, r3
 8017914:	3714      	adds	r7, #20
 8017916:	46bd      	mov	sp, r7
 8017918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801791c:	4770      	bx	lr
 801791e:	bf00      	nop
 8017920:	40010000 	.word	0x40010000
 8017924:	40010400 	.word	0x40010400
 8017928:	40000400 	.word	0x40000400
 801792c:	40000800 	.word	0x40000800
 8017930:	40000c00 	.word	0x40000c00
 8017934:	40001800 	.word	0x40001800

08017938 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017938:	b480      	push	{r7}
 801793a:	b085      	sub	sp, #20
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
 8017940:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017942:	2300      	movs	r3, #0
 8017944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801794c:	2b01      	cmp	r3, #1
 801794e:	d101      	bne.n	8017954 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017950:	2302      	movs	r3, #2
 8017952:	e065      	b.n	8017a20 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	2201      	movs	r2, #1
 8017958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8017962:	683b      	ldr	r3, [r7, #0]
 8017964:	68db      	ldr	r3, [r3, #12]
 8017966:	4313      	orrs	r3, r2
 8017968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017970:	683b      	ldr	r3, [r7, #0]
 8017972:	689b      	ldr	r3, [r3, #8]
 8017974:	4313      	orrs	r3, r2
 8017976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801797e:	683b      	ldr	r3, [r7, #0]
 8017980:	685b      	ldr	r3, [r3, #4]
 8017982:	4313      	orrs	r3, r2
 8017984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801798c:	683b      	ldr	r3, [r7, #0]
 801798e:	681b      	ldr	r3, [r3, #0]
 8017990:	4313      	orrs	r3, r2
 8017992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017994:	68fb      	ldr	r3, [r7, #12]
 8017996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801799a:	683b      	ldr	r3, [r7, #0]
 801799c:	691b      	ldr	r3, [r3, #16]
 801799e:	4313      	orrs	r3, r2
 80179a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80179a8:	683b      	ldr	r3, [r7, #0]
 80179aa:	695b      	ldr	r3, [r3, #20]
 80179ac:	4313      	orrs	r3, r2
 80179ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80179b6:	683b      	ldr	r3, [r7, #0]
 80179b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179ba:	4313      	orrs	r3, r2
 80179bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80179c4:	683b      	ldr	r3, [r7, #0]
 80179c6:	699b      	ldr	r3, [r3, #24]
 80179c8:	041b      	lsls	r3, r3, #16
 80179ca:	4313      	orrs	r3, r2
 80179cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	4a16      	ldr	r2, [pc, #88]	; (8017a2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80179d4:	4293      	cmp	r3, r2
 80179d6:	d004      	beq.n	80179e2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	4a14      	ldr	r2, [pc, #80]	; (8017a30 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80179de:	4293      	cmp	r3, r2
 80179e0:	d115      	bne.n	8017a0e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80179e8:	683b      	ldr	r3, [r7, #0]
 80179ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179ec:	051b      	lsls	r3, r3, #20
 80179ee:	4313      	orrs	r3, r2
 80179f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80179f8:	683b      	ldr	r3, [r7, #0]
 80179fa:	69db      	ldr	r3, [r3, #28]
 80179fc:	4313      	orrs	r3, r2
 80179fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8017a06:	683b      	ldr	r3, [r7, #0]
 8017a08:	6a1b      	ldr	r3, [r3, #32]
 8017a0a:	4313      	orrs	r3, r2
 8017a0c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	68fa      	ldr	r2, [r7, #12]
 8017a14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	2200      	movs	r2, #0
 8017a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017a1e:	2300      	movs	r3, #0
}
 8017a20:	4618      	mov	r0, r3
 8017a22:	3714      	adds	r7, #20
 8017a24:	46bd      	mov	sp, r7
 8017a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a2a:	4770      	bx	lr
 8017a2c:	40010000 	.word	0x40010000
 8017a30:	40010400 	.word	0x40010400

08017a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017a34:	b480      	push	{r7}
 8017a36:	b083      	sub	sp, #12
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017a3c:	bf00      	nop
 8017a3e:	370c      	adds	r7, #12
 8017a40:	46bd      	mov	sp, r7
 8017a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a46:	4770      	bx	lr

08017a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017a48:	b480      	push	{r7}
 8017a4a:	b083      	sub	sp, #12
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017a50:	bf00      	nop
 8017a52:	370c      	adds	r7, #12
 8017a54:	46bd      	mov	sp, r7
 8017a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a5a:	4770      	bx	lr

08017a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017a5c:	b480      	push	{r7}
 8017a5e:	b083      	sub	sp, #12
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017a64:	bf00      	nop
 8017a66:	370c      	adds	r7, #12
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6e:	4770      	bx	lr

08017a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017a70:	b580      	push	{r7, lr}
 8017a72:	b082      	sub	sp, #8
 8017a74:	af00      	add	r7, sp, #0
 8017a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d101      	bne.n	8017a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017a7e:	2301      	movs	r3, #1
 8017a80:	e042      	b.n	8017b08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d106      	bne.n	8017a9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	2200      	movs	r2, #0
 8017a90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017a94:	6878      	ldr	r0, [r7, #4]
 8017a96:	f7f3 f8c3 	bl	800ac20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	2224      	movs	r2, #36	; 0x24
 8017a9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	681a      	ldr	r2, [r3, #0]
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	f022 0201 	bic.w	r2, r2, #1
 8017ab0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017ab2:	6878      	ldr	r0, [r7, #4]
 8017ab4:	f000 fa52 	bl	8017f5c <UART_SetConfig>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	2b01      	cmp	r3, #1
 8017abc:	d101      	bne.n	8017ac2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8017abe:	2301      	movs	r3, #1
 8017ac0:	e022      	b.n	8017b08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d002      	beq.n	8017ad0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8017aca:	6878      	ldr	r0, [r7, #4]
 8017acc:	f000 fff6 	bl	8018abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	685a      	ldr	r2, [r3, #4]
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8017ade:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	689a      	ldr	r2, [r3, #8]
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8017aee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	681a      	ldr	r2, [r3, #0]
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	f042 0201 	orr.w	r2, r2, #1
 8017afe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017b00:	6878      	ldr	r0, [r7, #4]
 8017b02:	f001 f87d 	bl	8018c00 <UART_CheckIdleState>
 8017b06:	4603      	mov	r3, r0
}
 8017b08:	4618      	mov	r0, r3
 8017b0a:	3708      	adds	r7, #8
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	bd80      	pop	{r7, pc}

08017b10 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b084      	sub	sp, #16
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	60f8      	str	r0, [r7, #12]
 8017b18:	60b9      	str	r1, [r7, #8]
 8017b1a:	4613      	mov	r3, r2
 8017b1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017b24:	2b20      	cmp	r3, #32
 8017b26:	d170      	bne.n	8017c0a <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d002      	beq.n	8017b34 <HAL_UART_Receive_DMA+0x24>
 8017b2e:	88fb      	ldrh	r3, [r7, #6]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d101      	bne.n	8017b38 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8017b34:	2301      	movs	r3, #1
 8017b36:	e069      	b.n	8017c0c <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8017b3e:	2b01      	cmp	r3, #1
 8017b40:	d101      	bne.n	8017b46 <HAL_UART_Receive_DMA+0x36>
 8017b42:	2302      	movs	r3, #2
 8017b44:	e062      	b.n	8017c0c <HAL_UART_Receive_DMA+0xfc>
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	2201      	movs	r2, #1
 8017b4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	68ba      	ldr	r2, [r7, #8]
 8017b52:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	88fa      	ldrh	r2, [r7, #6]
 8017b58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	2200      	movs	r2, #0
 8017b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	2222      	movs	r2, #34	; 0x22
 8017b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d02c      	beq.n	8017bce <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017b74:	68fb      	ldr	r3, [r7, #12]
 8017b76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017b78:	4a26      	ldr	r2, [pc, #152]	; (8017c14 <HAL_UART_Receive_DMA+0x104>)
 8017b7a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017b80:	4a25      	ldr	r2, [pc, #148]	; (8017c18 <HAL_UART_Receive_DMA+0x108>)
 8017b82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017b88:	4a24      	ldr	r2, [pc, #144]	; (8017c1c <HAL_UART_Receive_DMA+0x10c>)
 8017b8a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017b90:	2200      	movs	r2, #0
 8017b92:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	3324      	adds	r3, #36	; 0x24
 8017b9e:	4619      	mov	r1, r3
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017ba4:	461a      	mov	r2, r3
 8017ba6:	88fb      	ldrh	r3, [r7, #6]
 8017ba8:	f7f4 fe86 	bl	800c8b8 <HAL_DMA_Start_IT>
 8017bac:	4603      	mov	r3, r0
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d00d      	beq.n	8017bce <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	2210      	movs	r2, #16
 8017bb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	2220      	movs	r2, #32
 8017bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8017bca:	2301      	movs	r3, #1
 8017bcc:	e01e      	b.n	8017c0c <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	681a      	ldr	r2, [r3, #0]
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017be4:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	689a      	ldr	r2, [r3, #8]
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	f042 0201 	orr.w	r2, r2, #1
 8017bf4:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	689a      	ldr	r2, [r3, #8]
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017c04:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8017c06:	2300      	movs	r3, #0
 8017c08:	e000      	b.n	8017c0c <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8017c0a:	2302      	movs	r3, #2
  }
}
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	3710      	adds	r7, #16
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}
 8017c14:	08018e15 	.word	0x08018e15
 8017c18:	08018e7b 	.word	0x08018e7b
 8017c1c:	08018e97 	.word	0x08018e97

08017c20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b088      	sub	sp, #32
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	69db      	ldr	r3, [r3, #28]
 8017c2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	689b      	ldr	r3, [r3, #8]
 8017c3e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017c40:	69fa      	ldr	r2, [r7, #28]
 8017c42:	f640 030f 	movw	r3, #2063	; 0x80f
 8017c46:	4013      	ands	r3, r2
 8017c48:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8017c4a:	693b      	ldr	r3, [r7, #16]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d118      	bne.n	8017c82 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017c50:	69fb      	ldr	r3, [r7, #28]
 8017c52:	f003 0320 	and.w	r3, r3, #32
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d013      	beq.n	8017c82 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017c5a:	69bb      	ldr	r3, [r7, #24]
 8017c5c:	f003 0320 	and.w	r3, r3, #32
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d104      	bne.n	8017c6e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017c64:	697b      	ldr	r3, [r7, #20]
 8017c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d009      	beq.n	8017c82 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	f000 8145 	beq.w	8017f02 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	4798      	blx	r3
      }
      return;
 8017c80:	e13f      	b.n	8017f02 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017c82:	693b      	ldr	r3, [r7, #16]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	f000 80e8 	beq.w	8017e5a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8017c8a:	697a      	ldr	r2, [r7, #20]
 8017c8c:	4ba1      	ldr	r3, [pc, #644]	; (8017f14 <HAL_UART_IRQHandler+0x2f4>)
 8017c8e:	4013      	ands	r3, r2
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d105      	bne.n	8017ca0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8017c94:	69ba      	ldr	r2, [r7, #24]
 8017c96:	4ba0      	ldr	r3, [pc, #640]	; (8017f18 <HAL_UART_IRQHandler+0x2f8>)
 8017c98:	4013      	ands	r3, r2
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	f000 80dd 	beq.w	8017e5a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017ca0:	69fb      	ldr	r3, [r7, #28]
 8017ca2:	f003 0301 	and.w	r3, r3, #1
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d010      	beq.n	8017ccc <HAL_UART_IRQHandler+0xac>
 8017caa:	69bb      	ldr	r3, [r7, #24]
 8017cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d00b      	beq.n	8017ccc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	2201      	movs	r2, #1
 8017cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017cc2:	f043 0201 	orr.w	r2, r3, #1
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017ccc:	69fb      	ldr	r3, [r7, #28]
 8017cce:	f003 0302 	and.w	r3, r3, #2
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d010      	beq.n	8017cf8 <HAL_UART_IRQHandler+0xd8>
 8017cd6:	697b      	ldr	r3, [r7, #20]
 8017cd8:	f003 0301 	and.w	r3, r3, #1
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d00b      	beq.n	8017cf8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	2202      	movs	r2, #2
 8017ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017cee:	f043 0204 	orr.w	r2, r3, #4
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017cf8:	69fb      	ldr	r3, [r7, #28]
 8017cfa:	f003 0304 	and.w	r3, r3, #4
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d010      	beq.n	8017d24 <HAL_UART_IRQHandler+0x104>
 8017d02:	697b      	ldr	r3, [r7, #20]
 8017d04:	f003 0301 	and.w	r3, r3, #1
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d00b      	beq.n	8017d24 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	2204      	movs	r2, #4
 8017d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d1a:	f043 0202 	orr.w	r2, r3, #2
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017d24:	69fb      	ldr	r3, [r7, #28]
 8017d26:	f003 0308 	and.w	r3, r3, #8
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d015      	beq.n	8017d5a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017d2e:	69bb      	ldr	r3, [r7, #24]
 8017d30:	f003 0320 	and.w	r3, r3, #32
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d104      	bne.n	8017d42 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8017d38:	697a      	ldr	r2, [r7, #20]
 8017d3a:	4b76      	ldr	r3, [pc, #472]	; (8017f14 <HAL_UART_IRQHandler+0x2f4>)
 8017d3c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d00b      	beq.n	8017d5a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	2208      	movs	r2, #8
 8017d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d50:	f043 0208 	orr.w	r2, r3, #8
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017d5a:	69fb      	ldr	r3, [r7, #28]
 8017d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d011      	beq.n	8017d88 <HAL_UART_IRQHandler+0x168>
 8017d64:	69bb      	ldr	r3, [r7, #24]
 8017d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d00c      	beq.n	8017d88 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d7e:	f043 0220 	orr.w	r2, r3, #32
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	f000 80b9 	beq.w	8017f06 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017d94:	69fb      	ldr	r3, [r7, #28]
 8017d96:	f003 0320 	and.w	r3, r3, #32
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d011      	beq.n	8017dc2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017d9e:	69bb      	ldr	r3, [r7, #24]
 8017da0:	f003 0320 	and.w	r3, r3, #32
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d104      	bne.n	8017db2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017da8:	697b      	ldr	r3, [r7, #20]
 8017daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d007      	beq.n	8017dc2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d003      	beq.n	8017dc2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017dc8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	689b      	ldr	r3, [r3, #8]
 8017dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017dd4:	2b40      	cmp	r3, #64	; 0x40
 8017dd6:	d004      	beq.n	8017de2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d031      	beq.n	8017e46 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017de2:	6878      	ldr	r0, [r7, #4]
 8017de4:	f000 fff2 	bl	8018dcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	689b      	ldr	r3, [r3, #8]
 8017dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017df2:	2b40      	cmp	r3, #64	; 0x40
 8017df4:	d123      	bne.n	8017e3e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	689a      	ldr	r2, [r3, #8]
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017e04:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d013      	beq.n	8017e36 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e12:	4a42      	ldr	r2, [pc, #264]	; (8017f1c <HAL_UART_IRQHandler+0x2fc>)
 8017e14:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	f7f4 ffb6 	bl	800cd8c <HAL_DMA_Abort_IT>
 8017e20:	4603      	mov	r3, r0
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d017      	beq.n	8017e56 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e2c:	687a      	ldr	r2, [r7, #4]
 8017e2e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017e30:	4610      	mov	r0, r2
 8017e32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017e34:	e00f      	b.n	8017e56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017e36:	6878      	ldr	r0, [r7, #4]
 8017e38:	f000 f886 	bl	8017f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017e3c:	e00b      	b.n	8017e56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017e3e:	6878      	ldr	r0, [r7, #4]
 8017e40:	f000 f882 	bl	8017f48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017e44:	e007      	b.n	8017e56 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017e46:	6878      	ldr	r0, [r7, #4]
 8017e48:	f000 f87e 	bl	8017f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	2200      	movs	r2, #0
 8017e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8017e54:	e057      	b.n	8017f06 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017e56:	bf00      	nop
    return;
 8017e58:	e055      	b.n	8017f06 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017e5a:	69fb      	ldr	r3, [r7, #28]
 8017e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d00d      	beq.n	8017e80 <HAL_UART_IRQHandler+0x260>
 8017e64:	697b      	ldr	r3, [r7, #20]
 8017e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d008      	beq.n	8017e80 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8017e76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8017e78:	6878      	ldr	r0, [r7, #4]
 8017e7a:	f001 f87c 	bl	8018f76 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017e7e:	e045      	b.n	8017f0c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8017e80:	69fb      	ldr	r3, [r7, #28]
 8017e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d012      	beq.n	8017eb0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8017e8a:	69bb      	ldr	r3, [r7, #24]
 8017e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d104      	bne.n	8017e9e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8017e94:	697b      	ldr	r3, [r7, #20]
 8017e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d008      	beq.n	8017eb0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d031      	beq.n	8017f0a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017eaa:	6878      	ldr	r0, [r7, #4]
 8017eac:	4798      	blx	r3
    }
    return;
 8017eae:	e02c      	b.n	8017f0a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017eb0:	69fb      	ldr	r3, [r7, #28]
 8017eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d008      	beq.n	8017ecc <HAL_UART_IRQHandler+0x2ac>
 8017eba:	69bb      	ldr	r3, [r7, #24]
 8017ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d003      	beq.n	8017ecc <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8017ec4:	6878      	ldr	r0, [r7, #4]
 8017ec6:	f001 f83c 	bl	8018f42 <UART_EndTransmit_IT>
    return;
 8017eca:	e01f      	b.n	8017f0c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8017ecc:	69fb      	ldr	r3, [r7, #28]
 8017ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d008      	beq.n	8017ee8 <HAL_UART_IRQHandler+0x2c8>
 8017ed6:	69bb      	ldr	r3, [r7, #24]
 8017ed8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d003      	beq.n	8017ee8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8017ee0:	6878      	ldr	r0, [r7, #4]
 8017ee2:	f001 f85c 	bl	8018f9e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017ee6:	e011      	b.n	8017f0c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8017ee8:	69fb      	ldr	r3, [r7, #28]
 8017eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d00c      	beq.n	8017f0c <HAL_UART_IRQHandler+0x2ec>
 8017ef2:	69bb      	ldr	r3, [r7, #24]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	da09      	bge.n	8017f0c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8017ef8:	6878      	ldr	r0, [r7, #4]
 8017efa:	f001 f846 	bl	8018f8a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017efe:	bf00      	nop
 8017f00:	e004      	b.n	8017f0c <HAL_UART_IRQHandler+0x2ec>
      return;
 8017f02:	bf00      	nop
 8017f04:	e002      	b.n	8017f0c <HAL_UART_IRQHandler+0x2ec>
    return;
 8017f06:	bf00      	nop
 8017f08:	e000      	b.n	8017f0c <HAL_UART_IRQHandler+0x2ec>
    return;
 8017f0a:	bf00      	nop
  }
}
 8017f0c:	3720      	adds	r7, #32
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}
 8017f12:	bf00      	nop
 8017f14:	10000001 	.word	0x10000001
 8017f18:	04000120 	.word	0x04000120
 8017f1c:	08018f17 	.word	0x08018f17

08017f20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017f20:	b480      	push	{r7}
 8017f22:	b083      	sub	sp, #12
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017f28:	bf00      	nop
 8017f2a:	370c      	adds	r7, #12
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f32:	4770      	bx	lr

08017f34 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017f34:	b480      	push	{r7}
 8017f36:	b083      	sub	sp, #12
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8017f3c:	bf00      	nop
 8017f3e:	370c      	adds	r7, #12
 8017f40:	46bd      	mov	sp, r7
 8017f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f46:	4770      	bx	lr

08017f48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017f48:	b480      	push	{r7}
 8017f4a:	b083      	sub	sp, #12
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8017f50:	bf00      	nop
 8017f52:	370c      	adds	r7, #12
 8017f54:	46bd      	mov	sp, r7
 8017f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5a:	4770      	bx	lr

08017f5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017f5c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8017f60:	b08e      	sub	sp, #56	; 0x38
 8017f62:	af00      	add	r7, sp, #0
 8017f64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017f66:	2300      	movs	r3, #0
 8017f68:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	689a      	ldr	r2, [r3, #8]
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	691b      	ldr	r3, [r3, #16]
 8017f74:	431a      	orrs	r2, r3
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	695b      	ldr	r3, [r3, #20]
 8017f7a:	431a      	orrs	r2, r3
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	69db      	ldr	r3, [r3, #28]
 8017f80:	4313      	orrs	r3, r2
 8017f82:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017f8a:	4313      	orrs	r3, r2
 8017f8c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	681a      	ldr	r2, [r3, #0]
 8017f94:	4bc1      	ldr	r3, [pc, #772]	; (801829c <UART_SetConfig+0x340>)
 8017f96:	4013      	ands	r3, r2
 8017f98:	687a      	ldr	r2, [r7, #4]
 8017f9a:	6812      	ldr	r2, [r2, #0]
 8017f9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017f9e:	430b      	orrs	r3, r1
 8017fa0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	685b      	ldr	r3, [r3, #4]
 8017fa8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	68da      	ldr	r2, [r3, #12]
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	430a      	orrs	r2, r1
 8017fb6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	699b      	ldr	r3, [r3, #24]
 8017fbc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	4ab7      	ldr	r2, [pc, #732]	; (80182a0 <UART_SetConfig+0x344>)
 8017fc4:	4293      	cmp	r3, r2
 8017fc6:	d004      	beq.n	8017fd2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	6a1b      	ldr	r3, [r3, #32]
 8017fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017fce:	4313      	orrs	r3, r2
 8017fd0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	689a      	ldr	r2, [r3, #8]
 8017fd8:	4bb2      	ldr	r3, [pc, #712]	; (80182a4 <UART_SetConfig+0x348>)
 8017fda:	4013      	ands	r3, r2
 8017fdc:	687a      	ldr	r2, [r7, #4]
 8017fde:	6812      	ldr	r2, [r2, #0]
 8017fe0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017fe2:	430b      	orrs	r3, r1
 8017fe4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fec:	f023 010f 	bic.w	r1, r3, #15
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	430a      	orrs	r2, r1
 8017ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	4aa9      	ldr	r2, [pc, #676]	; (80182a8 <UART_SetConfig+0x34c>)
 8018002:	4293      	cmp	r3, r2
 8018004:	d177      	bne.n	80180f6 <UART_SetConfig+0x19a>
 8018006:	4ba9      	ldr	r3, [pc, #676]	; (80182ac <UART_SetConfig+0x350>)
 8018008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801800a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801800e:	2b28      	cmp	r3, #40	; 0x28
 8018010:	d86c      	bhi.n	80180ec <UART_SetConfig+0x190>
 8018012:	a201      	add	r2, pc, #4	; (adr r2, 8018018 <UART_SetConfig+0xbc>)
 8018014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018018:	080180bd 	.word	0x080180bd
 801801c:	080180ed 	.word	0x080180ed
 8018020:	080180ed 	.word	0x080180ed
 8018024:	080180ed 	.word	0x080180ed
 8018028:	080180ed 	.word	0x080180ed
 801802c:	080180ed 	.word	0x080180ed
 8018030:	080180ed 	.word	0x080180ed
 8018034:	080180ed 	.word	0x080180ed
 8018038:	080180c5 	.word	0x080180c5
 801803c:	080180ed 	.word	0x080180ed
 8018040:	080180ed 	.word	0x080180ed
 8018044:	080180ed 	.word	0x080180ed
 8018048:	080180ed 	.word	0x080180ed
 801804c:	080180ed 	.word	0x080180ed
 8018050:	080180ed 	.word	0x080180ed
 8018054:	080180ed 	.word	0x080180ed
 8018058:	080180cd 	.word	0x080180cd
 801805c:	080180ed 	.word	0x080180ed
 8018060:	080180ed 	.word	0x080180ed
 8018064:	080180ed 	.word	0x080180ed
 8018068:	080180ed 	.word	0x080180ed
 801806c:	080180ed 	.word	0x080180ed
 8018070:	080180ed 	.word	0x080180ed
 8018074:	080180ed 	.word	0x080180ed
 8018078:	080180d5 	.word	0x080180d5
 801807c:	080180ed 	.word	0x080180ed
 8018080:	080180ed 	.word	0x080180ed
 8018084:	080180ed 	.word	0x080180ed
 8018088:	080180ed 	.word	0x080180ed
 801808c:	080180ed 	.word	0x080180ed
 8018090:	080180ed 	.word	0x080180ed
 8018094:	080180ed 	.word	0x080180ed
 8018098:	080180dd 	.word	0x080180dd
 801809c:	080180ed 	.word	0x080180ed
 80180a0:	080180ed 	.word	0x080180ed
 80180a4:	080180ed 	.word	0x080180ed
 80180a8:	080180ed 	.word	0x080180ed
 80180ac:	080180ed 	.word	0x080180ed
 80180b0:	080180ed 	.word	0x080180ed
 80180b4:	080180ed 	.word	0x080180ed
 80180b8:	080180e5 	.word	0x080180e5
 80180bc:	2301      	movs	r3, #1
 80180be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80180c2:	e233      	b.n	801852c <UART_SetConfig+0x5d0>
 80180c4:	2304      	movs	r3, #4
 80180c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80180ca:	e22f      	b.n	801852c <UART_SetConfig+0x5d0>
 80180cc:	2308      	movs	r3, #8
 80180ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80180d2:	e22b      	b.n	801852c <UART_SetConfig+0x5d0>
 80180d4:	2310      	movs	r3, #16
 80180d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80180da:	e227      	b.n	801852c <UART_SetConfig+0x5d0>
 80180dc:	2320      	movs	r3, #32
 80180de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80180e2:	e223      	b.n	801852c <UART_SetConfig+0x5d0>
 80180e4:	2340      	movs	r3, #64	; 0x40
 80180e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80180ea:	e21f      	b.n	801852c <UART_SetConfig+0x5d0>
 80180ec:	2380      	movs	r3, #128	; 0x80
 80180ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80180f2:	bf00      	nop
 80180f4:	e21a      	b.n	801852c <UART_SetConfig+0x5d0>
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	4a6d      	ldr	r2, [pc, #436]	; (80182b0 <UART_SetConfig+0x354>)
 80180fc:	4293      	cmp	r3, r2
 80180fe:	d132      	bne.n	8018166 <UART_SetConfig+0x20a>
 8018100:	4b6a      	ldr	r3, [pc, #424]	; (80182ac <UART_SetConfig+0x350>)
 8018102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018104:	f003 0307 	and.w	r3, r3, #7
 8018108:	2b05      	cmp	r3, #5
 801810a:	d827      	bhi.n	801815c <UART_SetConfig+0x200>
 801810c:	a201      	add	r2, pc, #4	; (adr r2, 8018114 <UART_SetConfig+0x1b8>)
 801810e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018112:	bf00      	nop
 8018114:	0801812d 	.word	0x0801812d
 8018118:	08018135 	.word	0x08018135
 801811c:	0801813d 	.word	0x0801813d
 8018120:	08018145 	.word	0x08018145
 8018124:	0801814d 	.word	0x0801814d
 8018128:	08018155 	.word	0x08018155
 801812c:	2300      	movs	r3, #0
 801812e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018132:	e1fb      	b.n	801852c <UART_SetConfig+0x5d0>
 8018134:	2304      	movs	r3, #4
 8018136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801813a:	e1f7      	b.n	801852c <UART_SetConfig+0x5d0>
 801813c:	2308      	movs	r3, #8
 801813e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018142:	e1f3      	b.n	801852c <UART_SetConfig+0x5d0>
 8018144:	2310      	movs	r3, #16
 8018146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801814a:	e1ef      	b.n	801852c <UART_SetConfig+0x5d0>
 801814c:	2320      	movs	r3, #32
 801814e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018152:	e1eb      	b.n	801852c <UART_SetConfig+0x5d0>
 8018154:	2340      	movs	r3, #64	; 0x40
 8018156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801815a:	e1e7      	b.n	801852c <UART_SetConfig+0x5d0>
 801815c:	2380      	movs	r3, #128	; 0x80
 801815e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018162:	bf00      	nop
 8018164:	e1e2      	b.n	801852c <UART_SetConfig+0x5d0>
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	4a52      	ldr	r2, [pc, #328]	; (80182b4 <UART_SetConfig+0x358>)
 801816c:	4293      	cmp	r3, r2
 801816e:	d132      	bne.n	80181d6 <UART_SetConfig+0x27a>
 8018170:	4b4e      	ldr	r3, [pc, #312]	; (80182ac <UART_SetConfig+0x350>)
 8018172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018174:	f003 0307 	and.w	r3, r3, #7
 8018178:	2b05      	cmp	r3, #5
 801817a:	d827      	bhi.n	80181cc <UART_SetConfig+0x270>
 801817c:	a201      	add	r2, pc, #4	; (adr r2, 8018184 <UART_SetConfig+0x228>)
 801817e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018182:	bf00      	nop
 8018184:	0801819d 	.word	0x0801819d
 8018188:	080181a5 	.word	0x080181a5
 801818c:	080181ad 	.word	0x080181ad
 8018190:	080181b5 	.word	0x080181b5
 8018194:	080181bd 	.word	0x080181bd
 8018198:	080181c5 	.word	0x080181c5
 801819c:	2300      	movs	r3, #0
 801819e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80181a2:	e1c3      	b.n	801852c <UART_SetConfig+0x5d0>
 80181a4:	2304      	movs	r3, #4
 80181a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80181aa:	e1bf      	b.n	801852c <UART_SetConfig+0x5d0>
 80181ac:	2308      	movs	r3, #8
 80181ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80181b2:	e1bb      	b.n	801852c <UART_SetConfig+0x5d0>
 80181b4:	2310      	movs	r3, #16
 80181b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80181ba:	e1b7      	b.n	801852c <UART_SetConfig+0x5d0>
 80181bc:	2320      	movs	r3, #32
 80181be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80181c2:	e1b3      	b.n	801852c <UART_SetConfig+0x5d0>
 80181c4:	2340      	movs	r3, #64	; 0x40
 80181c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80181ca:	e1af      	b.n	801852c <UART_SetConfig+0x5d0>
 80181cc:	2380      	movs	r3, #128	; 0x80
 80181ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80181d2:	bf00      	nop
 80181d4:	e1aa      	b.n	801852c <UART_SetConfig+0x5d0>
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	4a37      	ldr	r2, [pc, #220]	; (80182b8 <UART_SetConfig+0x35c>)
 80181dc:	4293      	cmp	r3, r2
 80181de:	d132      	bne.n	8018246 <UART_SetConfig+0x2ea>
 80181e0:	4b32      	ldr	r3, [pc, #200]	; (80182ac <UART_SetConfig+0x350>)
 80181e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80181e4:	f003 0307 	and.w	r3, r3, #7
 80181e8:	2b05      	cmp	r3, #5
 80181ea:	d827      	bhi.n	801823c <UART_SetConfig+0x2e0>
 80181ec:	a201      	add	r2, pc, #4	; (adr r2, 80181f4 <UART_SetConfig+0x298>)
 80181ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181f2:	bf00      	nop
 80181f4:	0801820d 	.word	0x0801820d
 80181f8:	08018215 	.word	0x08018215
 80181fc:	0801821d 	.word	0x0801821d
 8018200:	08018225 	.word	0x08018225
 8018204:	0801822d 	.word	0x0801822d
 8018208:	08018235 	.word	0x08018235
 801820c:	2300      	movs	r3, #0
 801820e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018212:	e18b      	b.n	801852c <UART_SetConfig+0x5d0>
 8018214:	2304      	movs	r3, #4
 8018216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801821a:	e187      	b.n	801852c <UART_SetConfig+0x5d0>
 801821c:	2308      	movs	r3, #8
 801821e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018222:	e183      	b.n	801852c <UART_SetConfig+0x5d0>
 8018224:	2310      	movs	r3, #16
 8018226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801822a:	e17f      	b.n	801852c <UART_SetConfig+0x5d0>
 801822c:	2320      	movs	r3, #32
 801822e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018232:	e17b      	b.n	801852c <UART_SetConfig+0x5d0>
 8018234:	2340      	movs	r3, #64	; 0x40
 8018236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801823a:	e177      	b.n	801852c <UART_SetConfig+0x5d0>
 801823c:	2380      	movs	r3, #128	; 0x80
 801823e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018242:	bf00      	nop
 8018244:	e172      	b.n	801852c <UART_SetConfig+0x5d0>
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	4a1c      	ldr	r2, [pc, #112]	; (80182bc <UART_SetConfig+0x360>)
 801824c:	4293      	cmp	r3, r2
 801824e:	d144      	bne.n	80182da <UART_SetConfig+0x37e>
 8018250:	4b16      	ldr	r3, [pc, #88]	; (80182ac <UART_SetConfig+0x350>)
 8018252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018254:	f003 0307 	and.w	r3, r3, #7
 8018258:	2b05      	cmp	r3, #5
 801825a:	d839      	bhi.n	80182d0 <UART_SetConfig+0x374>
 801825c:	a201      	add	r2, pc, #4	; (adr r2, 8018264 <UART_SetConfig+0x308>)
 801825e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018262:	bf00      	nop
 8018264:	0801827d 	.word	0x0801827d
 8018268:	08018285 	.word	0x08018285
 801826c:	0801828d 	.word	0x0801828d
 8018270:	08018295 	.word	0x08018295
 8018274:	080182c1 	.word	0x080182c1
 8018278:	080182c9 	.word	0x080182c9
 801827c:	2300      	movs	r3, #0
 801827e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018282:	e153      	b.n	801852c <UART_SetConfig+0x5d0>
 8018284:	2304      	movs	r3, #4
 8018286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801828a:	e14f      	b.n	801852c <UART_SetConfig+0x5d0>
 801828c:	2308      	movs	r3, #8
 801828e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018292:	e14b      	b.n	801852c <UART_SetConfig+0x5d0>
 8018294:	2310      	movs	r3, #16
 8018296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801829a:	e147      	b.n	801852c <UART_SetConfig+0x5d0>
 801829c:	cfff69f3 	.word	0xcfff69f3
 80182a0:	58000c00 	.word	0x58000c00
 80182a4:	11fff4ff 	.word	0x11fff4ff
 80182a8:	40011000 	.word	0x40011000
 80182ac:	58024400 	.word	0x58024400
 80182b0:	40004400 	.word	0x40004400
 80182b4:	40004800 	.word	0x40004800
 80182b8:	40004c00 	.word	0x40004c00
 80182bc:	40005000 	.word	0x40005000
 80182c0:	2320      	movs	r3, #32
 80182c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80182c6:	e131      	b.n	801852c <UART_SetConfig+0x5d0>
 80182c8:	2340      	movs	r3, #64	; 0x40
 80182ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80182ce:	e12d      	b.n	801852c <UART_SetConfig+0x5d0>
 80182d0:	2380      	movs	r3, #128	; 0x80
 80182d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80182d6:	bf00      	nop
 80182d8:	e128      	b.n	801852c <UART_SetConfig+0x5d0>
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	4ab6      	ldr	r2, [pc, #728]	; (80185b8 <UART_SetConfig+0x65c>)
 80182e0:	4293      	cmp	r3, r2
 80182e2:	d178      	bne.n	80183d6 <UART_SetConfig+0x47a>
 80182e4:	4bb5      	ldr	r3, [pc, #724]	; (80185bc <UART_SetConfig+0x660>)
 80182e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80182e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80182ec:	2b28      	cmp	r3, #40	; 0x28
 80182ee:	d86d      	bhi.n	80183cc <UART_SetConfig+0x470>
 80182f0:	a201      	add	r2, pc, #4	; (adr r2, 80182f8 <UART_SetConfig+0x39c>)
 80182f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182f6:	bf00      	nop
 80182f8:	0801839d 	.word	0x0801839d
 80182fc:	080183cd 	.word	0x080183cd
 8018300:	080183cd 	.word	0x080183cd
 8018304:	080183cd 	.word	0x080183cd
 8018308:	080183cd 	.word	0x080183cd
 801830c:	080183cd 	.word	0x080183cd
 8018310:	080183cd 	.word	0x080183cd
 8018314:	080183cd 	.word	0x080183cd
 8018318:	080183a5 	.word	0x080183a5
 801831c:	080183cd 	.word	0x080183cd
 8018320:	080183cd 	.word	0x080183cd
 8018324:	080183cd 	.word	0x080183cd
 8018328:	080183cd 	.word	0x080183cd
 801832c:	080183cd 	.word	0x080183cd
 8018330:	080183cd 	.word	0x080183cd
 8018334:	080183cd 	.word	0x080183cd
 8018338:	080183ad 	.word	0x080183ad
 801833c:	080183cd 	.word	0x080183cd
 8018340:	080183cd 	.word	0x080183cd
 8018344:	080183cd 	.word	0x080183cd
 8018348:	080183cd 	.word	0x080183cd
 801834c:	080183cd 	.word	0x080183cd
 8018350:	080183cd 	.word	0x080183cd
 8018354:	080183cd 	.word	0x080183cd
 8018358:	080183b5 	.word	0x080183b5
 801835c:	080183cd 	.word	0x080183cd
 8018360:	080183cd 	.word	0x080183cd
 8018364:	080183cd 	.word	0x080183cd
 8018368:	080183cd 	.word	0x080183cd
 801836c:	080183cd 	.word	0x080183cd
 8018370:	080183cd 	.word	0x080183cd
 8018374:	080183cd 	.word	0x080183cd
 8018378:	080183bd 	.word	0x080183bd
 801837c:	080183cd 	.word	0x080183cd
 8018380:	080183cd 	.word	0x080183cd
 8018384:	080183cd 	.word	0x080183cd
 8018388:	080183cd 	.word	0x080183cd
 801838c:	080183cd 	.word	0x080183cd
 8018390:	080183cd 	.word	0x080183cd
 8018394:	080183cd 	.word	0x080183cd
 8018398:	080183c5 	.word	0x080183c5
 801839c:	2301      	movs	r3, #1
 801839e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80183a2:	e0c3      	b.n	801852c <UART_SetConfig+0x5d0>
 80183a4:	2304      	movs	r3, #4
 80183a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80183aa:	e0bf      	b.n	801852c <UART_SetConfig+0x5d0>
 80183ac:	2308      	movs	r3, #8
 80183ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80183b2:	e0bb      	b.n	801852c <UART_SetConfig+0x5d0>
 80183b4:	2310      	movs	r3, #16
 80183b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80183ba:	e0b7      	b.n	801852c <UART_SetConfig+0x5d0>
 80183bc:	2320      	movs	r3, #32
 80183be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80183c2:	e0b3      	b.n	801852c <UART_SetConfig+0x5d0>
 80183c4:	2340      	movs	r3, #64	; 0x40
 80183c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80183ca:	e0af      	b.n	801852c <UART_SetConfig+0x5d0>
 80183cc:	2380      	movs	r3, #128	; 0x80
 80183ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80183d2:	bf00      	nop
 80183d4:	e0aa      	b.n	801852c <UART_SetConfig+0x5d0>
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	4a79      	ldr	r2, [pc, #484]	; (80185c0 <UART_SetConfig+0x664>)
 80183dc:	4293      	cmp	r3, r2
 80183de:	d132      	bne.n	8018446 <UART_SetConfig+0x4ea>
 80183e0:	4b76      	ldr	r3, [pc, #472]	; (80185bc <UART_SetConfig+0x660>)
 80183e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80183e4:	f003 0307 	and.w	r3, r3, #7
 80183e8:	2b05      	cmp	r3, #5
 80183ea:	d827      	bhi.n	801843c <UART_SetConfig+0x4e0>
 80183ec:	a201      	add	r2, pc, #4	; (adr r2, 80183f4 <UART_SetConfig+0x498>)
 80183ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183f2:	bf00      	nop
 80183f4:	0801840d 	.word	0x0801840d
 80183f8:	08018415 	.word	0x08018415
 80183fc:	0801841d 	.word	0x0801841d
 8018400:	08018425 	.word	0x08018425
 8018404:	0801842d 	.word	0x0801842d
 8018408:	08018435 	.word	0x08018435
 801840c:	2300      	movs	r3, #0
 801840e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018412:	e08b      	b.n	801852c <UART_SetConfig+0x5d0>
 8018414:	2304      	movs	r3, #4
 8018416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801841a:	e087      	b.n	801852c <UART_SetConfig+0x5d0>
 801841c:	2308      	movs	r3, #8
 801841e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018422:	e083      	b.n	801852c <UART_SetConfig+0x5d0>
 8018424:	2310      	movs	r3, #16
 8018426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801842a:	e07f      	b.n	801852c <UART_SetConfig+0x5d0>
 801842c:	2320      	movs	r3, #32
 801842e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018432:	e07b      	b.n	801852c <UART_SetConfig+0x5d0>
 8018434:	2340      	movs	r3, #64	; 0x40
 8018436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801843a:	e077      	b.n	801852c <UART_SetConfig+0x5d0>
 801843c:	2380      	movs	r3, #128	; 0x80
 801843e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018442:	bf00      	nop
 8018444:	e072      	b.n	801852c <UART_SetConfig+0x5d0>
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	4a5e      	ldr	r2, [pc, #376]	; (80185c4 <UART_SetConfig+0x668>)
 801844c:	4293      	cmp	r3, r2
 801844e:	d132      	bne.n	80184b6 <UART_SetConfig+0x55a>
 8018450:	4b5a      	ldr	r3, [pc, #360]	; (80185bc <UART_SetConfig+0x660>)
 8018452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018454:	f003 0307 	and.w	r3, r3, #7
 8018458:	2b05      	cmp	r3, #5
 801845a:	d827      	bhi.n	80184ac <UART_SetConfig+0x550>
 801845c:	a201      	add	r2, pc, #4	; (adr r2, 8018464 <UART_SetConfig+0x508>)
 801845e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018462:	bf00      	nop
 8018464:	0801847d 	.word	0x0801847d
 8018468:	08018485 	.word	0x08018485
 801846c:	0801848d 	.word	0x0801848d
 8018470:	08018495 	.word	0x08018495
 8018474:	0801849d 	.word	0x0801849d
 8018478:	080184a5 	.word	0x080184a5
 801847c:	2300      	movs	r3, #0
 801847e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018482:	e053      	b.n	801852c <UART_SetConfig+0x5d0>
 8018484:	2304      	movs	r3, #4
 8018486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801848a:	e04f      	b.n	801852c <UART_SetConfig+0x5d0>
 801848c:	2308      	movs	r3, #8
 801848e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018492:	e04b      	b.n	801852c <UART_SetConfig+0x5d0>
 8018494:	2310      	movs	r3, #16
 8018496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801849a:	e047      	b.n	801852c <UART_SetConfig+0x5d0>
 801849c:	2320      	movs	r3, #32
 801849e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80184a2:	e043      	b.n	801852c <UART_SetConfig+0x5d0>
 80184a4:	2340      	movs	r3, #64	; 0x40
 80184a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80184aa:	e03f      	b.n	801852c <UART_SetConfig+0x5d0>
 80184ac:	2380      	movs	r3, #128	; 0x80
 80184ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80184b2:	bf00      	nop
 80184b4:	e03a      	b.n	801852c <UART_SetConfig+0x5d0>
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	4a43      	ldr	r2, [pc, #268]	; (80185c8 <UART_SetConfig+0x66c>)
 80184bc:	4293      	cmp	r3, r2
 80184be:	d132      	bne.n	8018526 <UART_SetConfig+0x5ca>
 80184c0:	4b3e      	ldr	r3, [pc, #248]	; (80185bc <UART_SetConfig+0x660>)
 80184c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80184c4:	f003 0307 	and.w	r3, r3, #7
 80184c8:	2b05      	cmp	r3, #5
 80184ca:	d827      	bhi.n	801851c <UART_SetConfig+0x5c0>
 80184cc:	a201      	add	r2, pc, #4	; (adr r2, 80184d4 <UART_SetConfig+0x578>)
 80184ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184d2:	bf00      	nop
 80184d4:	080184ed 	.word	0x080184ed
 80184d8:	080184f5 	.word	0x080184f5
 80184dc:	080184fd 	.word	0x080184fd
 80184e0:	08018505 	.word	0x08018505
 80184e4:	0801850d 	.word	0x0801850d
 80184e8:	08018515 	.word	0x08018515
 80184ec:	2302      	movs	r3, #2
 80184ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80184f2:	e01b      	b.n	801852c <UART_SetConfig+0x5d0>
 80184f4:	2304      	movs	r3, #4
 80184f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80184fa:	e017      	b.n	801852c <UART_SetConfig+0x5d0>
 80184fc:	2308      	movs	r3, #8
 80184fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018502:	e013      	b.n	801852c <UART_SetConfig+0x5d0>
 8018504:	2310      	movs	r3, #16
 8018506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801850a:	e00f      	b.n	801852c <UART_SetConfig+0x5d0>
 801850c:	2320      	movs	r3, #32
 801850e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018512:	e00b      	b.n	801852c <UART_SetConfig+0x5d0>
 8018514:	2340      	movs	r3, #64	; 0x40
 8018516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801851a:	e007      	b.n	801852c <UART_SetConfig+0x5d0>
 801851c:	2380      	movs	r3, #128	; 0x80
 801851e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018522:	bf00      	nop
 8018524:	e002      	b.n	801852c <UART_SetConfig+0x5d0>
 8018526:	2380      	movs	r3, #128	; 0x80
 8018528:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	4a25      	ldr	r2, [pc, #148]	; (80185c8 <UART_SetConfig+0x66c>)
 8018532:	4293      	cmp	r3, r2
 8018534:	f040 80b8 	bne.w	80186a8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018538:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801853c:	2b08      	cmp	r3, #8
 801853e:	d019      	beq.n	8018574 <UART_SetConfig+0x618>
 8018540:	2b08      	cmp	r3, #8
 8018542:	dc04      	bgt.n	801854e <UART_SetConfig+0x5f2>
 8018544:	2b02      	cmp	r3, #2
 8018546:	d009      	beq.n	801855c <UART_SetConfig+0x600>
 8018548:	2b04      	cmp	r3, #4
 801854a:	d00b      	beq.n	8018564 <UART_SetConfig+0x608>
 801854c:	e042      	b.n	80185d4 <UART_SetConfig+0x678>
 801854e:	2b20      	cmp	r3, #32
 8018550:	d02b      	beq.n	80185aa <UART_SetConfig+0x64e>
 8018552:	2b40      	cmp	r3, #64	; 0x40
 8018554:	d02c      	beq.n	80185b0 <UART_SetConfig+0x654>
 8018556:	2b10      	cmp	r3, #16
 8018558:	d014      	beq.n	8018584 <UART_SetConfig+0x628>
 801855a:	e03b      	b.n	80185d4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801855c:	f7fb faa0 	bl	8013aa0 <HAL_RCCEx_GetD3PCLK1Freq>
 8018560:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8018562:	e03d      	b.n	80185e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018564:	f107 0314 	add.w	r3, r7, #20
 8018568:	4618      	mov	r0, r3
 801856a:	f7fb faaf 	bl	8013acc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801856e:	69bb      	ldr	r3, [r7, #24]
 8018570:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018572:	e035      	b.n	80185e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018574:	f107 0308 	add.w	r3, r7, #8
 8018578:	4618      	mov	r0, r3
 801857a:	f7fb fbf3 	bl	8013d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018582:	e02d      	b.n	80185e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018584:	4b0d      	ldr	r3, [pc, #52]	; (80185bc <UART_SetConfig+0x660>)
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	f003 0320 	and.w	r3, r3, #32
 801858c:	2b00      	cmp	r3, #0
 801858e:	d009      	beq.n	80185a4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018590:	4b0a      	ldr	r3, [pc, #40]	; (80185bc <UART_SetConfig+0x660>)
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	08db      	lsrs	r3, r3, #3
 8018596:	f003 0303 	and.w	r3, r3, #3
 801859a:	4a0c      	ldr	r2, [pc, #48]	; (80185cc <UART_SetConfig+0x670>)
 801859c:	fa22 f303 	lsr.w	r3, r2, r3
 80185a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80185a2:	e01d      	b.n	80185e0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80185a4:	4b09      	ldr	r3, [pc, #36]	; (80185cc <UART_SetConfig+0x670>)
 80185a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80185a8:	e01a      	b.n	80185e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80185aa:	4b09      	ldr	r3, [pc, #36]	; (80185d0 <UART_SetConfig+0x674>)
 80185ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80185ae:	e017      	b.n	80185e0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80185b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80185b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80185b6:	e013      	b.n	80185e0 <UART_SetConfig+0x684>
 80185b8:	40011400 	.word	0x40011400
 80185bc:	58024400 	.word	0x58024400
 80185c0:	40007800 	.word	0x40007800
 80185c4:	40007c00 	.word	0x40007c00
 80185c8:	58000c00 	.word	0x58000c00
 80185cc:	03d09000 	.word	0x03d09000
 80185d0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80185d4:	2300      	movs	r3, #0
 80185d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80185d8:	2301      	movs	r3, #1
 80185da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80185de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80185e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	f000 824d 	beq.w	8018a82 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185ec:	4aad      	ldr	r2, [pc, #692]	; (80188a4 <UART_SetConfig+0x948>)
 80185ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80185f2:	461a      	mov	r2, r3
 80185f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80185fa:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	685a      	ldr	r2, [r3, #4]
 8018600:	4613      	mov	r3, r2
 8018602:	005b      	lsls	r3, r3, #1
 8018604:	4413      	add	r3, r2
 8018606:	6a3a      	ldr	r2, [r7, #32]
 8018608:	429a      	cmp	r2, r3
 801860a:	d305      	bcc.n	8018618 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	685b      	ldr	r3, [r3, #4]
 8018610:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018612:	6a3a      	ldr	r2, [r7, #32]
 8018614:	429a      	cmp	r2, r3
 8018616:	d903      	bls.n	8018620 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8018618:	2301      	movs	r3, #1
 801861a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801861e:	e230      	b.n	8018a82 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018622:	4618      	mov	r0, r3
 8018624:	f04f 0100 	mov.w	r1, #0
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801862c:	4a9d      	ldr	r2, [pc, #628]	; (80188a4 <UART_SetConfig+0x948>)
 801862e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018632:	b29b      	uxth	r3, r3
 8018634:	f04f 0400 	mov.w	r4, #0
 8018638:	461a      	mov	r2, r3
 801863a:	4623      	mov	r3, r4
 801863c:	f7e7 fffe 	bl	800063c <__aeabi_uldivmod>
 8018640:	4603      	mov	r3, r0
 8018642:	460c      	mov	r4, r1
 8018644:	4619      	mov	r1, r3
 8018646:	4622      	mov	r2, r4
 8018648:	f04f 0300 	mov.w	r3, #0
 801864c:	f04f 0400 	mov.w	r4, #0
 8018650:	0214      	lsls	r4, r2, #8
 8018652:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8018656:	020b      	lsls	r3, r1, #8
 8018658:	687a      	ldr	r2, [r7, #4]
 801865a:	6852      	ldr	r2, [r2, #4]
 801865c:	0852      	lsrs	r2, r2, #1
 801865e:	4611      	mov	r1, r2
 8018660:	f04f 0200 	mov.w	r2, #0
 8018664:	eb13 0b01 	adds.w	fp, r3, r1
 8018668:	eb44 0c02 	adc.w	ip, r4, r2
 801866c:	4658      	mov	r0, fp
 801866e:	4661      	mov	r1, ip
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	685b      	ldr	r3, [r3, #4]
 8018674:	f04f 0400 	mov.w	r4, #0
 8018678:	461a      	mov	r2, r3
 801867a:	4623      	mov	r3, r4
 801867c:	f7e7 ffde 	bl	800063c <__aeabi_uldivmod>
 8018680:	4603      	mov	r3, r0
 8018682:	460c      	mov	r4, r1
 8018684:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8018686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801868c:	d308      	bcc.n	80186a0 <UART_SetConfig+0x744>
 801868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018694:	d204      	bcs.n	80186a0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801869c:	60da      	str	r2, [r3, #12]
 801869e:	e1f0      	b.n	8018a82 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80186a0:	2301      	movs	r3, #1
 80186a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80186a6:	e1ec      	b.n	8018a82 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	69db      	ldr	r3, [r3, #28]
 80186ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80186b0:	f040 8100 	bne.w	80188b4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80186b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80186b8:	2b40      	cmp	r3, #64	; 0x40
 80186ba:	f200 80b7 	bhi.w	801882c <UART_SetConfig+0x8d0>
 80186be:	a201      	add	r2, pc, #4	; (adr r2, 80186c4 <UART_SetConfig+0x768>)
 80186c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186c4:	080187c9 	.word	0x080187c9
 80186c8:	080187d1 	.word	0x080187d1
 80186cc:	0801882d 	.word	0x0801882d
 80186d0:	0801882d 	.word	0x0801882d
 80186d4:	080187d9 	.word	0x080187d9
 80186d8:	0801882d 	.word	0x0801882d
 80186dc:	0801882d 	.word	0x0801882d
 80186e0:	0801882d 	.word	0x0801882d
 80186e4:	080187e9 	.word	0x080187e9
 80186e8:	0801882d 	.word	0x0801882d
 80186ec:	0801882d 	.word	0x0801882d
 80186f0:	0801882d 	.word	0x0801882d
 80186f4:	0801882d 	.word	0x0801882d
 80186f8:	0801882d 	.word	0x0801882d
 80186fc:	0801882d 	.word	0x0801882d
 8018700:	0801882d 	.word	0x0801882d
 8018704:	080187f9 	.word	0x080187f9
 8018708:	0801882d 	.word	0x0801882d
 801870c:	0801882d 	.word	0x0801882d
 8018710:	0801882d 	.word	0x0801882d
 8018714:	0801882d 	.word	0x0801882d
 8018718:	0801882d 	.word	0x0801882d
 801871c:	0801882d 	.word	0x0801882d
 8018720:	0801882d 	.word	0x0801882d
 8018724:	0801882d 	.word	0x0801882d
 8018728:	0801882d 	.word	0x0801882d
 801872c:	0801882d 	.word	0x0801882d
 8018730:	0801882d 	.word	0x0801882d
 8018734:	0801882d 	.word	0x0801882d
 8018738:	0801882d 	.word	0x0801882d
 801873c:	0801882d 	.word	0x0801882d
 8018740:	0801882d 	.word	0x0801882d
 8018744:	0801881f 	.word	0x0801881f
 8018748:	0801882d 	.word	0x0801882d
 801874c:	0801882d 	.word	0x0801882d
 8018750:	0801882d 	.word	0x0801882d
 8018754:	0801882d 	.word	0x0801882d
 8018758:	0801882d 	.word	0x0801882d
 801875c:	0801882d 	.word	0x0801882d
 8018760:	0801882d 	.word	0x0801882d
 8018764:	0801882d 	.word	0x0801882d
 8018768:	0801882d 	.word	0x0801882d
 801876c:	0801882d 	.word	0x0801882d
 8018770:	0801882d 	.word	0x0801882d
 8018774:	0801882d 	.word	0x0801882d
 8018778:	0801882d 	.word	0x0801882d
 801877c:	0801882d 	.word	0x0801882d
 8018780:	0801882d 	.word	0x0801882d
 8018784:	0801882d 	.word	0x0801882d
 8018788:	0801882d 	.word	0x0801882d
 801878c:	0801882d 	.word	0x0801882d
 8018790:	0801882d 	.word	0x0801882d
 8018794:	0801882d 	.word	0x0801882d
 8018798:	0801882d 	.word	0x0801882d
 801879c:	0801882d 	.word	0x0801882d
 80187a0:	0801882d 	.word	0x0801882d
 80187a4:	0801882d 	.word	0x0801882d
 80187a8:	0801882d 	.word	0x0801882d
 80187ac:	0801882d 	.word	0x0801882d
 80187b0:	0801882d 	.word	0x0801882d
 80187b4:	0801882d 	.word	0x0801882d
 80187b8:	0801882d 	.word	0x0801882d
 80187bc:	0801882d 	.word	0x0801882d
 80187c0:	0801882d 	.word	0x0801882d
 80187c4:	08018825 	.word	0x08018825
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80187c8:	f7f9 ff96 	bl	80126f8 <HAL_RCC_GetPCLK1Freq>
 80187cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80187ce:	e033      	b.n	8018838 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80187d0:	f7f9 ffa8 	bl	8012724 <HAL_RCC_GetPCLK2Freq>
 80187d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80187d6:	e02f      	b.n	8018838 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80187d8:	f107 0314 	add.w	r3, r7, #20
 80187dc:	4618      	mov	r0, r3
 80187de:	f7fb f975 	bl	8013acc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80187e2:	69bb      	ldr	r3, [r7, #24]
 80187e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80187e6:	e027      	b.n	8018838 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80187e8:	f107 0308 	add.w	r3, r7, #8
 80187ec:	4618      	mov	r0, r3
 80187ee:	f7fb fab9 	bl	8013d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80187f2:	68fb      	ldr	r3, [r7, #12]
 80187f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80187f6:	e01f      	b.n	8018838 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80187f8:	4b2b      	ldr	r3, [pc, #172]	; (80188a8 <UART_SetConfig+0x94c>)
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	f003 0320 	and.w	r3, r3, #32
 8018800:	2b00      	cmp	r3, #0
 8018802:	d009      	beq.n	8018818 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018804:	4b28      	ldr	r3, [pc, #160]	; (80188a8 <UART_SetConfig+0x94c>)
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	08db      	lsrs	r3, r3, #3
 801880a:	f003 0303 	and.w	r3, r3, #3
 801880e:	4a27      	ldr	r2, [pc, #156]	; (80188ac <UART_SetConfig+0x950>)
 8018810:	fa22 f303 	lsr.w	r3, r2, r3
 8018814:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018816:	e00f      	b.n	8018838 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8018818:	4b24      	ldr	r3, [pc, #144]	; (80188ac <UART_SetConfig+0x950>)
 801881a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801881c:	e00c      	b.n	8018838 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801881e:	4b24      	ldr	r3, [pc, #144]	; (80188b0 <UART_SetConfig+0x954>)
 8018820:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018822:	e009      	b.n	8018838 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018828:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801882a:	e005      	b.n	8018838 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 801882c:	2300      	movs	r3, #0
 801882e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8018830:	2301      	movs	r3, #1
 8018832:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8018836:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8018838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801883a:	2b00      	cmp	r3, #0
 801883c:	f000 8121 	beq.w	8018a82 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018844:	4a17      	ldr	r2, [pc, #92]	; (80188a4 <UART_SetConfig+0x948>)
 8018846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801884a:	461a      	mov	r2, r3
 801884c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884e:	fbb3 f3f2 	udiv	r3, r3, r2
 8018852:	005a      	lsls	r2, r3, #1
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	685b      	ldr	r3, [r3, #4]
 8018858:	085b      	lsrs	r3, r3, #1
 801885a:	441a      	add	r2, r3
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	685b      	ldr	r3, [r3, #4]
 8018860:	fbb2 f3f3 	udiv	r3, r2, r3
 8018864:	b29b      	uxth	r3, r3
 8018866:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801886a:	2b0f      	cmp	r3, #15
 801886c:	d916      	bls.n	801889c <UART_SetConfig+0x940>
 801886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018874:	d212      	bcs.n	801889c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8018876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018878:	b29b      	uxth	r3, r3
 801887a:	f023 030f 	bic.w	r3, r3, #15
 801887e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018882:	085b      	lsrs	r3, r3, #1
 8018884:	b29b      	uxth	r3, r3
 8018886:	f003 0307 	and.w	r3, r3, #7
 801888a:	b29a      	uxth	r2, r3
 801888c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801888e:	4313      	orrs	r3, r2
 8018890:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018898:	60da      	str	r2, [r3, #12]
 801889a:	e0f2      	b.n	8018a82 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 801889c:	2301      	movs	r3, #1
 801889e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80188a2:	e0ee      	b.n	8018a82 <UART_SetConfig+0xb26>
 80188a4:	08023b98 	.word	0x08023b98
 80188a8:	58024400 	.word	0x58024400
 80188ac:	03d09000 	.word	0x03d09000
 80188b0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80188b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80188b8:	2b40      	cmp	r3, #64	; 0x40
 80188ba:	f200 80b7 	bhi.w	8018a2c <UART_SetConfig+0xad0>
 80188be:	a201      	add	r2, pc, #4	; (adr r2, 80188c4 <UART_SetConfig+0x968>)
 80188c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188c4:	080189c9 	.word	0x080189c9
 80188c8:	080189d1 	.word	0x080189d1
 80188cc:	08018a2d 	.word	0x08018a2d
 80188d0:	08018a2d 	.word	0x08018a2d
 80188d4:	080189d9 	.word	0x080189d9
 80188d8:	08018a2d 	.word	0x08018a2d
 80188dc:	08018a2d 	.word	0x08018a2d
 80188e0:	08018a2d 	.word	0x08018a2d
 80188e4:	080189e9 	.word	0x080189e9
 80188e8:	08018a2d 	.word	0x08018a2d
 80188ec:	08018a2d 	.word	0x08018a2d
 80188f0:	08018a2d 	.word	0x08018a2d
 80188f4:	08018a2d 	.word	0x08018a2d
 80188f8:	08018a2d 	.word	0x08018a2d
 80188fc:	08018a2d 	.word	0x08018a2d
 8018900:	08018a2d 	.word	0x08018a2d
 8018904:	080189f9 	.word	0x080189f9
 8018908:	08018a2d 	.word	0x08018a2d
 801890c:	08018a2d 	.word	0x08018a2d
 8018910:	08018a2d 	.word	0x08018a2d
 8018914:	08018a2d 	.word	0x08018a2d
 8018918:	08018a2d 	.word	0x08018a2d
 801891c:	08018a2d 	.word	0x08018a2d
 8018920:	08018a2d 	.word	0x08018a2d
 8018924:	08018a2d 	.word	0x08018a2d
 8018928:	08018a2d 	.word	0x08018a2d
 801892c:	08018a2d 	.word	0x08018a2d
 8018930:	08018a2d 	.word	0x08018a2d
 8018934:	08018a2d 	.word	0x08018a2d
 8018938:	08018a2d 	.word	0x08018a2d
 801893c:	08018a2d 	.word	0x08018a2d
 8018940:	08018a2d 	.word	0x08018a2d
 8018944:	08018a1f 	.word	0x08018a1f
 8018948:	08018a2d 	.word	0x08018a2d
 801894c:	08018a2d 	.word	0x08018a2d
 8018950:	08018a2d 	.word	0x08018a2d
 8018954:	08018a2d 	.word	0x08018a2d
 8018958:	08018a2d 	.word	0x08018a2d
 801895c:	08018a2d 	.word	0x08018a2d
 8018960:	08018a2d 	.word	0x08018a2d
 8018964:	08018a2d 	.word	0x08018a2d
 8018968:	08018a2d 	.word	0x08018a2d
 801896c:	08018a2d 	.word	0x08018a2d
 8018970:	08018a2d 	.word	0x08018a2d
 8018974:	08018a2d 	.word	0x08018a2d
 8018978:	08018a2d 	.word	0x08018a2d
 801897c:	08018a2d 	.word	0x08018a2d
 8018980:	08018a2d 	.word	0x08018a2d
 8018984:	08018a2d 	.word	0x08018a2d
 8018988:	08018a2d 	.word	0x08018a2d
 801898c:	08018a2d 	.word	0x08018a2d
 8018990:	08018a2d 	.word	0x08018a2d
 8018994:	08018a2d 	.word	0x08018a2d
 8018998:	08018a2d 	.word	0x08018a2d
 801899c:	08018a2d 	.word	0x08018a2d
 80189a0:	08018a2d 	.word	0x08018a2d
 80189a4:	08018a2d 	.word	0x08018a2d
 80189a8:	08018a2d 	.word	0x08018a2d
 80189ac:	08018a2d 	.word	0x08018a2d
 80189b0:	08018a2d 	.word	0x08018a2d
 80189b4:	08018a2d 	.word	0x08018a2d
 80189b8:	08018a2d 	.word	0x08018a2d
 80189bc:	08018a2d 	.word	0x08018a2d
 80189c0:	08018a2d 	.word	0x08018a2d
 80189c4:	08018a25 	.word	0x08018a25
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80189c8:	f7f9 fe96 	bl	80126f8 <HAL_RCC_GetPCLK1Freq>
 80189cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80189ce:	e033      	b.n	8018a38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80189d0:	f7f9 fea8 	bl	8012724 <HAL_RCC_GetPCLK2Freq>
 80189d4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80189d6:	e02f      	b.n	8018a38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80189d8:	f107 0314 	add.w	r3, r7, #20
 80189dc:	4618      	mov	r0, r3
 80189de:	f7fb f875 	bl	8013acc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80189e2:	69bb      	ldr	r3, [r7, #24]
 80189e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80189e6:	e027      	b.n	8018a38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80189e8:	f107 0308 	add.w	r3, r7, #8
 80189ec:	4618      	mov	r0, r3
 80189ee:	f7fb f9b9 	bl	8013d64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80189f6:	e01f      	b.n	8018a38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80189f8:	4b2c      	ldr	r3, [pc, #176]	; (8018aac <UART_SetConfig+0xb50>)
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	f003 0320 	and.w	r3, r3, #32
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d009      	beq.n	8018a18 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8018a04:	4b29      	ldr	r3, [pc, #164]	; (8018aac <UART_SetConfig+0xb50>)
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	08db      	lsrs	r3, r3, #3
 8018a0a:	f003 0303 	and.w	r3, r3, #3
 8018a0e:	4a28      	ldr	r2, [pc, #160]	; (8018ab0 <UART_SetConfig+0xb54>)
 8018a10:	fa22 f303 	lsr.w	r3, r2, r3
 8018a14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018a16:	e00f      	b.n	8018a38 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8018a18:	4b25      	ldr	r3, [pc, #148]	; (8018ab0 <UART_SetConfig+0xb54>)
 8018a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018a1c:	e00c      	b.n	8018a38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8018a1e:	4b25      	ldr	r3, [pc, #148]	; (8018ab4 <UART_SetConfig+0xb58>)
 8018a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018a22:	e009      	b.n	8018a38 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018a28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018a2a:	e005      	b.n	8018a38 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8018a30:	2301      	movs	r3, #1
 8018a32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8018a36:	bf00      	nop
    }

    if (pclk != 0U)
 8018a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d021      	beq.n	8018a82 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a42:	4a1d      	ldr	r2, [pc, #116]	; (8018ab8 <UART_SetConfig+0xb5c>)
 8018a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018a48:	461a      	mov	r2, r3
 8018a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	685b      	ldr	r3, [r3, #4]
 8018a54:	085b      	lsrs	r3, r3, #1
 8018a56:	441a      	add	r2, r3
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	685b      	ldr	r3, [r3, #4]
 8018a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018a60:	b29b      	uxth	r3, r3
 8018a62:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8018a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a66:	2b0f      	cmp	r3, #15
 8018a68:	d908      	bls.n	8018a7c <UART_SetConfig+0xb20>
 8018a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018a70:	d204      	bcs.n	8018a7c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018a78:	60da      	str	r2, [r3, #12]
 8018a7a:	e002      	b.n	8018a82 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8018a7c:	2301      	movs	r3, #1
 8018a7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	2201      	movs	r2, #1
 8018a86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	2201      	movs	r2, #1
 8018a8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	2200      	movs	r2, #0
 8018a96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	2200      	movs	r2, #0
 8018a9c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8018a9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	3738      	adds	r7, #56	; 0x38
 8018aa6:	46bd      	mov	sp, r7
 8018aa8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8018aac:	58024400 	.word	0x58024400
 8018ab0:	03d09000 	.word	0x03d09000
 8018ab4:	003d0900 	.word	0x003d0900
 8018ab8:	08023b98 	.word	0x08023b98

08018abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018abc:	b480      	push	{r7}
 8018abe:	b083      	sub	sp, #12
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ac8:	f003 0301 	and.w	r3, r3, #1
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d00a      	beq.n	8018ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	685b      	ldr	r3, [r3, #4]
 8018ad6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	430a      	orrs	r2, r1
 8018ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018aea:	f003 0302 	and.w	r3, r3, #2
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d00a      	beq.n	8018b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	685b      	ldr	r3, [r3, #4]
 8018af8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	430a      	orrs	r2, r1
 8018b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b0c:	f003 0304 	and.w	r3, r3, #4
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d00a      	beq.n	8018b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	685b      	ldr	r3, [r3, #4]
 8018b1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	430a      	orrs	r2, r1
 8018b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b2e:	f003 0308 	and.w	r3, r3, #8
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d00a      	beq.n	8018b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	685b      	ldr	r3, [r3, #4]
 8018b3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	430a      	orrs	r2, r1
 8018b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b50:	f003 0310 	and.w	r3, r3, #16
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d00a      	beq.n	8018b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	689b      	ldr	r3, [r3, #8]
 8018b5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	430a      	orrs	r2, r1
 8018b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b72:	f003 0320 	and.w	r3, r3, #32
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d00a      	beq.n	8018b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	689b      	ldr	r3, [r3, #8]
 8018b80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	430a      	orrs	r2, r1
 8018b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d01a      	beq.n	8018bd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	685b      	ldr	r3, [r3, #4]
 8018ba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	430a      	orrs	r2, r1
 8018bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018bba:	d10a      	bne.n	8018bd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	685b      	ldr	r3, [r3, #4]
 8018bc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	430a      	orrs	r2, r1
 8018bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d00a      	beq.n	8018bf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	685b      	ldr	r3, [r3, #4]
 8018be4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	430a      	orrs	r2, r1
 8018bf2:	605a      	str	r2, [r3, #4]
  }
}
 8018bf4:	bf00      	nop
 8018bf6:	370c      	adds	r7, #12
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bfe:	4770      	bx	lr

08018c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b086      	sub	sp, #24
 8018c04:	af02      	add	r7, sp, #8
 8018c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	2200      	movs	r2, #0
 8018c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8018c10:	f7f2 fa8e 	bl	800b130 <HAL_GetTick>
 8018c14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	f003 0308 	and.w	r3, r3, #8
 8018c20:	2b08      	cmp	r3, #8
 8018c22:	d10e      	bne.n	8018c42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8018c28:	9300      	str	r3, [sp, #0]
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	2200      	movs	r2, #0
 8018c2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8018c32:	6878      	ldr	r0, [r7, #4]
 8018c34:	f000 f82c 	bl	8018c90 <UART_WaitOnFlagUntilTimeout>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d001      	beq.n	8018c42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018c3e:	2303      	movs	r3, #3
 8018c40:	e022      	b.n	8018c88 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	f003 0304 	and.w	r3, r3, #4
 8018c4c:	2b04      	cmp	r3, #4
 8018c4e:	d10e      	bne.n	8018c6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8018c54:	9300      	str	r3, [sp, #0]
 8018c56:	68fb      	ldr	r3, [r7, #12]
 8018c58:	2200      	movs	r2, #0
 8018c5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8018c5e:	6878      	ldr	r0, [r7, #4]
 8018c60:	f000 f816 	bl	8018c90 <UART_WaitOnFlagUntilTimeout>
 8018c64:	4603      	mov	r3, r0
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d001      	beq.n	8018c6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018c6a:	2303      	movs	r3, #3
 8018c6c:	e00c      	b.n	8018c88 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	2220      	movs	r2, #32
 8018c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	2220      	movs	r2, #32
 8018c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	2200      	movs	r2, #0
 8018c82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8018c86:	2300      	movs	r3, #0
}
 8018c88:	4618      	mov	r0, r3
 8018c8a:	3710      	adds	r7, #16
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bd80      	pop	{r7, pc}

08018c90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b084      	sub	sp, #16
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	60f8      	str	r0, [r7, #12]
 8018c98:	60b9      	str	r1, [r7, #8]
 8018c9a:	603b      	str	r3, [r7, #0]
 8018c9c:	4613      	mov	r3, r2
 8018c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018ca0:	e062      	b.n	8018d68 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018ca2:	69bb      	ldr	r3, [r7, #24]
 8018ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ca8:	d05e      	beq.n	8018d68 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018caa:	f7f2 fa41 	bl	800b130 <HAL_GetTick>
 8018cae:	4602      	mov	r2, r0
 8018cb0:	683b      	ldr	r3, [r7, #0]
 8018cb2:	1ad3      	subs	r3, r2, r3
 8018cb4:	69ba      	ldr	r2, [r7, #24]
 8018cb6:	429a      	cmp	r2, r3
 8018cb8:	d302      	bcc.n	8018cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8018cba:	69bb      	ldr	r3, [r7, #24]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d11d      	bne.n	8018cfc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	681a      	ldr	r2, [r3, #0]
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8018cce:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	689a      	ldr	r2, [r3, #8]
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	f022 0201 	bic.w	r2, r2, #1
 8018cde:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	2220      	movs	r2, #32
 8018ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	2220      	movs	r2, #32
 8018cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8018cf8:	2303      	movs	r3, #3
 8018cfa:	e045      	b.n	8018d88 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	f003 0304 	and.w	r3, r3, #4
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d02e      	beq.n	8018d68 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	69db      	ldr	r3, [r3, #28]
 8018d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018d18:	d126      	bne.n	8018d68 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018d22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	681a      	ldr	r2, [r3, #0]
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8018d32:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	689a      	ldr	r2, [r3, #8]
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	f022 0201 	bic.w	r2, r2, #1
 8018d42:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	2220      	movs	r2, #32
 8018d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	2220      	movs	r2, #32
 8018d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	2220      	movs	r2, #32
 8018d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	2200      	movs	r2, #0
 8018d60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8018d64:	2303      	movs	r3, #3
 8018d66:	e00f      	b.n	8018d88 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	69da      	ldr	r2, [r3, #28]
 8018d6e:	68bb      	ldr	r3, [r7, #8]
 8018d70:	4013      	ands	r3, r2
 8018d72:	68ba      	ldr	r2, [r7, #8]
 8018d74:	429a      	cmp	r2, r3
 8018d76:	bf0c      	ite	eq
 8018d78:	2301      	moveq	r3, #1
 8018d7a:	2300      	movne	r3, #0
 8018d7c:	b2db      	uxtb	r3, r3
 8018d7e:	461a      	mov	r2, r3
 8018d80:	79fb      	ldrb	r3, [r7, #7]
 8018d82:	429a      	cmp	r2, r3
 8018d84:	d08d      	beq.n	8018ca2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018d86:	2300      	movs	r3, #0
}
 8018d88:	4618      	mov	r0, r3
 8018d8a:	3710      	adds	r7, #16
 8018d8c:	46bd      	mov	sp, r7
 8018d8e:	bd80      	pop	{r7, pc}

08018d90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018d90:	b480      	push	{r7}
 8018d92:	b083      	sub	sp, #12
 8018d94:	af00      	add	r7, sp, #0
 8018d96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	681a      	ldr	r2, [r3, #0]
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8018da6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	689a      	ldr	r2, [r3, #8]
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8018db6:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	2220      	movs	r2, #32
 8018dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8018dc0:	bf00      	nop
 8018dc2:	370c      	adds	r7, #12
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dca:	4770      	bx	lr

08018dcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018dcc:	b480      	push	{r7}
 8018dce:	b083      	sub	sp, #12
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	681a      	ldr	r2, [r3, #0]
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8018de2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	6899      	ldr	r1, [r3, #8]
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	681a      	ldr	r2, [r3, #0]
 8018dee:	4b08      	ldr	r3, [pc, #32]	; (8018e10 <UART_EndRxTransfer+0x44>)
 8018df0:	400b      	ands	r3, r1
 8018df2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	2220      	movs	r2, #32
 8018df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	2200      	movs	r2, #0
 8018e00:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8018e02:	bf00      	nop
 8018e04:	370c      	adds	r7, #12
 8018e06:	46bd      	mov	sp, r7
 8018e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e0c:	4770      	bx	lr
 8018e0e:	bf00      	nop
 8018e10:	effffffe 	.word	0xeffffffe

08018e14 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b084      	sub	sp, #16
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e20:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	69db      	ldr	r3, [r3, #28]
 8018e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018e2a:	d01f      	beq.n	8018e6c <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	2200      	movs	r2, #0
 8018e30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018e34:	68fb      	ldr	r3, [r7, #12]
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	681a      	ldr	r2, [r3, #0]
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018e42:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	689a      	ldr	r2, [r3, #8]
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	f022 0201 	bic.w	r2, r2, #1
 8018e52:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	689a      	ldr	r2, [r3, #8]
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018e62:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	2220      	movs	r2, #32
 8018e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8018e6c:	68f8      	ldr	r0, [r7, #12]
 8018e6e:	f7ef fdcf 	bl	8008a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018e72:	bf00      	nop
 8018e74:	3710      	adds	r7, #16
 8018e76:	46bd      	mov	sp, r7
 8018e78:	bd80      	pop	{r7, pc}

08018e7a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018e7a:	b580      	push	{r7, lr}
 8018e7c:	b084      	sub	sp, #16
 8018e7e:	af00      	add	r7, sp, #0
 8018e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e86:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8018e88:	68f8      	ldr	r0, [r7, #12]
 8018e8a:	f7ff f853 	bl	8017f34 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018e8e:	bf00      	nop
 8018e90:	3710      	adds	r7, #16
 8018e92:	46bd      	mov	sp, r7
 8018e94:	bd80      	pop	{r7, pc}

08018e96 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018e96:	b580      	push	{r7, lr}
 8018e98:	b086      	sub	sp, #24
 8018e9a:	af00      	add	r7, sp, #0
 8018e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ea2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8018ea4:	697b      	ldr	r3, [r7, #20]
 8018ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018eaa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018eac:	697b      	ldr	r3, [r7, #20]
 8018eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018eb2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8018eb4:	697b      	ldr	r3, [r7, #20]
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	689b      	ldr	r3, [r3, #8]
 8018eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018ebe:	2b80      	cmp	r3, #128	; 0x80
 8018ec0:	d109      	bne.n	8018ed6 <UART_DMAError+0x40>
 8018ec2:	693b      	ldr	r3, [r7, #16]
 8018ec4:	2b21      	cmp	r3, #33	; 0x21
 8018ec6:	d106      	bne.n	8018ed6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8018ec8:	697b      	ldr	r3, [r7, #20]
 8018eca:	2200      	movs	r2, #0
 8018ecc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8018ed0:	6978      	ldr	r0, [r7, #20]
 8018ed2:	f7ff ff5d 	bl	8018d90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8018ed6:	697b      	ldr	r3, [r7, #20]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	689b      	ldr	r3, [r3, #8]
 8018edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018ee0:	2b40      	cmp	r3, #64	; 0x40
 8018ee2:	d109      	bne.n	8018ef8 <UART_DMAError+0x62>
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	2b22      	cmp	r3, #34	; 0x22
 8018ee8:	d106      	bne.n	8018ef8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018eea:	697b      	ldr	r3, [r7, #20]
 8018eec:	2200      	movs	r2, #0
 8018eee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8018ef2:	6978      	ldr	r0, [r7, #20]
 8018ef4:	f7ff ff6a 	bl	8018dcc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018ef8:	697b      	ldr	r3, [r7, #20]
 8018efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018efe:	f043 0210 	orr.w	r2, r3, #16
 8018f02:	697b      	ldr	r3, [r7, #20]
 8018f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8018f08:	6978      	ldr	r0, [r7, #20]
 8018f0a:	f7ff f81d 	bl	8017f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018f0e:	bf00      	nop
 8018f10:	3718      	adds	r7, #24
 8018f12:	46bd      	mov	sp, r7
 8018f14:	bd80      	pop	{r7, pc}

08018f16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018f16:	b580      	push	{r7, lr}
 8018f18:	b084      	sub	sp, #16
 8018f1a:	af00      	add	r7, sp, #0
 8018f1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	2200      	movs	r2, #0
 8018f28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	2200      	movs	r2, #0
 8018f30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8018f34:	68f8      	ldr	r0, [r7, #12]
 8018f36:	f7ff f807 	bl	8017f48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018f3a:	bf00      	nop
 8018f3c:	3710      	adds	r7, #16
 8018f3e:	46bd      	mov	sp, r7
 8018f40:	bd80      	pop	{r7, pc}

08018f42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018f42:	b580      	push	{r7, lr}
 8018f44:	b082      	sub	sp, #8
 8018f46:	af00      	add	r7, sp, #0
 8018f48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	681a      	ldr	r2, [r3, #0]
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018f58:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	2220      	movs	r2, #32
 8018f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	2200      	movs	r2, #0
 8018f66:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8018f68:	6878      	ldr	r0, [r7, #4]
 8018f6a:	f7fe ffd9 	bl	8017f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018f6e:	bf00      	nop
 8018f70:	3708      	adds	r7, #8
 8018f72:	46bd      	mov	sp, r7
 8018f74:	bd80      	pop	{r7, pc}

08018f76 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018f76:	b480      	push	{r7}
 8018f78:	b083      	sub	sp, #12
 8018f7a:	af00      	add	r7, sp, #0
 8018f7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018f7e:	bf00      	nop
 8018f80:	370c      	adds	r7, #12
 8018f82:	46bd      	mov	sp, r7
 8018f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f88:	4770      	bx	lr

08018f8a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8018f8a:	b480      	push	{r7}
 8018f8c:	b083      	sub	sp, #12
 8018f8e:	af00      	add	r7, sp, #0
 8018f90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8018f92:	bf00      	nop
 8018f94:	370c      	adds	r7, #12
 8018f96:	46bd      	mov	sp, r7
 8018f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f9c:	4770      	bx	lr

08018f9e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8018f9e:	b480      	push	{r7}
 8018fa0:	b083      	sub	sp, #12
 8018fa2:	af00      	add	r7, sp, #0
 8018fa4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8018fa6:	bf00      	nop
 8018fa8:	370c      	adds	r7, #12
 8018faa:	46bd      	mov	sp, r7
 8018fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb0:	4770      	bx	lr

08018fb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8018fb2:	b480      	push	{r7}
 8018fb4:	b085      	sub	sp, #20
 8018fb6:	af00      	add	r7, sp, #0
 8018fb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8018fc0:	2b01      	cmp	r3, #1
 8018fc2:	d101      	bne.n	8018fc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8018fc4:	2302      	movs	r3, #2
 8018fc6:	e027      	b.n	8019018 <HAL_UARTEx_DisableFifoMode+0x66>
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	2201      	movs	r2, #1
 8018fcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	2224      	movs	r2, #36	; 0x24
 8018fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	681a      	ldr	r2, [r3, #0]
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	f022 0201 	bic.w	r2, r2, #1
 8018fee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8018ff6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	2200      	movs	r2, #0
 8018ffc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	68fa      	ldr	r2, [r7, #12]
 8019004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	2220      	movs	r2, #32
 801900a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	2200      	movs	r2, #0
 8019012:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8019016:	2300      	movs	r3, #0
}
 8019018:	4618      	mov	r0, r3
 801901a:	3714      	adds	r7, #20
 801901c:	46bd      	mov	sp, r7
 801901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019022:	4770      	bx	lr

08019024 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8019024:	b580      	push	{r7, lr}
 8019026:	b084      	sub	sp, #16
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
 801902c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8019034:	2b01      	cmp	r3, #1
 8019036:	d101      	bne.n	801903c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8019038:	2302      	movs	r3, #2
 801903a:	e02d      	b.n	8019098 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	2201      	movs	r2, #1
 8019040:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	2224      	movs	r2, #36	; 0x24
 8019048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	681a      	ldr	r2, [r3, #0]
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	f022 0201 	bic.w	r2, r2, #1
 8019062:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	689b      	ldr	r3, [r3, #8]
 801906a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	683a      	ldr	r2, [r7, #0]
 8019074:	430a      	orrs	r2, r1
 8019076:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8019078:	6878      	ldr	r0, [r7, #4]
 801907a:	f000 f84f 	bl	801911c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	68fa      	ldr	r2, [r7, #12]
 8019084:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	2220      	movs	r2, #32
 801908a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	2200      	movs	r2, #0
 8019092:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8019096:	2300      	movs	r3, #0
}
 8019098:	4618      	mov	r0, r3
 801909a:	3710      	adds	r7, #16
 801909c:	46bd      	mov	sp, r7
 801909e:	bd80      	pop	{r7, pc}

080190a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80190a0:	b580      	push	{r7, lr}
 80190a2:	b084      	sub	sp, #16
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	6078      	str	r0, [r7, #4]
 80190a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80190b0:	2b01      	cmp	r3, #1
 80190b2:	d101      	bne.n	80190b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80190b4:	2302      	movs	r3, #2
 80190b6:	e02d      	b.n	8019114 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	2201      	movs	r2, #1
 80190bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	2224      	movs	r2, #36	; 0x24
 80190c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	681a      	ldr	r2, [r3, #0]
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	f022 0201 	bic.w	r2, r2, #1
 80190de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	689b      	ldr	r3, [r3, #8]
 80190e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	683a      	ldr	r2, [r7, #0]
 80190f0:	430a      	orrs	r2, r1
 80190f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80190f4:	6878      	ldr	r0, [r7, #4]
 80190f6:	f000 f811 	bl	801911c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	68fa      	ldr	r2, [r7, #12]
 8019100:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	2220      	movs	r2, #32
 8019106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	2200      	movs	r2, #0
 801910e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8019112:	2300      	movs	r3, #0
}
 8019114:	4618      	mov	r0, r3
 8019116:	3710      	adds	r7, #16
 8019118:	46bd      	mov	sp, r7
 801911a:	bd80      	pop	{r7, pc}

0801911c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801911c:	b480      	push	{r7}
 801911e:	b089      	sub	sp, #36	; 0x24
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8019124:	4a2f      	ldr	r2, [pc, #188]	; (80191e4 <UARTEx_SetNbDataToProcess+0xc8>)
 8019126:	f107 0314 	add.w	r3, r7, #20
 801912a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801912e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8019132:	4a2d      	ldr	r2, [pc, #180]	; (80191e8 <UARTEx_SetNbDataToProcess+0xcc>)
 8019134:	f107 030c 	add.w	r3, r7, #12
 8019138:	e892 0003 	ldmia.w	r2, {r0, r1}
 801913c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019144:	2b00      	cmp	r3, #0
 8019146:	d108      	bne.n	801915a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	2201      	movs	r2, #1
 801914c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	2201      	movs	r2, #1
 8019154:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8019158:	e03d      	b.n	80191d6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801915a:	2310      	movs	r3, #16
 801915c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801915e:	2310      	movs	r3, #16
 8019160:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	689b      	ldr	r3, [r3, #8]
 8019168:	0e5b      	lsrs	r3, r3, #25
 801916a:	b2db      	uxtb	r3, r3
 801916c:	f003 0307 	and.w	r3, r3, #7
 8019170:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	689b      	ldr	r3, [r3, #8]
 8019178:	0f5b      	lsrs	r3, r3, #29
 801917a:	b2db      	uxtb	r3, r3
 801917c:	f003 0307 	and.w	r3, r3, #7
 8019180:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8019182:	7fbb      	ldrb	r3, [r7, #30]
 8019184:	7f3a      	ldrb	r2, [r7, #28]
 8019186:	f107 0120 	add.w	r1, r7, #32
 801918a:	440a      	add	r2, r1
 801918c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8019190:	fb02 f303 	mul.w	r3, r2, r3
 8019194:	7f3a      	ldrb	r2, [r7, #28]
 8019196:	f107 0120 	add.w	r1, r7, #32
 801919a:	440a      	add	r2, r1
 801919c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80191a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80191a4:	b29a      	uxth	r2, r3
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80191ac:	7ffb      	ldrb	r3, [r7, #31]
 80191ae:	7f7a      	ldrb	r2, [r7, #29]
 80191b0:	f107 0120 	add.w	r1, r7, #32
 80191b4:	440a      	add	r2, r1
 80191b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80191ba:	fb02 f303 	mul.w	r3, r2, r3
 80191be:	7f7a      	ldrb	r2, [r7, #29]
 80191c0:	f107 0120 	add.w	r1, r7, #32
 80191c4:	440a      	add	r2, r1
 80191c6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80191ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80191ce:	b29a      	uxth	r2, r3
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80191d6:	bf00      	nop
 80191d8:	3724      	adds	r7, #36	; 0x24
 80191da:	46bd      	mov	sp, r7
 80191dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e0:	4770      	bx	lr
 80191e2:	bf00      	nop
 80191e4:	08023480 	.word	0x08023480
 80191e8:	08023488 	.word	0x08023488

080191ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80191ec:	b084      	sub	sp, #16
 80191ee:	b480      	push	{r7}
 80191f0:	b085      	sub	sp, #20
 80191f2:	af00      	add	r7, sp, #0
 80191f4:	6078      	str	r0, [r7, #4]
 80191f6:	f107 001c 	add.w	r0, r7, #28
 80191fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80191fe:	2300      	movs	r3, #0
 8019200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8019202:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8019204:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8019206:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8019208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 801920a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 801920e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8019210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8019212:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8019214:	68fa      	ldr	r2, [r7, #12]
 8019216:	4313      	orrs	r3, r2
 8019218:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	685a      	ldr	r2, [r3, #4]
 801921e:	4b07      	ldr	r3, [pc, #28]	; (801923c <SDMMC_Init+0x50>)
 8019220:	4013      	ands	r3, r2
 8019222:	68fa      	ldr	r2, [r7, #12]
 8019224:	431a      	orrs	r2, r3
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801922a:	2300      	movs	r3, #0
}
 801922c:	4618      	mov	r0, r3
 801922e:	3714      	adds	r7, #20
 8019230:	46bd      	mov	sp, r7
 8019232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019236:	b004      	add	sp, #16
 8019238:	4770      	bx	lr
 801923a:	bf00      	nop
 801923c:	ffc02c00 	.word	0xffc02c00

08019240 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8019240:	b480      	push	{r7}
 8019242:	b083      	sub	sp, #12
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801924e:	4618      	mov	r0, r3
 8019250:	370c      	adds	r7, #12
 8019252:	46bd      	mov	sp, r7
 8019254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019258:	4770      	bx	lr

0801925a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801925a:	b480      	push	{r7}
 801925c:	b083      	sub	sp, #12
 801925e:	af00      	add	r7, sp, #0
 8019260:	6078      	str	r0, [r7, #4]
 8019262:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	681a      	ldr	r2, [r3, #0]
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801926e:	2300      	movs	r3, #0
}
 8019270:	4618      	mov	r0, r3
 8019272:	370c      	adds	r7, #12
 8019274:	46bd      	mov	sp, r7
 8019276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801927a:	4770      	bx	lr

0801927c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801927c:	b480      	push	{r7}
 801927e:	b083      	sub	sp, #12
 8019280:	af00      	add	r7, sp, #0
 8019282:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	f043 0203 	orr.w	r2, r3, #3
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8019290:	2300      	movs	r3, #0
}
 8019292:	4618      	mov	r0, r3
 8019294:	370c      	adds	r7, #12
 8019296:	46bd      	mov	sp, r7
 8019298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929c:	4770      	bx	lr

0801929e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801929e:	b480      	push	{r7}
 80192a0:	b083      	sub	sp, #12
 80192a2:	af00      	add	r7, sp, #0
 80192a4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	f003 0303 	and.w	r3, r3, #3
}
 80192ae:	4618      	mov	r0, r3
 80192b0:	370c      	adds	r7, #12
 80192b2:	46bd      	mov	sp, r7
 80192b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b8:	4770      	bx	lr
	...

080192bc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80192bc:	b480      	push	{r7}
 80192be:	b085      	sub	sp, #20
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	6078      	str	r0, [r7, #4]
 80192c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80192c6:	2300      	movs	r3, #0
 80192c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80192ca:	683b      	ldr	r3, [r7, #0]
 80192cc:	681a      	ldr	r2, [r3, #0]
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80192d2:	683b      	ldr	r3, [r7, #0]
 80192d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80192d6:	683b      	ldr	r3, [r7, #0]
 80192d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80192da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80192dc:	683b      	ldr	r3, [r7, #0]
 80192de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80192e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80192e2:	683b      	ldr	r3, [r7, #0]
 80192e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80192e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80192e8:	68fa      	ldr	r2, [r7, #12]
 80192ea:	4313      	orrs	r3, r2
 80192ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	68da      	ldr	r2, [r3, #12]
 80192f2:	4b06      	ldr	r3, [pc, #24]	; (801930c <SDMMC_SendCommand+0x50>)
 80192f4:	4013      	ands	r3, r2
 80192f6:	68fa      	ldr	r2, [r7, #12]
 80192f8:	431a      	orrs	r2, r3
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80192fe:	2300      	movs	r3, #0
}
 8019300:	4618      	mov	r0, r3
 8019302:	3714      	adds	r7, #20
 8019304:	46bd      	mov	sp, r7
 8019306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801930a:	4770      	bx	lr
 801930c:	fffee0c0 	.word	0xfffee0c0

08019310 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8019310:	b480      	push	{r7}
 8019312:	b083      	sub	sp, #12
 8019314:	af00      	add	r7, sp, #0
 8019316:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	691b      	ldr	r3, [r3, #16]
 801931c:	b2db      	uxtb	r3, r3
}
 801931e:	4618      	mov	r0, r3
 8019320:	370c      	adds	r7, #12
 8019322:	46bd      	mov	sp, r7
 8019324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019328:	4770      	bx	lr

0801932a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801932a:	b480      	push	{r7}
 801932c:	b085      	sub	sp, #20
 801932e:	af00      	add	r7, sp, #0
 8019330:	6078      	str	r0, [r7, #4]
 8019332:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	3314      	adds	r3, #20
 8019338:	461a      	mov	r2, r3
 801933a:	683b      	ldr	r3, [r7, #0]
 801933c:	4413      	add	r3, r2
 801933e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	681b      	ldr	r3, [r3, #0]
}
 8019344:	4618      	mov	r0, r3
 8019346:	3714      	adds	r7, #20
 8019348:	46bd      	mov	sp, r7
 801934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934e:	4770      	bx	lr

08019350 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8019350:	b480      	push	{r7}
 8019352:	b085      	sub	sp, #20
 8019354:	af00      	add	r7, sp, #0
 8019356:	6078      	str	r0, [r7, #4]
 8019358:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801935a:	2300      	movs	r3, #0
 801935c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801935e:	683b      	ldr	r3, [r7, #0]
 8019360:	681a      	ldr	r2, [r3, #0]
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8019366:	683b      	ldr	r3, [r7, #0]
 8019368:	685a      	ldr	r2, [r3, #4]
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801936e:	683b      	ldr	r3, [r7, #0]
 8019370:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8019372:	683b      	ldr	r3, [r7, #0]
 8019374:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8019376:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8019378:	683b      	ldr	r3, [r7, #0]
 801937a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801937c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801937e:	683b      	ldr	r3, [r7, #0]
 8019380:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8019382:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8019384:	68fa      	ldr	r2, [r7, #12]
 8019386:	4313      	orrs	r3, r2
 8019388:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801938e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	431a      	orrs	r2, r3
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801939a:	2300      	movs	r3, #0

}
 801939c:	4618      	mov	r0, r3
 801939e:	3714      	adds	r7, #20
 80193a0:	46bd      	mov	sp, r7
 80193a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a6:	4770      	bx	lr

080193a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b088      	sub	sp, #32
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
 80193b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80193b2:	683b      	ldr	r3, [r7, #0]
 80193b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80193b6:	2310      	movs	r3, #16
 80193b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80193ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80193be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80193c0:	2300      	movs	r3, #0
 80193c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80193c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80193c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80193ca:	f107 0308 	add.w	r3, r7, #8
 80193ce:	4619      	mov	r1, r3
 80193d0:	6878      	ldr	r0, [r7, #4]
 80193d2:	f7ff ff73 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80193d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80193da:	2110      	movs	r1, #16
 80193dc:	6878      	ldr	r0, [r7, #4]
 80193de:	f000 faaf 	bl	8019940 <SDMMC_GetCmdResp1>
 80193e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80193e4:	69fb      	ldr	r3, [r7, #28]
}
 80193e6:	4618      	mov	r0, r3
 80193e8:	3720      	adds	r7, #32
 80193ea:	46bd      	mov	sp, r7
 80193ec:	bd80      	pop	{r7, pc}

080193ee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80193ee:	b580      	push	{r7, lr}
 80193f0:	b088      	sub	sp, #32
 80193f2:	af00      	add	r7, sp, #0
 80193f4:	6078      	str	r0, [r7, #4]
 80193f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80193f8:	683b      	ldr	r3, [r7, #0]
 80193fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80193fc:	2311      	movs	r3, #17
 80193fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019406:	2300      	movs	r3, #0
 8019408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801940a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801940e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019410:	f107 0308 	add.w	r3, r7, #8
 8019414:	4619      	mov	r1, r3
 8019416:	6878      	ldr	r0, [r7, #4]
 8019418:	f7ff ff50 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801941c:	f241 3288 	movw	r2, #5000	; 0x1388
 8019420:	2111      	movs	r1, #17
 8019422:	6878      	ldr	r0, [r7, #4]
 8019424:	f000 fa8c 	bl	8019940 <SDMMC_GetCmdResp1>
 8019428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801942a:	69fb      	ldr	r3, [r7, #28]
}
 801942c:	4618      	mov	r0, r3
 801942e:	3720      	adds	r7, #32
 8019430:	46bd      	mov	sp, r7
 8019432:	bd80      	pop	{r7, pc}

08019434 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b088      	sub	sp, #32
 8019438:	af00      	add	r7, sp, #0
 801943a:	6078      	str	r0, [r7, #4]
 801943c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801943e:	683b      	ldr	r3, [r7, #0]
 8019440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8019442:	2312      	movs	r3, #18
 8019444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019446:	f44f 7380 	mov.w	r3, #256	; 0x100
 801944a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801944c:	2300      	movs	r3, #0
 801944e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019454:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019456:	f107 0308 	add.w	r3, r7, #8
 801945a:	4619      	mov	r1, r3
 801945c:	6878      	ldr	r0, [r7, #4]
 801945e:	f7ff ff2d 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8019462:	f241 3288 	movw	r2, #5000	; 0x1388
 8019466:	2112      	movs	r1, #18
 8019468:	6878      	ldr	r0, [r7, #4]
 801946a:	f000 fa69 	bl	8019940 <SDMMC_GetCmdResp1>
 801946e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019470:	69fb      	ldr	r3, [r7, #28]
}
 8019472:	4618      	mov	r0, r3
 8019474:	3720      	adds	r7, #32
 8019476:	46bd      	mov	sp, r7
 8019478:	bd80      	pop	{r7, pc}

0801947a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801947a:	b580      	push	{r7, lr}
 801947c:	b088      	sub	sp, #32
 801947e:	af00      	add	r7, sp, #0
 8019480:	6078      	str	r0, [r7, #4]
 8019482:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8019484:	683b      	ldr	r3, [r7, #0]
 8019486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8019488:	2318      	movs	r3, #24
 801948a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801948c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019492:	2300      	movs	r3, #0
 8019494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801949a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801949c:	f107 0308 	add.w	r3, r7, #8
 80194a0:	4619      	mov	r1, r3
 80194a2:	6878      	ldr	r0, [r7, #4]
 80194a4:	f7ff ff0a 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80194a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80194ac:	2118      	movs	r1, #24
 80194ae:	6878      	ldr	r0, [r7, #4]
 80194b0:	f000 fa46 	bl	8019940 <SDMMC_GetCmdResp1>
 80194b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80194b6:	69fb      	ldr	r3, [r7, #28]
}
 80194b8:	4618      	mov	r0, r3
 80194ba:	3720      	adds	r7, #32
 80194bc:	46bd      	mov	sp, r7
 80194be:	bd80      	pop	{r7, pc}

080194c0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80194c0:	b580      	push	{r7, lr}
 80194c2:	b088      	sub	sp, #32
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	6078      	str	r0, [r7, #4]
 80194c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80194ca:	683b      	ldr	r3, [r7, #0]
 80194cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80194ce:	2319      	movs	r3, #25
 80194d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80194d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80194d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80194d8:	2300      	movs	r3, #0
 80194da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80194dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80194e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80194e2:	f107 0308 	add.w	r3, r7, #8
 80194e6:	4619      	mov	r1, r3
 80194e8:	6878      	ldr	r0, [r7, #4]
 80194ea:	f7ff fee7 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80194ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80194f2:	2119      	movs	r1, #25
 80194f4:	6878      	ldr	r0, [r7, #4]
 80194f6:	f000 fa23 	bl	8019940 <SDMMC_GetCmdResp1>
 80194fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80194fc:	69fb      	ldr	r3, [r7, #28]
}
 80194fe:	4618      	mov	r0, r3
 8019500:	3720      	adds	r7, #32
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}
	...

08019508 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8019508:	b580      	push	{r7, lr}
 801950a:	b088      	sub	sp, #32
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8019510:	2300      	movs	r3, #0
 8019512:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8019514:	230c      	movs	r3, #12
 8019516:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019518:	f44f 7380 	mov.w	r3, #256	; 0x100
 801951c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801951e:	2300      	movs	r3, #0
 8019520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019526:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	68db      	ldr	r3, [r3, #12]
 801952c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	68db      	ldr	r3, [r3, #12]
 8019538:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019540:	f107 0308 	add.w	r3, r7, #8
 8019544:	4619      	mov	r1, r3
 8019546:	6878      	ldr	r0, [r7, #4]
 8019548:	f7ff feb8 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801954c:	4a0b      	ldr	r2, [pc, #44]	; (801957c <SDMMC_CmdStopTransfer+0x74>)
 801954e:	210c      	movs	r1, #12
 8019550:	6878      	ldr	r0, [r7, #4]
 8019552:	f000 f9f5 	bl	8019940 <SDMMC_GetCmdResp1>
 8019556:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	68db      	ldr	r3, [r3, #12]
 801955c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8019564:	69fb      	ldr	r3, [r7, #28]
 8019566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801956a:	d101      	bne.n	8019570 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801956c:	2300      	movs	r3, #0
 801956e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8019570:	69fb      	ldr	r3, [r7, #28]
}
 8019572:	4618      	mov	r0, r3
 8019574:	3720      	adds	r7, #32
 8019576:	46bd      	mov	sp, r7
 8019578:	bd80      	pop	{r7, pc}
 801957a:	bf00      	nop
 801957c:	05f5e100 	.word	0x05f5e100

08019580 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8019580:	b580      	push	{r7, lr}
 8019582:	b08a      	sub	sp, #40	; 0x28
 8019584:	af00      	add	r7, sp, #0
 8019586:	60f8      	str	r0, [r7, #12]
 8019588:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8019590:	2307      	movs	r3, #7
 8019592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019598:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801959a:	2300      	movs	r3, #0
 801959c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801959e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80195a2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80195a4:	f107 0310 	add.w	r3, r7, #16
 80195a8:	4619      	mov	r1, r3
 80195aa:	68f8      	ldr	r0, [r7, #12]
 80195ac:	f7ff fe86 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80195b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80195b4:	2107      	movs	r1, #7
 80195b6:	68f8      	ldr	r0, [r7, #12]
 80195b8:	f000 f9c2 	bl	8019940 <SDMMC_GetCmdResp1>
 80195bc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80195be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80195c0:	4618      	mov	r0, r3
 80195c2:	3728      	adds	r7, #40	; 0x28
 80195c4:	46bd      	mov	sp, r7
 80195c6:	bd80      	pop	{r7, pc}

080195c8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b088      	sub	sp, #32
 80195cc:	af00      	add	r7, sp, #0
 80195ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80195d0:	2300      	movs	r3, #0
 80195d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80195d4:	2300      	movs	r3, #0
 80195d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80195d8:	2300      	movs	r3, #0
 80195da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80195dc:	2300      	movs	r3, #0
 80195de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80195e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80195e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80195e6:	f107 0308 	add.w	r3, r7, #8
 80195ea:	4619      	mov	r1, r3
 80195ec:	6878      	ldr	r0, [r7, #4]
 80195ee:	f7ff fe65 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80195f2:	6878      	ldr	r0, [r7, #4]
 80195f4:	f000 f976 	bl	80198e4 <SDMMC_GetCmdError>
 80195f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80195fa:	69fb      	ldr	r3, [r7, #28]
}
 80195fc:	4618      	mov	r0, r3
 80195fe:	3720      	adds	r7, #32
 8019600:	46bd      	mov	sp, r7
 8019602:	bd80      	pop	{r7, pc}

08019604 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8019604:	b580      	push	{r7, lr}
 8019606:	b088      	sub	sp, #32
 8019608:	af00      	add	r7, sp, #0
 801960a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801960c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8019610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8019612:	2308      	movs	r3, #8
 8019614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019616:	f44f 7380 	mov.w	r3, #256	; 0x100
 801961a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801961c:	2300      	movs	r3, #0
 801961e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019626:	f107 0308 	add.w	r3, r7, #8
 801962a:	4619      	mov	r1, r3
 801962c:	6878      	ldr	r0, [r7, #4]
 801962e:	f7ff fe45 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8019632:	6878      	ldr	r0, [r7, #4]
 8019634:	f000 fb78 	bl	8019d28 <SDMMC_GetCmdResp7>
 8019638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801963a:	69fb      	ldr	r3, [r7, #28]
}
 801963c:	4618      	mov	r0, r3
 801963e:	3720      	adds	r7, #32
 8019640:	46bd      	mov	sp, r7
 8019642:	bd80      	pop	{r7, pc}

08019644 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b088      	sub	sp, #32
 8019648:	af00      	add	r7, sp, #0
 801964a:	6078      	str	r0, [r7, #4]
 801964c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801964e:	683b      	ldr	r3, [r7, #0]
 8019650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8019652:	2337      	movs	r3, #55	; 0x37
 8019654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019656:	f44f 7380 	mov.w	r3, #256	; 0x100
 801965a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801965c:	2300      	movs	r3, #0
 801965e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019664:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019666:	f107 0308 	add.w	r3, r7, #8
 801966a:	4619      	mov	r1, r3
 801966c:	6878      	ldr	r0, [r7, #4]
 801966e:	f7ff fe25 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8019672:	f241 3288 	movw	r2, #5000	; 0x1388
 8019676:	2137      	movs	r1, #55	; 0x37
 8019678:	6878      	ldr	r0, [r7, #4]
 801967a:	f000 f961 	bl	8019940 <SDMMC_GetCmdResp1>
 801967e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019680:	69fb      	ldr	r3, [r7, #28]
}
 8019682:	4618      	mov	r0, r3
 8019684:	3720      	adds	r7, #32
 8019686:	46bd      	mov	sp, r7
 8019688:	bd80      	pop	{r7, pc}

0801968a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801968a:	b580      	push	{r7, lr}
 801968c:	b088      	sub	sp, #32
 801968e:	af00      	add	r7, sp, #0
 8019690:	6078      	str	r0, [r7, #4]
 8019692:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8019694:	683b      	ldr	r3, [r7, #0]
 8019696:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8019698:	2329      	movs	r3, #41	; 0x29
 801969a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801969c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80196a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80196a2:	2300      	movs	r3, #0
 80196a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80196a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80196aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80196ac:	f107 0308 	add.w	r3, r7, #8
 80196b0:	4619      	mov	r1, r3
 80196b2:	6878      	ldr	r0, [r7, #4]
 80196b4:	f7ff fe02 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80196b8:	6878      	ldr	r0, [r7, #4]
 80196ba:	f000 fa7d 	bl	8019bb8 <SDMMC_GetCmdResp3>
 80196be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80196c0:	69fb      	ldr	r3, [r7, #28]
}
 80196c2:	4618      	mov	r0, r3
 80196c4:	3720      	adds	r7, #32
 80196c6:	46bd      	mov	sp, r7
 80196c8:	bd80      	pop	{r7, pc}

080196ca <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80196ca:	b580      	push	{r7, lr}
 80196cc:	b088      	sub	sp, #32
 80196ce:	af00      	add	r7, sp, #0
 80196d0:	6078      	str	r0, [r7, #4]
 80196d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80196d4:	683b      	ldr	r3, [r7, #0]
 80196d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80196d8:	2306      	movs	r3, #6
 80196da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80196dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80196e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80196e2:	2300      	movs	r3, #0
 80196e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80196e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80196ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80196ec:	f107 0308 	add.w	r3, r7, #8
 80196f0:	4619      	mov	r1, r3
 80196f2:	6878      	ldr	r0, [r7, #4]
 80196f4:	f7ff fde2 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80196f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80196fc:	2106      	movs	r1, #6
 80196fe:	6878      	ldr	r0, [r7, #4]
 8019700:	f000 f91e 	bl	8019940 <SDMMC_GetCmdResp1>
 8019704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019706:	69fb      	ldr	r3, [r7, #28]
}
 8019708:	4618      	mov	r0, r3
 801970a:	3720      	adds	r7, #32
 801970c:	46bd      	mov	sp, r7
 801970e:	bd80      	pop	{r7, pc}

08019710 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b088      	sub	sp, #32
 8019714:	af00      	add	r7, sp, #0
 8019716:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8019718:	2300      	movs	r3, #0
 801971a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801971c:	2333      	movs	r3, #51	; 0x33
 801971e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019726:	2300      	movs	r3, #0
 8019728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801972a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801972e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019730:	f107 0308 	add.w	r3, r7, #8
 8019734:	4619      	mov	r1, r3
 8019736:	6878      	ldr	r0, [r7, #4]
 8019738:	f7ff fdc0 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801973c:	f241 3288 	movw	r2, #5000	; 0x1388
 8019740:	2133      	movs	r1, #51	; 0x33
 8019742:	6878      	ldr	r0, [r7, #4]
 8019744:	f000 f8fc 	bl	8019940 <SDMMC_GetCmdResp1>
 8019748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801974a:	69fb      	ldr	r3, [r7, #28]
}
 801974c:	4618      	mov	r0, r3
 801974e:	3720      	adds	r7, #32
 8019750:	46bd      	mov	sp, r7
 8019752:	bd80      	pop	{r7, pc}

08019754 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8019754:	b580      	push	{r7, lr}
 8019756:	b088      	sub	sp, #32
 8019758:	af00      	add	r7, sp, #0
 801975a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801975c:	2300      	movs	r3, #0
 801975e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8019760:	2302      	movs	r3, #2
 8019762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8019764:	f44f 7340 	mov.w	r3, #768	; 0x300
 8019768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801976a:	2300      	movs	r3, #0
 801976c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801976e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019772:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019774:	f107 0308 	add.w	r3, r7, #8
 8019778:	4619      	mov	r1, r3
 801977a:	6878      	ldr	r0, [r7, #4]
 801977c:	f7ff fd9e 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8019780:	6878      	ldr	r0, [r7, #4]
 8019782:	f000 f9cf 	bl	8019b24 <SDMMC_GetCmdResp2>
 8019786:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019788:	69fb      	ldr	r3, [r7, #28]
}
 801978a:	4618      	mov	r0, r3
 801978c:	3720      	adds	r7, #32
 801978e:	46bd      	mov	sp, r7
 8019790:	bd80      	pop	{r7, pc}

08019792 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8019792:	b580      	push	{r7, lr}
 8019794:	b088      	sub	sp, #32
 8019796:	af00      	add	r7, sp, #0
 8019798:	6078      	str	r0, [r7, #4]
 801979a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801979c:	683b      	ldr	r3, [r7, #0]
 801979e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80197a0:	2309      	movs	r3, #9
 80197a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80197a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80197a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80197aa:	2300      	movs	r3, #0
 80197ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80197ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80197b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80197b4:	f107 0308 	add.w	r3, r7, #8
 80197b8:	4619      	mov	r1, r3
 80197ba:	6878      	ldr	r0, [r7, #4]
 80197bc:	f7ff fd7e 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80197c0:	6878      	ldr	r0, [r7, #4]
 80197c2:	f000 f9af 	bl	8019b24 <SDMMC_GetCmdResp2>
 80197c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80197c8:	69fb      	ldr	r3, [r7, #28]
}
 80197ca:	4618      	mov	r0, r3
 80197cc:	3720      	adds	r7, #32
 80197ce:	46bd      	mov	sp, r7
 80197d0:	bd80      	pop	{r7, pc}

080197d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80197d2:	b580      	push	{r7, lr}
 80197d4:	b088      	sub	sp, #32
 80197d6:	af00      	add	r7, sp, #0
 80197d8:	6078      	str	r0, [r7, #4]
 80197da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80197dc:	2300      	movs	r3, #0
 80197de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80197e0:	2303      	movs	r3, #3
 80197e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80197e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80197e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80197ea:	2300      	movs	r3, #0
 80197ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80197ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80197f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80197f4:	f107 0308 	add.w	r3, r7, #8
 80197f8:	4619      	mov	r1, r3
 80197fa:	6878      	ldr	r0, [r7, #4]
 80197fc:	f7ff fd5e 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8019800:	683a      	ldr	r2, [r7, #0]
 8019802:	2103      	movs	r1, #3
 8019804:	6878      	ldr	r0, [r7, #4]
 8019806:	f000 fa17 	bl	8019c38 <SDMMC_GetCmdResp6>
 801980a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801980c:	69fb      	ldr	r3, [r7, #28]
}
 801980e:	4618      	mov	r0, r3
 8019810:	3720      	adds	r7, #32
 8019812:	46bd      	mov	sp, r7
 8019814:	bd80      	pop	{r7, pc}

08019816 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8019816:	b580      	push	{r7, lr}
 8019818:	b088      	sub	sp, #32
 801981a:	af00      	add	r7, sp, #0
 801981c:	6078      	str	r0, [r7, #4]
 801981e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8019820:	683b      	ldr	r3, [r7, #0]
 8019822:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8019824:	230d      	movs	r3, #13
 8019826:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8019828:	f44f 7380 	mov.w	r3, #256	; 0x100
 801982c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801982e:	2300      	movs	r3, #0
 8019830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019836:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8019838:	f107 0308 	add.w	r3, r7, #8
 801983c:	4619      	mov	r1, r3
 801983e:	6878      	ldr	r0, [r7, #4]
 8019840:	f7ff fd3c 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8019844:	f241 3288 	movw	r2, #5000	; 0x1388
 8019848:	210d      	movs	r1, #13
 801984a:	6878      	ldr	r0, [r7, #4]
 801984c:	f000 f878 	bl	8019940 <SDMMC_GetCmdResp1>
 8019850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019852:	69fb      	ldr	r3, [r7, #28]
}
 8019854:	4618      	mov	r0, r3
 8019856:	3720      	adds	r7, #32
 8019858:	46bd      	mov	sp, r7
 801985a:	bd80      	pop	{r7, pc}

0801985c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801985c:	b580      	push	{r7, lr}
 801985e:	b088      	sub	sp, #32
 8019860:	af00      	add	r7, sp, #0
 8019862:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8019864:	2300      	movs	r3, #0
 8019866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8019868:	230d      	movs	r3, #13
 801986a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801986c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8019872:	2300      	movs	r3, #0
 8019874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8019876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801987a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801987c:	f107 0308 	add.w	r3, r7, #8
 8019880:	4619      	mov	r1, r3
 8019882:	6878      	ldr	r0, [r7, #4]
 8019884:	f7ff fd1a 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8019888:	f241 3288 	movw	r2, #5000	; 0x1388
 801988c:	210d      	movs	r1, #13
 801988e:	6878      	ldr	r0, [r7, #4]
 8019890:	f000 f856 	bl	8019940 <SDMMC_GetCmdResp1>
 8019894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8019896:	69fb      	ldr	r3, [r7, #28]
}
 8019898:	4618      	mov	r0, r3
 801989a:	3720      	adds	r7, #32
 801989c:	46bd      	mov	sp, r7
 801989e:	bd80      	pop	{r7, pc}

080198a0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b088      	sub	sp, #32
 80198a4:	af00      	add	r7, sp, #0
 80198a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 80198a8:	2300      	movs	r3, #0
 80198aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80198ac:	230b      	movs	r3, #11
 80198ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80198b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80198b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80198b6:	2300      	movs	r3, #0
 80198b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80198ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80198be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80198c0:	f107 0308 	add.w	r3, r7, #8
 80198c4:	4619      	mov	r1, r3
 80198c6:	6878      	ldr	r0, [r7, #4]
 80198c8:	f7ff fcf8 	bl	80192bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80198cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80198d0:	210b      	movs	r1, #11
 80198d2:	6878      	ldr	r0, [r7, #4]
 80198d4:	f000 f834 	bl	8019940 <SDMMC_GetCmdResp1>
 80198d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80198da:	69fb      	ldr	r3, [r7, #28]
}
 80198dc:	4618      	mov	r0, r3
 80198de:	3720      	adds	r7, #32
 80198e0:	46bd      	mov	sp, r7
 80198e2:	bd80      	pop	{r7, pc}

080198e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80198e4:	b480      	push	{r7}
 80198e6:	b085      	sub	sp, #20
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80198ec:	4b11      	ldr	r3, [pc, #68]	; (8019934 <SDMMC_GetCmdError+0x50>)
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	4a11      	ldr	r2, [pc, #68]	; (8019938 <SDMMC_GetCmdError+0x54>)
 80198f2:	fba2 2303 	umull	r2, r3, r2, r3
 80198f6:	0a5b      	lsrs	r3, r3, #9
 80198f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80198fc:	fb02 f303 	mul.w	r3, r2, r3
 8019900:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	1e5a      	subs	r2, r3, #1
 8019906:	60fa      	str	r2, [r7, #12]
 8019908:	2b00      	cmp	r3, #0
 801990a:	d102      	bne.n	8019912 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801990c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019910:	e009      	b.n	8019926 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801991a:	2b00      	cmp	r3, #0
 801991c:	d0f1      	beq.n	8019902 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	4a06      	ldr	r2, [pc, #24]	; (801993c <SDMMC_GetCmdError+0x58>)
 8019922:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8019924:	2300      	movs	r3, #0
}
 8019926:	4618      	mov	r0, r3
 8019928:	3714      	adds	r7, #20
 801992a:	46bd      	mov	sp, r7
 801992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019930:	4770      	bx	lr
 8019932:	bf00      	nop
 8019934:	240000cc 	.word	0x240000cc
 8019938:	10624dd3 	.word	0x10624dd3
 801993c:	002000c5 	.word	0x002000c5

08019940 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8019940:	b580      	push	{r7, lr}
 8019942:	b088      	sub	sp, #32
 8019944:	af00      	add	r7, sp, #0
 8019946:	60f8      	str	r0, [r7, #12]
 8019948:	460b      	mov	r3, r1
 801994a:	607a      	str	r2, [r7, #4]
 801994c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801994e:	4b70      	ldr	r3, [pc, #448]	; (8019b10 <SDMMC_GetCmdResp1+0x1d0>)
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	4a70      	ldr	r2, [pc, #448]	; (8019b14 <SDMMC_GetCmdResp1+0x1d4>)
 8019954:	fba2 2303 	umull	r2, r3, r2, r3
 8019958:	0a5a      	lsrs	r2, r3, #9
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	fb02 f303 	mul.w	r3, r2, r3
 8019960:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8019962:	69fb      	ldr	r3, [r7, #28]
 8019964:	1e5a      	subs	r2, r3, #1
 8019966:	61fa      	str	r2, [r7, #28]
 8019968:	2b00      	cmp	r3, #0
 801996a:	d102      	bne.n	8019972 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801996c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019970:	e0c9      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019976:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8019978:	69ba      	ldr	r2, [r7, #24]
 801997a:	4b67      	ldr	r3, [pc, #412]	; (8019b18 <SDMMC_GetCmdResp1+0x1d8>)
 801997c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801997e:	2b00      	cmp	r3, #0
 8019980:	d0ef      	beq.n	8019962 <SDMMC_GetCmdResp1+0x22>
 8019982:	69bb      	ldr	r3, [r7, #24]
 8019984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8019988:	2b00      	cmp	r3, #0
 801998a:	d1ea      	bne.n	8019962 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019990:	f003 0304 	and.w	r3, r3, #4
 8019994:	2b00      	cmp	r3, #0
 8019996:	d004      	beq.n	80199a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	2204      	movs	r2, #4
 801999c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801999e:	2304      	movs	r3, #4
 80199a0:	e0b1      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80199a2:	68fb      	ldr	r3, [r7, #12]
 80199a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199a6:	f003 0301 	and.w	r3, r3, #1
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d004      	beq.n	80199b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	2201      	movs	r2, #1
 80199b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80199b4:	2301      	movs	r3, #1
 80199b6:	e0a6      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	4a58      	ldr	r2, [pc, #352]	; (8019b1c <SDMMC_GetCmdResp1+0x1dc>)
 80199bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80199be:	68f8      	ldr	r0, [r7, #12]
 80199c0:	f7ff fca6 	bl	8019310 <SDMMC_GetCommandResponse>
 80199c4:	4603      	mov	r3, r0
 80199c6:	461a      	mov	r2, r3
 80199c8:	7afb      	ldrb	r3, [r7, #11]
 80199ca:	4293      	cmp	r3, r2
 80199cc:	d001      	beq.n	80199d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80199ce:	2301      	movs	r3, #1
 80199d0:	e099      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80199d2:	2100      	movs	r1, #0
 80199d4:	68f8      	ldr	r0, [r7, #12]
 80199d6:	f7ff fca8 	bl	801932a <SDMMC_GetResponse>
 80199da:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80199dc:	697a      	ldr	r2, [r7, #20]
 80199de:	4b50      	ldr	r3, [pc, #320]	; (8019b20 <SDMMC_GetCmdResp1+0x1e0>)
 80199e0:	4013      	ands	r3, r2
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d101      	bne.n	80199ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80199e6:	2300      	movs	r3, #0
 80199e8:	e08d      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80199ea:	697b      	ldr	r3, [r7, #20]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	da02      	bge.n	80199f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80199f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80199f4:	e087      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80199f6:	697b      	ldr	r3, [r7, #20]
 80199f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d001      	beq.n	8019a04 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8019a00:	2340      	movs	r3, #64	; 0x40
 8019a02:	e080      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8019a04:	697b      	ldr	r3, [r7, #20]
 8019a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d001      	beq.n	8019a12 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8019a0e:	2380      	movs	r3, #128	; 0x80
 8019a10:	e079      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8019a12:	697b      	ldr	r3, [r7, #20]
 8019a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d002      	beq.n	8019a22 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8019a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019a20:	e071      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8019a22:	697b      	ldr	r3, [r7, #20]
 8019a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d002      	beq.n	8019a32 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8019a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019a30:	e069      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8019a32:	697b      	ldr	r3, [r7, #20]
 8019a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d002      	beq.n	8019a42 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8019a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019a40:	e061      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8019a42:	697b      	ldr	r3, [r7, #20]
 8019a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d002      	beq.n	8019a52 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8019a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019a50:	e059      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8019a52:	697b      	ldr	r3, [r7, #20]
 8019a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d002      	beq.n	8019a62 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8019a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019a60:	e051      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8019a62:	697b      	ldr	r3, [r7, #20]
 8019a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d002      	beq.n	8019a72 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8019a6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019a70:	e049      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8019a72:	697b      	ldr	r3, [r7, #20]
 8019a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d002      	beq.n	8019a82 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8019a7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8019a80:	e041      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8019a82:	697b      	ldr	r3, [r7, #20]
 8019a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d002      	beq.n	8019a92 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8019a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019a90:	e039      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8019a92:	697b      	ldr	r3, [r7, #20]
 8019a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d002      	beq.n	8019aa2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8019a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019aa0:	e031      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8019aa2:	697b      	ldr	r3, [r7, #20]
 8019aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d002      	beq.n	8019ab2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8019aac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019ab0:	e029      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8019ab2:	697b      	ldr	r3, [r7, #20]
 8019ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d002      	beq.n	8019ac2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8019abc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019ac0:	e021      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8019ac2:	697b      	ldr	r3, [r7, #20]
 8019ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d002      	beq.n	8019ad2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8019acc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8019ad0:	e019      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8019ad2:	697b      	ldr	r3, [r7, #20]
 8019ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d002      	beq.n	8019ae2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8019adc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8019ae0:	e011      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8019ae2:	697b      	ldr	r3, [r7, #20]
 8019ae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d002      	beq.n	8019af2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8019aec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8019af0:	e009      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8019af2:	697b      	ldr	r3, [r7, #20]
 8019af4:	f003 0308 	and.w	r3, r3, #8
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d002      	beq.n	8019b02 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8019afc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019b00:	e001      	b.n	8019b06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8019b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8019b06:	4618      	mov	r0, r3
 8019b08:	3720      	adds	r7, #32
 8019b0a:	46bd      	mov	sp, r7
 8019b0c:	bd80      	pop	{r7, pc}
 8019b0e:	bf00      	nop
 8019b10:	240000cc 	.word	0x240000cc
 8019b14:	10624dd3 	.word	0x10624dd3
 8019b18:	00200045 	.word	0x00200045
 8019b1c:	002000c5 	.word	0x002000c5
 8019b20:	fdffe008 	.word	0xfdffe008

08019b24 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8019b24:	b480      	push	{r7}
 8019b26:	b085      	sub	sp, #20
 8019b28:	af00      	add	r7, sp, #0
 8019b2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8019b2c:	4b1f      	ldr	r3, [pc, #124]	; (8019bac <SDMMC_GetCmdResp2+0x88>)
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	4a1f      	ldr	r2, [pc, #124]	; (8019bb0 <SDMMC_GetCmdResp2+0x8c>)
 8019b32:	fba2 2303 	umull	r2, r3, r2, r3
 8019b36:	0a5b      	lsrs	r3, r3, #9
 8019b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8019b3c:	fb02 f303 	mul.w	r3, r2, r3
 8019b40:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	1e5a      	subs	r2, r3, #1
 8019b46:	60fa      	str	r2, [r7, #12]
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d102      	bne.n	8019b52 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8019b4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019b50:	e026      	b.n	8019ba0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b56:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019b58:	68bb      	ldr	r3, [r7, #8]
 8019b5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d0ef      	beq.n	8019b42 <SDMMC_GetCmdResp2+0x1e>
 8019b62:	68bb      	ldr	r3, [r7, #8]
 8019b64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d1ea      	bne.n	8019b42 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b70:	f003 0304 	and.w	r3, r3, #4
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d004      	beq.n	8019b82 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	2204      	movs	r2, #4
 8019b7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8019b7e:	2304      	movs	r3, #4
 8019b80:	e00e      	b.n	8019ba0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b86:	f003 0301 	and.w	r3, r3, #1
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d004      	beq.n	8019b98 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	2201      	movs	r2, #1
 8019b92:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019b94:	2301      	movs	r3, #1
 8019b96:	e003      	b.n	8019ba0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	4a06      	ldr	r2, [pc, #24]	; (8019bb4 <SDMMC_GetCmdResp2+0x90>)
 8019b9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8019b9e:	2300      	movs	r3, #0
}
 8019ba0:	4618      	mov	r0, r3
 8019ba2:	3714      	adds	r7, #20
 8019ba4:	46bd      	mov	sp, r7
 8019ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019baa:	4770      	bx	lr
 8019bac:	240000cc 	.word	0x240000cc
 8019bb0:	10624dd3 	.word	0x10624dd3
 8019bb4:	002000c5 	.word	0x002000c5

08019bb8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8019bb8:	b480      	push	{r7}
 8019bba:	b085      	sub	sp, #20
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8019bc0:	4b1a      	ldr	r3, [pc, #104]	; (8019c2c <SDMMC_GetCmdResp3+0x74>)
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	4a1a      	ldr	r2, [pc, #104]	; (8019c30 <SDMMC_GetCmdResp3+0x78>)
 8019bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8019bca:	0a5b      	lsrs	r3, r3, #9
 8019bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8019bd0:	fb02 f303 	mul.w	r3, r2, r3
 8019bd4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	1e5a      	subs	r2, r3, #1
 8019bda:	60fa      	str	r2, [r7, #12]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d102      	bne.n	8019be6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8019be0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019be4:	e01b      	b.n	8019c1e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019bea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019bec:	68bb      	ldr	r3, [r7, #8]
 8019bee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d0ef      	beq.n	8019bd6 <SDMMC_GetCmdResp3+0x1e>
 8019bf6:	68bb      	ldr	r3, [r7, #8]
 8019bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d1ea      	bne.n	8019bd6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c04:	f003 0304 	and.w	r3, r3, #4
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d004      	beq.n	8019c16 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	2204      	movs	r2, #4
 8019c10:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8019c12:	2304      	movs	r3, #4
 8019c14:	e003      	b.n	8019c1e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	4a06      	ldr	r2, [pc, #24]	; (8019c34 <SDMMC_GetCmdResp3+0x7c>)
 8019c1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8019c1c:	2300      	movs	r3, #0
}
 8019c1e:	4618      	mov	r0, r3
 8019c20:	3714      	adds	r7, #20
 8019c22:	46bd      	mov	sp, r7
 8019c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c28:	4770      	bx	lr
 8019c2a:	bf00      	nop
 8019c2c:	240000cc 	.word	0x240000cc
 8019c30:	10624dd3 	.word	0x10624dd3
 8019c34:	002000c5 	.word	0x002000c5

08019c38 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b088      	sub	sp, #32
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	60f8      	str	r0, [r7, #12]
 8019c40:	460b      	mov	r3, r1
 8019c42:	607a      	str	r2, [r7, #4]
 8019c44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8019c46:	4b35      	ldr	r3, [pc, #212]	; (8019d1c <SDMMC_GetCmdResp6+0xe4>)
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	4a35      	ldr	r2, [pc, #212]	; (8019d20 <SDMMC_GetCmdResp6+0xe8>)
 8019c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8019c50:	0a5b      	lsrs	r3, r3, #9
 8019c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8019c56:	fb02 f303 	mul.w	r3, r2, r3
 8019c5a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8019c5c:	69fb      	ldr	r3, [r7, #28]
 8019c5e:	1e5a      	subs	r2, r3, #1
 8019c60:	61fa      	str	r2, [r7, #28]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d102      	bne.n	8019c6c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8019c66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019c6a:	e052      	b.n	8019d12 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8019c6c:	68fb      	ldr	r3, [r7, #12]
 8019c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c70:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019c72:	69bb      	ldr	r3, [r7, #24]
 8019c74:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d0ef      	beq.n	8019c5c <SDMMC_GetCmdResp6+0x24>
 8019c7c:	69bb      	ldr	r3, [r7, #24]
 8019c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d1ea      	bne.n	8019c5c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c8a:	f003 0304 	and.w	r3, r3, #4
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d004      	beq.n	8019c9c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	2204      	movs	r2, #4
 8019c96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8019c98:	2304      	movs	r3, #4
 8019c9a:	e03a      	b.n	8019d12 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ca0:	f003 0301 	and.w	r3, r3, #1
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d004      	beq.n	8019cb2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	2201      	movs	r2, #1
 8019cac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019cae:	2301      	movs	r3, #1
 8019cb0:	e02f      	b.n	8019d12 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8019cb2:	68f8      	ldr	r0, [r7, #12]
 8019cb4:	f7ff fb2c 	bl	8019310 <SDMMC_GetCommandResponse>
 8019cb8:	4603      	mov	r3, r0
 8019cba:	461a      	mov	r2, r3
 8019cbc:	7afb      	ldrb	r3, [r7, #11]
 8019cbe:	4293      	cmp	r3, r2
 8019cc0:	d001      	beq.n	8019cc6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019cc2:	2301      	movs	r3, #1
 8019cc4:	e025      	b.n	8019d12 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	4a16      	ldr	r2, [pc, #88]	; (8019d24 <SDMMC_GetCmdResp6+0xec>)
 8019cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8019ccc:	2100      	movs	r1, #0
 8019cce:	68f8      	ldr	r0, [r7, #12]
 8019cd0:	f7ff fb2b 	bl	801932a <SDMMC_GetResponse>
 8019cd4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8019cd6:	697b      	ldr	r3, [r7, #20]
 8019cd8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d106      	bne.n	8019cee <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8019ce0:	697b      	ldr	r3, [r7, #20]
 8019ce2:	0c1b      	lsrs	r3, r3, #16
 8019ce4:	b29a      	uxth	r2, r3
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8019cea:	2300      	movs	r3, #0
 8019cec:	e011      	b.n	8019d12 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8019cee:	697b      	ldr	r3, [r7, #20]
 8019cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d002      	beq.n	8019cfe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8019cf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019cfc:	e009      	b.n	8019d12 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8019cfe:	697b      	ldr	r3, [r7, #20]
 8019d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d002      	beq.n	8019d0e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8019d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019d0c:	e001      	b.n	8019d12 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8019d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8019d12:	4618      	mov	r0, r3
 8019d14:	3720      	adds	r7, #32
 8019d16:	46bd      	mov	sp, r7
 8019d18:	bd80      	pop	{r7, pc}
 8019d1a:	bf00      	nop
 8019d1c:	240000cc 	.word	0x240000cc
 8019d20:	10624dd3 	.word	0x10624dd3
 8019d24:	002000c5 	.word	0x002000c5

08019d28 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8019d28:	b480      	push	{r7}
 8019d2a:	b085      	sub	sp, #20
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8019d30:	4b22      	ldr	r3, [pc, #136]	; (8019dbc <SDMMC_GetCmdResp7+0x94>)
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	4a22      	ldr	r2, [pc, #136]	; (8019dc0 <SDMMC_GetCmdResp7+0x98>)
 8019d36:	fba2 2303 	umull	r2, r3, r2, r3
 8019d3a:	0a5b      	lsrs	r3, r3, #9
 8019d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8019d40:	fb02 f303 	mul.w	r3, r2, r3
 8019d44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	1e5a      	subs	r2, r3, #1
 8019d4a:	60fa      	str	r2, [r7, #12]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d102      	bne.n	8019d56 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8019d50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8019d54:	e02c      	b.n	8019db0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019d5c:	68bb      	ldr	r3, [r7, #8]
 8019d5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d0ef      	beq.n	8019d46 <SDMMC_GetCmdResp7+0x1e>
 8019d66:	68bb      	ldr	r3, [r7, #8]
 8019d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d1ea      	bne.n	8019d46 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d74:	f003 0304 	and.w	r3, r3, #4
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d004      	beq.n	8019d86 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	2204      	movs	r2, #4
 8019d80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8019d82:	2304      	movs	r3, #4
 8019d84:	e014      	b.n	8019db0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d8a:	f003 0301 	and.w	r3, r3, #1
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d004      	beq.n	8019d9c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	2201      	movs	r2, #1
 8019d96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8019d98:	2301      	movs	r3, #1
 8019d9a:	e009      	b.n	8019db0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d002      	beq.n	8019dae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	2240      	movs	r2, #64	; 0x40
 8019dac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8019dae:	2300      	movs	r3, #0

}
 8019db0:	4618      	mov	r0, r3
 8019db2:	3714      	adds	r7, #20
 8019db4:	46bd      	mov	sp, r7
 8019db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dba:	4770      	bx	lr
 8019dbc:	240000cc 	.word	0x240000cc
 8019dc0:	10624dd3 	.word	0x10624dd3

08019dc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8019dc4:	b084      	sub	sp, #16
 8019dc6:	b580      	push	{r7, lr}
 8019dc8:	b084      	sub	sp, #16
 8019dca:	af00      	add	r7, sp, #0
 8019dcc:	6078      	str	r0, [r7, #4]
 8019dce:	f107 001c 	add.w	r0, r7, #28
 8019dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8019dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dd8:	2b01      	cmp	r3, #1
 8019dda:	d120      	bne.n	8019e1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019de0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	68da      	ldr	r2, [r3, #12]
 8019dec:	4b25      	ldr	r3, [pc, #148]	; (8019e84 <USB_CoreInit+0xc0>)
 8019dee:	4013      	ands	r3, r2
 8019df0:	687a      	ldr	r2, [r7, #4]
 8019df2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	68db      	ldr	r3, [r3, #12]
 8019df8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8019e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019e02:	2b01      	cmp	r3, #1
 8019e04:	d105      	bne.n	8019e12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	68db      	ldr	r3, [r3, #12]
 8019e0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8019e12:	6878      	ldr	r0, [r7, #4]
 8019e14:	f000 fa4c 	bl	801a2b0 <USB_CoreReset>
 8019e18:	4603      	mov	r3, r0
 8019e1a:	73fb      	strb	r3, [r7, #15]
 8019e1c:	e01a      	b.n	8019e54 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	68db      	ldr	r3, [r3, #12]
 8019e22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8019e2a:	6878      	ldr	r0, [r7, #4]
 8019e2c:	f000 fa40 	bl	801a2b0 <USB_CoreReset>
 8019e30:	4603      	mov	r3, r0
 8019e32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8019e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d106      	bne.n	8019e48 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	639a      	str	r2, [r3, #56]	; 0x38
 8019e46:	e005      	b.n	8019e54 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8019e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e56:	2b01      	cmp	r3, #1
 8019e58:	d10b      	bne.n	8019e72 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	689b      	ldr	r3, [r3, #8]
 8019e5e:	f043 0206 	orr.w	r2, r3, #6
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	689b      	ldr	r3, [r3, #8]
 8019e6a:	f043 0220 	orr.w	r2, r3, #32
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8019e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e74:	4618      	mov	r0, r3
 8019e76:	3710      	adds	r7, #16
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019e7e:	b004      	add	sp, #16
 8019e80:	4770      	bx	lr
 8019e82:	bf00      	nop
 8019e84:	ffbdffbf 	.word	0xffbdffbf

08019e88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8019e88:	b480      	push	{r7}
 8019e8a:	b083      	sub	sp, #12
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	689b      	ldr	r3, [r3, #8]
 8019e94:	f023 0201 	bic.w	r2, r3, #1
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8019e9c:	2300      	movs	r3, #0
}
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	370c      	adds	r7, #12
 8019ea2:	46bd      	mov	sp, r7
 8019ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ea8:	4770      	bx	lr

08019eaa <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8019eaa:	b580      	push	{r7, lr}
 8019eac:	b082      	sub	sp, #8
 8019eae:	af00      	add	r7, sp, #0
 8019eb0:	6078      	str	r0, [r7, #4]
 8019eb2:	460b      	mov	r3, r1
 8019eb4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	68db      	ldr	r3, [r3, #12]
 8019eba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8019ec2:	78fb      	ldrb	r3, [r7, #3]
 8019ec4:	2b01      	cmp	r3, #1
 8019ec6:	d106      	bne.n	8019ed6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	68db      	ldr	r3, [r3, #12]
 8019ecc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	60da      	str	r2, [r3, #12]
 8019ed4:	e00b      	b.n	8019eee <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8019ed6:	78fb      	ldrb	r3, [r7, #3]
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d106      	bne.n	8019eea <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	68db      	ldr	r3, [r3, #12]
 8019ee0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	60da      	str	r2, [r3, #12]
 8019ee8:	e001      	b.n	8019eee <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8019eea:	2301      	movs	r3, #1
 8019eec:	e003      	b.n	8019ef6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8019eee:	2032      	movs	r0, #50	; 0x32
 8019ef0:	f7f1 f92a 	bl	800b148 <HAL_Delay>

  return HAL_OK;
 8019ef4:	2300      	movs	r3, #0
}
 8019ef6:	4618      	mov	r0, r3
 8019ef8:	3708      	adds	r7, #8
 8019efa:	46bd      	mov	sp, r7
 8019efc:	bd80      	pop	{r7, pc}
	...

08019f00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8019f00:	b084      	sub	sp, #16
 8019f02:	b580      	push	{r7, lr}
 8019f04:	b086      	sub	sp, #24
 8019f06:	af00      	add	r7, sp, #0
 8019f08:	6078      	str	r0, [r7, #4]
 8019f0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8019f0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8019f12:	2300      	movs	r3, #0
 8019f14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8019f1a:	2300      	movs	r3, #0
 8019f1c:	613b      	str	r3, [r7, #16]
 8019f1e:	e009      	b.n	8019f34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8019f20:	687a      	ldr	r2, [r7, #4]
 8019f22:	693b      	ldr	r3, [r7, #16]
 8019f24:	3340      	adds	r3, #64	; 0x40
 8019f26:	009b      	lsls	r3, r3, #2
 8019f28:	4413      	add	r3, r2
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8019f2e:	693b      	ldr	r3, [r7, #16]
 8019f30:	3301      	adds	r3, #1
 8019f32:	613b      	str	r3, [r7, #16]
 8019f34:	693b      	ldr	r3, [r7, #16]
 8019f36:	2b0e      	cmp	r3, #14
 8019f38:	d9f2      	bls.n	8019f20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8019f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d11c      	bne.n	8019f7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019f46:	685b      	ldr	r3, [r3, #4]
 8019f48:	68fa      	ldr	r2, [r7, #12]
 8019f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8019f4e:	f043 0302 	orr.w	r3, r3, #2
 8019f52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	681b      	ldr	r3, [r3, #0]
 8019f64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	601a      	str	r2, [r3, #0]
 8019f78:	e005      	b.n	8019f86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019f8c:	461a      	mov	r2, r3
 8019f8e:	2300      	movs	r3, #0
 8019f90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019f98:	4619      	mov	r1, r3
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019fa0:	461a      	mov	r2, r3
 8019fa2:	680b      	ldr	r3, [r1, #0]
 8019fa4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8019fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019fa8:	2b01      	cmp	r3, #1
 8019faa:	d10c      	bne.n	8019fc6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8019fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d104      	bne.n	8019fbc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8019fb2:	2100      	movs	r1, #0
 8019fb4:	6878      	ldr	r0, [r7, #4]
 8019fb6:	f000 f949 	bl	801a24c <USB_SetDevSpeed>
 8019fba:	e008      	b.n	8019fce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8019fbc:	2101      	movs	r1, #1
 8019fbe:	6878      	ldr	r0, [r7, #4]
 8019fc0:	f000 f944 	bl	801a24c <USB_SetDevSpeed>
 8019fc4:	e003      	b.n	8019fce <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8019fc6:	2103      	movs	r1, #3
 8019fc8:	6878      	ldr	r0, [r7, #4]
 8019fca:	f000 f93f 	bl	801a24c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8019fce:	2110      	movs	r1, #16
 8019fd0:	6878      	ldr	r0, [r7, #4]
 8019fd2:	f000 f8f3 	bl	801a1bc <USB_FlushTxFifo>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d001      	beq.n	8019fe0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8019fdc:	2301      	movs	r3, #1
 8019fde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8019fe0:	6878      	ldr	r0, [r7, #4]
 8019fe2:	f000 f911 	bl	801a208 <USB_FlushRxFifo>
 8019fe6:	4603      	mov	r3, r0
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d001      	beq.n	8019ff0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8019fec:	2301      	movs	r3, #1
 8019fee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8019ff6:	461a      	mov	r2, r3
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a002:	461a      	mov	r2, r3
 801a004:	2300      	movs	r3, #0
 801a006:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a00e:	461a      	mov	r2, r3
 801a010:	2300      	movs	r3, #0
 801a012:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801a014:	2300      	movs	r3, #0
 801a016:	613b      	str	r3, [r7, #16]
 801a018:	e043      	b.n	801a0a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801a01a:	693b      	ldr	r3, [r7, #16]
 801a01c:	015a      	lsls	r2, r3, #5
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	4413      	add	r3, r2
 801a022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a02c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a030:	d118      	bne.n	801a064 <USB_DevInit+0x164>
    {
      if (i == 0U)
 801a032:	693b      	ldr	r3, [r7, #16]
 801a034:	2b00      	cmp	r3, #0
 801a036:	d10a      	bne.n	801a04e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801a038:	693b      	ldr	r3, [r7, #16]
 801a03a:	015a      	lsls	r2, r3, #5
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	4413      	add	r3, r2
 801a040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a044:	461a      	mov	r2, r3
 801a046:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801a04a:	6013      	str	r3, [r2, #0]
 801a04c:	e013      	b.n	801a076 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801a04e:	693b      	ldr	r3, [r7, #16]
 801a050:	015a      	lsls	r2, r3, #5
 801a052:	68fb      	ldr	r3, [r7, #12]
 801a054:	4413      	add	r3, r2
 801a056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a05a:	461a      	mov	r2, r3
 801a05c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801a060:	6013      	str	r3, [r2, #0]
 801a062:	e008      	b.n	801a076 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801a064:	693b      	ldr	r3, [r7, #16]
 801a066:	015a      	lsls	r2, r3, #5
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	4413      	add	r3, r2
 801a06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a070:	461a      	mov	r2, r3
 801a072:	2300      	movs	r3, #0
 801a074:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801a076:	693b      	ldr	r3, [r7, #16]
 801a078:	015a      	lsls	r2, r3, #5
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	4413      	add	r3, r2
 801a07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a082:	461a      	mov	r2, r3
 801a084:	2300      	movs	r3, #0
 801a086:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801a088:	693b      	ldr	r3, [r7, #16]
 801a08a:	015a      	lsls	r2, r3, #5
 801a08c:	68fb      	ldr	r3, [r7, #12]
 801a08e:	4413      	add	r3, r2
 801a090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801a094:	461a      	mov	r2, r3
 801a096:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a09a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801a09c:	693b      	ldr	r3, [r7, #16]
 801a09e:	3301      	adds	r3, #1
 801a0a0:	613b      	str	r3, [r7, #16]
 801a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0a4:	693a      	ldr	r2, [r7, #16]
 801a0a6:	429a      	cmp	r2, r3
 801a0a8:	d3b7      	bcc.n	801a01a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801a0aa:	2300      	movs	r3, #0
 801a0ac:	613b      	str	r3, [r7, #16]
 801a0ae:	e043      	b.n	801a138 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801a0b0:	693b      	ldr	r3, [r7, #16]
 801a0b2:	015a      	lsls	r2, r3, #5
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	4413      	add	r3, r2
 801a0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a0c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a0c6:	d118      	bne.n	801a0fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801a0c8:	693b      	ldr	r3, [r7, #16]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d10a      	bne.n	801a0e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801a0ce:	693b      	ldr	r3, [r7, #16]
 801a0d0:	015a      	lsls	r2, r3, #5
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	4413      	add	r3, r2
 801a0d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a0da:	461a      	mov	r2, r3
 801a0dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801a0e0:	6013      	str	r3, [r2, #0]
 801a0e2:	e013      	b.n	801a10c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801a0e4:	693b      	ldr	r3, [r7, #16]
 801a0e6:	015a      	lsls	r2, r3, #5
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	4413      	add	r3, r2
 801a0ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a0f0:	461a      	mov	r2, r3
 801a0f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801a0f6:	6013      	str	r3, [r2, #0]
 801a0f8:	e008      	b.n	801a10c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801a0fa:	693b      	ldr	r3, [r7, #16]
 801a0fc:	015a      	lsls	r2, r3, #5
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	4413      	add	r3, r2
 801a102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a106:	461a      	mov	r2, r3
 801a108:	2300      	movs	r3, #0
 801a10a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801a10c:	693b      	ldr	r3, [r7, #16]
 801a10e:	015a      	lsls	r2, r3, #5
 801a110:	68fb      	ldr	r3, [r7, #12]
 801a112:	4413      	add	r3, r2
 801a114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a118:	461a      	mov	r2, r3
 801a11a:	2300      	movs	r3, #0
 801a11c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801a11e:	693b      	ldr	r3, [r7, #16]
 801a120:	015a      	lsls	r2, r3, #5
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	4413      	add	r3, r2
 801a126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801a12a:	461a      	mov	r2, r3
 801a12c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801a130:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801a132:	693b      	ldr	r3, [r7, #16]
 801a134:	3301      	adds	r3, #1
 801a136:	613b      	str	r3, [r7, #16]
 801a138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a13a:	693a      	ldr	r2, [r7, #16]
 801a13c:	429a      	cmp	r2, r3
 801a13e:	d3b7      	bcc.n	801a0b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a146:	691b      	ldr	r3, [r3, #16]
 801a148:	68fa      	ldr	r2, [r7, #12]
 801a14a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a14e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a152:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	2200      	movs	r2, #0
 801a158:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801a160:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a164:	2b00      	cmp	r3, #0
 801a166:	d105      	bne.n	801a174 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	699b      	ldr	r3, [r3, #24]
 801a16c:	f043 0210 	orr.w	r2, r3, #16
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	699a      	ldr	r2, [r3, #24]
 801a178:	4b0e      	ldr	r3, [pc, #56]	; (801a1b4 <USB_DevInit+0x2b4>)
 801a17a:	4313      	orrs	r3, r2
 801a17c:	687a      	ldr	r2, [r7, #4]
 801a17e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801a180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a182:	2b00      	cmp	r3, #0
 801a184:	d005      	beq.n	801a192 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	699b      	ldr	r3, [r3, #24]
 801a18a:	f043 0208 	orr.w	r2, r3, #8
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801a192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a194:	2b01      	cmp	r3, #1
 801a196:	d105      	bne.n	801a1a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	699a      	ldr	r2, [r3, #24]
 801a19c:	4b06      	ldr	r3, [pc, #24]	; (801a1b8 <USB_DevInit+0x2b8>)
 801a19e:	4313      	orrs	r3, r2
 801a1a0:	687a      	ldr	r2, [r7, #4]
 801a1a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801a1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	3718      	adds	r7, #24
 801a1aa:	46bd      	mov	sp, r7
 801a1ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a1b0:	b004      	add	sp, #16
 801a1b2:	4770      	bx	lr
 801a1b4:	803c3800 	.word	0x803c3800
 801a1b8:	40000004 	.word	0x40000004

0801a1bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801a1bc:	b480      	push	{r7}
 801a1be:	b085      	sub	sp, #20
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	6078      	str	r0, [r7, #4]
 801a1c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801a1c6:	2300      	movs	r3, #0
 801a1c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801a1ca:	683b      	ldr	r3, [r7, #0]
 801a1cc:	019b      	lsls	r3, r3, #6
 801a1ce:	f043 0220 	orr.w	r2, r3, #32
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	3301      	adds	r3, #1
 801a1da:	60fb      	str	r3, [r7, #12]
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	4a09      	ldr	r2, [pc, #36]	; (801a204 <USB_FlushTxFifo+0x48>)
 801a1e0:	4293      	cmp	r3, r2
 801a1e2:	d901      	bls.n	801a1e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801a1e4:	2303      	movs	r3, #3
 801a1e6:	e006      	b.n	801a1f6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	691b      	ldr	r3, [r3, #16]
 801a1ec:	f003 0320 	and.w	r3, r3, #32
 801a1f0:	2b20      	cmp	r3, #32
 801a1f2:	d0f0      	beq.n	801a1d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801a1f4:	2300      	movs	r3, #0
}
 801a1f6:	4618      	mov	r0, r3
 801a1f8:	3714      	adds	r7, #20
 801a1fa:	46bd      	mov	sp, r7
 801a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a200:	4770      	bx	lr
 801a202:	bf00      	nop
 801a204:	00030d40 	.word	0x00030d40

0801a208 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801a208:	b480      	push	{r7}
 801a20a:	b085      	sub	sp, #20
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801a210:	2300      	movs	r3, #0
 801a212:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	2210      	movs	r2, #16
 801a218:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	3301      	adds	r3, #1
 801a21e:	60fb      	str	r3, [r7, #12]
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	4a09      	ldr	r2, [pc, #36]	; (801a248 <USB_FlushRxFifo+0x40>)
 801a224:	4293      	cmp	r3, r2
 801a226:	d901      	bls.n	801a22c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801a228:	2303      	movs	r3, #3
 801a22a:	e006      	b.n	801a23a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	691b      	ldr	r3, [r3, #16]
 801a230:	f003 0310 	and.w	r3, r3, #16
 801a234:	2b10      	cmp	r3, #16
 801a236:	d0f0      	beq.n	801a21a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801a238:	2300      	movs	r3, #0
}
 801a23a:	4618      	mov	r0, r3
 801a23c:	3714      	adds	r7, #20
 801a23e:	46bd      	mov	sp, r7
 801a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a244:	4770      	bx	lr
 801a246:	bf00      	nop
 801a248:	00030d40 	.word	0x00030d40

0801a24c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801a24c:	b480      	push	{r7}
 801a24e:	b085      	sub	sp, #20
 801a250:	af00      	add	r7, sp, #0
 801a252:	6078      	str	r0, [r7, #4]
 801a254:	460b      	mov	r3, r1
 801a256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a262:	681a      	ldr	r2, [r3, #0]
 801a264:	78fb      	ldrb	r3, [r7, #3]
 801a266:	68f9      	ldr	r1, [r7, #12]
 801a268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801a26c:	4313      	orrs	r3, r2
 801a26e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801a270:	2300      	movs	r3, #0
}
 801a272:	4618      	mov	r0, r3
 801a274:	3714      	adds	r7, #20
 801a276:	46bd      	mov	sp, r7
 801a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a27c:	4770      	bx	lr

0801a27e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801a27e:	b580      	push	{r7, lr}
 801a280:	b084      	sub	sp, #16
 801a282:	af00      	add	r7, sp, #0
 801a284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801a290:	685b      	ldr	r3, [r3, #4]
 801a292:	68fa      	ldr	r2, [r7, #12]
 801a294:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801a298:	f043 0302 	orr.w	r3, r3, #2
 801a29c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801a29e:	2003      	movs	r0, #3
 801a2a0:	f7f0 ff52 	bl	800b148 <HAL_Delay>

  return HAL_OK;
 801a2a4:	2300      	movs	r3, #0
}
 801a2a6:	4618      	mov	r0, r3
 801a2a8:	3710      	adds	r7, #16
 801a2aa:	46bd      	mov	sp, r7
 801a2ac:	bd80      	pop	{r7, pc}
	...

0801a2b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801a2b0:	b480      	push	{r7}
 801a2b2:	b085      	sub	sp, #20
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801a2bc:	68fb      	ldr	r3, [r7, #12]
 801a2be:	3301      	adds	r3, #1
 801a2c0:	60fb      	str	r3, [r7, #12]
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	4a13      	ldr	r2, [pc, #76]	; (801a314 <USB_CoreReset+0x64>)
 801a2c6:	4293      	cmp	r3, r2
 801a2c8:	d901      	bls.n	801a2ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801a2ca:	2303      	movs	r3, #3
 801a2cc:	e01b      	b.n	801a306 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	691b      	ldr	r3, [r3, #16]
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	daf2      	bge.n	801a2bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	691b      	ldr	r3, [r3, #16]
 801a2de:	f043 0201 	orr.w	r2, r3, #1
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	3301      	adds	r3, #1
 801a2ea:	60fb      	str	r3, [r7, #12]
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	4a09      	ldr	r2, [pc, #36]	; (801a314 <USB_CoreReset+0x64>)
 801a2f0:	4293      	cmp	r3, r2
 801a2f2:	d901      	bls.n	801a2f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801a2f4:	2303      	movs	r3, #3
 801a2f6:	e006      	b.n	801a306 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	691b      	ldr	r3, [r3, #16]
 801a2fc:	f003 0301 	and.w	r3, r3, #1
 801a300:	2b01      	cmp	r3, #1
 801a302:	d0f0      	beq.n	801a2e6 <USB_CoreReset+0x36>

  return HAL_OK;
 801a304:	2300      	movs	r3, #0
}
 801a306:	4618      	mov	r0, r3
 801a308:	3714      	adds	r7, #20
 801a30a:	46bd      	mov	sp, r7
 801a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a310:	4770      	bx	lr
 801a312:	bf00      	nop
 801a314:	00030d40 	.word	0x00030d40

0801a318 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801a318:	b580      	push	{r7, lr}
 801a31a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801a31c:	4904      	ldr	r1, [pc, #16]	; (801a330 <MX_FATFS_Init+0x18>)
 801a31e:	4805      	ldr	r0, [pc, #20]	; (801a334 <MX_FATFS_Init+0x1c>)
 801a320:	f002 fcb4 	bl	801cc8c <FATFS_LinkDriver>
 801a324:	4603      	mov	r3, r0
 801a326:	461a      	mov	r2, r3
 801a328:	4b03      	ldr	r3, [pc, #12]	; (801a338 <MX_FATFS_Init+0x20>)
 801a32a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801a32c:	bf00      	nop
 801a32e:	bd80      	pop	{r7, pc}
 801a330:	24009cbc 	.word	0x24009cbc
 801a334:	08023bb0 	.word	0x08023bb0
 801a338:	24009cb8 	.word	0x24009cb8

0801a33c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801a33c:	b480      	push	{r7}
 801a33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801a340:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801a342:	4618      	mov	r0, r3
 801a344:	46bd      	mov	sp, r7
 801a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a34a:	4770      	bx	lr

0801a34c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b082      	sub	sp, #8
 801a350:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801a352:	2300      	movs	r3, #0
 801a354:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801a356:	f000 f885 	bl	801a464 <BSP_SD_IsDetected>
 801a35a:	4603      	mov	r3, r0
 801a35c:	2b01      	cmp	r3, #1
 801a35e:	d001      	beq.n	801a364 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801a360:	2302      	movs	r3, #2
 801a362:	e012      	b.n	801a38a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801a364:	480b      	ldr	r0, [pc, #44]	; (801a394 <BSP_SD_Init+0x48>)
 801a366:	f7fa f8f9 	bl	801455c <HAL_SD_Init>
 801a36a:	4603      	mov	r3, r0
 801a36c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801a36e:	79fb      	ldrb	r3, [r7, #7]
 801a370:	2b00      	cmp	r3, #0
 801a372:	d109      	bne.n	801a388 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801a374:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801a378:	4806      	ldr	r0, [pc, #24]	; (801a394 <BSP_SD_Init+0x48>)
 801a37a:	f7fa ffb5 	bl	80152e8 <HAL_SD_ConfigWideBusOperation>
 801a37e:	4603      	mov	r3, r0
 801a380:	2b00      	cmp	r3, #0
 801a382:	d001      	beq.n	801a388 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801a384:	2301      	movs	r3, #1
 801a386:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801a388:	79fb      	ldrb	r3, [r7, #7]
}
 801a38a:	4618      	mov	r0, r3
 801a38c:	3708      	adds	r7, #8
 801a38e:	46bd      	mov	sp, r7
 801a390:	bd80      	pop	{r7, pc}
 801a392:	bf00      	nop
 801a394:	24009260 	.word	0x24009260

0801a398 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b086      	sub	sp, #24
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	60f8      	str	r0, [r7, #12]
 801a3a0:	60b9      	str	r1, [r7, #8]
 801a3a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	68ba      	ldr	r2, [r7, #8]
 801a3ac:	68f9      	ldr	r1, [r7, #12]
 801a3ae:	4806      	ldr	r0, [pc, #24]	; (801a3c8 <BSP_SD_ReadBlocks_DMA+0x30>)
 801a3b0:	f7fa f9f8 	bl	80147a4 <HAL_SD_ReadBlocks_DMA>
 801a3b4:	4603      	mov	r3, r0
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d001      	beq.n	801a3be <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801a3ba:	2301      	movs	r3, #1
 801a3bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801a3be:	7dfb      	ldrb	r3, [r7, #23]
}
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	3718      	adds	r7, #24
 801a3c4:	46bd      	mov	sp, r7
 801a3c6:	bd80      	pop	{r7, pc}
 801a3c8:	24009260 	.word	0x24009260

0801a3cc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801a3cc:	b580      	push	{r7, lr}
 801a3ce:	b086      	sub	sp, #24
 801a3d0:	af00      	add	r7, sp, #0
 801a3d2:	60f8      	str	r0, [r7, #12]
 801a3d4:	60b9      	str	r1, [r7, #8]
 801a3d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801a3d8:	2300      	movs	r3, #0
 801a3da:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	68ba      	ldr	r2, [r7, #8]
 801a3e0:	68f9      	ldr	r1, [r7, #12]
 801a3e2:	4806      	ldr	r0, [pc, #24]	; (801a3fc <BSP_SD_WriteBlocks_DMA+0x30>)
 801a3e4:	f7fa fa86 	bl	80148f4 <HAL_SD_WriteBlocks_DMA>
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d001      	beq.n	801a3f2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801a3ee:	2301      	movs	r3, #1
 801a3f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801a3f2:	7dfb      	ldrb	r3, [r7, #23]
}
 801a3f4:	4618      	mov	r0, r3
 801a3f6:	3718      	adds	r7, #24
 801a3f8:	46bd      	mov	sp, r7
 801a3fa:	bd80      	pop	{r7, pc}
 801a3fc:	24009260 	.word	0x24009260

0801a400 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801a400:	b580      	push	{r7, lr}
 801a402:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801a404:	4805      	ldr	r0, [pc, #20]	; (801a41c <BSP_SD_GetCardState+0x1c>)
 801a406:	f7fb f819 	bl	801543c <HAL_SD_GetCardState>
 801a40a:	4603      	mov	r3, r0
 801a40c:	2b04      	cmp	r3, #4
 801a40e:	bf14      	ite	ne
 801a410:	2301      	movne	r3, #1
 801a412:	2300      	moveq	r3, #0
 801a414:	b2db      	uxtb	r3, r3
}
 801a416:	4618      	mov	r0, r3
 801a418:	bd80      	pop	{r7, pc}
 801a41a:	bf00      	nop
 801a41c:	24009260 	.word	0x24009260

0801a420 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801a420:	b580      	push	{r7, lr}
 801a422:	b082      	sub	sp, #8
 801a424:	af00      	add	r7, sp, #0
 801a426:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801a428:	6879      	ldr	r1, [r7, #4]
 801a42a:	4803      	ldr	r0, [pc, #12]	; (801a438 <BSP_SD_GetCardInfo+0x18>)
 801a42c:	f7fa ff30 	bl	8015290 <HAL_SD_GetCardInfo>
}
 801a430:	bf00      	nop
 801a432:	3708      	adds	r7, #8
 801a434:	46bd      	mov	sp, r7
 801a436:	bd80      	pop	{r7, pc}
 801a438:	24009260 	.word	0x24009260

0801a43c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	b082      	sub	sp, #8
 801a440:	af00      	add	r7, sp, #0
 801a442:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801a444:	f000 f9ac 	bl	801a7a0 <BSP_SD_WriteCpltCallback>
}
 801a448:	bf00      	nop
 801a44a:	3708      	adds	r7, #8
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd80      	pop	{r7, pc}

0801a450 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801a450:	b580      	push	{r7, lr}
 801a452:	b082      	sub	sp, #8
 801a454:	af00      	add	r7, sp, #0
 801a456:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801a458:	f000 f9b4 	bl	801a7c4 <BSP_SD_ReadCpltCallback>
}
 801a45c:	bf00      	nop
 801a45e:	3708      	adds	r7, #8
 801a460:	46bd      	mov	sp, r7
 801a462:	bd80      	pop	{r7, pc}

0801a464 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801a464:	b580      	push	{r7, lr}
 801a466:	b082      	sub	sp, #8
 801a468:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801a46a:	2301      	movs	r3, #1
 801a46c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801a46e:	f000 f80b 	bl	801a488 <BSP_PlatformIsDetected>
 801a472:	4603      	mov	r3, r0
 801a474:	2b00      	cmp	r3, #0
 801a476:	d101      	bne.n	801a47c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801a478:	2300      	movs	r3, #0
 801a47a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801a47c:	79fb      	ldrb	r3, [r7, #7]
 801a47e:	b2db      	uxtb	r3, r3
}
 801a480:	4618      	mov	r0, r3
 801a482:	3708      	adds	r7, #8
 801a484:	46bd      	mov	sp, r7
 801a486:	bd80      	pop	{r7, pc}

0801a488 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801a488:	b580      	push	{r7, lr}
 801a48a:	b082      	sub	sp, #8
 801a48c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801a48e:	2301      	movs	r3, #1
 801a490:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801a492:	2108      	movs	r1, #8
 801a494:	4806      	ldr	r0, [pc, #24]	; (801a4b0 <BSP_PlatformIsDetected+0x28>)
 801a496:	f7f4 fb99 	bl	800ebcc <HAL_GPIO_ReadPin>
 801a49a:	4603      	mov	r3, r0
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d001      	beq.n	801a4a4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 801a4a0:	2300      	movs	r3, #0
 801a4a2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801a4a4:	79fb      	ldrb	r3, [r7, #7]
}
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	3708      	adds	r7, #8
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	bd80      	pop	{r7, pc}
 801a4ae:	bf00      	nop
 801a4b0:	58021800 	.word	0x58021800

0801a4b4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801a4b4:	b580      	push	{r7, lr}
 801a4b6:	b084      	sub	sp, #16
 801a4b8:	af00      	add	r7, sp, #0
 801a4ba:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 801a4bc:	f002 fd08 	bl	801ced0 <osKernelGetTickCount>
 801a4c0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 801a4c2:	e006      	b.n	801a4d2 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801a4c4:	f7ff ff9c 	bl	801a400 <BSP_SD_GetCardState>
 801a4c8:	4603      	mov	r3, r0
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d101      	bne.n	801a4d2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801a4ce:	2300      	movs	r3, #0
 801a4d0:	e009      	b.n	801a4e6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 801a4d2:	f002 fcfd 	bl	801ced0 <osKernelGetTickCount>
 801a4d6:	4602      	mov	r2, r0
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	1ad3      	subs	r3, r2, r3
 801a4dc:	687a      	ldr	r2, [r7, #4]
 801a4de:	429a      	cmp	r2, r3
 801a4e0:	d8f0      	bhi.n	801a4c4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801a4e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a4e6:	4618      	mov	r0, r3
 801a4e8:	3710      	adds	r7, #16
 801a4ea:	46bd      	mov	sp, r7
 801a4ec:	bd80      	pop	{r7, pc}
	...

0801a4f0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801a4f0:	b580      	push	{r7, lr}
 801a4f2:	b082      	sub	sp, #8
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	4603      	mov	r3, r0
 801a4f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801a4fa:	4b0b      	ldr	r3, [pc, #44]	; (801a528 <SD_CheckStatus+0x38>)
 801a4fc:	2201      	movs	r2, #1
 801a4fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801a500:	f7ff ff7e 	bl	801a400 <BSP_SD_GetCardState>
 801a504:	4603      	mov	r3, r0
 801a506:	2b00      	cmp	r3, #0
 801a508:	d107      	bne.n	801a51a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801a50a:	4b07      	ldr	r3, [pc, #28]	; (801a528 <SD_CheckStatus+0x38>)
 801a50c:	781b      	ldrb	r3, [r3, #0]
 801a50e:	b2db      	uxtb	r3, r3
 801a510:	f023 0301 	bic.w	r3, r3, #1
 801a514:	b2da      	uxtb	r2, r3
 801a516:	4b04      	ldr	r3, [pc, #16]	; (801a528 <SD_CheckStatus+0x38>)
 801a518:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801a51a:	4b03      	ldr	r3, [pc, #12]	; (801a528 <SD_CheckStatus+0x38>)
 801a51c:	781b      	ldrb	r3, [r3, #0]
 801a51e:	b2db      	uxtb	r3, r3
}
 801a520:	4618      	mov	r0, r3
 801a522:	3708      	adds	r7, #8
 801a524:	46bd      	mov	sp, r7
 801a526:	bd80      	pop	{r7, pc}
 801a528:	240000d9 	.word	0x240000d9

0801a52c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b082      	sub	sp, #8
 801a530:	af00      	add	r7, sp, #0
 801a532:	4603      	mov	r3, r0
 801a534:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801a536:	4b1c      	ldr	r3, [pc, #112]	; (801a5a8 <SD_initialize+0x7c>)
 801a538:	2201      	movs	r2, #1
 801a53a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 801a53c:	f002 fc38 	bl	801cdb0 <osKernelGetState>
 801a540:	4603      	mov	r3, r0
 801a542:	2b02      	cmp	r3, #2
 801a544:	d129      	bne.n	801a59a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801a546:	f7ff ff01 	bl	801a34c <BSP_SD_Init>
 801a54a:	4603      	mov	r3, r0
 801a54c:	2b00      	cmp	r3, #0
 801a54e:	d107      	bne.n	801a560 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 801a550:	79fb      	ldrb	r3, [r7, #7]
 801a552:	4618      	mov	r0, r3
 801a554:	f7ff ffcc 	bl	801a4f0 <SD_CheckStatus>
 801a558:	4603      	mov	r3, r0
 801a55a:	461a      	mov	r2, r3
 801a55c:	4b12      	ldr	r3, [pc, #72]	; (801a5a8 <SD_initialize+0x7c>)
 801a55e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 801a560:	4b11      	ldr	r3, [pc, #68]	; (801a5a8 <SD_initialize+0x7c>)
 801a562:	781b      	ldrb	r3, [r3, #0]
 801a564:	b2db      	uxtb	r3, r3
 801a566:	2b01      	cmp	r3, #1
 801a568:	d017      	beq.n	801a59a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 801a56a:	4b10      	ldr	r3, [pc, #64]	; (801a5ac <SD_initialize+0x80>)
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d107      	bne.n	801a582 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 801a572:	2200      	movs	r2, #0
 801a574:	2102      	movs	r1, #2
 801a576:	200a      	movs	r0, #10
 801a578:	f003 f86e 	bl	801d658 <osMessageQueueNew>
 801a57c:	4602      	mov	r2, r0
 801a57e:	4b0b      	ldr	r3, [pc, #44]	; (801a5ac <SD_initialize+0x80>)
 801a580:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 801a582:	4b0a      	ldr	r3, [pc, #40]	; (801a5ac <SD_initialize+0x80>)
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d107      	bne.n	801a59a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 801a58a:	4b07      	ldr	r3, [pc, #28]	; (801a5a8 <SD_initialize+0x7c>)
 801a58c:	781b      	ldrb	r3, [r3, #0]
 801a58e:	b2db      	uxtb	r3, r3
 801a590:	f043 0301 	orr.w	r3, r3, #1
 801a594:	b2da      	uxtb	r2, r3
 801a596:	4b04      	ldr	r3, [pc, #16]	; (801a5a8 <SD_initialize+0x7c>)
 801a598:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801a59a:	4b03      	ldr	r3, [pc, #12]	; (801a5a8 <SD_initialize+0x7c>)
 801a59c:	781b      	ldrb	r3, [r3, #0]
 801a59e:	b2db      	uxtb	r3, r3
}
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	3708      	adds	r7, #8
 801a5a4:	46bd      	mov	sp, r7
 801a5a6:	bd80      	pop	{r7, pc}
 801a5a8:	240000d9 	.word	0x240000d9
 801a5ac:	24000a3c 	.word	0x24000a3c

0801a5b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801a5b0:	b580      	push	{r7, lr}
 801a5b2:	b082      	sub	sp, #8
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	4603      	mov	r3, r0
 801a5b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801a5ba:	79fb      	ldrb	r3, [r7, #7]
 801a5bc:	4618      	mov	r0, r3
 801a5be:	f7ff ff97 	bl	801a4f0 <SD_CheckStatus>
 801a5c2:	4603      	mov	r3, r0
}
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	3708      	adds	r7, #8
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	bd80      	pop	{r7, pc}

0801a5cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b088      	sub	sp, #32
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	60b9      	str	r1, [r7, #8]
 801a5d4:	607a      	str	r2, [r7, #4]
 801a5d6:	603b      	str	r3, [r7, #0]
 801a5d8:	4603      	mov	r3, r0
 801a5da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801a5dc:	2301      	movs	r3, #1
 801a5de:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801a5e0:	f247 5030 	movw	r0, #30000	; 0x7530
 801a5e4:	f7ff ff66 	bl	801a4b4 <SD_CheckStatusWithTimeout>
 801a5e8:	4603      	mov	r3, r0
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	da01      	bge.n	801a5f2 <SD_read+0x26>
  {
    return res;
 801a5ee:	7ffb      	ldrb	r3, [r7, #31]
 801a5f0:	e02f      	b.n	801a652 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801a5f2:	683a      	ldr	r2, [r7, #0]
 801a5f4:	6879      	ldr	r1, [r7, #4]
 801a5f6:	68b8      	ldr	r0, [r7, #8]
 801a5f8:	f7ff fece 	bl	801a398 <BSP_SD_ReadBlocks_DMA>
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 801a600:	7fbb      	ldrb	r3, [r7, #30]
 801a602:	2b00      	cmp	r3, #0
 801a604:	d124      	bne.n	801a650 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801a606:	4b15      	ldr	r3, [pc, #84]	; (801a65c <SD_read+0x90>)
 801a608:	6818      	ldr	r0, [r3, #0]
 801a60a:	f107 0112 	add.w	r1, r7, #18
 801a60e:	f247 5330 	movw	r3, #30000	; 0x7530
 801a612:	2200      	movs	r2, #0
 801a614:	f003 f91a 	bl	801d84c <osMessageQueueGet>
 801a618:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 801a61a:	69bb      	ldr	r3, [r7, #24]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d117      	bne.n	801a650 <SD_read+0x84>
 801a620:	8a7b      	ldrh	r3, [r7, #18]
 801a622:	2b01      	cmp	r3, #1
 801a624:	d114      	bne.n	801a650 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 801a626:	f002 fc53 	bl	801ced0 <osKernelGetTickCount>
 801a62a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801a62c:	e007      	b.n	801a63e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801a62e:	f7ff fee7 	bl	801a400 <BSP_SD_GetCardState>
 801a632:	4603      	mov	r3, r0
 801a634:	2b00      	cmp	r3, #0
 801a636:	d102      	bne.n	801a63e <SD_read+0x72>
              {
                res = RES_OK;
 801a638:	2300      	movs	r3, #0
 801a63a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801a63c:	e008      	b.n	801a650 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801a63e:	f002 fc47 	bl	801ced0 <osKernelGetTickCount>
 801a642:	4602      	mov	r2, r0
 801a644:	697b      	ldr	r3, [r7, #20]
 801a646:	1ad3      	subs	r3, r2, r3
 801a648:	f247 522f 	movw	r2, #29999	; 0x752f
 801a64c:	4293      	cmp	r3, r2
 801a64e:	d9ee      	bls.n	801a62e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 801a650:	7ffb      	ldrb	r3, [r7, #31]
}
 801a652:	4618      	mov	r0, r3
 801a654:	3720      	adds	r7, #32
 801a656:	46bd      	mov	sp, r7
 801a658:	bd80      	pop	{r7, pc}
 801a65a:	bf00      	nop
 801a65c:	24000a3c 	.word	0x24000a3c

0801a660 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801a660:	b580      	push	{r7, lr}
 801a662:	b088      	sub	sp, #32
 801a664:	af00      	add	r7, sp, #0
 801a666:	60b9      	str	r1, [r7, #8]
 801a668:	607a      	str	r2, [r7, #4]
 801a66a:	603b      	str	r3, [r7, #0]
 801a66c:	4603      	mov	r3, r0
 801a66e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801a670:	2301      	movs	r3, #1
 801a672:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801a674:	f247 5030 	movw	r0, #30000	; 0x7530
 801a678:	f7ff ff1c 	bl	801a4b4 <SD_CheckStatusWithTimeout>
 801a67c:	4603      	mov	r3, r0
 801a67e:	2b00      	cmp	r3, #0
 801a680:	da01      	bge.n	801a686 <SD_write+0x26>
  {
    return res;
 801a682:	7ffb      	ldrb	r3, [r7, #31]
 801a684:	e02d      	b.n	801a6e2 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801a686:	683a      	ldr	r2, [r7, #0]
 801a688:	6879      	ldr	r1, [r7, #4]
 801a68a:	68b8      	ldr	r0, [r7, #8]
 801a68c:	f7ff fe9e 	bl	801a3cc <BSP_SD_WriteBlocks_DMA>
 801a690:	4603      	mov	r3, r0
 801a692:	2b00      	cmp	r3, #0
 801a694:	d124      	bne.n	801a6e0 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801a696:	4b15      	ldr	r3, [pc, #84]	; (801a6ec <SD_write+0x8c>)
 801a698:	6818      	ldr	r0, [r3, #0]
 801a69a:	f107 0112 	add.w	r1, r7, #18
 801a69e:	f247 5330 	movw	r3, #30000	; 0x7530
 801a6a2:	2200      	movs	r2, #0
 801a6a4:	f003 f8d2 	bl	801d84c <osMessageQueueGet>
 801a6a8:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 801a6aa:	69bb      	ldr	r3, [r7, #24]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d117      	bne.n	801a6e0 <SD_write+0x80>
 801a6b0:	8a7b      	ldrh	r3, [r7, #18]
 801a6b2:	2b02      	cmp	r3, #2
 801a6b4:	d114      	bne.n	801a6e0 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 801a6b6:	f002 fc0b 	bl	801ced0 <osKernelGetTickCount>
 801a6ba:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 801a6bc:	e007      	b.n	801a6ce <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801a6be:	f7ff fe9f 	bl	801a400 <BSP_SD_GetCardState>
 801a6c2:	4603      	mov	r3, r0
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d102      	bne.n	801a6ce <SD_write+0x6e>
          {
            res = RES_OK;
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	77fb      	strb	r3, [r7, #31]
            break;
 801a6cc:	e008      	b.n	801a6e0 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 801a6ce:	f002 fbff 	bl	801ced0 <osKernelGetTickCount>
 801a6d2:	4602      	mov	r2, r0
 801a6d4:	697b      	ldr	r3, [r7, #20]
 801a6d6:	1ad3      	subs	r3, r2, r3
 801a6d8:	f247 522f 	movw	r2, #29999	; 0x752f
 801a6dc:	4293      	cmp	r3, r2
 801a6de:	d9ee      	bls.n	801a6be <SD_write+0x5e>
    }

  }
#endif

  return res;
 801a6e0:	7ffb      	ldrb	r3, [r7, #31]
}
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	3720      	adds	r7, #32
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	bd80      	pop	{r7, pc}
 801a6ea:	bf00      	nop
 801a6ec:	24000a3c 	.word	0x24000a3c

0801a6f0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801a6f0:	b580      	push	{r7, lr}
 801a6f2:	b08c      	sub	sp, #48	; 0x30
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	4603      	mov	r3, r0
 801a6f8:	603a      	str	r2, [r7, #0]
 801a6fa:	71fb      	strb	r3, [r7, #7]
 801a6fc:	460b      	mov	r3, r1
 801a6fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801a700:	2301      	movs	r3, #1
 801a702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801a706:	4b25      	ldr	r3, [pc, #148]	; (801a79c <SD_ioctl+0xac>)
 801a708:	781b      	ldrb	r3, [r3, #0]
 801a70a:	b2db      	uxtb	r3, r3
 801a70c:	f003 0301 	and.w	r3, r3, #1
 801a710:	2b00      	cmp	r3, #0
 801a712:	d001      	beq.n	801a718 <SD_ioctl+0x28>
 801a714:	2303      	movs	r3, #3
 801a716:	e03c      	b.n	801a792 <SD_ioctl+0xa2>

  switch (cmd)
 801a718:	79bb      	ldrb	r3, [r7, #6]
 801a71a:	2b03      	cmp	r3, #3
 801a71c:	d834      	bhi.n	801a788 <SD_ioctl+0x98>
 801a71e:	a201      	add	r2, pc, #4	; (adr r2, 801a724 <SD_ioctl+0x34>)
 801a720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a724:	0801a735 	.word	0x0801a735
 801a728:	0801a73d 	.word	0x0801a73d
 801a72c:	0801a755 	.word	0x0801a755
 801a730:	0801a76f 	.word	0x0801a76f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801a734:	2300      	movs	r3, #0
 801a736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801a73a:	e028      	b.n	801a78e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801a73c:	f107 0308 	add.w	r3, r7, #8
 801a740:	4618      	mov	r0, r3
 801a742:	f7ff fe6d 	bl	801a420 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801a746:	6a3a      	ldr	r2, [r7, #32]
 801a748:	683b      	ldr	r3, [r7, #0]
 801a74a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801a74c:	2300      	movs	r3, #0
 801a74e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801a752:	e01c      	b.n	801a78e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801a754:	f107 0308 	add.w	r3, r7, #8
 801a758:	4618      	mov	r0, r3
 801a75a:	f7ff fe61 	bl	801a420 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a760:	b29a      	uxth	r2, r3
 801a762:	683b      	ldr	r3, [r7, #0]
 801a764:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801a766:	2300      	movs	r3, #0
 801a768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801a76c:	e00f      	b.n	801a78e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801a76e:	f107 0308 	add.w	r3, r7, #8
 801a772:	4618      	mov	r0, r3
 801a774:	f7ff fe54 	bl	801a420 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a77a:	0a5a      	lsrs	r2, r3, #9
 801a77c:	683b      	ldr	r3, [r7, #0]
 801a77e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801a780:	2300      	movs	r3, #0
 801a782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801a786:	e002      	b.n	801a78e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801a788:	2304      	movs	r3, #4
 801a78a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801a78e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801a792:	4618      	mov	r0, r3
 801a794:	3730      	adds	r7, #48	; 0x30
 801a796:	46bd      	mov	sp, r7
 801a798:	bd80      	pop	{r7, pc}
 801a79a:	bf00      	nop
 801a79c:	240000d9 	.word	0x240000d9

0801a7a0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	b082      	sub	sp, #8
 801a7a4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 801a7a6:	2302      	movs	r3, #2
 801a7a8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801a7aa:	4b05      	ldr	r3, [pc, #20]	; (801a7c0 <BSP_SD_WriteCpltCallback+0x20>)
 801a7ac:	6818      	ldr	r0, [r3, #0]
 801a7ae:	1db9      	adds	r1, r7, #6
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	2200      	movs	r2, #0
 801a7b4:	f002 ffd6 	bl	801d764 <osMessageQueuePut>
#endif
}
 801a7b8:	bf00      	nop
 801a7ba:	3708      	adds	r7, #8
 801a7bc:	46bd      	mov	sp, r7
 801a7be:	bd80      	pop	{r7, pc}
 801a7c0:	24000a3c 	.word	0x24000a3c

0801a7c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801a7c4:	b580      	push	{r7, lr}
 801a7c6:	b082      	sub	sp, #8
 801a7c8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 801a7ca:	2301      	movs	r3, #1
 801a7cc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801a7ce:	4b05      	ldr	r3, [pc, #20]	; (801a7e4 <BSP_SD_ReadCpltCallback+0x20>)
 801a7d0:	6818      	ldr	r0, [r3, #0]
 801a7d2:	1db9      	adds	r1, r7, #6
 801a7d4:	2300      	movs	r3, #0
 801a7d6:	2200      	movs	r2, #0
 801a7d8:	f002 ffc4 	bl	801d764 <osMessageQueuePut>
#endif
}
 801a7dc:	bf00      	nop
 801a7de:	3708      	adds	r7, #8
 801a7e0:	46bd      	mov	sp, r7
 801a7e2:	bd80      	pop	{r7, pc}
 801a7e4:	24000a3c 	.word	0x24000a3c

0801a7e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801a7e8:	b580      	push	{r7, lr}
 801a7ea:	b084      	sub	sp, #16
 801a7ec:	af00      	add	r7, sp, #0
 801a7ee:	4603      	mov	r3, r0
 801a7f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801a7f2:	79fb      	ldrb	r3, [r7, #7]
 801a7f4:	4a08      	ldr	r2, [pc, #32]	; (801a818 <disk_status+0x30>)
 801a7f6:	009b      	lsls	r3, r3, #2
 801a7f8:	4413      	add	r3, r2
 801a7fa:	685b      	ldr	r3, [r3, #4]
 801a7fc:	685b      	ldr	r3, [r3, #4]
 801a7fe:	79fa      	ldrb	r2, [r7, #7]
 801a800:	4905      	ldr	r1, [pc, #20]	; (801a818 <disk_status+0x30>)
 801a802:	440a      	add	r2, r1
 801a804:	7a12      	ldrb	r2, [r2, #8]
 801a806:	4610      	mov	r0, r2
 801a808:	4798      	blx	r3
 801a80a:	4603      	mov	r3, r0
 801a80c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801a80e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a810:	4618      	mov	r0, r3
 801a812:	3710      	adds	r7, #16
 801a814:	46bd      	mov	sp, r7
 801a816:	bd80      	pop	{r7, pc}
 801a818:	24000a68 	.word	0x24000a68

0801a81c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801a81c:	b580      	push	{r7, lr}
 801a81e:	b084      	sub	sp, #16
 801a820:	af00      	add	r7, sp, #0
 801a822:	4603      	mov	r3, r0
 801a824:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801a826:	2300      	movs	r3, #0
 801a828:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801a82a:	79fb      	ldrb	r3, [r7, #7]
 801a82c:	4a0d      	ldr	r2, [pc, #52]	; (801a864 <disk_initialize+0x48>)
 801a82e:	5cd3      	ldrb	r3, [r2, r3]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d111      	bne.n	801a858 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801a834:	79fb      	ldrb	r3, [r7, #7]
 801a836:	4a0b      	ldr	r2, [pc, #44]	; (801a864 <disk_initialize+0x48>)
 801a838:	2101      	movs	r1, #1
 801a83a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801a83c:	79fb      	ldrb	r3, [r7, #7]
 801a83e:	4a09      	ldr	r2, [pc, #36]	; (801a864 <disk_initialize+0x48>)
 801a840:	009b      	lsls	r3, r3, #2
 801a842:	4413      	add	r3, r2
 801a844:	685b      	ldr	r3, [r3, #4]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	79fa      	ldrb	r2, [r7, #7]
 801a84a:	4906      	ldr	r1, [pc, #24]	; (801a864 <disk_initialize+0x48>)
 801a84c:	440a      	add	r2, r1
 801a84e:	7a12      	ldrb	r2, [r2, #8]
 801a850:	4610      	mov	r0, r2
 801a852:	4798      	blx	r3
 801a854:	4603      	mov	r3, r0
 801a856:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801a858:	7bfb      	ldrb	r3, [r7, #15]
}
 801a85a:	4618      	mov	r0, r3
 801a85c:	3710      	adds	r7, #16
 801a85e:	46bd      	mov	sp, r7
 801a860:	bd80      	pop	{r7, pc}
 801a862:	bf00      	nop
 801a864:	24000a68 	.word	0x24000a68

0801a868 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801a868:	b590      	push	{r4, r7, lr}
 801a86a:	b087      	sub	sp, #28
 801a86c:	af00      	add	r7, sp, #0
 801a86e:	60b9      	str	r1, [r7, #8]
 801a870:	607a      	str	r2, [r7, #4]
 801a872:	603b      	str	r3, [r7, #0]
 801a874:	4603      	mov	r3, r0
 801a876:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801a878:	7bfb      	ldrb	r3, [r7, #15]
 801a87a:	4a0a      	ldr	r2, [pc, #40]	; (801a8a4 <disk_read+0x3c>)
 801a87c:	009b      	lsls	r3, r3, #2
 801a87e:	4413      	add	r3, r2
 801a880:	685b      	ldr	r3, [r3, #4]
 801a882:	689c      	ldr	r4, [r3, #8]
 801a884:	7bfb      	ldrb	r3, [r7, #15]
 801a886:	4a07      	ldr	r2, [pc, #28]	; (801a8a4 <disk_read+0x3c>)
 801a888:	4413      	add	r3, r2
 801a88a:	7a18      	ldrb	r0, [r3, #8]
 801a88c:	683b      	ldr	r3, [r7, #0]
 801a88e:	687a      	ldr	r2, [r7, #4]
 801a890:	68b9      	ldr	r1, [r7, #8]
 801a892:	47a0      	blx	r4
 801a894:	4603      	mov	r3, r0
 801a896:	75fb      	strb	r3, [r7, #23]
  return res;
 801a898:	7dfb      	ldrb	r3, [r7, #23]
}
 801a89a:	4618      	mov	r0, r3
 801a89c:	371c      	adds	r7, #28
 801a89e:	46bd      	mov	sp, r7
 801a8a0:	bd90      	pop	{r4, r7, pc}
 801a8a2:	bf00      	nop
 801a8a4:	24000a68 	.word	0x24000a68

0801a8a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801a8a8:	b590      	push	{r4, r7, lr}
 801a8aa:	b087      	sub	sp, #28
 801a8ac:	af00      	add	r7, sp, #0
 801a8ae:	60b9      	str	r1, [r7, #8]
 801a8b0:	607a      	str	r2, [r7, #4]
 801a8b2:	603b      	str	r3, [r7, #0]
 801a8b4:	4603      	mov	r3, r0
 801a8b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801a8b8:	7bfb      	ldrb	r3, [r7, #15]
 801a8ba:	4a0a      	ldr	r2, [pc, #40]	; (801a8e4 <disk_write+0x3c>)
 801a8bc:	009b      	lsls	r3, r3, #2
 801a8be:	4413      	add	r3, r2
 801a8c0:	685b      	ldr	r3, [r3, #4]
 801a8c2:	68dc      	ldr	r4, [r3, #12]
 801a8c4:	7bfb      	ldrb	r3, [r7, #15]
 801a8c6:	4a07      	ldr	r2, [pc, #28]	; (801a8e4 <disk_write+0x3c>)
 801a8c8:	4413      	add	r3, r2
 801a8ca:	7a18      	ldrb	r0, [r3, #8]
 801a8cc:	683b      	ldr	r3, [r7, #0]
 801a8ce:	687a      	ldr	r2, [r7, #4]
 801a8d0:	68b9      	ldr	r1, [r7, #8]
 801a8d2:	47a0      	blx	r4
 801a8d4:	4603      	mov	r3, r0
 801a8d6:	75fb      	strb	r3, [r7, #23]
  return res;
 801a8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 801a8da:	4618      	mov	r0, r3
 801a8dc:	371c      	adds	r7, #28
 801a8de:	46bd      	mov	sp, r7
 801a8e0:	bd90      	pop	{r4, r7, pc}
 801a8e2:	bf00      	nop
 801a8e4:	24000a68 	.word	0x24000a68

0801a8e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801a8e8:	b580      	push	{r7, lr}
 801a8ea:	b084      	sub	sp, #16
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	4603      	mov	r3, r0
 801a8f0:	603a      	str	r2, [r7, #0]
 801a8f2:	71fb      	strb	r3, [r7, #7]
 801a8f4:	460b      	mov	r3, r1
 801a8f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801a8f8:	79fb      	ldrb	r3, [r7, #7]
 801a8fa:	4a09      	ldr	r2, [pc, #36]	; (801a920 <disk_ioctl+0x38>)
 801a8fc:	009b      	lsls	r3, r3, #2
 801a8fe:	4413      	add	r3, r2
 801a900:	685b      	ldr	r3, [r3, #4]
 801a902:	691b      	ldr	r3, [r3, #16]
 801a904:	79fa      	ldrb	r2, [r7, #7]
 801a906:	4906      	ldr	r1, [pc, #24]	; (801a920 <disk_ioctl+0x38>)
 801a908:	440a      	add	r2, r1
 801a90a:	7a10      	ldrb	r0, [r2, #8]
 801a90c:	79b9      	ldrb	r1, [r7, #6]
 801a90e:	683a      	ldr	r2, [r7, #0]
 801a910:	4798      	blx	r3
 801a912:	4603      	mov	r3, r0
 801a914:	73fb      	strb	r3, [r7, #15]
  return res;
 801a916:	7bfb      	ldrb	r3, [r7, #15]
}
 801a918:	4618      	mov	r0, r3
 801a91a:	3710      	adds	r7, #16
 801a91c:	46bd      	mov	sp, r7
 801a91e:	bd80      	pop	{r7, pc}
 801a920:	24000a68 	.word	0x24000a68

0801a924 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801a924:	b480      	push	{r7}
 801a926:	b085      	sub	sp, #20
 801a928:	af00      	add	r7, sp, #0
 801a92a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	3301      	adds	r3, #1
 801a930:	781b      	ldrb	r3, [r3, #0]
 801a932:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801a934:	89fb      	ldrh	r3, [r7, #14]
 801a936:	021b      	lsls	r3, r3, #8
 801a938:	b21a      	sxth	r2, r3
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	781b      	ldrb	r3, [r3, #0]
 801a93e:	b21b      	sxth	r3, r3
 801a940:	4313      	orrs	r3, r2
 801a942:	b21b      	sxth	r3, r3
 801a944:	81fb      	strh	r3, [r7, #14]
	return rv;
 801a946:	89fb      	ldrh	r3, [r7, #14]
}
 801a948:	4618      	mov	r0, r3
 801a94a:	3714      	adds	r7, #20
 801a94c:	46bd      	mov	sp, r7
 801a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a952:	4770      	bx	lr

0801a954 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801a954:	b480      	push	{r7}
 801a956:	b085      	sub	sp, #20
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	3303      	adds	r3, #3
 801a960:	781b      	ldrb	r3, [r3, #0]
 801a962:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	021b      	lsls	r3, r3, #8
 801a968:	687a      	ldr	r2, [r7, #4]
 801a96a:	3202      	adds	r2, #2
 801a96c:	7812      	ldrb	r2, [r2, #0]
 801a96e:	4313      	orrs	r3, r2
 801a970:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801a972:	68fb      	ldr	r3, [r7, #12]
 801a974:	021b      	lsls	r3, r3, #8
 801a976:	687a      	ldr	r2, [r7, #4]
 801a978:	3201      	adds	r2, #1
 801a97a:	7812      	ldrb	r2, [r2, #0]
 801a97c:	4313      	orrs	r3, r2
 801a97e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801a980:	68fb      	ldr	r3, [r7, #12]
 801a982:	021b      	lsls	r3, r3, #8
 801a984:	687a      	ldr	r2, [r7, #4]
 801a986:	7812      	ldrb	r2, [r2, #0]
 801a988:	4313      	orrs	r3, r2
 801a98a:	60fb      	str	r3, [r7, #12]
	return rv;
 801a98c:	68fb      	ldr	r3, [r7, #12]
}
 801a98e:	4618      	mov	r0, r3
 801a990:	3714      	adds	r7, #20
 801a992:	46bd      	mov	sp, r7
 801a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a998:	4770      	bx	lr

0801a99a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801a99a:	b480      	push	{r7}
 801a99c:	b083      	sub	sp, #12
 801a99e:	af00      	add	r7, sp, #0
 801a9a0:	6078      	str	r0, [r7, #4]
 801a9a2:	460b      	mov	r3, r1
 801a9a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	1c5a      	adds	r2, r3, #1
 801a9aa:	607a      	str	r2, [r7, #4]
 801a9ac:	887a      	ldrh	r2, [r7, #2]
 801a9ae:	b2d2      	uxtb	r2, r2
 801a9b0:	701a      	strb	r2, [r3, #0]
 801a9b2:	887b      	ldrh	r3, [r7, #2]
 801a9b4:	0a1b      	lsrs	r3, r3, #8
 801a9b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	1c5a      	adds	r2, r3, #1
 801a9bc:	607a      	str	r2, [r7, #4]
 801a9be:	887a      	ldrh	r2, [r7, #2]
 801a9c0:	b2d2      	uxtb	r2, r2
 801a9c2:	701a      	strb	r2, [r3, #0]
}
 801a9c4:	bf00      	nop
 801a9c6:	370c      	adds	r7, #12
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ce:	4770      	bx	lr

0801a9d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801a9d0:	b480      	push	{r7}
 801a9d2:	b083      	sub	sp, #12
 801a9d4:	af00      	add	r7, sp, #0
 801a9d6:	6078      	str	r0, [r7, #4]
 801a9d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	1c5a      	adds	r2, r3, #1
 801a9de:	607a      	str	r2, [r7, #4]
 801a9e0:	683a      	ldr	r2, [r7, #0]
 801a9e2:	b2d2      	uxtb	r2, r2
 801a9e4:	701a      	strb	r2, [r3, #0]
 801a9e6:	683b      	ldr	r3, [r7, #0]
 801a9e8:	0a1b      	lsrs	r3, r3, #8
 801a9ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	1c5a      	adds	r2, r3, #1
 801a9f0:	607a      	str	r2, [r7, #4]
 801a9f2:	683a      	ldr	r2, [r7, #0]
 801a9f4:	b2d2      	uxtb	r2, r2
 801a9f6:	701a      	strb	r2, [r3, #0]
 801a9f8:	683b      	ldr	r3, [r7, #0]
 801a9fa:	0a1b      	lsrs	r3, r3, #8
 801a9fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	1c5a      	adds	r2, r3, #1
 801aa02:	607a      	str	r2, [r7, #4]
 801aa04:	683a      	ldr	r2, [r7, #0]
 801aa06:	b2d2      	uxtb	r2, r2
 801aa08:	701a      	strb	r2, [r3, #0]
 801aa0a:	683b      	ldr	r3, [r7, #0]
 801aa0c:	0a1b      	lsrs	r3, r3, #8
 801aa0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	1c5a      	adds	r2, r3, #1
 801aa14:	607a      	str	r2, [r7, #4]
 801aa16:	683a      	ldr	r2, [r7, #0]
 801aa18:	b2d2      	uxtb	r2, r2
 801aa1a:	701a      	strb	r2, [r3, #0]
}
 801aa1c:	bf00      	nop
 801aa1e:	370c      	adds	r7, #12
 801aa20:	46bd      	mov	sp, r7
 801aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa26:	4770      	bx	lr

0801aa28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801aa28:	b480      	push	{r7}
 801aa2a:	b087      	sub	sp, #28
 801aa2c:	af00      	add	r7, sp, #0
 801aa2e:	60f8      	str	r0, [r7, #12]
 801aa30:	60b9      	str	r1, [r7, #8]
 801aa32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801aa34:	68fb      	ldr	r3, [r7, #12]
 801aa36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801aa38:	68bb      	ldr	r3, [r7, #8]
 801aa3a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d00d      	beq.n	801aa5e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801aa42:	693a      	ldr	r2, [r7, #16]
 801aa44:	1c53      	adds	r3, r2, #1
 801aa46:	613b      	str	r3, [r7, #16]
 801aa48:	697b      	ldr	r3, [r7, #20]
 801aa4a:	1c59      	adds	r1, r3, #1
 801aa4c:	6179      	str	r1, [r7, #20]
 801aa4e:	7812      	ldrb	r2, [r2, #0]
 801aa50:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	3b01      	subs	r3, #1
 801aa56:	607b      	str	r3, [r7, #4]
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d1f1      	bne.n	801aa42 <mem_cpy+0x1a>
	}
}
 801aa5e:	bf00      	nop
 801aa60:	371c      	adds	r7, #28
 801aa62:	46bd      	mov	sp, r7
 801aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa68:	4770      	bx	lr

0801aa6a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801aa6a:	b480      	push	{r7}
 801aa6c:	b087      	sub	sp, #28
 801aa6e:	af00      	add	r7, sp, #0
 801aa70:	60f8      	str	r0, [r7, #12]
 801aa72:	60b9      	str	r1, [r7, #8]
 801aa74:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801aa7a:	697b      	ldr	r3, [r7, #20]
 801aa7c:	1c5a      	adds	r2, r3, #1
 801aa7e:	617a      	str	r2, [r7, #20]
 801aa80:	68ba      	ldr	r2, [r7, #8]
 801aa82:	b2d2      	uxtb	r2, r2
 801aa84:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	3b01      	subs	r3, #1
 801aa8a:	607b      	str	r3, [r7, #4]
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d1f3      	bne.n	801aa7a <mem_set+0x10>
}
 801aa92:	bf00      	nop
 801aa94:	371c      	adds	r7, #28
 801aa96:	46bd      	mov	sp, r7
 801aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa9c:	4770      	bx	lr

0801aa9e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801aa9e:	b480      	push	{r7}
 801aaa0:	b089      	sub	sp, #36	; 0x24
 801aaa2:	af00      	add	r7, sp, #0
 801aaa4:	60f8      	str	r0, [r7, #12]
 801aaa6:	60b9      	str	r1, [r7, #8]
 801aaa8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	61fb      	str	r3, [r7, #28]
 801aaae:	68bb      	ldr	r3, [r7, #8]
 801aab0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801aab2:	2300      	movs	r3, #0
 801aab4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801aab6:	69fb      	ldr	r3, [r7, #28]
 801aab8:	1c5a      	adds	r2, r3, #1
 801aaba:	61fa      	str	r2, [r7, #28]
 801aabc:	781b      	ldrb	r3, [r3, #0]
 801aabe:	4619      	mov	r1, r3
 801aac0:	69bb      	ldr	r3, [r7, #24]
 801aac2:	1c5a      	adds	r2, r3, #1
 801aac4:	61ba      	str	r2, [r7, #24]
 801aac6:	781b      	ldrb	r3, [r3, #0]
 801aac8:	1acb      	subs	r3, r1, r3
 801aaca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	3b01      	subs	r3, #1
 801aad0:	607b      	str	r3, [r7, #4]
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d002      	beq.n	801aade <mem_cmp+0x40>
 801aad8:	697b      	ldr	r3, [r7, #20]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d0eb      	beq.n	801aab6 <mem_cmp+0x18>

	return r;
 801aade:	697b      	ldr	r3, [r7, #20]
}
 801aae0:	4618      	mov	r0, r3
 801aae2:	3724      	adds	r7, #36	; 0x24
 801aae4:	46bd      	mov	sp, r7
 801aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaea:	4770      	bx	lr

0801aaec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801aaec:	b480      	push	{r7}
 801aaee:	b083      	sub	sp, #12
 801aaf0:	af00      	add	r7, sp, #0
 801aaf2:	6078      	str	r0, [r7, #4]
 801aaf4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801aaf6:	e002      	b.n	801aafe <chk_chr+0x12>
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	3301      	adds	r3, #1
 801aafc:	607b      	str	r3, [r7, #4]
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	781b      	ldrb	r3, [r3, #0]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d005      	beq.n	801ab12 <chk_chr+0x26>
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	781b      	ldrb	r3, [r3, #0]
 801ab0a:	461a      	mov	r2, r3
 801ab0c:	683b      	ldr	r3, [r7, #0]
 801ab0e:	4293      	cmp	r3, r2
 801ab10:	d1f2      	bne.n	801aaf8 <chk_chr+0xc>
	return *str;
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	781b      	ldrb	r3, [r3, #0]
}
 801ab16:	4618      	mov	r0, r3
 801ab18:	370c      	adds	r7, #12
 801ab1a:	46bd      	mov	sp, r7
 801ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab20:	4770      	bx	lr

0801ab22 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801ab22:	b580      	push	{r7, lr}
 801ab24:	b082      	sub	sp, #8
 801ab26:	af00      	add	r7, sp, #0
 801ab28:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d009      	beq.n	801ab44 <lock_fs+0x22>
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	68db      	ldr	r3, [r3, #12]
 801ab34:	4618      	mov	r0, r3
 801ab36:	f002 f8df 	bl	801ccf8 <ff_req_grant>
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d001      	beq.n	801ab44 <lock_fs+0x22>
 801ab40:	2301      	movs	r3, #1
 801ab42:	e000      	b.n	801ab46 <lock_fs+0x24>
 801ab44:	2300      	movs	r3, #0
}
 801ab46:	4618      	mov	r0, r3
 801ab48:	3708      	adds	r7, #8
 801ab4a:	46bd      	mov	sp, r7
 801ab4c:	bd80      	pop	{r7, pc}

0801ab4e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801ab4e:	b580      	push	{r7, lr}
 801ab50:	b082      	sub	sp, #8
 801ab52:	af00      	add	r7, sp, #0
 801ab54:	6078      	str	r0, [r7, #4]
 801ab56:	460b      	mov	r3, r1
 801ab58:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d00d      	beq.n	801ab7c <unlock_fs+0x2e>
 801ab60:	78fb      	ldrb	r3, [r7, #3]
 801ab62:	2b0c      	cmp	r3, #12
 801ab64:	d00a      	beq.n	801ab7c <unlock_fs+0x2e>
 801ab66:	78fb      	ldrb	r3, [r7, #3]
 801ab68:	2b0b      	cmp	r3, #11
 801ab6a:	d007      	beq.n	801ab7c <unlock_fs+0x2e>
 801ab6c:	78fb      	ldrb	r3, [r7, #3]
 801ab6e:	2b0f      	cmp	r3, #15
 801ab70:	d004      	beq.n	801ab7c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	68db      	ldr	r3, [r3, #12]
 801ab76:	4618      	mov	r0, r3
 801ab78:	f002 f8d3 	bl	801cd22 <ff_rel_grant>
	}
}
 801ab7c:	bf00      	nop
 801ab7e:	3708      	adds	r7, #8
 801ab80:	46bd      	mov	sp, r7
 801ab82:	bd80      	pop	{r7, pc}

0801ab84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801ab84:	b480      	push	{r7}
 801ab86:	b085      	sub	sp, #20
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
 801ab8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801ab8e:	2300      	movs	r3, #0
 801ab90:	60bb      	str	r3, [r7, #8]
 801ab92:	68bb      	ldr	r3, [r7, #8]
 801ab94:	60fb      	str	r3, [r7, #12]
 801ab96:	e029      	b.n	801abec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801ab98:	4a27      	ldr	r2, [pc, #156]	; (801ac38 <chk_lock+0xb4>)
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	011b      	lsls	r3, r3, #4
 801ab9e:	4413      	add	r3, r2
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d01d      	beq.n	801abe2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801aba6:	4a24      	ldr	r2, [pc, #144]	; (801ac38 <chk_lock+0xb4>)
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	011b      	lsls	r3, r3, #4
 801abac:	4413      	add	r3, r2
 801abae:	681a      	ldr	r2, [r3, #0]
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	429a      	cmp	r2, r3
 801abb6:	d116      	bne.n	801abe6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801abb8:	4a1f      	ldr	r2, [pc, #124]	; (801ac38 <chk_lock+0xb4>)
 801abba:	68fb      	ldr	r3, [r7, #12]
 801abbc:	011b      	lsls	r3, r3, #4
 801abbe:	4413      	add	r3, r2
 801abc0:	3304      	adds	r3, #4
 801abc2:	681a      	ldr	r2, [r3, #0]
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801abc8:	429a      	cmp	r2, r3
 801abca:	d10c      	bne.n	801abe6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801abcc:	4a1a      	ldr	r2, [pc, #104]	; (801ac38 <chk_lock+0xb4>)
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	011b      	lsls	r3, r3, #4
 801abd2:	4413      	add	r3, r2
 801abd4:	3308      	adds	r3, #8
 801abd6:	681a      	ldr	r2, [r3, #0]
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801abdc:	429a      	cmp	r2, r3
 801abde:	d102      	bne.n	801abe6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801abe0:	e007      	b.n	801abf2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801abe2:	2301      	movs	r3, #1
 801abe4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	3301      	adds	r3, #1
 801abea:	60fb      	str	r3, [r7, #12]
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	2b01      	cmp	r3, #1
 801abf0:	d9d2      	bls.n	801ab98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	2b02      	cmp	r3, #2
 801abf6:	d109      	bne.n	801ac0c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801abf8:	68bb      	ldr	r3, [r7, #8]
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d102      	bne.n	801ac04 <chk_lock+0x80>
 801abfe:	683b      	ldr	r3, [r7, #0]
 801ac00:	2b02      	cmp	r3, #2
 801ac02:	d101      	bne.n	801ac08 <chk_lock+0x84>
 801ac04:	2300      	movs	r3, #0
 801ac06:	e010      	b.n	801ac2a <chk_lock+0xa6>
 801ac08:	2312      	movs	r3, #18
 801ac0a:	e00e      	b.n	801ac2a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801ac0c:	683b      	ldr	r3, [r7, #0]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d108      	bne.n	801ac24 <chk_lock+0xa0>
 801ac12:	4a09      	ldr	r2, [pc, #36]	; (801ac38 <chk_lock+0xb4>)
 801ac14:	68fb      	ldr	r3, [r7, #12]
 801ac16:	011b      	lsls	r3, r3, #4
 801ac18:	4413      	add	r3, r2
 801ac1a:	330c      	adds	r3, #12
 801ac1c:	881b      	ldrh	r3, [r3, #0]
 801ac1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ac22:	d101      	bne.n	801ac28 <chk_lock+0xa4>
 801ac24:	2310      	movs	r3, #16
 801ac26:	e000      	b.n	801ac2a <chk_lock+0xa6>
 801ac28:	2300      	movs	r3, #0
}
 801ac2a:	4618      	mov	r0, r3
 801ac2c:	3714      	adds	r7, #20
 801ac2e:	46bd      	mov	sp, r7
 801ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac34:	4770      	bx	lr
 801ac36:	bf00      	nop
 801ac38:	24000a48 	.word	0x24000a48

0801ac3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801ac3c:	b480      	push	{r7}
 801ac3e:	b083      	sub	sp, #12
 801ac40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801ac42:	2300      	movs	r3, #0
 801ac44:	607b      	str	r3, [r7, #4]
 801ac46:	e002      	b.n	801ac4e <enq_lock+0x12>
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	3301      	adds	r3, #1
 801ac4c:	607b      	str	r3, [r7, #4]
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	2b01      	cmp	r3, #1
 801ac52:	d806      	bhi.n	801ac62 <enq_lock+0x26>
 801ac54:	4a09      	ldr	r2, [pc, #36]	; (801ac7c <enq_lock+0x40>)
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	011b      	lsls	r3, r3, #4
 801ac5a:	4413      	add	r3, r2
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d1f2      	bne.n	801ac48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	2b02      	cmp	r3, #2
 801ac66:	bf14      	ite	ne
 801ac68:	2301      	movne	r3, #1
 801ac6a:	2300      	moveq	r3, #0
 801ac6c:	b2db      	uxtb	r3, r3
}
 801ac6e:	4618      	mov	r0, r3
 801ac70:	370c      	adds	r7, #12
 801ac72:	46bd      	mov	sp, r7
 801ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac78:	4770      	bx	lr
 801ac7a:	bf00      	nop
 801ac7c:	24000a48 	.word	0x24000a48

0801ac80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801ac80:	b480      	push	{r7}
 801ac82:	b085      	sub	sp, #20
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	6078      	str	r0, [r7, #4]
 801ac88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	60fb      	str	r3, [r7, #12]
 801ac8e:	e01f      	b.n	801acd0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801ac90:	4a41      	ldr	r2, [pc, #260]	; (801ad98 <inc_lock+0x118>)
 801ac92:	68fb      	ldr	r3, [r7, #12]
 801ac94:	011b      	lsls	r3, r3, #4
 801ac96:	4413      	add	r3, r2
 801ac98:	681a      	ldr	r2, [r3, #0]
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	429a      	cmp	r2, r3
 801aca0:	d113      	bne.n	801acca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801aca2:	4a3d      	ldr	r2, [pc, #244]	; (801ad98 <inc_lock+0x118>)
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	011b      	lsls	r3, r3, #4
 801aca8:	4413      	add	r3, r2
 801acaa:	3304      	adds	r3, #4
 801acac:	681a      	ldr	r2, [r3, #0]
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801acb2:	429a      	cmp	r2, r3
 801acb4:	d109      	bne.n	801acca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801acb6:	4a38      	ldr	r2, [pc, #224]	; (801ad98 <inc_lock+0x118>)
 801acb8:	68fb      	ldr	r3, [r7, #12]
 801acba:	011b      	lsls	r3, r3, #4
 801acbc:	4413      	add	r3, r2
 801acbe:	3308      	adds	r3, #8
 801acc0:	681a      	ldr	r2, [r3, #0]
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801acc6:	429a      	cmp	r2, r3
 801acc8:	d006      	beq.n	801acd8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801acca:	68fb      	ldr	r3, [r7, #12]
 801accc:	3301      	adds	r3, #1
 801acce:	60fb      	str	r3, [r7, #12]
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	2b01      	cmp	r3, #1
 801acd4:	d9dc      	bls.n	801ac90 <inc_lock+0x10>
 801acd6:	e000      	b.n	801acda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801acd8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	2b02      	cmp	r3, #2
 801acde:	d132      	bne.n	801ad46 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801ace0:	2300      	movs	r3, #0
 801ace2:	60fb      	str	r3, [r7, #12]
 801ace4:	e002      	b.n	801acec <inc_lock+0x6c>
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	3301      	adds	r3, #1
 801acea:	60fb      	str	r3, [r7, #12]
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	2b01      	cmp	r3, #1
 801acf0:	d806      	bhi.n	801ad00 <inc_lock+0x80>
 801acf2:	4a29      	ldr	r2, [pc, #164]	; (801ad98 <inc_lock+0x118>)
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	011b      	lsls	r3, r3, #4
 801acf8:	4413      	add	r3, r2
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d1f2      	bne.n	801ace6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	2b02      	cmp	r3, #2
 801ad04:	d101      	bne.n	801ad0a <inc_lock+0x8a>
 801ad06:	2300      	movs	r3, #0
 801ad08:	e040      	b.n	801ad8c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	681a      	ldr	r2, [r3, #0]
 801ad0e:	4922      	ldr	r1, [pc, #136]	; (801ad98 <inc_lock+0x118>)
 801ad10:	68fb      	ldr	r3, [r7, #12]
 801ad12:	011b      	lsls	r3, r3, #4
 801ad14:	440b      	add	r3, r1
 801ad16:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	689a      	ldr	r2, [r3, #8]
 801ad1c:	491e      	ldr	r1, [pc, #120]	; (801ad98 <inc_lock+0x118>)
 801ad1e:	68fb      	ldr	r3, [r7, #12]
 801ad20:	011b      	lsls	r3, r3, #4
 801ad22:	440b      	add	r3, r1
 801ad24:	3304      	adds	r3, #4
 801ad26:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	695a      	ldr	r2, [r3, #20]
 801ad2c:	491a      	ldr	r1, [pc, #104]	; (801ad98 <inc_lock+0x118>)
 801ad2e:	68fb      	ldr	r3, [r7, #12]
 801ad30:	011b      	lsls	r3, r3, #4
 801ad32:	440b      	add	r3, r1
 801ad34:	3308      	adds	r3, #8
 801ad36:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801ad38:	4a17      	ldr	r2, [pc, #92]	; (801ad98 <inc_lock+0x118>)
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	011b      	lsls	r3, r3, #4
 801ad3e:	4413      	add	r3, r2
 801ad40:	330c      	adds	r3, #12
 801ad42:	2200      	movs	r2, #0
 801ad44:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d009      	beq.n	801ad60 <inc_lock+0xe0>
 801ad4c:	4a12      	ldr	r2, [pc, #72]	; (801ad98 <inc_lock+0x118>)
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	011b      	lsls	r3, r3, #4
 801ad52:	4413      	add	r3, r2
 801ad54:	330c      	adds	r3, #12
 801ad56:	881b      	ldrh	r3, [r3, #0]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d001      	beq.n	801ad60 <inc_lock+0xe0>
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	e015      	b.n	801ad8c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801ad60:	683b      	ldr	r3, [r7, #0]
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d108      	bne.n	801ad78 <inc_lock+0xf8>
 801ad66:	4a0c      	ldr	r2, [pc, #48]	; (801ad98 <inc_lock+0x118>)
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	011b      	lsls	r3, r3, #4
 801ad6c:	4413      	add	r3, r2
 801ad6e:	330c      	adds	r3, #12
 801ad70:	881b      	ldrh	r3, [r3, #0]
 801ad72:	3301      	adds	r3, #1
 801ad74:	b29a      	uxth	r2, r3
 801ad76:	e001      	b.n	801ad7c <inc_lock+0xfc>
 801ad78:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ad7c:	4906      	ldr	r1, [pc, #24]	; (801ad98 <inc_lock+0x118>)
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	011b      	lsls	r3, r3, #4
 801ad82:	440b      	add	r3, r1
 801ad84:	330c      	adds	r3, #12
 801ad86:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	3301      	adds	r3, #1
}
 801ad8c:	4618      	mov	r0, r3
 801ad8e:	3714      	adds	r7, #20
 801ad90:	46bd      	mov	sp, r7
 801ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad96:	4770      	bx	lr
 801ad98:	24000a48 	.word	0x24000a48

0801ad9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801ad9c:	b480      	push	{r7}
 801ad9e:	b085      	sub	sp, #20
 801ada0:	af00      	add	r7, sp, #0
 801ada2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	3b01      	subs	r3, #1
 801ada8:	607b      	str	r3, [r7, #4]
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	2b01      	cmp	r3, #1
 801adae:	d825      	bhi.n	801adfc <dec_lock+0x60>
		n = Files[i].ctr;
 801adb0:	4a17      	ldr	r2, [pc, #92]	; (801ae10 <dec_lock+0x74>)
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	011b      	lsls	r3, r3, #4
 801adb6:	4413      	add	r3, r2
 801adb8:	330c      	adds	r3, #12
 801adba:	881b      	ldrh	r3, [r3, #0]
 801adbc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801adbe:	89fb      	ldrh	r3, [r7, #14]
 801adc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801adc4:	d101      	bne.n	801adca <dec_lock+0x2e>
 801adc6:	2300      	movs	r3, #0
 801adc8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801adca:	89fb      	ldrh	r3, [r7, #14]
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d002      	beq.n	801add6 <dec_lock+0x3a>
 801add0:	89fb      	ldrh	r3, [r7, #14]
 801add2:	3b01      	subs	r3, #1
 801add4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801add6:	4a0e      	ldr	r2, [pc, #56]	; (801ae10 <dec_lock+0x74>)
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	011b      	lsls	r3, r3, #4
 801addc:	4413      	add	r3, r2
 801adde:	330c      	adds	r3, #12
 801ade0:	89fa      	ldrh	r2, [r7, #14]
 801ade2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801ade4:	89fb      	ldrh	r3, [r7, #14]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d105      	bne.n	801adf6 <dec_lock+0x5a>
 801adea:	4a09      	ldr	r2, [pc, #36]	; (801ae10 <dec_lock+0x74>)
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	011b      	lsls	r3, r3, #4
 801adf0:	4413      	add	r3, r2
 801adf2:	2200      	movs	r2, #0
 801adf4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801adf6:	2300      	movs	r3, #0
 801adf8:	737b      	strb	r3, [r7, #13]
 801adfa:	e001      	b.n	801ae00 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801adfc:	2302      	movs	r3, #2
 801adfe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801ae00:	7b7b      	ldrb	r3, [r7, #13]
}
 801ae02:	4618      	mov	r0, r3
 801ae04:	3714      	adds	r7, #20
 801ae06:	46bd      	mov	sp, r7
 801ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0c:	4770      	bx	lr
 801ae0e:	bf00      	nop
 801ae10:	24000a48 	.word	0x24000a48

0801ae14 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801ae14:	b480      	push	{r7}
 801ae16:	b085      	sub	sp, #20
 801ae18:	af00      	add	r7, sp, #0
 801ae1a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801ae1c:	2300      	movs	r3, #0
 801ae1e:	60fb      	str	r3, [r7, #12]
 801ae20:	e010      	b.n	801ae44 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801ae22:	4a0d      	ldr	r2, [pc, #52]	; (801ae58 <clear_lock+0x44>)
 801ae24:	68fb      	ldr	r3, [r7, #12]
 801ae26:	011b      	lsls	r3, r3, #4
 801ae28:	4413      	add	r3, r2
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	687a      	ldr	r2, [r7, #4]
 801ae2e:	429a      	cmp	r2, r3
 801ae30:	d105      	bne.n	801ae3e <clear_lock+0x2a>
 801ae32:	4a09      	ldr	r2, [pc, #36]	; (801ae58 <clear_lock+0x44>)
 801ae34:	68fb      	ldr	r3, [r7, #12]
 801ae36:	011b      	lsls	r3, r3, #4
 801ae38:	4413      	add	r3, r2
 801ae3a:	2200      	movs	r2, #0
 801ae3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801ae3e:	68fb      	ldr	r3, [r7, #12]
 801ae40:	3301      	adds	r3, #1
 801ae42:	60fb      	str	r3, [r7, #12]
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	2b01      	cmp	r3, #1
 801ae48:	d9eb      	bls.n	801ae22 <clear_lock+0xe>
	}
}
 801ae4a:	bf00      	nop
 801ae4c:	3714      	adds	r7, #20
 801ae4e:	46bd      	mov	sp, r7
 801ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae54:	4770      	bx	lr
 801ae56:	bf00      	nop
 801ae58:	24000a48 	.word	0x24000a48

0801ae5c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b086      	sub	sp, #24
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801ae64:	2300      	movs	r3, #0
 801ae66:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	78db      	ldrb	r3, [r3, #3]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d034      	beq.n	801aeda <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ae74:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	7858      	ldrb	r0, [r3, #1]
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801ae80:	2301      	movs	r3, #1
 801ae82:	697a      	ldr	r2, [r7, #20]
 801ae84:	f7ff fd10 	bl	801a8a8 <disk_write>
 801ae88:	4603      	mov	r3, r0
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d002      	beq.n	801ae94 <sync_window+0x38>
			res = FR_DISK_ERR;
 801ae8e:	2301      	movs	r3, #1
 801ae90:	73fb      	strb	r3, [r7, #15]
 801ae92:	e022      	b.n	801aeda <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	2200      	movs	r2, #0
 801ae98:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae9e:	697a      	ldr	r2, [r7, #20]
 801aea0:	1ad2      	subs	r2, r2, r3
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	69db      	ldr	r3, [r3, #28]
 801aea6:	429a      	cmp	r2, r3
 801aea8:	d217      	bcs.n	801aeda <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	789b      	ldrb	r3, [r3, #2]
 801aeae:	613b      	str	r3, [r7, #16]
 801aeb0:	e010      	b.n	801aed4 <sync_window+0x78>
					wsect += fs->fsize;
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	69db      	ldr	r3, [r3, #28]
 801aeb6:	697a      	ldr	r2, [r7, #20]
 801aeb8:	4413      	add	r3, r2
 801aeba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	7858      	ldrb	r0, [r3, #1]
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801aec6:	2301      	movs	r3, #1
 801aec8:	697a      	ldr	r2, [r7, #20]
 801aeca:	f7ff fced 	bl	801a8a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801aece:	693b      	ldr	r3, [r7, #16]
 801aed0:	3b01      	subs	r3, #1
 801aed2:	613b      	str	r3, [r7, #16]
 801aed4:	693b      	ldr	r3, [r7, #16]
 801aed6:	2b01      	cmp	r3, #1
 801aed8:	d8eb      	bhi.n	801aeb2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801aeda:	7bfb      	ldrb	r3, [r7, #15]
}
 801aedc:	4618      	mov	r0, r3
 801aede:	3718      	adds	r7, #24
 801aee0:	46bd      	mov	sp, r7
 801aee2:	bd80      	pop	{r7, pc}

0801aee4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801aee4:	b580      	push	{r7, lr}
 801aee6:	b084      	sub	sp, #16
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	6078      	str	r0, [r7, #4]
 801aeec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801aeee:	2300      	movs	r3, #0
 801aef0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aef6:	683a      	ldr	r2, [r7, #0]
 801aef8:	429a      	cmp	r2, r3
 801aefa:	d01b      	beq.n	801af34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801aefc:	6878      	ldr	r0, [r7, #4]
 801aefe:	f7ff ffad 	bl	801ae5c <sync_window>
 801af02:	4603      	mov	r3, r0
 801af04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801af06:	7bfb      	ldrb	r3, [r7, #15]
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d113      	bne.n	801af34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	7858      	ldrb	r0, [r3, #1]
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801af16:	2301      	movs	r3, #1
 801af18:	683a      	ldr	r2, [r7, #0]
 801af1a:	f7ff fca5 	bl	801a868 <disk_read>
 801af1e:	4603      	mov	r3, r0
 801af20:	2b00      	cmp	r3, #0
 801af22:	d004      	beq.n	801af2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801af24:	f04f 33ff 	mov.w	r3, #4294967295
 801af28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801af2a:	2301      	movs	r3, #1
 801af2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	683a      	ldr	r2, [r7, #0]
 801af32:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 801af34:	7bfb      	ldrb	r3, [r7, #15]
}
 801af36:	4618      	mov	r0, r3
 801af38:	3710      	adds	r7, #16
 801af3a:	46bd      	mov	sp, r7
 801af3c:	bd80      	pop	{r7, pc}
	...

0801af40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801af40:	b580      	push	{r7, lr}
 801af42:	b084      	sub	sp, #16
 801af44:	af00      	add	r7, sp, #0
 801af46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801af48:	6878      	ldr	r0, [r7, #4]
 801af4a:	f7ff ff87 	bl	801ae5c <sync_window>
 801af4e:	4603      	mov	r3, r0
 801af50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801af52:	7bfb      	ldrb	r3, [r7, #15]
 801af54:	2b00      	cmp	r3, #0
 801af56:	d158      	bne.n	801b00a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	781b      	ldrb	r3, [r3, #0]
 801af5c:	2b03      	cmp	r3, #3
 801af5e:	d148      	bne.n	801aff2 <sync_fs+0xb2>
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	791b      	ldrb	r3, [r3, #4]
 801af64:	2b01      	cmp	r3, #1
 801af66:	d144      	bne.n	801aff2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	3334      	adds	r3, #52	; 0x34
 801af6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801af70:	2100      	movs	r1, #0
 801af72:	4618      	mov	r0, r3
 801af74:	f7ff fd79 	bl	801aa6a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	3334      	adds	r3, #52	; 0x34
 801af7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801af80:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801af84:	4618      	mov	r0, r3
 801af86:	f7ff fd08 	bl	801a99a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	3334      	adds	r3, #52	; 0x34
 801af8e:	4921      	ldr	r1, [pc, #132]	; (801b014 <sync_fs+0xd4>)
 801af90:	4618      	mov	r0, r3
 801af92:	f7ff fd1d 	bl	801a9d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	3334      	adds	r3, #52	; 0x34
 801af9a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801af9e:	491e      	ldr	r1, [pc, #120]	; (801b018 <sync_fs+0xd8>)
 801afa0:	4618      	mov	r0, r3
 801afa2:	f7ff fd15 	bl	801a9d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	3334      	adds	r3, #52	; 0x34
 801afaa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	695b      	ldr	r3, [r3, #20]
 801afb2:	4619      	mov	r1, r3
 801afb4:	4610      	mov	r0, r2
 801afb6:	f7ff fd0b 	bl	801a9d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	3334      	adds	r3, #52	; 0x34
 801afbe:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	691b      	ldr	r3, [r3, #16]
 801afc6:	4619      	mov	r1, r3
 801afc8:	4610      	mov	r0, r2
 801afca:	f7ff fd01 	bl	801a9d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	6a1b      	ldr	r3, [r3, #32]
 801afd2:	1c5a      	adds	r2, r3, #1
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	7858      	ldrb	r0, [r3, #1]
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801afe6:	2301      	movs	r3, #1
 801afe8:	f7ff fc5e 	bl	801a8a8 <disk_write>
			fs->fsi_flag = 0;
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	2200      	movs	r2, #0
 801aff0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	785b      	ldrb	r3, [r3, #1]
 801aff6:	2200      	movs	r2, #0
 801aff8:	2100      	movs	r1, #0
 801affa:	4618      	mov	r0, r3
 801affc:	f7ff fc74 	bl	801a8e8 <disk_ioctl>
 801b000:	4603      	mov	r3, r0
 801b002:	2b00      	cmp	r3, #0
 801b004:	d001      	beq.n	801b00a <sync_fs+0xca>
 801b006:	2301      	movs	r3, #1
 801b008:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801b00a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b00c:	4618      	mov	r0, r3
 801b00e:	3710      	adds	r7, #16
 801b010:	46bd      	mov	sp, r7
 801b012:	bd80      	pop	{r7, pc}
 801b014:	41615252 	.word	0x41615252
 801b018:	61417272 	.word	0x61417272

0801b01c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801b01c:	b480      	push	{r7}
 801b01e:	b083      	sub	sp, #12
 801b020:	af00      	add	r7, sp, #0
 801b022:	6078      	str	r0, [r7, #4]
 801b024:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801b026:	683b      	ldr	r3, [r7, #0]
 801b028:	3b02      	subs	r3, #2
 801b02a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	699b      	ldr	r3, [r3, #24]
 801b030:	3b02      	subs	r3, #2
 801b032:	683a      	ldr	r2, [r7, #0]
 801b034:	429a      	cmp	r2, r3
 801b036:	d301      	bcc.n	801b03c <clust2sect+0x20>
 801b038:	2300      	movs	r3, #0
 801b03a:	e008      	b.n	801b04e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	895b      	ldrh	r3, [r3, #10]
 801b040:	461a      	mov	r2, r3
 801b042:	683b      	ldr	r3, [r7, #0]
 801b044:	fb03 f202 	mul.w	r2, r3, r2
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b04c:	4413      	add	r3, r2
}
 801b04e:	4618      	mov	r0, r3
 801b050:	370c      	adds	r7, #12
 801b052:	46bd      	mov	sp, r7
 801b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b058:	4770      	bx	lr

0801b05a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801b05a:	b580      	push	{r7, lr}
 801b05c:	b086      	sub	sp, #24
 801b05e:	af00      	add	r7, sp, #0
 801b060:	6078      	str	r0, [r7, #4]
 801b062:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801b06a:	683b      	ldr	r3, [r7, #0]
 801b06c:	2b01      	cmp	r3, #1
 801b06e:	d904      	bls.n	801b07a <get_fat+0x20>
 801b070:	693b      	ldr	r3, [r7, #16]
 801b072:	699b      	ldr	r3, [r3, #24]
 801b074:	683a      	ldr	r2, [r7, #0]
 801b076:	429a      	cmp	r2, r3
 801b078:	d302      	bcc.n	801b080 <get_fat+0x26>
		val = 1;	/* Internal error */
 801b07a:	2301      	movs	r3, #1
 801b07c:	617b      	str	r3, [r7, #20]
 801b07e:	e08c      	b.n	801b19a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801b080:	f04f 33ff 	mov.w	r3, #4294967295
 801b084:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801b086:	693b      	ldr	r3, [r7, #16]
 801b088:	781b      	ldrb	r3, [r3, #0]
 801b08a:	2b02      	cmp	r3, #2
 801b08c:	d045      	beq.n	801b11a <get_fat+0xc0>
 801b08e:	2b03      	cmp	r3, #3
 801b090:	d05d      	beq.n	801b14e <get_fat+0xf4>
 801b092:	2b01      	cmp	r3, #1
 801b094:	d177      	bne.n	801b186 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801b096:	683b      	ldr	r3, [r7, #0]
 801b098:	60fb      	str	r3, [r7, #12]
 801b09a:	68fb      	ldr	r3, [r7, #12]
 801b09c:	085b      	lsrs	r3, r3, #1
 801b09e:	68fa      	ldr	r2, [r7, #12]
 801b0a0:	4413      	add	r3, r2
 801b0a2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b0a4:	693b      	ldr	r3, [r7, #16]
 801b0a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b0a8:	68fb      	ldr	r3, [r7, #12]
 801b0aa:	0a5b      	lsrs	r3, r3, #9
 801b0ac:	4413      	add	r3, r2
 801b0ae:	4619      	mov	r1, r3
 801b0b0:	6938      	ldr	r0, [r7, #16]
 801b0b2:	f7ff ff17 	bl	801aee4 <move_window>
 801b0b6:	4603      	mov	r3, r0
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d167      	bne.n	801b18c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 801b0bc:	68fb      	ldr	r3, [r7, #12]
 801b0be:	1c5a      	adds	r2, r3, #1
 801b0c0:	60fa      	str	r2, [r7, #12]
 801b0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b0c6:	693a      	ldr	r2, [r7, #16]
 801b0c8:	4413      	add	r3, r2
 801b0ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b0ce:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b0d0:	693b      	ldr	r3, [r7, #16]
 801b0d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	0a5b      	lsrs	r3, r3, #9
 801b0d8:	4413      	add	r3, r2
 801b0da:	4619      	mov	r1, r3
 801b0dc:	6938      	ldr	r0, [r7, #16]
 801b0de:	f7ff ff01 	bl	801aee4 <move_window>
 801b0e2:	4603      	mov	r3, r0
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d153      	bne.n	801b190 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b0ee:	693a      	ldr	r2, [r7, #16]
 801b0f0:	4413      	add	r3, r2
 801b0f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b0f6:	021b      	lsls	r3, r3, #8
 801b0f8:	461a      	mov	r2, r3
 801b0fa:	68bb      	ldr	r3, [r7, #8]
 801b0fc:	4313      	orrs	r3, r2
 801b0fe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801b100:	683b      	ldr	r3, [r7, #0]
 801b102:	f003 0301 	and.w	r3, r3, #1
 801b106:	2b00      	cmp	r3, #0
 801b108:	d002      	beq.n	801b110 <get_fat+0xb6>
 801b10a:	68bb      	ldr	r3, [r7, #8]
 801b10c:	091b      	lsrs	r3, r3, #4
 801b10e:	e002      	b.n	801b116 <get_fat+0xbc>
 801b110:	68bb      	ldr	r3, [r7, #8]
 801b112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b116:	617b      	str	r3, [r7, #20]
			break;
 801b118:	e03f      	b.n	801b19a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b11a:	693b      	ldr	r3, [r7, #16]
 801b11c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b11e:	683b      	ldr	r3, [r7, #0]
 801b120:	0a1b      	lsrs	r3, r3, #8
 801b122:	4413      	add	r3, r2
 801b124:	4619      	mov	r1, r3
 801b126:	6938      	ldr	r0, [r7, #16]
 801b128:	f7ff fedc 	bl	801aee4 <move_window>
 801b12c:	4603      	mov	r3, r0
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d130      	bne.n	801b194 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801b132:	693b      	ldr	r3, [r7, #16]
 801b134:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b138:	683b      	ldr	r3, [r7, #0]
 801b13a:	005b      	lsls	r3, r3, #1
 801b13c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801b140:	4413      	add	r3, r2
 801b142:	4618      	mov	r0, r3
 801b144:	f7ff fbee 	bl	801a924 <ld_word>
 801b148:	4603      	mov	r3, r0
 801b14a:	617b      	str	r3, [r7, #20]
			break;
 801b14c:	e025      	b.n	801b19a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b14e:	693b      	ldr	r3, [r7, #16]
 801b150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b152:	683b      	ldr	r3, [r7, #0]
 801b154:	09db      	lsrs	r3, r3, #7
 801b156:	4413      	add	r3, r2
 801b158:	4619      	mov	r1, r3
 801b15a:	6938      	ldr	r0, [r7, #16]
 801b15c:	f7ff fec2 	bl	801aee4 <move_window>
 801b160:	4603      	mov	r3, r0
 801b162:	2b00      	cmp	r3, #0
 801b164:	d118      	bne.n	801b198 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801b166:	693b      	ldr	r3, [r7, #16]
 801b168:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b16c:	683b      	ldr	r3, [r7, #0]
 801b16e:	009b      	lsls	r3, r3, #2
 801b170:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801b174:	4413      	add	r3, r2
 801b176:	4618      	mov	r0, r3
 801b178:	f7ff fbec 	bl	801a954 <ld_dword>
 801b17c:	4603      	mov	r3, r0
 801b17e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801b182:	617b      	str	r3, [r7, #20]
			break;
 801b184:	e009      	b.n	801b19a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801b186:	2301      	movs	r3, #1
 801b188:	617b      	str	r3, [r7, #20]
 801b18a:	e006      	b.n	801b19a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b18c:	bf00      	nop
 801b18e:	e004      	b.n	801b19a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801b190:	bf00      	nop
 801b192:	e002      	b.n	801b19a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801b194:	bf00      	nop
 801b196:	e000      	b.n	801b19a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801b198:	bf00      	nop
		}
	}

	return val;
 801b19a:	697b      	ldr	r3, [r7, #20]
}
 801b19c:	4618      	mov	r0, r3
 801b19e:	3718      	adds	r7, #24
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	bd80      	pop	{r7, pc}

0801b1a4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801b1a4:	b590      	push	{r4, r7, lr}
 801b1a6:	b089      	sub	sp, #36	; 0x24
 801b1a8:	af00      	add	r7, sp, #0
 801b1aa:	60f8      	str	r0, [r7, #12]
 801b1ac:	60b9      	str	r1, [r7, #8]
 801b1ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801b1b0:	2302      	movs	r3, #2
 801b1b2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801b1b4:	68bb      	ldr	r3, [r7, #8]
 801b1b6:	2b01      	cmp	r3, #1
 801b1b8:	f240 80d6 	bls.w	801b368 <put_fat+0x1c4>
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	699b      	ldr	r3, [r3, #24]
 801b1c0:	68ba      	ldr	r2, [r7, #8]
 801b1c2:	429a      	cmp	r2, r3
 801b1c4:	f080 80d0 	bcs.w	801b368 <put_fat+0x1c4>
		switch (fs->fs_type) {
 801b1c8:	68fb      	ldr	r3, [r7, #12]
 801b1ca:	781b      	ldrb	r3, [r3, #0]
 801b1cc:	2b02      	cmp	r3, #2
 801b1ce:	d073      	beq.n	801b2b8 <put_fat+0x114>
 801b1d0:	2b03      	cmp	r3, #3
 801b1d2:	f000 8091 	beq.w	801b2f8 <put_fat+0x154>
 801b1d6:	2b01      	cmp	r3, #1
 801b1d8:	f040 80c6 	bne.w	801b368 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801b1dc:	68bb      	ldr	r3, [r7, #8]
 801b1de:	61bb      	str	r3, [r7, #24]
 801b1e0:	69bb      	ldr	r3, [r7, #24]
 801b1e2:	085b      	lsrs	r3, r3, #1
 801b1e4:	69ba      	ldr	r2, [r7, #24]
 801b1e6:	4413      	add	r3, r2
 801b1e8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b1ee:	69bb      	ldr	r3, [r7, #24]
 801b1f0:	0a5b      	lsrs	r3, r3, #9
 801b1f2:	4413      	add	r3, r2
 801b1f4:	4619      	mov	r1, r3
 801b1f6:	68f8      	ldr	r0, [r7, #12]
 801b1f8:	f7ff fe74 	bl	801aee4 <move_window>
 801b1fc:	4603      	mov	r3, r0
 801b1fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b200:	7ffb      	ldrb	r3, [r7, #31]
 801b202:	2b00      	cmp	r3, #0
 801b204:	f040 80a9 	bne.w	801b35a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 801b208:	68fb      	ldr	r3, [r7, #12]
 801b20a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b20e:	69bb      	ldr	r3, [r7, #24]
 801b210:	1c59      	adds	r1, r3, #1
 801b212:	61b9      	str	r1, [r7, #24]
 801b214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b218:	4413      	add	r3, r2
 801b21a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801b21c:	68bb      	ldr	r3, [r7, #8]
 801b21e:	f003 0301 	and.w	r3, r3, #1
 801b222:	2b00      	cmp	r3, #0
 801b224:	d00d      	beq.n	801b242 <put_fat+0x9e>
 801b226:	697b      	ldr	r3, [r7, #20]
 801b228:	781b      	ldrb	r3, [r3, #0]
 801b22a:	b25b      	sxtb	r3, r3
 801b22c:	f003 030f 	and.w	r3, r3, #15
 801b230:	b25a      	sxtb	r2, r3
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	b2db      	uxtb	r3, r3
 801b236:	011b      	lsls	r3, r3, #4
 801b238:	b25b      	sxtb	r3, r3
 801b23a:	4313      	orrs	r3, r2
 801b23c:	b25b      	sxtb	r3, r3
 801b23e:	b2db      	uxtb	r3, r3
 801b240:	e001      	b.n	801b246 <put_fat+0xa2>
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	b2db      	uxtb	r3, r3
 801b246:	697a      	ldr	r2, [r7, #20]
 801b248:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	2201      	movs	r2, #1
 801b24e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801b250:	68fb      	ldr	r3, [r7, #12]
 801b252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b254:	69bb      	ldr	r3, [r7, #24]
 801b256:	0a5b      	lsrs	r3, r3, #9
 801b258:	4413      	add	r3, r2
 801b25a:	4619      	mov	r1, r3
 801b25c:	68f8      	ldr	r0, [r7, #12]
 801b25e:	f7ff fe41 	bl	801aee4 <move_window>
 801b262:	4603      	mov	r3, r0
 801b264:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b266:	7ffb      	ldrb	r3, [r7, #31]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d178      	bne.n	801b35e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b272:	69bb      	ldr	r3, [r7, #24]
 801b274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b278:	4413      	add	r3, r2
 801b27a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801b27c:	68bb      	ldr	r3, [r7, #8]
 801b27e:	f003 0301 	and.w	r3, r3, #1
 801b282:	2b00      	cmp	r3, #0
 801b284:	d003      	beq.n	801b28e <put_fat+0xea>
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	091b      	lsrs	r3, r3, #4
 801b28a:	b2db      	uxtb	r3, r3
 801b28c:	e00e      	b.n	801b2ac <put_fat+0x108>
 801b28e:	697b      	ldr	r3, [r7, #20]
 801b290:	781b      	ldrb	r3, [r3, #0]
 801b292:	b25b      	sxtb	r3, r3
 801b294:	f023 030f 	bic.w	r3, r3, #15
 801b298:	b25a      	sxtb	r2, r3
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	0a1b      	lsrs	r3, r3, #8
 801b29e:	b25b      	sxtb	r3, r3
 801b2a0:	f003 030f 	and.w	r3, r3, #15
 801b2a4:	b25b      	sxtb	r3, r3
 801b2a6:	4313      	orrs	r3, r2
 801b2a8:	b25b      	sxtb	r3, r3
 801b2aa:	b2db      	uxtb	r3, r3
 801b2ac:	697a      	ldr	r2, [r7, #20]
 801b2ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801b2b0:	68fb      	ldr	r3, [r7, #12]
 801b2b2:	2201      	movs	r2, #1
 801b2b4:	70da      	strb	r2, [r3, #3]
			break;
 801b2b6:	e057      	b.n	801b368 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801b2b8:	68fb      	ldr	r3, [r7, #12]
 801b2ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b2bc:	68bb      	ldr	r3, [r7, #8]
 801b2be:	0a1b      	lsrs	r3, r3, #8
 801b2c0:	4413      	add	r3, r2
 801b2c2:	4619      	mov	r1, r3
 801b2c4:	68f8      	ldr	r0, [r7, #12]
 801b2c6:	f7ff fe0d 	bl	801aee4 <move_window>
 801b2ca:	4603      	mov	r3, r0
 801b2cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b2ce:	7ffb      	ldrb	r3, [r7, #31]
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	d146      	bne.n	801b362 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b2da:	68bb      	ldr	r3, [r7, #8]
 801b2dc:	005b      	lsls	r3, r3, #1
 801b2de:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801b2e2:	4413      	add	r3, r2
 801b2e4:	687a      	ldr	r2, [r7, #4]
 801b2e6:	b292      	uxth	r2, r2
 801b2e8:	4611      	mov	r1, r2
 801b2ea:	4618      	mov	r0, r3
 801b2ec:	f7ff fb55 	bl	801a99a <st_word>
			fs->wflag = 1;
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	2201      	movs	r2, #1
 801b2f4:	70da      	strb	r2, [r3, #3]
			break;
 801b2f6:	e037      	b.n	801b368 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b2fc:	68bb      	ldr	r3, [r7, #8]
 801b2fe:	09db      	lsrs	r3, r3, #7
 801b300:	4413      	add	r3, r2
 801b302:	4619      	mov	r1, r3
 801b304:	68f8      	ldr	r0, [r7, #12]
 801b306:	f7ff fded 	bl	801aee4 <move_window>
 801b30a:	4603      	mov	r3, r0
 801b30c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801b30e:	7ffb      	ldrb	r3, [r7, #31]
 801b310:	2b00      	cmp	r3, #0
 801b312:	d128      	bne.n	801b366 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801b31a:	68fb      	ldr	r3, [r7, #12]
 801b31c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b320:	68bb      	ldr	r3, [r7, #8]
 801b322:	009b      	lsls	r3, r3, #2
 801b324:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801b328:	4413      	add	r3, r2
 801b32a:	4618      	mov	r0, r3
 801b32c:	f7ff fb12 	bl	801a954 <ld_dword>
 801b330:	4603      	mov	r3, r0
 801b332:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801b336:	4323      	orrs	r3, r4
 801b338:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801b33a:	68fb      	ldr	r3, [r7, #12]
 801b33c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b340:	68bb      	ldr	r3, [r7, #8]
 801b342:	009b      	lsls	r3, r3, #2
 801b344:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801b348:	4413      	add	r3, r2
 801b34a:	6879      	ldr	r1, [r7, #4]
 801b34c:	4618      	mov	r0, r3
 801b34e:	f7ff fb3f 	bl	801a9d0 <st_dword>
			fs->wflag = 1;
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	2201      	movs	r2, #1
 801b356:	70da      	strb	r2, [r3, #3]
			break;
 801b358:	e006      	b.n	801b368 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801b35a:	bf00      	nop
 801b35c:	e004      	b.n	801b368 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801b35e:	bf00      	nop
 801b360:	e002      	b.n	801b368 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801b362:	bf00      	nop
 801b364:	e000      	b.n	801b368 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801b366:	bf00      	nop
		}
	}
	return res;
 801b368:	7ffb      	ldrb	r3, [r7, #31]
}
 801b36a:	4618      	mov	r0, r3
 801b36c:	3724      	adds	r7, #36	; 0x24
 801b36e:	46bd      	mov	sp, r7
 801b370:	bd90      	pop	{r4, r7, pc}

0801b372 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801b372:	b580      	push	{r7, lr}
 801b374:	b088      	sub	sp, #32
 801b376:	af00      	add	r7, sp, #0
 801b378:	60f8      	str	r0, [r7, #12]
 801b37a:	60b9      	str	r1, [r7, #8]
 801b37c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801b37e:	2300      	movs	r3, #0
 801b380:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801b382:	68fb      	ldr	r3, [r7, #12]
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801b388:	68bb      	ldr	r3, [r7, #8]
 801b38a:	2b01      	cmp	r3, #1
 801b38c:	d904      	bls.n	801b398 <remove_chain+0x26>
 801b38e:	69bb      	ldr	r3, [r7, #24]
 801b390:	699b      	ldr	r3, [r3, #24]
 801b392:	68ba      	ldr	r2, [r7, #8]
 801b394:	429a      	cmp	r2, r3
 801b396:	d301      	bcc.n	801b39c <remove_chain+0x2a>
 801b398:	2302      	movs	r3, #2
 801b39a:	e04b      	b.n	801b434 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d00c      	beq.n	801b3bc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801b3a2:	f04f 32ff 	mov.w	r2, #4294967295
 801b3a6:	6879      	ldr	r1, [r7, #4]
 801b3a8:	69b8      	ldr	r0, [r7, #24]
 801b3aa:	f7ff fefb 	bl	801b1a4 <put_fat>
 801b3ae:	4603      	mov	r3, r0
 801b3b0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801b3b2:	7ffb      	ldrb	r3, [r7, #31]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d001      	beq.n	801b3bc <remove_chain+0x4a>
 801b3b8:	7ffb      	ldrb	r3, [r7, #31]
 801b3ba:	e03b      	b.n	801b434 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801b3bc:	68b9      	ldr	r1, [r7, #8]
 801b3be:	68f8      	ldr	r0, [r7, #12]
 801b3c0:	f7ff fe4b 	bl	801b05a <get_fat>
 801b3c4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801b3c6:	697b      	ldr	r3, [r7, #20]
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d031      	beq.n	801b430 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801b3cc:	697b      	ldr	r3, [r7, #20]
 801b3ce:	2b01      	cmp	r3, #1
 801b3d0:	d101      	bne.n	801b3d6 <remove_chain+0x64>
 801b3d2:	2302      	movs	r3, #2
 801b3d4:	e02e      	b.n	801b434 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801b3d6:	697b      	ldr	r3, [r7, #20]
 801b3d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b3dc:	d101      	bne.n	801b3e2 <remove_chain+0x70>
 801b3de:	2301      	movs	r3, #1
 801b3e0:	e028      	b.n	801b434 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801b3e2:	2200      	movs	r2, #0
 801b3e4:	68b9      	ldr	r1, [r7, #8]
 801b3e6:	69b8      	ldr	r0, [r7, #24]
 801b3e8:	f7ff fedc 	bl	801b1a4 <put_fat>
 801b3ec:	4603      	mov	r3, r0
 801b3ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801b3f0:	7ffb      	ldrb	r3, [r7, #31]
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	d001      	beq.n	801b3fa <remove_chain+0x88>
 801b3f6:	7ffb      	ldrb	r3, [r7, #31]
 801b3f8:	e01c      	b.n	801b434 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801b3fa:	69bb      	ldr	r3, [r7, #24]
 801b3fc:	695a      	ldr	r2, [r3, #20]
 801b3fe:	69bb      	ldr	r3, [r7, #24]
 801b400:	699b      	ldr	r3, [r3, #24]
 801b402:	3b02      	subs	r3, #2
 801b404:	429a      	cmp	r2, r3
 801b406:	d20b      	bcs.n	801b420 <remove_chain+0xae>
			fs->free_clst++;
 801b408:	69bb      	ldr	r3, [r7, #24]
 801b40a:	695b      	ldr	r3, [r3, #20]
 801b40c:	1c5a      	adds	r2, r3, #1
 801b40e:	69bb      	ldr	r3, [r7, #24]
 801b410:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801b412:	69bb      	ldr	r3, [r7, #24]
 801b414:	791b      	ldrb	r3, [r3, #4]
 801b416:	f043 0301 	orr.w	r3, r3, #1
 801b41a:	b2da      	uxtb	r2, r3
 801b41c:	69bb      	ldr	r3, [r7, #24]
 801b41e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801b420:	697b      	ldr	r3, [r7, #20]
 801b422:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801b424:	69bb      	ldr	r3, [r7, #24]
 801b426:	699b      	ldr	r3, [r3, #24]
 801b428:	68ba      	ldr	r2, [r7, #8]
 801b42a:	429a      	cmp	r2, r3
 801b42c:	d3c6      	bcc.n	801b3bc <remove_chain+0x4a>
 801b42e:	e000      	b.n	801b432 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801b430:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801b432:	2300      	movs	r3, #0
}
 801b434:	4618      	mov	r0, r3
 801b436:	3720      	adds	r7, #32
 801b438:	46bd      	mov	sp, r7
 801b43a:	bd80      	pop	{r7, pc}

0801b43c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b088      	sub	sp, #32
 801b440:	af00      	add	r7, sp, #0
 801b442:	6078      	str	r0, [r7, #4]
 801b444:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801b44c:	683b      	ldr	r3, [r7, #0]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d10d      	bne.n	801b46e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801b452:	693b      	ldr	r3, [r7, #16]
 801b454:	691b      	ldr	r3, [r3, #16]
 801b456:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801b458:	69bb      	ldr	r3, [r7, #24]
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d004      	beq.n	801b468 <create_chain+0x2c>
 801b45e:	693b      	ldr	r3, [r7, #16]
 801b460:	699b      	ldr	r3, [r3, #24]
 801b462:	69ba      	ldr	r2, [r7, #24]
 801b464:	429a      	cmp	r2, r3
 801b466:	d31b      	bcc.n	801b4a0 <create_chain+0x64>
 801b468:	2301      	movs	r3, #1
 801b46a:	61bb      	str	r3, [r7, #24]
 801b46c:	e018      	b.n	801b4a0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801b46e:	6839      	ldr	r1, [r7, #0]
 801b470:	6878      	ldr	r0, [r7, #4]
 801b472:	f7ff fdf2 	bl	801b05a <get_fat>
 801b476:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801b478:	68fb      	ldr	r3, [r7, #12]
 801b47a:	2b01      	cmp	r3, #1
 801b47c:	d801      	bhi.n	801b482 <create_chain+0x46>
 801b47e:	2301      	movs	r3, #1
 801b480:	e070      	b.n	801b564 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801b482:	68fb      	ldr	r3, [r7, #12]
 801b484:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b488:	d101      	bne.n	801b48e <create_chain+0x52>
 801b48a:	68fb      	ldr	r3, [r7, #12]
 801b48c:	e06a      	b.n	801b564 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801b48e:	693b      	ldr	r3, [r7, #16]
 801b490:	699b      	ldr	r3, [r3, #24]
 801b492:	68fa      	ldr	r2, [r7, #12]
 801b494:	429a      	cmp	r2, r3
 801b496:	d201      	bcs.n	801b49c <create_chain+0x60>
 801b498:	68fb      	ldr	r3, [r7, #12]
 801b49a:	e063      	b.n	801b564 <create_chain+0x128>
		scl = clst;
 801b49c:	683b      	ldr	r3, [r7, #0]
 801b49e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801b4a0:	69bb      	ldr	r3, [r7, #24]
 801b4a2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801b4a4:	69fb      	ldr	r3, [r7, #28]
 801b4a6:	3301      	adds	r3, #1
 801b4a8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801b4aa:	693b      	ldr	r3, [r7, #16]
 801b4ac:	699b      	ldr	r3, [r3, #24]
 801b4ae:	69fa      	ldr	r2, [r7, #28]
 801b4b0:	429a      	cmp	r2, r3
 801b4b2:	d307      	bcc.n	801b4c4 <create_chain+0x88>
				ncl = 2;
 801b4b4:	2302      	movs	r3, #2
 801b4b6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801b4b8:	69fa      	ldr	r2, [r7, #28]
 801b4ba:	69bb      	ldr	r3, [r7, #24]
 801b4bc:	429a      	cmp	r2, r3
 801b4be:	d901      	bls.n	801b4c4 <create_chain+0x88>
 801b4c0:	2300      	movs	r3, #0
 801b4c2:	e04f      	b.n	801b564 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801b4c4:	69f9      	ldr	r1, [r7, #28]
 801b4c6:	6878      	ldr	r0, [r7, #4]
 801b4c8:	f7ff fdc7 	bl	801b05a <get_fat>
 801b4cc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801b4ce:	68fb      	ldr	r3, [r7, #12]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d00e      	beq.n	801b4f2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801b4d4:	68fb      	ldr	r3, [r7, #12]
 801b4d6:	2b01      	cmp	r3, #1
 801b4d8:	d003      	beq.n	801b4e2 <create_chain+0xa6>
 801b4da:	68fb      	ldr	r3, [r7, #12]
 801b4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b4e0:	d101      	bne.n	801b4e6 <create_chain+0xaa>
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	e03e      	b.n	801b564 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801b4e6:	69fa      	ldr	r2, [r7, #28]
 801b4e8:	69bb      	ldr	r3, [r7, #24]
 801b4ea:	429a      	cmp	r2, r3
 801b4ec:	d1da      	bne.n	801b4a4 <create_chain+0x68>
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	e038      	b.n	801b564 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801b4f2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801b4f4:	f04f 32ff 	mov.w	r2, #4294967295
 801b4f8:	69f9      	ldr	r1, [r7, #28]
 801b4fa:	6938      	ldr	r0, [r7, #16]
 801b4fc:	f7ff fe52 	bl	801b1a4 <put_fat>
 801b500:	4603      	mov	r3, r0
 801b502:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801b504:	7dfb      	ldrb	r3, [r7, #23]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d109      	bne.n	801b51e <create_chain+0xe2>
 801b50a:	683b      	ldr	r3, [r7, #0]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d006      	beq.n	801b51e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801b510:	69fa      	ldr	r2, [r7, #28]
 801b512:	6839      	ldr	r1, [r7, #0]
 801b514:	6938      	ldr	r0, [r7, #16]
 801b516:	f7ff fe45 	bl	801b1a4 <put_fat>
 801b51a:	4603      	mov	r3, r0
 801b51c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801b51e:	7dfb      	ldrb	r3, [r7, #23]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d116      	bne.n	801b552 <create_chain+0x116>
		fs->last_clst = ncl;
 801b524:	693b      	ldr	r3, [r7, #16]
 801b526:	69fa      	ldr	r2, [r7, #28]
 801b528:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801b52a:	693b      	ldr	r3, [r7, #16]
 801b52c:	695a      	ldr	r2, [r3, #20]
 801b52e:	693b      	ldr	r3, [r7, #16]
 801b530:	699b      	ldr	r3, [r3, #24]
 801b532:	3b02      	subs	r3, #2
 801b534:	429a      	cmp	r2, r3
 801b536:	d804      	bhi.n	801b542 <create_chain+0x106>
 801b538:	693b      	ldr	r3, [r7, #16]
 801b53a:	695b      	ldr	r3, [r3, #20]
 801b53c:	1e5a      	subs	r2, r3, #1
 801b53e:	693b      	ldr	r3, [r7, #16]
 801b540:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801b542:	693b      	ldr	r3, [r7, #16]
 801b544:	791b      	ldrb	r3, [r3, #4]
 801b546:	f043 0301 	orr.w	r3, r3, #1
 801b54a:	b2da      	uxtb	r2, r3
 801b54c:	693b      	ldr	r3, [r7, #16]
 801b54e:	711a      	strb	r2, [r3, #4]
 801b550:	e007      	b.n	801b562 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801b552:	7dfb      	ldrb	r3, [r7, #23]
 801b554:	2b01      	cmp	r3, #1
 801b556:	d102      	bne.n	801b55e <create_chain+0x122>
 801b558:	f04f 33ff 	mov.w	r3, #4294967295
 801b55c:	e000      	b.n	801b560 <create_chain+0x124>
 801b55e:	2301      	movs	r3, #1
 801b560:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801b562:	69fb      	ldr	r3, [r7, #28]
}
 801b564:	4618      	mov	r0, r3
 801b566:	3720      	adds	r7, #32
 801b568:	46bd      	mov	sp, r7
 801b56a:	bd80      	pop	{r7, pc}

0801b56c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801b56c:	b480      	push	{r7}
 801b56e:	b087      	sub	sp, #28
 801b570:	af00      	add	r7, sp, #0
 801b572:	6078      	str	r0, [r7, #4]
 801b574:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b580:	3304      	adds	r3, #4
 801b582:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b584:	683b      	ldr	r3, [r7, #0]
 801b586:	0a5b      	lsrs	r3, r3, #9
 801b588:	68fa      	ldr	r2, [r7, #12]
 801b58a:	8952      	ldrh	r2, [r2, #10]
 801b58c:	fbb3 f3f2 	udiv	r3, r3, r2
 801b590:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b592:	693b      	ldr	r3, [r7, #16]
 801b594:	1d1a      	adds	r2, r3, #4
 801b596:	613a      	str	r2, [r7, #16]
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b59c:	68bb      	ldr	r3, [r7, #8]
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d101      	bne.n	801b5a6 <clmt_clust+0x3a>
 801b5a2:	2300      	movs	r3, #0
 801b5a4:	e010      	b.n	801b5c8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801b5a6:	697a      	ldr	r2, [r7, #20]
 801b5a8:	68bb      	ldr	r3, [r7, #8]
 801b5aa:	429a      	cmp	r2, r3
 801b5ac:	d307      	bcc.n	801b5be <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801b5ae:	697a      	ldr	r2, [r7, #20]
 801b5b0:	68bb      	ldr	r3, [r7, #8]
 801b5b2:	1ad3      	subs	r3, r2, r3
 801b5b4:	617b      	str	r3, [r7, #20]
 801b5b6:	693b      	ldr	r3, [r7, #16]
 801b5b8:	3304      	adds	r3, #4
 801b5ba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b5bc:	e7e9      	b.n	801b592 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801b5be:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801b5c0:	693b      	ldr	r3, [r7, #16]
 801b5c2:	681a      	ldr	r2, [r3, #0]
 801b5c4:	697b      	ldr	r3, [r7, #20]
 801b5c6:	4413      	add	r3, r2
}
 801b5c8:	4618      	mov	r0, r3
 801b5ca:	371c      	adds	r7, #28
 801b5cc:	46bd      	mov	sp, r7
 801b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5d2:	4770      	bx	lr

0801b5d4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801b5d4:	b580      	push	{r7, lr}
 801b5d6:	b086      	sub	sp, #24
 801b5d8:	af00      	add	r7, sp, #0
 801b5da:	6078      	str	r0, [r7, #4]
 801b5dc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801b5e4:	683b      	ldr	r3, [r7, #0]
 801b5e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801b5ea:	d204      	bcs.n	801b5f6 <dir_sdi+0x22>
 801b5ec:	683b      	ldr	r3, [r7, #0]
 801b5ee:	f003 031f 	and.w	r3, r3, #31
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d001      	beq.n	801b5fa <dir_sdi+0x26>
		return FR_INT_ERR;
 801b5f6:	2302      	movs	r3, #2
 801b5f8:	e063      	b.n	801b6c2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801b5fa:	687b      	ldr	r3, [r7, #4]
 801b5fc:	683a      	ldr	r2, [r7, #0]
 801b5fe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	689b      	ldr	r3, [r3, #8]
 801b604:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801b606:	697b      	ldr	r3, [r7, #20]
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d106      	bne.n	801b61a <dir_sdi+0x46>
 801b60c:	693b      	ldr	r3, [r7, #16]
 801b60e:	781b      	ldrb	r3, [r3, #0]
 801b610:	2b02      	cmp	r3, #2
 801b612:	d902      	bls.n	801b61a <dir_sdi+0x46>
		clst = fs->dirbase;
 801b614:	693b      	ldr	r3, [r7, #16]
 801b616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b618:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801b61a:	697b      	ldr	r3, [r7, #20]
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d10c      	bne.n	801b63a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801b620:	683b      	ldr	r3, [r7, #0]
 801b622:	095b      	lsrs	r3, r3, #5
 801b624:	693a      	ldr	r2, [r7, #16]
 801b626:	8912      	ldrh	r2, [r2, #8]
 801b628:	4293      	cmp	r3, r2
 801b62a:	d301      	bcc.n	801b630 <dir_sdi+0x5c>
 801b62c:	2302      	movs	r3, #2
 801b62e:	e048      	b.n	801b6c2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801b630:	693b      	ldr	r3, [r7, #16]
 801b632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	61da      	str	r2, [r3, #28]
 801b638:	e029      	b.n	801b68e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801b63a:	693b      	ldr	r3, [r7, #16]
 801b63c:	895b      	ldrh	r3, [r3, #10]
 801b63e:	025b      	lsls	r3, r3, #9
 801b640:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b642:	e019      	b.n	801b678 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	6979      	ldr	r1, [r7, #20]
 801b648:	4618      	mov	r0, r3
 801b64a:	f7ff fd06 	bl	801b05a <get_fat>
 801b64e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b650:	697b      	ldr	r3, [r7, #20]
 801b652:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b656:	d101      	bne.n	801b65c <dir_sdi+0x88>
 801b658:	2301      	movs	r3, #1
 801b65a:	e032      	b.n	801b6c2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801b65c:	697b      	ldr	r3, [r7, #20]
 801b65e:	2b01      	cmp	r3, #1
 801b660:	d904      	bls.n	801b66c <dir_sdi+0x98>
 801b662:	693b      	ldr	r3, [r7, #16]
 801b664:	699b      	ldr	r3, [r3, #24]
 801b666:	697a      	ldr	r2, [r7, #20]
 801b668:	429a      	cmp	r2, r3
 801b66a:	d301      	bcc.n	801b670 <dir_sdi+0x9c>
 801b66c:	2302      	movs	r3, #2
 801b66e:	e028      	b.n	801b6c2 <dir_sdi+0xee>
			ofs -= csz;
 801b670:	683a      	ldr	r2, [r7, #0]
 801b672:	68fb      	ldr	r3, [r7, #12]
 801b674:	1ad3      	subs	r3, r2, r3
 801b676:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801b678:	683a      	ldr	r2, [r7, #0]
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	429a      	cmp	r2, r3
 801b67e:	d2e1      	bcs.n	801b644 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801b680:	6979      	ldr	r1, [r7, #20]
 801b682:	6938      	ldr	r0, [r7, #16]
 801b684:	f7ff fcca 	bl	801b01c <clust2sect>
 801b688:	4602      	mov	r2, r0
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	697a      	ldr	r2, [r7, #20]
 801b692:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	69db      	ldr	r3, [r3, #28]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d101      	bne.n	801b6a0 <dir_sdi+0xcc>
 801b69c:	2302      	movs	r3, #2
 801b69e:	e010      	b.n	801b6c2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	69da      	ldr	r2, [r3, #28]
 801b6a4:	683b      	ldr	r3, [r7, #0]
 801b6a6:	0a5b      	lsrs	r3, r3, #9
 801b6a8:	441a      	add	r2, r3
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801b6ae:	693b      	ldr	r3, [r7, #16]
 801b6b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b6b4:	683b      	ldr	r3, [r7, #0]
 801b6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b6ba:	441a      	add	r2, r3
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b6c0:	2300      	movs	r3, #0
}
 801b6c2:	4618      	mov	r0, r3
 801b6c4:	3718      	adds	r7, #24
 801b6c6:	46bd      	mov	sp, r7
 801b6c8:	bd80      	pop	{r7, pc}

0801b6ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801b6ca:	b580      	push	{r7, lr}
 801b6cc:	b086      	sub	sp, #24
 801b6ce:	af00      	add	r7, sp, #0
 801b6d0:	6078      	str	r0, [r7, #4]
 801b6d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	695b      	ldr	r3, [r3, #20]
 801b6de:	3320      	adds	r3, #32
 801b6e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	69db      	ldr	r3, [r3, #28]
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d003      	beq.n	801b6f2 <dir_next+0x28>
 801b6ea:	68bb      	ldr	r3, [r7, #8]
 801b6ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801b6f0:	d301      	bcc.n	801b6f6 <dir_next+0x2c>
 801b6f2:	2304      	movs	r3, #4
 801b6f4:	e0aa      	b.n	801b84c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801b6f6:	68bb      	ldr	r3, [r7, #8]
 801b6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	f040 8098 	bne.w	801b832 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	69db      	ldr	r3, [r3, #28]
 801b706:	1c5a      	adds	r2, r3, #1
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	699b      	ldr	r3, [r3, #24]
 801b710:	2b00      	cmp	r3, #0
 801b712:	d10b      	bne.n	801b72c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801b714:	68bb      	ldr	r3, [r7, #8]
 801b716:	095b      	lsrs	r3, r3, #5
 801b718:	68fa      	ldr	r2, [r7, #12]
 801b71a:	8912      	ldrh	r2, [r2, #8]
 801b71c:	4293      	cmp	r3, r2
 801b71e:	f0c0 8088 	bcc.w	801b832 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	2200      	movs	r2, #0
 801b726:	61da      	str	r2, [r3, #28]
 801b728:	2304      	movs	r3, #4
 801b72a:	e08f      	b.n	801b84c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801b72c:	68bb      	ldr	r3, [r7, #8]
 801b72e:	0a5b      	lsrs	r3, r3, #9
 801b730:	68fa      	ldr	r2, [r7, #12]
 801b732:	8952      	ldrh	r2, [r2, #10]
 801b734:	3a01      	subs	r2, #1
 801b736:	4013      	ands	r3, r2
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d17a      	bne.n	801b832 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801b73c:	687a      	ldr	r2, [r7, #4]
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	699b      	ldr	r3, [r3, #24]
 801b742:	4619      	mov	r1, r3
 801b744:	4610      	mov	r0, r2
 801b746:	f7ff fc88 	bl	801b05a <get_fat>
 801b74a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801b74c:	697b      	ldr	r3, [r7, #20]
 801b74e:	2b01      	cmp	r3, #1
 801b750:	d801      	bhi.n	801b756 <dir_next+0x8c>
 801b752:	2302      	movs	r3, #2
 801b754:	e07a      	b.n	801b84c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801b756:	697b      	ldr	r3, [r7, #20]
 801b758:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b75c:	d101      	bne.n	801b762 <dir_next+0x98>
 801b75e:	2301      	movs	r3, #1
 801b760:	e074      	b.n	801b84c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801b762:	68fb      	ldr	r3, [r7, #12]
 801b764:	699b      	ldr	r3, [r3, #24]
 801b766:	697a      	ldr	r2, [r7, #20]
 801b768:	429a      	cmp	r2, r3
 801b76a:	d358      	bcc.n	801b81e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801b76c:	683b      	ldr	r3, [r7, #0]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d104      	bne.n	801b77c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	2200      	movs	r2, #0
 801b776:	61da      	str	r2, [r3, #28]
 801b778:	2304      	movs	r3, #4
 801b77a:	e067      	b.n	801b84c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801b77c:	687a      	ldr	r2, [r7, #4]
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	699b      	ldr	r3, [r3, #24]
 801b782:	4619      	mov	r1, r3
 801b784:	4610      	mov	r0, r2
 801b786:	f7ff fe59 	bl	801b43c <create_chain>
 801b78a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801b78c:	697b      	ldr	r3, [r7, #20]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d101      	bne.n	801b796 <dir_next+0xcc>
 801b792:	2307      	movs	r3, #7
 801b794:	e05a      	b.n	801b84c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801b796:	697b      	ldr	r3, [r7, #20]
 801b798:	2b01      	cmp	r3, #1
 801b79a:	d101      	bne.n	801b7a0 <dir_next+0xd6>
 801b79c:	2302      	movs	r3, #2
 801b79e:	e055      	b.n	801b84c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801b7a0:	697b      	ldr	r3, [r7, #20]
 801b7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b7a6:	d101      	bne.n	801b7ac <dir_next+0xe2>
 801b7a8:	2301      	movs	r3, #1
 801b7aa:	e04f      	b.n	801b84c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801b7ac:	68f8      	ldr	r0, [r7, #12]
 801b7ae:	f7ff fb55 	bl	801ae5c <sync_window>
 801b7b2:	4603      	mov	r3, r0
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d001      	beq.n	801b7bc <dir_next+0xf2>
 801b7b8:	2301      	movs	r3, #1
 801b7ba:	e047      	b.n	801b84c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	3334      	adds	r3, #52	; 0x34
 801b7c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b7c4:	2100      	movs	r1, #0
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	f7ff f94f 	bl	801aa6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	613b      	str	r3, [r7, #16]
 801b7d0:	6979      	ldr	r1, [r7, #20]
 801b7d2:	68f8      	ldr	r0, [r7, #12]
 801b7d4:	f7ff fc22 	bl	801b01c <clust2sect>
 801b7d8:	4602      	mov	r2, r0
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	631a      	str	r2, [r3, #48]	; 0x30
 801b7de:	e012      	b.n	801b806 <dir_next+0x13c>
						fs->wflag = 1;
 801b7e0:	68fb      	ldr	r3, [r7, #12]
 801b7e2:	2201      	movs	r2, #1
 801b7e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801b7e6:	68f8      	ldr	r0, [r7, #12]
 801b7e8:	f7ff fb38 	bl	801ae5c <sync_window>
 801b7ec:	4603      	mov	r3, r0
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d001      	beq.n	801b7f6 <dir_next+0x12c>
 801b7f2:	2301      	movs	r3, #1
 801b7f4:	e02a      	b.n	801b84c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801b7f6:	693b      	ldr	r3, [r7, #16]
 801b7f8:	3301      	adds	r3, #1
 801b7fa:	613b      	str	r3, [r7, #16]
 801b7fc:	68fb      	ldr	r3, [r7, #12]
 801b7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b800:	1c5a      	adds	r2, r3, #1
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	631a      	str	r2, [r3, #48]	; 0x30
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	895b      	ldrh	r3, [r3, #10]
 801b80a:	461a      	mov	r2, r3
 801b80c:	693b      	ldr	r3, [r7, #16]
 801b80e:	4293      	cmp	r3, r2
 801b810:	d3e6      	bcc.n	801b7e0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801b812:	68fb      	ldr	r3, [r7, #12]
 801b814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801b816:	693b      	ldr	r3, [r7, #16]
 801b818:	1ad2      	subs	r2, r2, r3
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	697a      	ldr	r2, [r7, #20]
 801b822:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801b824:	6979      	ldr	r1, [r7, #20]
 801b826:	68f8      	ldr	r0, [r7, #12]
 801b828:	f7ff fbf8 	bl	801b01c <clust2sect>
 801b82c:	4602      	mov	r2, r0
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	68ba      	ldr	r2, [r7, #8]
 801b836:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801b83e:	68bb      	ldr	r3, [r7, #8]
 801b840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b844:	441a      	add	r2, r3
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801b84a:	2300      	movs	r3, #0
}
 801b84c:	4618      	mov	r0, r3
 801b84e:	3718      	adds	r7, #24
 801b850:	46bd      	mov	sp, r7
 801b852:	bd80      	pop	{r7, pc}

0801b854 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801b854:	b580      	push	{r7, lr}
 801b856:	b086      	sub	sp, #24
 801b858:	af00      	add	r7, sp, #0
 801b85a:	6078      	str	r0, [r7, #4]
 801b85c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801b864:	2100      	movs	r1, #0
 801b866:	6878      	ldr	r0, [r7, #4]
 801b868:	f7ff feb4 	bl	801b5d4 <dir_sdi>
 801b86c:	4603      	mov	r3, r0
 801b86e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801b870:	7dfb      	ldrb	r3, [r7, #23]
 801b872:	2b00      	cmp	r3, #0
 801b874:	d12b      	bne.n	801b8ce <dir_alloc+0x7a>
		n = 0;
 801b876:	2300      	movs	r3, #0
 801b878:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	69db      	ldr	r3, [r3, #28]
 801b87e:	4619      	mov	r1, r3
 801b880:	68f8      	ldr	r0, [r7, #12]
 801b882:	f7ff fb2f 	bl	801aee4 <move_window>
 801b886:	4603      	mov	r3, r0
 801b888:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801b88a:	7dfb      	ldrb	r3, [r7, #23]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d11d      	bne.n	801b8cc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	6a1b      	ldr	r3, [r3, #32]
 801b894:	781b      	ldrb	r3, [r3, #0]
 801b896:	2be5      	cmp	r3, #229	; 0xe5
 801b898:	d004      	beq.n	801b8a4 <dir_alloc+0x50>
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	6a1b      	ldr	r3, [r3, #32]
 801b89e:	781b      	ldrb	r3, [r3, #0]
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d107      	bne.n	801b8b4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801b8a4:	693b      	ldr	r3, [r7, #16]
 801b8a6:	3301      	adds	r3, #1
 801b8a8:	613b      	str	r3, [r7, #16]
 801b8aa:	693a      	ldr	r2, [r7, #16]
 801b8ac:	683b      	ldr	r3, [r7, #0]
 801b8ae:	429a      	cmp	r2, r3
 801b8b0:	d102      	bne.n	801b8b8 <dir_alloc+0x64>
 801b8b2:	e00c      	b.n	801b8ce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801b8b4:	2300      	movs	r3, #0
 801b8b6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801b8b8:	2101      	movs	r1, #1
 801b8ba:	6878      	ldr	r0, [r7, #4]
 801b8bc:	f7ff ff05 	bl	801b6ca <dir_next>
 801b8c0:	4603      	mov	r3, r0
 801b8c2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801b8c4:	7dfb      	ldrb	r3, [r7, #23]
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d0d7      	beq.n	801b87a <dir_alloc+0x26>
 801b8ca:	e000      	b.n	801b8ce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801b8cc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801b8ce:	7dfb      	ldrb	r3, [r7, #23]
 801b8d0:	2b04      	cmp	r3, #4
 801b8d2:	d101      	bne.n	801b8d8 <dir_alloc+0x84>
 801b8d4:	2307      	movs	r3, #7
 801b8d6:	75fb      	strb	r3, [r7, #23]
	return res;
 801b8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 801b8da:	4618      	mov	r0, r3
 801b8dc:	3718      	adds	r7, #24
 801b8de:	46bd      	mov	sp, r7
 801b8e0:	bd80      	pop	{r7, pc}

0801b8e2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801b8e2:	b580      	push	{r7, lr}
 801b8e4:	b084      	sub	sp, #16
 801b8e6:	af00      	add	r7, sp, #0
 801b8e8:	6078      	str	r0, [r7, #4]
 801b8ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801b8ec:	683b      	ldr	r3, [r7, #0]
 801b8ee:	331a      	adds	r3, #26
 801b8f0:	4618      	mov	r0, r3
 801b8f2:	f7ff f817 	bl	801a924 <ld_word>
 801b8f6:	4603      	mov	r3, r0
 801b8f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	781b      	ldrb	r3, [r3, #0]
 801b8fe:	2b03      	cmp	r3, #3
 801b900:	d109      	bne.n	801b916 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801b902:	683b      	ldr	r3, [r7, #0]
 801b904:	3314      	adds	r3, #20
 801b906:	4618      	mov	r0, r3
 801b908:	f7ff f80c 	bl	801a924 <ld_word>
 801b90c:	4603      	mov	r3, r0
 801b90e:	041b      	lsls	r3, r3, #16
 801b910:	68fa      	ldr	r2, [r7, #12]
 801b912:	4313      	orrs	r3, r2
 801b914:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801b916:	68fb      	ldr	r3, [r7, #12]
}
 801b918:	4618      	mov	r0, r3
 801b91a:	3710      	adds	r7, #16
 801b91c:	46bd      	mov	sp, r7
 801b91e:	bd80      	pop	{r7, pc}

0801b920 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801b920:	b580      	push	{r7, lr}
 801b922:	b084      	sub	sp, #16
 801b924:	af00      	add	r7, sp, #0
 801b926:	60f8      	str	r0, [r7, #12]
 801b928:	60b9      	str	r1, [r7, #8]
 801b92a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801b92c:	68bb      	ldr	r3, [r7, #8]
 801b92e:	331a      	adds	r3, #26
 801b930:	687a      	ldr	r2, [r7, #4]
 801b932:	b292      	uxth	r2, r2
 801b934:	4611      	mov	r1, r2
 801b936:	4618      	mov	r0, r3
 801b938:	f7ff f82f 	bl	801a99a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801b93c:	68fb      	ldr	r3, [r7, #12]
 801b93e:	781b      	ldrb	r3, [r3, #0]
 801b940:	2b03      	cmp	r3, #3
 801b942:	d109      	bne.n	801b958 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801b944:	68bb      	ldr	r3, [r7, #8]
 801b946:	f103 0214 	add.w	r2, r3, #20
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	0c1b      	lsrs	r3, r3, #16
 801b94e:	b29b      	uxth	r3, r3
 801b950:	4619      	mov	r1, r3
 801b952:	4610      	mov	r0, r2
 801b954:	f7ff f821 	bl	801a99a <st_word>
	}
}
 801b958:	bf00      	nop
 801b95a:	3710      	adds	r7, #16
 801b95c:	46bd      	mov	sp, r7
 801b95e:	bd80      	pop	{r7, pc}

0801b960 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801b960:	b580      	push	{r7, lr}
 801b962:	b086      	sub	sp, #24
 801b964:	af00      	add	r7, sp, #0
 801b966:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801b96e:	2100      	movs	r1, #0
 801b970:	6878      	ldr	r0, [r7, #4]
 801b972:	f7ff fe2f 	bl	801b5d4 <dir_sdi>
 801b976:	4603      	mov	r3, r0
 801b978:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801b97a:	7dfb      	ldrb	r3, [r7, #23]
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d001      	beq.n	801b984 <dir_find+0x24>
 801b980:	7dfb      	ldrb	r3, [r7, #23]
 801b982:	e03e      	b.n	801ba02 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	69db      	ldr	r3, [r3, #28]
 801b988:	4619      	mov	r1, r3
 801b98a:	6938      	ldr	r0, [r7, #16]
 801b98c:	f7ff faaa 	bl	801aee4 <move_window>
 801b990:	4603      	mov	r3, r0
 801b992:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801b994:	7dfb      	ldrb	r3, [r7, #23]
 801b996:	2b00      	cmp	r3, #0
 801b998:	d12f      	bne.n	801b9fa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	6a1b      	ldr	r3, [r3, #32]
 801b99e:	781b      	ldrb	r3, [r3, #0]
 801b9a0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801b9a2:	7bfb      	ldrb	r3, [r7, #15]
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d102      	bne.n	801b9ae <dir_find+0x4e>
 801b9a8:	2304      	movs	r3, #4
 801b9aa:	75fb      	strb	r3, [r7, #23]
 801b9ac:	e028      	b.n	801ba00 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	6a1b      	ldr	r3, [r3, #32]
 801b9b2:	330b      	adds	r3, #11
 801b9b4:	781b      	ldrb	r3, [r3, #0]
 801b9b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b9ba:	b2da      	uxtb	r2, r3
 801b9bc:	687b      	ldr	r3, [r7, #4]
 801b9be:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	6a1b      	ldr	r3, [r3, #32]
 801b9c4:	330b      	adds	r3, #11
 801b9c6:	781b      	ldrb	r3, [r3, #0]
 801b9c8:	f003 0308 	and.w	r3, r3, #8
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d10a      	bne.n	801b9e6 <dir_find+0x86>
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	6a18      	ldr	r0, [r3, #32]
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	3324      	adds	r3, #36	; 0x24
 801b9d8:	220b      	movs	r2, #11
 801b9da:	4619      	mov	r1, r3
 801b9dc:	f7ff f85f 	bl	801aa9e <mem_cmp>
 801b9e0:	4603      	mov	r3, r0
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d00b      	beq.n	801b9fe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801b9e6:	2100      	movs	r1, #0
 801b9e8:	6878      	ldr	r0, [r7, #4]
 801b9ea:	f7ff fe6e 	bl	801b6ca <dir_next>
 801b9ee:	4603      	mov	r3, r0
 801b9f0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801b9f2:	7dfb      	ldrb	r3, [r7, #23]
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d0c5      	beq.n	801b984 <dir_find+0x24>
 801b9f8:	e002      	b.n	801ba00 <dir_find+0xa0>
		if (res != FR_OK) break;
 801b9fa:	bf00      	nop
 801b9fc:	e000      	b.n	801ba00 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801b9fe:	bf00      	nop

	return res;
 801ba00:	7dfb      	ldrb	r3, [r7, #23]
}
 801ba02:	4618      	mov	r0, r3
 801ba04:	3718      	adds	r7, #24
 801ba06:	46bd      	mov	sp, r7
 801ba08:	bd80      	pop	{r7, pc}

0801ba0a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801ba0a:	b580      	push	{r7, lr}
 801ba0c:	b084      	sub	sp, #16
 801ba0e:	af00      	add	r7, sp, #0
 801ba10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801ba18:	2101      	movs	r1, #1
 801ba1a:	6878      	ldr	r0, [r7, #4]
 801ba1c:	f7ff ff1a 	bl	801b854 <dir_alloc>
 801ba20:	4603      	mov	r3, r0
 801ba22:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801ba24:	7bfb      	ldrb	r3, [r7, #15]
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d11c      	bne.n	801ba64 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	69db      	ldr	r3, [r3, #28]
 801ba2e:	4619      	mov	r1, r3
 801ba30:	68b8      	ldr	r0, [r7, #8]
 801ba32:	f7ff fa57 	bl	801aee4 <move_window>
 801ba36:	4603      	mov	r3, r0
 801ba38:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801ba3a:	7bfb      	ldrb	r3, [r7, #15]
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d111      	bne.n	801ba64 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	6a1b      	ldr	r3, [r3, #32]
 801ba44:	2220      	movs	r2, #32
 801ba46:	2100      	movs	r1, #0
 801ba48:	4618      	mov	r0, r3
 801ba4a:	f7ff f80e 	bl	801aa6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	6a18      	ldr	r0, [r3, #32]
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	3324      	adds	r3, #36	; 0x24
 801ba56:	220b      	movs	r2, #11
 801ba58:	4619      	mov	r1, r3
 801ba5a:	f7fe ffe5 	bl	801aa28 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801ba5e:	68bb      	ldr	r3, [r7, #8]
 801ba60:	2201      	movs	r2, #1
 801ba62:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801ba64:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba66:	4618      	mov	r0, r3
 801ba68:	3710      	adds	r7, #16
 801ba6a:	46bd      	mov	sp, r7
 801ba6c:	bd80      	pop	{r7, pc}
	...

0801ba70 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801ba70:	b580      	push	{r7, lr}
 801ba72:	b088      	sub	sp, #32
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	6078      	str	r0, [r7, #4]
 801ba78:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801ba7a:	683b      	ldr	r3, [r7, #0]
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	60fb      	str	r3, [r7, #12]
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	3324      	adds	r3, #36	; 0x24
 801ba84:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801ba86:	220b      	movs	r2, #11
 801ba88:	2120      	movs	r1, #32
 801ba8a:	68b8      	ldr	r0, [r7, #8]
 801ba8c:	f7fe ffed 	bl	801aa6a <mem_set>
	si = i = 0; ni = 8;
 801ba90:	2300      	movs	r3, #0
 801ba92:	613b      	str	r3, [r7, #16]
 801ba94:	693b      	ldr	r3, [r7, #16]
 801ba96:	617b      	str	r3, [r7, #20]
 801ba98:	2308      	movs	r3, #8
 801ba9a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801ba9c:	697b      	ldr	r3, [r7, #20]
 801ba9e:	1c5a      	adds	r2, r3, #1
 801baa0:	617a      	str	r2, [r7, #20]
 801baa2:	68fa      	ldr	r2, [r7, #12]
 801baa4:	4413      	add	r3, r2
 801baa6:	781b      	ldrb	r3, [r3, #0]
 801baa8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801baaa:	7ffb      	ldrb	r3, [r7, #31]
 801baac:	2b20      	cmp	r3, #32
 801baae:	d94e      	bls.n	801bb4e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801bab0:	7ffb      	ldrb	r3, [r7, #31]
 801bab2:	2b2f      	cmp	r3, #47	; 0x2f
 801bab4:	d006      	beq.n	801bac4 <create_name+0x54>
 801bab6:	7ffb      	ldrb	r3, [r7, #31]
 801bab8:	2b5c      	cmp	r3, #92	; 0x5c
 801baba:	d110      	bne.n	801bade <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801babc:	e002      	b.n	801bac4 <create_name+0x54>
 801babe:	697b      	ldr	r3, [r7, #20]
 801bac0:	3301      	adds	r3, #1
 801bac2:	617b      	str	r3, [r7, #20]
 801bac4:	68fa      	ldr	r2, [r7, #12]
 801bac6:	697b      	ldr	r3, [r7, #20]
 801bac8:	4413      	add	r3, r2
 801baca:	781b      	ldrb	r3, [r3, #0]
 801bacc:	2b2f      	cmp	r3, #47	; 0x2f
 801bace:	d0f6      	beq.n	801babe <create_name+0x4e>
 801bad0:	68fa      	ldr	r2, [r7, #12]
 801bad2:	697b      	ldr	r3, [r7, #20]
 801bad4:	4413      	add	r3, r2
 801bad6:	781b      	ldrb	r3, [r3, #0]
 801bad8:	2b5c      	cmp	r3, #92	; 0x5c
 801bada:	d0f0      	beq.n	801babe <create_name+0x4e>
			break;
 801badc:	e038      	b.n	801bb50 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801bade:	7ffb      	ldrb	r3, [r7, #31]
 801bae0:	2b2e      	cmp	r3, #46	; 0x2e
 801bae2:	d003      	beq.n	801baec <create_name+0x7c>
 801bae4:	693a      	ldr	r2, [r7, #16]
 801bae6:	69bb      	ldr	r3, [r7, #24]
 801bae8:	429a      	cmp	r2, r3
 801baea:	d30c      	bcc.n	801bb06 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801baec:	69bb      	ldr	r3, [r7, #24]
 801baee:	2b0b      	cmp	r3, #11
 801baf0:	d002      	beq.n	801baf8 <create_name+0x88>
 801baf2:	7ffb      	ldrb	r3, [r7, #31]
 801baf4:	2b2e      	cmp	r3, #46	; 0x2e
 801baf6:	d001      	beq.n	801bafc <create_name+0x8c>
 801baf8:	2306      	movs	r3, #6
 801bafa:	e044      	b.n	801bb86 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801bafc:	2308      	movs	r3, #8
 801bafe:	613b      	str	r3, [r7, #16]
 801bb00:	230b      	movs	r3, #11
 801bb02:	61bb      	str	r3, [r7, #24]
			continue;
 801bb04:	e022      	b.n	801bb4c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801bb06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801bb0a:	2b00      	cmp	r3, #0
 801bb0c:	da04      	bge.n	801bb18 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801bb0e:	7ffb      	ldrb	r3, [r7, #31]
 801bb10:	3b80      	subs	r3, #128	; 0x80
 801bb12:	4a1f      	ldr	r2, [pc, #124]	; (801bb90 <create_name+0x120>)
 801bb14:	5cd3      	ldrb	r3, [r2, r3]
 801bb16:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801bb18:	7ffb      	ldrb	r3, [r7, #31]
 801bb1a:	4619      	mov	r1, r3
 801bb1c:	481d      	ldr	r0, [pc, #116]	; (801bb94 <create_name+0x124>)
 801bb1e:	f7fe ffe5 	bl	801aaec <chk_chr>
 801bb22:	4603      	mov	r3, r0
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d001      	beq.n	801bb2c <create_name+0xbc>
 801bb28:	2306      	movs	r3, #6
 801bb2a:	e02c      	b.n	801bb86 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801bb2c:	7ffb      	ldrb	r3, [r7, #31]
 801bb2e:	2b60      	cmp	r3, #96	; 0x60
 801bb30:	d905      	bls.n	801bb3e <create_name+0xce>
 801bb32:	7ffb      	ldrb	r3, [r7, #31]
 801bb34:	2b7a      	cmp	r3, #122	; 0x7a
 801bb36:	d802      	bhi.n	801bb3e <create_name+0xce>
 801bb38:	7ffb      	ldrb	r3, [r7, #31]
 801bb3a:	3b20      	subs	r3, #32
 801bb3c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801bb3e:	693b      	ldr	r3, [r7, #16]
 801bb40:	1c5a      	adds	r2, r3, #1
 801bb42:	613a      	str	r2, [r7, #16]
 801bb44:	68ba      	ldr	r2, [r7, #8]
 801bb46:	4413      	add	r3, r2
 801bb48:	7ffa      	ldrb	r2, [r7, #31]
 801bb4a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801bb4c:	e7a6      	b.n	801ba9c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801bb4e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801bb50:	68fa      	ldr	r2, [r7, #12]
 801bb52:	697b      	ldr	r3, [r7, #20]
 801bb54:	441a      	add	r2, r3
 801bb56:	683b      	ldr	r3, [r7, #0]
 801bb58:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801bb5a:	693b      	ldr	r3, [r7, #16]
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d101      	bne.n	801bb64 <create_name+0xf4>
 801bb60:	2306      	movs	r3, #6
 801bb62:	e010      	b.n	801bb86 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801bb64:	68bb      	ldr	r3, [r7, #8]
 801bb66:	781b      	ldrb	r3, [r3, #0]
 801bb68:	2be5      	cmp	r3, #229	; 0xe5
 801bb6a:	d102      	bne.n	801bb72 <create_name+0x102>
 801bb6c:	68bb      	ldr	r3, [r7, #8]
 801bb6e:	2205      	movs	r2, #5
 801bb70:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801bb72:	7ffb      	ldrb	r3, [r7, #31]
 801bb74:	2b20      	cmp	r3, #32
 801bb76:	d801      	bhi.n	801bb7c <create_name+0x10c>
 801bb78:	2204      	movs	r2, #4
 801bb7a:	e000      	b.n	801bb7e <create_name+0x10e>
 801bb7c:	2200      	movs	r2, #0
 801bb7e:	68bb      	ldr	r3, [r7, #8]
 801bb80:	330b      	adds	r3, #11
 801bb82:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801bb84:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801bb86:	4618      	mov	r0, r3
 801bb88:	3720      	adds	r7, #32
 801bb8a:	46bd      	mov	sp, r7
 801bb8c:	bd80      	pop	{r7, pc}
 801bb8e:	bf00      	nop
 801bb90:	08023bc4 	.word	0x08023bc4
 801bb94:	08023490 	.word	0x08023490

0801bb98 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801bb98:	b580      	push	{r7, lr}
 801bb9a:	b086      	sub	sp, #24
 801bb9c:	af00      	add	r7, sp, #0
 801bb9e:	6078      	str	r0, [r7, #4]
 801bba0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801bba6:	693b      	ldr	r3, [r7, #16]
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801bbac:	e002      	b.n	801bbb4 <follow_path+0x1c>
 801bbae:	683b      	ldr	r3, [r7, #0]
 801bbb0:	3301      	adds	r3, #1
 801bbb2:	603b      	str	r3, [r7, #0]
 801bbb4:	683b      	ldr	r3, [r7, #0]
 801bbb6:	781b      	ldrb	r3, [r3, #0]
 801bbb8:	2b2f      	cmp	r3, #47	; 0x2f
 801bbba:	d0f8      	beq.n	801bbae <follow_path+0x16>
 801bbbc:	683b      	ldr	r3, [r7, #0]
 801bbbe:	781b      	ldrb	r3, [r3, #0]
 801bbc0:	2b5c      	cmp	r3, #92	; 0x5c
 801bbc2:	d0f4      	beq.n	801bbae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801bbc4:	693b      	ldr	r3, [r7, #16]
 801bbc6:	2200      	movs	r2, #0
 801bbc8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801bbca:	683b      	ldr	r3, [r7, #0]
 801bbcc:	781b      	ldrb	r3, [r3, #0]
 801bbce:	2b1f      	cmp	r3, #31
 801bbd0:	d80a      	bhi.n	801bbe8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	2280      	movs	r2, #128	; 0x80
 801bbd6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801bbda:	2100      	movs	r1, #0
 801bbdc:	6878      	ldr	r0, [r7, #4]
 801bbde:	f7ff fcf9 	bl	801b5d4 <dir_sdi>
 801bbe2:	4603      	mov	r3, r0
 801bbe4:	75fb      	strb	r3, [r7, #23]
 801bbe6:	e043      	b.n	801bc70 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801bbe8:	463b      	mov	r3, r7
 801bbea:	4619      	mov	r1, r3
 801bbec:	6878      	ldr	r0, [r7, #4]
 801bbee:	f7ff ff3f 	bl	801ba70 <create_name>
 801bbf2:	4603      	mov	r3, r0
 801bbf4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801bbf6:	7dfb      	ldrb	r3, [r7, #23]
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d134      	bne.n	801bc66 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801bbfc:	6878      	ldr	r0, [r7, #4]
 801bbfe:	f7ff feaf 	bl	801b960 <dir_find>
 801bc02:	4603      	mov	r3, r0
 801bc04:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801bc0c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801bc0e:	7dfb      	ldrb	r3, [r7, #23]
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d00a      	beq.n	801bc2a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801bc14:	7dfb      	ldrb	r3, [r7, #23]
 801bc16:	2b04      	cmp	r3, #4
 801bc18:	d127      	bne.n	801bc6a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801bc1a:	7afb      	ldrb	r3, [r7, #11]
 801bc1c:	f003 0304 	and.w	r3, r3, #4
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	d122      	bne.n	801bc6a <follow_path+0xd2>
 801bc24:	2305      	movs	r3, #5
 801bc26:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801bc28:	e01f      	b.n	801bc6a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801bc2a:	7afb      	ldrb	r3, [r7, #11]
 801bc2c:	f003 0304 	and.w	r3, r3, #4
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d11c      	bne.n	801bc6e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801bc34:	693b      	ldr	r3, [r7, #16]
 801bc36:	799b      	ldrb	r3, [r3, #6]
 801bc38:	f003 0310 	and.w	r3, r3, #16
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d102      	bne.n	801bc46 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801bc40:	2305      	movs	r3, #5
 801bc42:	75fb      	strb	r3, [r7, #23]
 801bc44:	e014      	b.n	801bc70 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801bc46:	68fb      	ldr	r3, [r7, #12]
 801bc48:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	695b      	ldr	r3, [r3, #20]
 801bc50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bc54:	4413      	add	r3, r2
 801bc56:	4619      	mov	r1, r3
 801bc58:	68f8      	ldr	r0, [r7, #12]
 801bc5a:	f7ff fe42 	bl	801b8e2 <ld_clust>
 801bc5e:	4602      	mov	r2, r0
 801bc60:	693b      	ldr	r3, [r7, #16]
 801bc62:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801bc64:	e7c0      	b.n	801bbe8 <follow_path+0x50>
			if (res != FR_OK) break;
 801bc66:	bf00      	nop
 801bc68:	e002      	b.n	801bc70 <follow_path+0xd8>
				break;
 801bc6a:	bf00      	nop
 801bc6c:	e000      	b.n	801bc70 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801bc6e:	bf00      	nop
			}
		}
	}

	return res;
 801bc70:	7dfb      	ldrb	r3, [r7, #23]
}
 801bc72:	4618      	mov	r0, r3
 801bc74:	3718      	adds	r7, #24
 801bc76:	46bd      	mov	sp, r7
 801bc78:	bd80      	pop	{r7, pc}

0801bc7a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801bc7a:	b480      	push	{r7}
 801bc7c:	b087      	sub	sp, #28
 801bc7e:	af00      	add	r7, sp, #0
 801bc80:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801bc82:	f04f 33ff 	mov.w	r3, #4294967295
 801bc86:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d031      	beq.n	801bcf4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	617b      	str	r3, [r7, #20]
 801bc96:	e002      	b.n	801bc9e <get_ldnumber+0x24>
 801bc98:	697b      	ldr	r3, [r7, #20]
 801bc9a:	3301      	adds	r3, #1
 801bc9c:	617b      	str	r3, [r7, #20]
 801bc9e:	697b      	ldr	r3, [r7, #20]
 801bca0:	781b      	ldrb	r3, [r3, #0]
 801bca2:	2b20      	cmp	r3, #32
 801bca4:	d903      	bls.n	801bcae <get_ldnumber+0x34>
 801bca6:	697b      	ldr	r3, [r7, #20]
 801bca8:	781b      	ldrb	r3, [r3, #0]
 801bcaa:	2b3a      	cmp	r3, #58	; 0x3a
 801bcac:	d1f4      	bne.n	801bc98 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801bcae:	697b      	ldr	r3, [r7, #20]
 801bcb0:	781b      	ldrb	r3, [r3, #0]
 801bcb2:	2b3a      	cmp	r3, #58	; 0x3a
 801bcb4:	d11c      	bne.n	801bcf0 <get_ldnumber+0x76>
			tp = *path;
 801bcb6:	687b      	ldr	r3, [r7, #4]
 801bcb8:	681b      	ldr	r3, [r3, #0]
 801bcba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	1c5a      	adds	r2, r3, #1
 801bcc0:	60fa      	str	r2, [r7, #12]
 801bcc2:	781b      	ldrb	r3, [r3, #0]
 801bcc4:	3b30      	subs	r3, #48	; 0x30
 801bcc6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801bcc8:	68bb      	ldr	r3, [r7, #8]
 801bcca:	2b09      	cmp	r3, #9
 801bccc:	d80e      	bhi.n	801bcec <get_ldnumber+0x72>
 801bcce:	68fa      	ldr	r2, [r7, #12]
 801bcd0:	697b      	ldr	r3, [r7, #20]
 801bcd2:	429a      	cmp	r2, r3
 801bcd4:	d10a      	bne.n	801bcec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801bcd6:	68bb      	ldr	r3, [r7, #8]
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	d107      	bne.n	801bcec <get_ldnumber+0x72>
					vol = (int)i;
 801bcdc:	68bb      	ldr	r3, [r7, #8]
 801bcde:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801bce0:	697b      	ldr	r3, [r7, #20]
 801bce2:	3301      	adds	r3, #1
 801bce4:	617b      	str	r3, [r7, #20]
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	697a      	ldr	r2, [r7, #20]
 801bcea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801bcec:	693b      	ldr	r3, [r7, #16]
 801bcee:	e002      	b.n	801bcf6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801bcf4:	693b      	ldr	r3, [r7, #16]
}
 801bcf6:	4618      	mov	r0, r3
 801bcf8:	371c      	adds	r7, #28
 801bcfa:	46bd      	mov	sp, r7
 801bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd00:	4770      	bx	lr
	...

0801bd04 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801bd04:	b580      	push	{r7, lr}
 801bd06:	b082      	sub	sp, #8
 801bd08:	af00      	add	r7, sp, #0
 801bd0a:	6078      	str	r0, [r7, #4]
 801bd0c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	2200      	movs	r2, #0
 801bd12:	70da      	strb	r2, [r3, #3]
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	f04f 32ff 	mov.w	r2, #4294967295
 801bd1a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801bd1c:	6839      	ldr	r1, [r7, #0]
 801bd1e:	6878      	ldr	r0, [r7, #4]
 801bd20:	f7ff f8e0 	bl	801aee4 <move_window>
 801bd24:	4603      	mov	r3, r0
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d001      	beq.n	801bd2e <check_fs+0x2a>
 801bd2a:	2304      	movs	r3, #4
 801bd2c:	e038      	b.n	801bda0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	3334      	adds	r3, #52	; 0x34
 801bd32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801bd36:	4618      	mov	r0, r3
 801bd38:	f7fe fdf4 	bl	801a924 <ld_word>
 801bd3c:	4603      	mov	r3, r0
 801bd3e:	461a      	mov	r2, r3
 801bd40:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801bd44:	429a      	cmp	r2, r3
 801bd46:	d001      	beq.n	801bd4c <check_fs+0x48>
 801bd48:	2303      	movs	r3, #3
 801bd4a:	e029      	b.n	801bda0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bd52:	2be9      	cmp	r3, #233	; 0xe9
 801bd54:	d009      	beq.n	801bd6a <check_fs+0x66>
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801bd5c:	2beb      	cmp	r3, #235	; 0xeb
 801bd5e:	d11e      	bne.n	801bd9e <check_fs+0x9a>
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801bd66:	2b90      	cmp	r3, #144	; 0x90
 801bd68:	d119      	bne.n	801bd9e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	3334      	adds	r3, #52	; 0x34
 801bd6e:	3336      	adds	r3, #54	; 0x36
 801bd70:	4618      	mov	r0, r3
 801bd72:	f7fe fdef 	bl	801a954 <ld_dword>
 801bd76:	4603      	mov	r3, r0
 801bd78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801bd7c:	4a0a      	ldr	r2, [pc, #40]	; (801bda8 <check_fs+0xa4>)
 801bd7e:	4293      	cmp	r3, r2
 801bd80:	d101      	bne.n	801bd86 <check_fs+0x82>
 801bd82:	2300      	movs	r3, #0
 801bd84:	e00c      	b.n	801bda0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	3334      	adds	r3, #52	; 0x34
 801bd8a:	3352      	adds	r3, #82	; 0x52
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	f7fe fde1 	bl	801a954 <ld_dword>
 801bd92:	4602      	mov	r2, r0
 801bd94:	4b05      	ldr	r3, [pc, #20]	; (801bdac <check_fs+0xa8>)
 801bd96:	429a      	cmp	r2, r3
 801bd98:	d101      	bne.n	801bd9e <check_fs+0x9a>
 801bd9a:	2300      	movs	r3, #0
 801bd9c:	e000      	b.n	801bda0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801bd9e:	2302      	movs	r3, #2
}
 801bda0:	4618      	mov	r0, r3
 801bda2:	3708      	adds	r7, #8
 801bda4:	46bd      	mov	sp, r7
 801bda6:	bd80      	pop	{r7, pc}
 801bda8:	00544146 	.word	0x00544146
 801bdac:	33544146 	.word	0x33544146

0801bdb0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801bdb0:	b580      	push	{r7, lr}
 801bdb2:	b096      	sub	sp, #88	; 0x58
 801bdb4:	af00      	add	r7, sp, #0
 801bdb6:	60f8      	str	r0, [r7, #12]
 801bdb8:	60b9      	str	r1, [r7, #8]
 801bdba:	4613      	mov	r3, r2
 801bdbc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801bdbe:	68bb      	ldr	r3, [r7, #8]
 801bdc0:	2200      	movs	r2, #0
 801bdc2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801bdc4:	68f8      	ldr	r0, [r7, #12]
 801bdc6:	f7ff ff58 	bl	801bc7a <get_ldnumber>
 801bdca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801bdcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	da01      	bge.n	801bdd6 <find_volume+0x26>
 801bdd2:	230b      	movs	r3, #11
 801bdd4:	e236      	b.n	801c244 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801bdd6:	4aac      	ldr	r2, [pc, #688]	; (801c088 <find_volume+0x2d8>)
 801bdd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bdda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bdde:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801bde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	d101      	bne.n	801bdea <find_volume+0x3a>
 801bde6:	230c      	movs	r3, #12
 801bde8:	e22c      	b.n	801c244 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 801bdea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801bdec:	f7fe fe99 	bl	801ab22 <lock_fs>
 801bdf0:	4603      	mov	r3, r0
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d101      	bne.n	801bdfa <find_volume+0x4a>
 801bdf6:	230f      	movs	r3, #15
 801bdf8:	e224      	b.n	801c244 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 801bdfa:	68bb      	ldr	r3, [r7, #8]
 801bdfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bdfe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801be00:	79fb      	ldrb	r3, [r7, #7]
 801be02:	f023 0301 	bic.w	r3, r3, #1
 801be06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801be08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be0a:	781b      	ldrb	r3, [r3, #0]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d01a      	beq.n	801be46 <find_volume+0x96>
		stat = disk_status(fs->drv);
 801be10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be12:	785b      	ldrb	r3, [r3, #1]
 801be14:	4618      	mov	r0, r3
 801be16:	f7fe fce7 	bl	801a7e8 <disk_status>
 801be1a:	4603      	mov	r3, r0
 801be1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801be20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801be24:	f003 0301 	and.w	r3, r3, #1
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d10c      	bne.n	801be46 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801be2c:	79fb      	ldrb	r3, [r7, #7]
 801be2e:	2b00      	cmp	r3, #0
 801be30:	d007      	beq.n	801be42 <find_volume+0x92>
 801be32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801be36:	f003 0304 	and.w	r3, r3, #4
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d001      	beq.n	801be42 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801be3e:	230a      	movs	r3, #10
 801be40:	e200      	b.n	801c244 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 801be42:	2300      	movs	r3, #0
 801be44:	e1fe      	b.n	801c244 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801be46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be48:	2200      	movs	r2, #0
 801be4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801be4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801be4e:	b2da      	uxtb	r2, r3
 801be50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801be54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be56:	785b      	ldrb	r3, [r3, #1]
 801be58:	4618      	mov	r0, r3
 801be5a:	f7fe fcdf 	bl	801a81c <disk_initialize>
 801be5e:	4603      	mov	r3, r0
 801be60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801be64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801be68:	f003 0301 	and.w	r3, r3, #1
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d001      	beq.n	801be74 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801be70:	2303      	movs	r3, #3
 801be72:	e1e7      	b.n	801c244 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801be74:	79fb      	ldrb	r3, [r7, #7]
 801be76:	2b00      	cmp	r3, #0
 801be78:	d007      	beq.n	801be8a <find_volume+0xda>
 801be7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801be7e:	f003 0304 	and.w	r3, r3, #4
 801be82:	2b00      	cmp	r3, #0
 801be84:	d001      	beq.n	801be8a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801be86:	230a      	movs	r3, #10
 801be88:	e1dc      	b.n	801c244 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801be8a:	2300      	movs	r3, #0
 801be8c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801be8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801be90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801be92:	f7ff ff37 	bl	801bd04 <check_fs>
 801be96:	4603      	mov	r3, r0
 801be98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801be9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bea0:	2b02      	cmp	r3, #2
 801bea2:	d14b      	bne.n	801bf3c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801bea4:	2300      	movs	r3, #0
 801bea6:	643b      	str	r3, [r7, #64]	; 0x40
 801bea8:	e01f      	b.n	801beea <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801beaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801beac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801beb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801beb2:	011b      	lsls	r3, r3, #4
 801beb4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801beb8:	4413      	add	r3, r2
 801beba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801bebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bebe:	3304      	adds	r3, #4
 801bec0:	781b      	ldrb	r3, [r3, #0]
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d006      	beq.n	801bed4 <find_volume+0x124>
 801bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bec8:	3308      	adds	r3, #8
 801beca:	4618      	mov	r0, r3
 801becc:	f7fe fd42 	bl	801a954 <ld_dword>
 801bed0:	4602      	mov	r2, r0
 801bed2:	e000      	b.n	801bed6 <find_volume+0x126>
 801bed4:	2200      	movs	r2, #0
 801bed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bed8:	009b      	lsls	r3, r3, #2
 801beda:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801bede:	440b      	add	r3, r1
 801bee0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801bee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bee6:	3301      	adds	r3, #1
 801bee8:	643b      	str	r3, [r7, #64]	; 0x40
 801beea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801beec:	2b03      	cmp	r3, #3
 801beee:	d9dc      	bls.n	801beaa <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801bef0:	2300      	movs	r3, #0
 801bef2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801bef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d002      	beq.n	801bf00 <find_volume+0x150>
 801befa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801befc:	3b01      	subs	r3, #1
 801befe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801bf00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf02:	009b      	lsls	r3, r3, #2
 801bf04:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801bf08:	4413      	add	r3, r2
 801bf0a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801bf0e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801bf10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	d005      	beq.n	801bf22 <find_volume+0x172>
 801bf16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801bf18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801bf1a:	f7ff fef3 	bl	801bd04 <check_fs>
 801bf1e:	4603      	mov	r3, r0
 801bf20:	e000      	b.n	801bf24 <find_volume+0x174>
 801bf22:	2303      	movs	r3, #3
 801bf24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801bf28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bf2c:	2b01      	cmp	r3, #1
 801bf2e:	d905      	bls.n	801bf3c <find_volume+0x18c>
 801bf30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf32:	3301      	adds	r3, #1
 801bf34:	643b      	str	r3, [r7, #64]	; 0x40
 801bf36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf38:	2b03      	cmp	r3, #3
 801bf3a:	d9e1      	bls.n	801bf00 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801bf3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bf40:	2b04      	cmp	r3, #4
 801bf42:	d101      	bne.n	801bf48 <find_volume+0x198>
 801bf44:	2301      	movs	r3, #1
 801bf46:	e17d      	b.n	801c244 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801bf48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801bf4c:	2b01      	cmp	r3, #1
 801bf4e:	d901      	bls.n	801bf54 <find_volume+0x1a4>
 801bf50:	230d      	movs	r3, #13
 801bf52:	e177      	b.n	801c244 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801bf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf56:	3334      	adds	r3, #52	; 0x34
 801bf58:	330b      	adds	r3, #11
 801bf5a:	4618      	mov	r0, r3
 801bf5c:	f7fe fce2 	bl	801a924 <ld_word>
 801bf60:	4603      	mov	r3, r0
 801bf62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bf66:	d001      	beq.n	801bf6c <find_volume+0x1bc>
 801bf68:	230d      	movs	r3, #13
 801bf6a:	e16b      	b.n	801c244 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801bf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf6e:	3334      	adds	r3, #52	; 0x34
 801bf70:	3316      	adds	r3, #22
 801bf72:	4618      	mov	r0, r3
 801bf74:	f7fe fcd6 	bl	801a924 <ld_word>
 801bf78:	4603      	mov	r3, r0
 801bf7a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801bf7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d106      	bne.n	801bf90 <find_volume+0x1e0>
 801bf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf84:	3334      	adds	r3, #52	; 0x34
 801bf86:	3324      	adds	r3, #36	; 0x24
 801bf88:	4618      	mov	r0, r3
 801bf8a:	f7fe fce3 	bl	801a954 <ld_dword>
 801bf8e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801bf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801bf94:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801bf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf98:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801bf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf9e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801bfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfa2:	789b      	ldrb	r3, [r3, #2]
 801bfa4:	2b01      	cmp	r3, #1
 801bfa6:	d005      	beq.n	801bfb4 <find_volume+0x204>
 801bfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfaa:	789b      	ldrb	r3, [r3, #2]
 801bfac:	2b02      	cmp	r3, #2
 801bfae:	d001      	beq.n	801bfb4 <find_volume+0x204>
 801bfb0:	230d      	movs	r3, #13
 801bfb2:	e147      	b.n	801c244 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801bfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfb6:	789b      	ldrb	r3, [r3, #2]
 801bfb8:	461a      	mov	r2, r3
 801bfba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfbc:	fb02 f303 	mul.w	r3, r2, r3
 801bfc0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801bfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801bfc8:	b29a      	uxth	r2, r3
 801bfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfcc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801bfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfd0:	895b      	ldrh	r3, [r3, #10]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d008      	beq.n	801bfe8 <find_volume+0x238>
 801bfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfd8:	895b      	ldrh	r3, [r3, #10]
 801bfda:	461a      	mov	r2, r3
 801bfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfde:	895b      	ldrh	r3, [r3, #10]
 801bfe0:	3b01      	subs	r3, #1
 801bfe2:	4013      	ands	r3, r2
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d001      	beq.n	801bfec <find_volume+0x23c>
 801bfe8:	230d      	movs	r3, #13
 801bfea:	e12b      	b.n	801c244 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801bfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfee:	3334      	adds	r3, #52	; 0x34
 801bff0:	3311      	adds	r3, #17
 801bff2:	4618      	mov	r0, r3
 801bff4:	f7fe fc96 	bl	801a924 <ld_word>
 801bff8:	4603      	mov	r3, r0
 801bffa:	461a      	mov	r2, r3
 801bffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bffe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801c000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c002:	891b      	ldrh	r3, [r3, #8]
 801c004:	f003 030f 	and.w	r3, r3, #15
 801c008:	b29b      	uxth	r3, r3
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d001      	beq.n	801c012 <find_volume+0x262>
 801c00e:	230d      	movs	r3, #13
 801c010:	e118      	b.n	801c244 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801c012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c014:	3334      	adds	r3, #52	; 0x34
 801c016:	3313      	adds	r3, #19
 801c018:	4618      	mov	r0, r3
 801c01a:	f7fe fc83 	bl	801a924 <ld_word>
 801c01e:	4603      	mov	r3, r0
 801c020:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801c022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c024:	2b00      	cmp	r3, #0
 801c026:	d106      	bne.n	801c036 <find_volume+0x286>
 801c028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c02a:	3334      	adds	r3, #52	; 0x34
 801c02c:	3320      	adds	r3, #32
 801c02e:	4618      	mov	r0, r3
 801c030:	f7fe fc90 	bl	801a954 <ld_dword>
 801c034:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801c036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c038:	3334      	adds	r3, #52	; 0x34
 801c03a:	330e      	adds	r3, #14
 801c03c:	4618      	mov	r0, r3
 801c03e:	f7fe fc71 	bl	801a924 <ld_word>
 801c042:	4603      	mov	r3, r0
 801c044:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801c046:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d101      	bne.n	801c050 <find_volume+0x2a0>
 801c04c:	230d      	movs	r3, #13
 801c04e:	e0f9      	b.n	801c244 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801c050:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c054:	4413      	add	r3, r2
 801c056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c058:	8912      	ldrh	r2, [r2, #8]
 801c05a:	0912      	lsrs	r2, r2, #4
 801c05c:	b292      	uxth	r2, r2
 801c05e:	4413      	add	r3, r2
 801c060:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801c062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c066:	429a      	cmp	r2, r3
 801c068:	d201      	bcs.n	801c06e <find_volume+0x2be>
 801c06a:	230d      	movs	r3, #13
 801c06c:	e0ea      	b.n	801c244 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801c06e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c072:	1ad3      	subs	r3, r2, r3
 801c074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c076:	8952      	ldrh	r2, [r2, #10]
 801c078:	fbb3 f3f2 	udiv	r3, r3, r2
 801c07c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801c07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c080:	2b00      	cmp	r3, #0
 801c082:	d103      	bne.n	801c08c <find_volume+0x2dc>
 801c084:	230d      	movs	r3, #13
 801c086:	e0dd      	b.n	801c244 <find_volume+0x494>
 801c088:	24000a40 	.word	0x24000a40
		fmt = FS_FAT32;
 801c08c:	2303      	movs	r3, #3
 801c08e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801c092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c094:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801c098:	4293      	cmp	r3, r2
 801c09a:	d802      	bhi.n	801c0a2 <find_volume+0x2f2>
 801c09c:	2302      	movs	r3, #2
 801c09e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801c0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0a4:	f640 72f5 	movw	r2, #4085	; 0xff5
 801c0a8:	4293      	cmp	r3, r2
 801c0aa:	d802      	bhi.n	801c0b2 <find_volume+0x302>
 801c0ac:	2301      	movs	r3, #1
 801c0ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801c0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0b4:	1c9a      	adds	r2, r3, #2
 801c0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0b8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801c0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c0be:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801c0c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c0c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c0c4:	441a      	add	r2, r3
 801c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0c8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801c0ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801c0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0ce:	441a      	add	r2, r3
 801c0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0d2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801c0d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c0d8:	2b03      	cmp	r3, #3
 801c0da:	d11e      	bne.n	801c11a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801c0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0de:	3334      	adds	r3, #52	; 0x34
 801c0e0:	332a      	adds	r3, #42	; 0x2a
 801c0e2:	4618      	mov	r0, r3
 801c0e4:	f7fe fc1e 	bl	801a924 <ld_word>
 801c0e8:	4603      	mov	r3, r0
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d001      	beq.n	801c0f2 <find_volume+0x342>
 801c0ee:	230d      	movs	r3, #13
 801c0f0:	e0a8      	b.n	801c244 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801c0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c0f4:	891b      	ldrh	r3, [r3, #8]
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d001      	beq.n	801c0fe <find_volume+0x34e>
 801c0fa:	230d      	movs	r3, #13
 801c0fc:	e0a2      	b.n	801c244 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801c0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c100:	3334      	adds	r3, #52	; 0x34
 801c102:	332c      	adds	r3, #44	; 0x2c
 801c104:	4618      	mov	r0, r3
 801c106:	f7fe fc25 	bl	801a954 <ld_dword>
 801c10a:	4602      	mov	r2, r0
 801c10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c10e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801c110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c112:	699b      	ldr	r3, [r3, #24]
 801c114:	009b      	lsls	r3, r3, #2
 801c116:	647b      	str	r3, [r7, #68]	; 0x44
 801c118:	e01f      	b.n	801c15a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801c11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c11c:	891b      	ldrh	r3, [r3, #8]
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d101      	bne.n	801c126 <find_volume+0x376>
 801c122:	230d      	movs	r3, #13
 801c124:	e08e      	b.n	801c244 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801c126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c12c:	441a      	add	r2, r3
 801c12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c130:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801c132:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c136:	2b02      	cmp	r3, #2
 801c138:	d103      	bne.n	801c142 <find_volume+0x392>
 801c13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c13c:	699b      	ldr	r3, [r3, #24]
 801c13e:	005b      	lsls	r3, r3, #1
 801c140:	e00a      	b.n	801c158 <find_volume+0x3a8>
 801c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c144:	699a      	ldr	r2, [r3, #24]
 801c146:	4613      	mov	r3, r2
 801c148:	005b      	lsls	r3, r3, #1
 801c14a:	4413      	add	r3, r2
 801c14c:	085a      	lsrs	r2, r3, #1
 801c14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c150:	699b      	ldr	r3, [r3, #24]
 801c152:	f003 0301 	and.w	r3, r3, #1
 801c156:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801c158:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801c15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c15c:	69da      	ldr	r2, [r3, #28]
 801c15e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c160:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801c164:	0a5b      	lsrs	r3, r3, #9
 801c166:	429a      	cmp	r2, r3
 801c168:	d201      	bcs.n	801c16e <find_volume+0x3be>
 801c16a:	230d      	movs	r3, #13
 801c16c:	e06a      	b.n	801c244 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801c16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c170:	f04f 32ff 	mov.w	r2, #4294967295
 801c174:	615a      	str	r2, [r3, #20]
 801c176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c178:	695a      	ldr	r2, [r3, #20]
 801c17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c17c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801c17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c180:	2280      	movs	r2, #128	; 0x80
 801c182:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801c184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801c188:	2b03      	cmp	r3, #3
 801c18a:	d149      	bne.n	801c220 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801c18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c18e:	3334      	adds	r3, #52	; 0x34
 801c190:	3330      	adds	r3, #48	; 0x30
 801c192:	4618      	mov	r0, r3
 801c194:	f7fe fbc6 	bl	801a924 <ld_word>
 801c198:	4603      	mov	r3, r0
 801c19a:	2b01      	cmp	r3, #1
 801c19c:	d140      	bne.n	801c220 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 801c19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c1a0:	3301      	adds	r3, #1
 801c1a2:	4619      	mov	r1, r3
 801c1a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c1a6:	f7fe fe9d 	bl	801aee4 <move_window>
 801c1aa:	4603      	mov	r3, r0
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d137      	bne.n	801c220 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 801c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1b2:	2200      	movs	r2, #0
 801c1b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801c1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1b8:	3334      	adds	r3, #52	; 0x34
 801c1ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801c1be:	4618      	mov	r0, r3
 801c1c0:	f7fe fbb0 	bl	801a924 <ld_word>
 801c1c4:	4603      	mov	r3, r0
 801c1c6:	461a      	mov	r2, r3
 801c1c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801c1cc:	429a      	cmp	r2, r3
 801c1ce:	d127      	bne.n	801c220 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1d2:	3334      	adds	r3, #52	; 0x34
 801c1d4:	4618      	mov	r0, r3
 801c1d6:	f7fe fbbd 	bl	801a954 <ld_dword>
 801c1da:	4602      	mov	r2, r0
 801c1dc:	4b1b      	ldr	r3, [pc, #108]	; (801c24c <find_volume+0x49c>)
 801c1de:	429a      	cmp	r2, r3
 801c1e0:	d11e      	bne.n	801c220 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801c1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1e4:	3334      	adds	r3, #52	; 0x34
 801c1e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801c1ea:	4618      	mov	r0, r3
 801c1ec:	f7fe fbb2 	bl	801a954 <ld_dword>
 801c1f0:	4602      	mov	r2, r0
 801c1f2:	4b17      	ldr	r3, [pc, #92]	; (801c250 <find_volume+0x4a0>)
 801c1f4:	429a      	cmp	r2, r3
 801c1f6:	d113      	bne.n	801c220 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801c1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1fa:	3334      	adds	r3, #52	; 0x34
 801c1fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801c200:	4618      	mov	r0, r3
 801c202:	f7fe fba7 	bl	801a954 <ld_dword>
 801c206:	4602      	mov	r2, r0
 801c208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c20a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801c20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c20e:	3334      	adds	r3, #52	; 0x34
 801c210:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801c214:	4618      	mov	r0, r3
 801c216:	f7fe fb9d 	bl	801a954 <ld_dword>
 801c21a:	4602      	mov	r2, r0
 801c21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c21e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801c220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c222:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801c226:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801c228:	4b0a      	ldr	r3, [pc, #40]	; (801c254 <find_volume+0x4a4>)
 801c22a:	881b      	ldrh	r3, [r3, #0]
 801c22c:	3301      	adds	r3, #1
 801c22e:	b29a      	uxth	r2, r3
 801c230:	4b08      	ldr	r3, [pc, #32]	; (801c254 <find_volume+0x4a4>)
 801c232:	801a      	strh	r2, [r3, #0]
 801c234:	4b07      	ldr	r3, [pc, #28]	; (801c254 <find_volume+0x4a4>)
 801c236:	881a      	ldrh	r2, [r3, #0]
 801c238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c23a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801c23c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c23e:	f7fe fde9 	bl	801ae14 <clear_lock>
#endif
	return FR_OK;
 801c242:	2300      	movs	r3, #0
}
 801c244:	4618      	mov	r0, r3
 801c246:	3758      	adds	r7, #88	; 0x58
 801c248:	46bd      	mov	sp, r7
 801c24a:	bd80      	pop	{r7, pc}
 801c24c:	41615252 	.word	0x41615252
 801c250:	61417272 	.word	0x61417272
 801c254:	24000a44 	.word	0x24000a44

0801c258 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801c258:	b580      	push	{r7, lr}
 801c25a:	b084      	sub	sp, #16
 801c25c:	af00      	add	r7, sp, #0
 801c25e:	6078      	str	r0, [r7, #4]
 801c260:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801c262:	2309      	movs	r3, #9
 801c264:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d02e      	beq.n	801c2ca <validate+0x72>
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	681b      	ldr	r3, [r3, #0]
 801c270:	2b00      	cmp	r3, #0
 801c272:	d02a      	beq.n	801c2ca <validate+0x72>
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	681b      	ldr	r3, [r3, #0]
 801c278:	781b      	ldrb	r3, [r3, #0]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d025      	beq.n	801c2ca <validate+0x72>
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	889a      	ldrh	r2, [r3, #4]
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	88db      	ldrh	r3, [r3, #6]
 801c288:	429a      	cmp	r2, r3
 801c28a:	d11e      	bne.n	801c2ca <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	681b      	ldr	r3, [r3, #0]
 801c290:	4618      	mov	r0, r3
 801c292:	f7fe fc46 	bl	801ab22 <lock_fs>
 801c296:	4603      	mov	r3, r0
 801c298:	2b00      	cmp	r3, #0
 801c29a:	d014      	beq.n	801c2c6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	681b      	ldr	r3, [r3, #0]
 801c2a0:	785b      	ldrb	r3, [r3, #1]
 801c2a2:	4618      	mov	r0, r3
 801c2a4:	f7fe faa0 	bl	801a7e8 <disk_status>
 801c2a8:	4603      	mov	r3, r0
 801c2aa:	f003 0301 	and.w	r3, r3, #1
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d102      	bne.n	801c2b8 <validate+0x60>
				res = FR_OK;
 801c2b2:	2300      	movs	r3, #0
 801c2b4:	73fb      	strb	r3, [r7, #15]
 801c2b6:	e008      	b.n	801c2ca <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	2100      	movs	r1, #0
 801c2be:	4618      	mov	r0, r3
 801c2c0:	f7fe fc45 	bl	801ab4e <unlock_fs>
 801c2c4:	e001      	b.n	801c2ca <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801c2c6:	230f      	movs	r3, #15
 801c2c8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801c2ca:	7bfb      	ldrb	r3, [r7, #15]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d102      	bne.n	801c2d6 <validate+0x7e>
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	e000      	b.n	801c2d8 <validate+0x80>
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	683a      	ldr	r2, [r7, #0]
 801c2da:	6013      	str	r3, [r2, #0]
	return res;
 801c2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c2de:	4618      	mov	r0, r3
 801c2e0:	3710      	adds	r7, #16
 801c2e2:	46bd      	mov	sp, r7
 801c2e4:	bd80      	pop	{r7, pc}
	...

0801c2e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801c2e8:	b580      	push	{r7, lr}
 801c2ea:	b088      	sub	sp, #32
 801c2ec:	af00      	add	r7, sp, #0
 801c2ee:	60f8      	str	r0, [r7, #12]
 801c2f0:	60b9      	str	r1, [r7, #8]
 801c2f2:	4613      	mov	r3, r2
 801c2f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801c2f6:	68bb      	ldr	r3, [r7, #8]
 801c2f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801c2fa:	f107 0310 	add.w	r3, r7, #16
 801c2fe:	4618      	mov	r0, r3
 801c300:	f7ff fcbb 	bl	801bc7a <get_ldnumber>
 801c304:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801c306:	69fb      	ldr	r3, [r7, #28]
 801c308:	2b00      	cmp	r3, #0
 801c30a:	da01      	bge.n	801c310 <f_mount+0x28>
 801c30c:	230b      	movs	r3, #11
 801c30e:	e048      	b.n	801c3a2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801c310:	4a26      	ldr	r2, [pc, #152]	; (801c3ac <f_mount+0xc4>)
 801c312:	69fb      	ldr	r3, [r7, #28]
 801c314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c318:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801c31a:	69bb      	ldr	r3, [r7, #24]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d00f      	beq.n	801c340 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801c320:	69b8      	ldr	r0, [r7, #24]
 801c322:	f7fe fd77 	bl	801ae14 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801c326:	69bb      	ldr	r3, [r7, #24]
 801c328:	68db      	ldr	r3, [r3, #12]
 801c32a:	4618      	mov	r0, r3
 801c32c:	f000 fcd8 	bl	801cce0 <ff_del_syncobj>
 801c330:	4603      	mov	r3, r0
 801c332:	2b00      	cmp	r3, #0
 801c334:	d101      	bne.n	801c33a <f_mount+0x52>
 801c336:	2302      	movs	r3, #2
 801c338:	e033      	b.n	801c3a2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801c33a:	69bb      	ldr	r3, [r7, #24]
 801c33c:	2200      	movs	r2, #0
 801c33e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	2b00      	cmp	r3, #0
 801c344:	d00f      	beq.n	801c366 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801c346:	68fb      	ldr	r3, [r7, #12]
 801c348:	2200      	movs	r2, #0
 801c34a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801c34c:	69fb      	ldr	r3, [r7, #28]
 801c34e:	b2da      	uxtb	r2, r3
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	330c      	adds	r3, #12
 801c354:	4619      	mov	r1, r3
 801c356:	4610      	mov	r0, r2
 801c358:	f000 fca7 	bl	801ccaa <ff_cre_syncobj>
 801c35c:	4603      	mov	r3, r0
 801c35e:	2b00      	cmp	r3, #0
 801c360:	d101      	bne.n	801c366 <f_mount+0x7e>
 801c362:	2302      	movs	r3, #2
 801c364:	e01d      	b.n	801c3a2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801c366:	68fa      	ldr	r2, [r7, #12]
 801c368:	4910      	ldr	r1, [pc, #64]	; (801c3ac <f_mount+0xc4>)
 801c36a:	69fb      	ldr	r3, [r7, #28]
 801c36c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	2b00      	cmp	r3, #0
 801c374:	d002      	beq.n	801c37c <f_mount+0x94>
 801c376:	79fb      	ldrb	r3, [r7, #7]
 801c378:	2b01      	cmp	r3, #1
 801c37a:	d001      	beq.n	801c380 <f_mount+0x98>
 801c37c:	2300      	movs	r3, #0
 801c37e:	e010      	b.n	801c3a2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801c380:	f107 010c 	add.w	r1, r7, #12
 801c384:	f107 0308 	add.w	r3, r7, #8
 801c388:	2200      	movs	r2, #0
 801c38a:	4618      	mov	r0, r3
 801c38c:	f7ff fd10 	bl	801bdb0 <find_volume>
 801c390:	4603      	mov	r3, r0
 801c392:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	7dfa      	ldrb	r2, [r7, #23]
 801c398:	4611      	mov	r1, r2
 801c39a:	4618      	mov	r0, r3
 801c39c:	f7fe fbd7 	bl	801ab4e <unlock_fs>
 801c3a0:	7dfb      	ldrb	r3, [r7, #23]
}
 801c3a2:	4618      	mov	r0, r3
 801c3a4:	3720      	adds	r7, #32
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	bd80      	pop	{r7, pc}
 801c3aa:	bf00      	nop
 801c3ac:	24000a40 	.word	0x24000a40

0801c3b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b098      	sub	sp, #96	; 0x60
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	60f8      	str	r0, [r7, #12]
 801c3b8:	60b9      	str	r1, [r7, #8]
 801c3ba:	4613      	mov	r3, r2
 801c3bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d101      	bne.n	801c3c8 <f_open+0x18>
 801c3c4:	2309      	movs	r3, #9
 801c3c6:	e1b4      	b.n	801c732 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801c3c8:	79fb      	ldrb	r3, [r7, #7]
 801c3ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c3ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801c3d0:	79fa      	ldrb	r2, [r7, #7]
 801c3d2:	f107 0110 	add.w	r1, r7, #16
 801c3d6:	f107 0308 	add.w	r3, r7, #8
 801c3da:	4618      	mov	r0, r3
 801c3dc:	f7ff fce8 	bl	801bdb0 <find_volume>
 801c3e0:	4603      	mov	r3, r0
 801c3e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801c3e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	f040 8191 	bne.w	801c712 <f_open+0x362>
		dj.obj.fs = fs;
 801c3f0:	693b      	ldr	r3, [r7, #16]
 801c3f2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801c3f4:	68ba      	ldr	r2, [r7, #8]
 801c3f6:	f107 0314 	add.w	r3, r7, #20
 801c3fa:	4611      	mov	r1, r2
 801c3fc:	4618      	mov	r0, r3
 801c3fe:	f7ff fbcb 	bl	801bb98 <follow_path>
 801c402:	4603      	mov	r3, r0
 801c404:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801c408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c40c:	2b00      	cmp	r3, #0
 801c40e:	d11a      	bne.n	801c446 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801c410:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801c414:	b25b      	sxtb	r3, r3
 801c416:	2b00      	cmp	r3, #0
 801c418:	da03      	bge.n	801c422 <f_open+0x72>
				res = FR_INVALID_NAME;
 801c41a:	2306      	movs	r3, #6
 801c41c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801c420:	e011      	b.n	801c446 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c422:	79fb      	ldrb	r3, [r7, #7]
 801c424:	f023 0301 	bic.w	r3, r3, #1
 801c428:	2b00      	cmp	r3, #0
 801c42a:	bf14      	ite	ne
 801c42c:	2301      	movne	r3, #1
 801c42e:	2300      	moveq	r3, #0
 801c430:	b2db      	uxtb	r3, r3
 801c432:	461a      	mov	r2, r3
 801c434:	f107 0314 	add.w	r3, r7, #20
 801c438:	4611      	mov	r1, r2
 801c43a:	4618      	mov	r0, r3
 801c43c:	f7fe fba2 	bl	801ab84 <chk_lock>
 801c440:	4603      	mov	r3, r0
 801c442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801c446:	79fb      	ldrb	r3, [r7, #7]
 801c448:	f003 031c 	and.w	r3, r3, #28
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d07f      	beq.n	801c550 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801c450:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c454:	2b00      	cmp	r3, #0
 801c456:	d017      	beq.n	801c488 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801c458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c45c:	2b04      	cmp	r3, #4
 801c45e:	d10e      	bne.n	801c47e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801c460:	f7fe fbec 	bl	801ac3c <enq_lock>
 801c464:	4603      	mov	r3, r0
 801c466:	2b00      	cmp	r3, #0
 801c468:	d006      	beq.n	801c478 <f_open+0xc8>
 801c46a:	f107 0314 	add.w	r3, r7, #20
 801c46e:	4618      	mov	r0, r3
 801c470:	f7ff facb 	bl	801ba0a <dir_register>
 801c474:	4603      	mov	r3, r0
 801c476:	e000      	b.n	801c47a <f_open+0xca>
 801c478:	2312      	movs	r3, #18
 801c47a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801c47e:	79fb      	ldrb	r3, [r7, #7]
 801c480:	f043 0308 	orr.w	r3, r3, #8
 801c484:	71fb      	strb	r3, [r7, #7]
 801c486:	e010      	b.n	801c4aa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801c488:	7ebb      	ldrb	r3, [r7, #26]
 801c48a:	f003 0311 	and.w	r3, r3, #17
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d003      	beq.n	801c49a <f_open+0xea>
					res = FR_DENIED;
 801c492:	2307      	movs	r3, #7
 801c494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801c498:	e007      	b.n	801c4aa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801c49a:	79fb      	ldrb	r3, [r7, #7]
 801c49c:	f003 0304 	and.w	r3, r3, #4
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d002      	beq.n	801c4aa <f_open+0xfa>
 801c4a4:	2308      	movs	r3, #8
 801c4a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801c4aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d168      	bne.n	801c584 <f_open+0x1d4>
 801c4b2:	79fb      	ldrb	r3, [r7, #7]
 801c4b4:	f003 0308 	and.w	r3, r3, #8
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d063      	beq.n	801c584 <f_open+0x1d4>
				dw = GET_FATTIME();
 801c4bc:	f7fd ff3e 	bl	801a33c <get_fattime>
 801c4c0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801c4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c4c4:	330e      	adds	r3, #14
 801c4c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801c4c8:	4618      	mov	r0, r3
 801c4ca:	f7fe fa81 	bl	801a9d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801c4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c4d0:	3316      	adds	r3, #22
 801c4d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801c4d4:	4618      	mov	r0, r3
 801c4d6:	f7fe fa7b 	bl	801a9d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801c4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c4dc:	330b      	adds	r3, #11
 801c4de:	2220      	movs	r2, #32
 801c4e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801c4e2:	693b      	ldr	r3, [r7, #16]
 801c4e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c4e6:	4611      	mov	r1, r2
 801c4e8:	4618      	mov	r0, r3
 801c4ea:	f7ff f9fa 	bl	801b8e2 <ld_clust>
 801c4ee:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801c4f0:	693b      	ldr	r3, [r7, #16]
 801c4f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c4f4:	2200      	movs	r2, #0
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	f7ff fa12 	bl	801b920 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801c4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c4fe:	331c      	adds	r3, #28
 801c500:	2100      	movs	r1, #0
 801c502:	4618      	mov	r0, r3
 801c504:	f7fe fa64 	bl	801a9d0 <st_dword>
					fs->wflag = 1;
 801c508:	693b      	ldr	r3, [r7, #16]
 801c50a:	2201      	movs	r2, #1
 801c50c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801c50e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c510:	2b00      	cmp	r3, #0
 801c512:	d037      	beq.n	801c584 <f_open+0x1d4>
						dw = fs->winsect;
 801c514:	693b      	ldr	r3, [r7, #16]
 801c516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c518:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801c51a:	f107 0314 	add.w	r3, r7, #20
 801c51e:	2200      	movs	r2, #0
 801c520:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801c522:	4618      	mov	r0, r3
 801c524:	f7fe ff25 	bl	801b372 <remove_chain>
 801c528:	4603      	mov	r3, r0
 801c52a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801c52e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c532:	2b00      	cmp	r3, #0
 801c534:	d126      	bne.n	801c584 <f_open+0x1d4>
							res = move_window(fs, dw);
 801c536:	693b      	ldr	r3, [r7, #16]
 801c538:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801c53a:	4618      	mov	r0, r3
 801c53c:	f7fe fcd2 	bl	801aee4 <move_window>
 801c540:	4603      	mov	r3, r0
 801c542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801c546:	693b      	ldr	r3, [r7, #16]
 801c548:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c54a:	3a01      	subs	r2, #1
 801c54c:	611a      	str	r2, [r3, #16]
 801c54e:	e019      	b.n	801c584 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801c550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c554:	2b00      	cmp	r3, #0
 801c556:	d115      	bne.n	801c584 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801c558:	7ebb      	ldrb	r3, [r7, #26]
 801c55a:	f003 0310 	and.w	r3, r3, #16
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d003      	beq.n	801c56a <f_open+0x1ba>
					res = FR_NO_FILE;
 801c562:	2304      	movs	r3, #4
 801c564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801c568:	e00c      	b.n	801c584 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801c56a:	79fb      	ldrb	r3, [r7, #7]
 801c56c:	f003 0302 	and.w	r3, r3, #2
 801c570:	2b00      	cmp	r3, #0
 801c572:	d007      	beq.n	801c584 <f_open+0x1d4>
 801c574:	7ebb      	ldrb	r3, [r7, #26]
 801c576:	f003 0301 	and.w	r3, r3, #1
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d002      	beq.n	801c584 <f_open+0x1d4>
						res = FR_DENIED;
 801c57e:	2307      	movs	r3, #7
 801c580:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801c584:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d128      	bne.n	801c5de <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801c58c:	79fb      	ldrb	r3, [r7, #7]
 801c58e:	f003 0308 	and.w	r3, r3, #8
 801c592:	2b00      	cmp	r3, #0
 801c594:	d003      	beq.n	801c59e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801c596:	79fb      	ldrb	r3, [r7, #7]
 801c598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c59c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801c59e:	693b      	ldr	r3, [r7, #16]
 801c5a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c5a2:	68fb      	ldr	r3, [r7, #12]
 801c5a4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801c5a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801c5ac:	79fb      	ldrb	r3, [r7, #7]
 801c5ae:	f023 0301 	bic.w	r3, r3, #1
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	bf14      	ite	ne
 801c5b6:	2301      	movne	r3, #1
 801c5b8:	2300      	moveq	r3, #0
 801c5ba:	b2db      	uxtb	r3, r3
 801c5bc:	461a      	mov	r2, r3
 801c5be:	f107 0314 	add.w	r3, r7, #20
 801c5c2:	4611      	mov	r1, r2
 801c5c4:	4618      	mov	r0, r3
 801c5c6:	f7fe fb5b 	bl	801ac80 <inc_lock>
 801c5ca:	4602      	mov	r2, r0
 801c5cc:	68fb      	ldr	r3, [r7, #12]
 801c5ce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801c5d0:	68fb      	ldr	r3, [r7, #12]
 801c5d2:	691b      	ldr	r3, [r3, #16]
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d102      	bne.n	801c5de <f_open+0x22e>
 801c5d8:	2302      	movs	r3, #2
 801c5da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801c5de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	f040 8095 	bne.w	801c712 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801c5e8:	693b      	ldr	r3, [r7, #16]
 801c5ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c5ec:	4611      	mov	r1, r2
 801c5ee:	4618      	mov	r0, r3
 801c5f0:	f7ff f977 	bl	801b8e2 <ld_clust>
 801c5f4:	4602      	mov	r2, r0
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801c5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c5fc:	331c      	adds	r3, #28
 801c5fe:	4618      	mov	r0, r3
 801c600:	f7fe f9a8 	bl	801a954 <ld_dword>
 801c604:	4602      	mov	r2, r0
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	2200      	movs	r2, #0
 801c60e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801c610:	693a      	ldr	r2, [r7, #16]
 801c612:	68fb      	ldr	r3, [r7, #12]
 801c614:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801c616:	693b      	ldr	r3, [r7, #16]
 801c618:	88da      	ldrh	r2, [r3, #6]
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	79fa      	ldrb	r2, [r7, #7]
 801c622:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801c624:	68fb      	ldr	r3, [r7, #12]
 801c626:	2200      	movs	r2, #0
 801c628:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801c62a:	68fb      	ldr	r3, [r7, #12]
 801c62c:	2200      	movs	r2, #0
 801c62e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	2200      	movs	r2, #0
 801c634:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801c636:	68fb      	ldr	r3, [r7, #12]
 801c638:	3330      	adds	r3, #48	; 0x30
 801c63a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c63e:	2100      	movs	r1, #0
 801c640:	4618      	mov	r0, r3
 801c642:	f7fe fa12 	bl	801aa6a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801c646:	79fb      	ldrb	r3, [r7, #7]
 801c648:	f003 0320 	and.w	r3, r3, #32
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d060      	beq.n	801c712 <f_open+0x362>
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	68db      	ldr	r3, [r3, #12]
 801c654:	2b00      	cmp	r3, #0
 801c656:	d05c      	beq.n	801c712 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801c658:	68fb      	ldr	r3, [r7, #12]
 801c65a:	68da      	ldr	r2, [r3, #12]
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801c660:	693b      	ldr	r3, [r7, #16]
 801c662:	895b      	ldrh	r3, [r3, #10]
 801c664:	025b      	lsls	r3, r3, #9
 801c666:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	689b      	ldr	r3, [r3, #8]
 801c66c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	68db      	ldr	r3, [r3, #12]
 801c672:	657b      	str	r3, [r7, #84]	; 0x54
 801c674:	e016      	b.n	801c6a4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801c676:	68fb      	ldr	r3, [r7, #12]
 801c678:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c67a:	4618      	mov	r0, r3
 801c67c:	f7fe fced 	bl	801b05a <get_fat>
 801c680:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801c682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c684:	2b01      	cmp	r3, #1
 801c686:	d802      	bhi.n	801c68e <f_open+0x2de>
 801c688:	2302      	movs	r3, #2
 801c68a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801c68e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c690:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c694:	d102      	bne.n	801c69c <f_open+0x2ec>
 801c696:	2301      	movs	r3, #1
 801c698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801c69c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c69e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c6a0:	1ad3      	subs	r3, r2, r3
 801c6a2:	657b      	str	r3, [r7, #84]	; 0x54
 801c6a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d103      	bne.n	801c6b4 <f_open+0x304>
 801c6ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c6ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c6b0:	429a      	cmp	r2, r3
 801c6b2:	d8e0      	bhi.n	801c676 <f_open+0x2c6>
				}
				fp->clust = clst;
 801c6b4:	68fb      	ldr	r3, [r7, #12]
 801c6b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c6b8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801c6ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d127      	bne.n	801c712 <f_open+0x362>
 801c6c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c6c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d022      	beq.n	801c712 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801c6cc:	693b      	ldr	r3, [r7, #16]
 801c6ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c6d0:	4618      	mov	r0, r3
 801c6d2:	f7fe fca3 	bl	801b01c <clust2sect>
 801c6d6:	6478      	str	r0, [r7, #68]	; 0x44
 801c6d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d103      	bne.n	801c6e6 <f_open+0x336>
						res = FR_INT_ERR;
 801c6de:	2302      	movs	r3, #2
 801c6e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801c6e4:	e015      	b.n	801c712 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801c6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c6e8:	0a5a      	lsrs	r2, r3, #9
 801c6ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c6ec:	441a      	add	r2, r3
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801c6f2:	693b      	ldr	r3, [r7, #16]
 801c6f4:	7858      	ldrb	r0, [r3, #1]
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	6a1a      	ldr	r2, [r3, #32]
 801c700:	2301      	movs	r3, #1
 801c702:	f7fe f8b1 	bl	801a868 <disk_read>
 801c706:	4603      	mov	r3, r0
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d002      	beq.n	801c712 <f_open+0x362>
 801c70c:	2301      	movs	r3, #1
 801c70e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801c712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c716:	2b00      	cmp	r3, #0
 801c718:	d002      	beq.n	801c720 <f_open+0x370>
 801c71a:	68fb      	ldr	r3, [r7, #12]
 801c71c:	2200      	movs	r2, #0
 801c71e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801c720:	693b      	ldr	r3, [r7, #16]
 801c722:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801c726:	4611      	mov	r1, r2
 801c728:	4618      	mov	r0, r3
 801c72a:	f7fe fa10 	bl	801ab4e <unlock_fs>
 801c72e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801c732:	4618      	mov	r0, r3
 801c734:	3760      	adds	r7, #96	; 0x60
 801c736:	46bd      	mov	sp, r7
 801c738:	bd80      	pop	{r7, pc}

0801c73a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801c73a:	b580      	push	{r7, lr}
 801c73c:	b08c      	sub	sp, #48	; 0x30
 801c73e:	af00      	add	r7, sp, #0
 801c740:	60f8      	str	r0, [r7, #12]
 801c742:	60b9      	str	r1, [r7, #8]
 801c744:	607a      	str	r2, [r7, #4]
 801c746:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801c748:	68bb      	ldr	r3, [r7, #8]
 801c74a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801c74c:	683b      	ldr	r3, [r7, #0]
 801c74e:	2200      	movs	r2, #0
 801c750:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	f107 0210 	add.w	r2, r7, #16
 801c758:	4611      	mov	r1, r2
 801c75a:	4618      	mov	r0, r3
 801c75c:	f7ff fd7c 	bl	801c258 <validate>
 801c760:	4603      	mov	r3, r0
 801c762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801c766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d107      	bne.n	801c77e <f_write+0x44>
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	7d5b      	ldrb	r3, [r3, #21]
 801c772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801c776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d009      	beq.n	801c792 <f_write+0x58>
 801c77e:	693b      	ldr	r3, [r7, #16]
 801c780:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801c784:	4611      	mov	r1, r2
 801c786:	4618      	mov	r0, r3
 801c788:	f7fe f9e1 	bl	801ab4e <unlock_fs>
 801c78c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c790:	e173      	b.n	801ca7a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	7d1b      	ldrb	r3, [r3, #20]
 801c796:	f003 0302 	and.w	r3, r3, #2
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d106      	bne.n	801c7ac <f_write+0x72>
 801c79e:	693b      	ldr	r3, [r7, #16]
 801c7a0:	2107      	movs	r1, #7
 801c7a2:	4618      	mov	r0, r3
 801c7a4:	f7fe f9d3 	bl	801ab4e <unlock_fs>
 801c7a8:	2307      	movs	r3, #7
 801c7aa:	e166      	b.n	801ca7a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801c7ac:	68fb      	ldr	r3, [r7, #12]
 801c7ae:	699a      	ldr	r2, [r3, #24]
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	441a      	add	r2, r3
 801c7b4:	68fb      	ldr	r3, [r7, #12]
 801c7b6:	699b      	ldr	r3, [r3, #24]
 801c7b8:	429a      	cmp	r2, r3
 801c7ba:	f080 814b 	bcs.w	801ca54 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801c7be:	68fb      	ldr	r3, [r7, #12]
 801c7c0:	699b      	ldr	r3, [r3, #24]
 801c7c2:	43db      	mvns	r3, r3
 801c7c4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801c7c6:	e145      	b.n	801ca54 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	699b      	ldr	r3, [r3, #24]
 801c7cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	f040 8101 	bne.w	801c9d8 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	699b      	ldr	r3, [r3, #24]
 801c7da:	0a5b      	lsrs	r3, r3, #9
 801c7dc:	693a      	ldr	r2, [r7, #16]
 801c7de:	8952      	ldrh	r2, [r2, #10]
 801c7e0:	3a01      	subs	r2, #1
 801c7e2:	4013      	ands	r3, r2
 801c7e4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801c7e6:	69bb      	ldr	r3, [r7, #24]
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d14d      	bne.n	801c888 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	699b      	ldr	r3, [r3, #24]
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	d10c      	bne.n	801c80e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801c7f4:	68fb      	ldr	r3, [r7, #12]
 801c7f6:	689b      	ldr	r3, [r3, #8]
 801c7f8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801c7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d11a      	bne.n	801c836 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	2100      	movs	r1, #0
 801c804:	4618      	mov	r0, r3
 801c806:	f7fe fe19 	bl	801b43c <create_chain>
 801c80a:	62b8      	str	r0, [r7, #40]	; 0x28
 801c80c:	e013      	b.n	801c836 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c812:	2b00      	cmp	r3, #0
 801c814:	d007      	beq.n	801c826 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801c816:	68fb      	ldr	r3, [r7, #12]
 801c818:	699b      	ldr	r3, [r3, #24]
 801c81a:	4619      	mov	r1, r3
 801c81c:	68f8      	ldr	r0, [r7, #12]
 801c81e:	f7fe fea5 	bl	801b56c <clmt_clust>
 801c822:	62b8      	str	r0, [r7, #40]	; 0x28
 801c824:	e007      	b.n	801c836 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801c826:	68fa      	ldr	r2, [r7, #12]
 801c828:	68fb      	ldr	r3, [r7, #12]
 801c82a:	69db      	ldr	r3, [r3, #28]
 801c82c:	4619      	mov	r1, r3
 801c82e:	4610      	mov	r0, r2
 801c830:	f7fe fe04 	bl	801b43c <create_chain>
 801c834:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801c836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c838:	2b00      	cmp	r3, #0
 801c83a:	f000 8110 	beq.w	801ca5e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801c83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c840:	2b01      	cmp	r3, #1
 801c842:	d109      	bne.n	801c858 <f_write+0x11e>
 801c844:	68fb      	ldr	r3, [r7, #12]
 801c846:	2202      	movs	r2, #2
 801c848:	755a      	strb	r2, [r3, #21]
 801c84a:	693b      	ldr	r3, [r7, #16]
 801c84c:	2102      	movs	r1, #2
 801c84e:	4618      	mov	r0, r3
 801c850:	f7fe f97d 	bl	801ab4e <unlock_fs>
 801c854:	2302      	movs	r3, #2
 801c856:	e110      	b.n	801ca7a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c85e:	d109      	bne.n	801c874 <f_write+0x13a>
 801c860:	68fb      	ldr	r3, [r7, #12]
 801c862:	2201      	movs	r2, #1
 801c864:	755a      	strb	r2, [r3, #21]
 801c866:	693b      	ldr	r3, [r7, #16]
 801c868:	2101      	movs	r1, #1
 801c86a:	4618      	mov	r0, r3
 801c86c:	f7fe f96f 	bl	801ab4e <unlock_fs>
 801c870:	2301      	movs	r3, #1
 801c872:	e102      	b.n	801ca7a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 801c874:	68fb      	ldr	r3, [r7, #12]
 801c876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c878:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801c87a:	68fb      	ldr	r3, [r7, #12]
 801c87c:	689b      	ldr	r3, [r3, #8]
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d102      	bne.n	801c888 <f_write+0x14e>
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c886:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801c888:	68fb      	ldr	r3, [r7, #12]
 801c88a:	7d1b      	ldrb	r3, [r3, #20]
 801c88c:	b25b      	sxtb	r3, r3
 801c88e:	2b00      	cmp	r3, #0
 801c890:	da1d      	bge.n	801c8ce <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c892:	693b      	ldr	r3, [r7, #16]
 801c894:	7858      	ldrb	r0, [r3, #1]
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	6a1a      	ldr	r2, [r3, #32]
 801c8a0:	2301      	movs	r3, #1
 801c8a2:	f7fe f801 	bl	801a8a8 <disk_write>
 801c8a6:	4603      	mov	r3, r0
 801c8a8:	2b00      	cmp	r3, #0
 801c8aa:	d009      	beq.n	801c8c0 <f_write+0x186>
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	2201      	movs	r2, #1
 801c8b0:	755a      	strb	r2, [r3, #21]
 801c8b2:	693b      	ldr	r3, [r7, #16]
 801c8b4:	2101      	movs	r1, #1
 801c8b6:	4618      	mov	r0, r3
 801c8b8:	f7fe f949 	bl	801ab4e <unlock_fs>
 801c8bc:	2301      	movs	r3, #1
 801c8be:	e0dc      	b.n	801ca7a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	7d1b      	ldrb	r3, [r3, #20]
 801c8c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c8c8:	b2da      	uxtb	r2, r3
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801c8ce:	693a      	ldr	r2, [r7, #16]
 801c8d0:	68fb      	ldr	r3, [r7, #12]
 801c8d2:	69db      	ldr	r3, [r3, #28]
 801c8d4:	4619      	mov	r1, r3
 801c8d6:	4610      	mov	r0, r2
 801c8d8:	f7fe fba0 	bl	801b01c <clust2sect>
 801c8dc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801c8de:	697b      	ldr	r3, [r7, #20]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d109      	bne.n	801c8f8 <f_write+0x1be>
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	2202      	movs	r2, #2
 801c8e8:	755a      	strb	r2, [r3, #21]
 801c8ea:	693b      	ldr	r3, [r7, #16]
 801c8ec:	2102      	movs	r1, #2
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	f7fe f92d 	bl	801ab4e <unlock_fs>
 801c8f4:	2302      	movs	r3, #2
 801c8f6:	e0c0      	b.n	801ca7a <f_write+0x340>
			sect += csect;
 801c8f8:	697a      	ldr	r2, [r7, #20]
 801c8fa:	69bb      	ldr	r3, [r7, #24]
 801c8fc:	4413      	add	r3, r2
 801c8fe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	0a5b      	lsrs	r3, r3, #9
 801c904:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801c906:	6a3b      	ldr	r3, [r7, #32]
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d041      	beq.n	801c990 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801c90c:	69ba      	ldr	r2, [r7, #24]
 801c90e:	6a3b      	ldr	r3, [r7, #32]
 801c910:	4413      	add	r3, r2
 801c912:	693a      	ldr	r2, [r7, #16]
 801c914:	8952      	ldrh	r2, [r2, #10]
 801c916:	4293      	cmp	r3, r2
 801c918:	d905      	bls.n	801c926 <f_write+0x1ec>
					cc = fs->csize - csect;
 801c91a:	693b      	ldr	r3, [r7, #16]
 801c91c:	895b      	ldrh	r3, [r3, #10]
 801c91e:	461a      	mov	r2, r3
 801c920:	69bb      	ldr	r3, [r7, #24]
 801c922:	1ad3      	subs	r3, r2, r3
 801c924:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801c926:	693b      	ldr	r3, [r7, #16]
 801c928:	7858      	ldrb	r0, [r3, #1]
 801c92a:	6a3b      	ldr	r3, [r7, #32]
 801c92c:	697a      	ldr	r2, [r7, #20]
 801c92e:	69f9      	ldr	r1, [r7, #28]
 801c930:	f7fd ffba 	bl	801a8a8 <disk_write>
 801c934:	4603      	mov	r3, r0
 801c936:	2b00      	cmp	r3, #0
 801c938:	d009      	beq.n	801c94e <f_write+0x214>
 801c93a:	68fb      	ldr	r3, [r7, #12]
 801c93c:	2201      	movs	r2, #1
 801c93e:	755a      	strb	r2, [r3, #21]
 801c940:	693b      	ldr	r3, [r7, #16]
 801c942:	2101      	movs	r1, #1
 801c944:	4618      	mov	r0, r3
 801c946:	f7fe f902 	bl	801ab4e <unlock_fs>
 801c94a:	2301      	movs	r3, #1
 801c94c:	e095      	b.n	801ca7a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	6a1a      	ldr	r2, [r3, #32]
 801c952:	697b      	ldr	r3, [r7, #20]
 801c954:	1ad3      	subs	r3, r2, r3
 801c956:	6a3a      	ldr	r2, [r7, #32]
 801c958:	429a      	cmp	r2, r3
 801c95a:	d915      	bls.n	801c988 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	6a1a      	ldr	r2, [r3, #32]
 801c966:	697b      	ldr	r3, [r7, #20]
 801c968:	1ad3      	subs	r3, r2, r3
 801c96a:	025b      	lsls	r3, r3, #9
 801c96c:	69fa      	ldr	r2, [r7, #28]
 801c96e:	4413      	add	r3, r2
 801c970:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c974:	4619      	mov	r1, r3
 801c976:	f7fe f857 	bl	801aa28 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801c97a:	68fb      	ldr	r3, [r7, #12]
 801c97c:	7d1b      	ldrb	r3, [r3, #20]
 801c97e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c982:	b2da      	uxtb	r2, r3
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801c988:	6a3b      	ldr	r3, [r7, #32]
 801c98a:	025b      	lsls	r3, r3, #9
 801c98c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801c98e:	e044      	b.n	801ca1a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801c990:	68fb      	ldr	r3, [r7, #12]
 801c992:	6a1b      	ldr	r3, [r3, #32]
 801c994:	697a      	ldr	r2, [r7, #20]
 801c996:	429a      	cmp	r2, r3
 801c998:	d01b      	beq.n	801c9d2 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	699a      	ldr	r2, [r3, #24]
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801c9a2:	429a      	cmp	r2, r3
 801c9a4:	d215      	bcs.n	801c9d2 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801c9a6:	693b      	ldr	r3, [r7, #16]
 801c9a8:	7858      	ldrb	r0, [r3, #1]
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801c9b0:	2301      	movs	r3, #1
 801c9b2:	697a      	ldr	r2, [r7, #20]
 801c9b4:	f7fd ff58 	bl	801a868 <disk_read>
 801c9b8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d009      	beq.n	801c9d2 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	2201      	movs	r2, #1
 801c9c2:	755a      	strb	r2, [r3, #21]
 801c9c4:	693b      	ldr	r3, [r7, #16]
 801c9c6:	2101      	movs	r1, #1
 801c9c8:	4618      	mov	r0, r3
 801c9ca:	f7fe f8c0 	bl	801ab4e <unlock_fs>
 801c9ce:	2301      	movs	r3, #1
 801c9d0:	e053      	b.n	801ca7a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801c9d2:	68fb      	ldr	r3, [r7, #12]
 801c9d4:	697a      	ldr	r2, [r7, #20]
 801c9d6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	699b      	ldr	r3, [r3, #24]
 801c9dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c9e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801c9e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801c9e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	429a      	cmp	r2, r3
 801c9ec:	d901      	bls.n	801c9f2 <f_write+0x2b8>
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	699b      	ldr	r3, [r3, #24]
 801c9fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ca00:	4413      	add	r3, r2
 801ca02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ca04:	69f9      	ldr	r1, [r7, #28]
 801ca06:	4618      	mov	r0, r3
 801ca08:	f7fe f80e 	bl	801aa28 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801ca0c:	68fb      	ldr	r3, [r7, #12]
 801ca0e:	7d1b      	ldrb	r3, [r3, #20]
 801ca10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801ca14:	b2da      	uxtb	r2, r3
 801ca16:	68fb      	ldr	r3, [r7, #12]
 801ca18:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801ca1a:	69fa      	ldr	r2, [r7, #28]
 801ca1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca1e:	4413      	add	r3, r2
 801ca20:	61fb      	str	r3, [r7, #28]
 801ca22:	68fb      	ldr	r3, [r7, #12]
 801ca24:	699a      	ldr	r2, [r3, #24]
 801ca26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca28:	441a      	add	r2, r3
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	619a      	str	r2, [r3, #24]
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	68da      	ldr	r2, [r3, #12]
 801ca32:	68fb      	ldr	r3, [r7, #12]
 801ca34:	699b      	ldr	r3, [r3, #24]
 801ca36:	429a      	cmp	r2, r3
 801ca38:	bf38      	it	cc
 801ca3a:	461a      	movcc	r2, r3
 801ca3c:	68fb      	ldr	r3, [r7, #12]
 801ca3e:	60da      	str	r2, [r3, #12]
 801ca40:	683b      	ldr	r3, [r7, #0]
 801ca42:	681a      	ldr	r2, [r3, #0]
 801ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca46:	441a      	add	r2, r3
 801ca48:	683b      	ldr	r3, [r7, #0]
 801ca4a:	601a      	str	r2, [r3, #0]
 801ca4c:	687a      	ldr	r2, [r7, #4]
 801ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca50:	1ad3      	subs	r3, r2, r3
 801ca52:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	2b00      	cmp	r3, #0
 801ca58:	f47f aeb6 	bne.w	801c7c8 <f_write+0x8e>
 801ca5c:	e000      	b.n	801ca60 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801ca5e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801ca60:	68fb      	ldr	r3, [r7, #12]
 801ca62:	7d1b      	ldrb	r3, [r3, #20]
 801ca64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ca68:	b2da      	uxtb	r2, r3
 801ca6a:	68fb      	ldr	r3, [r7, #12]
 801ca6c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801ca6e:	693b      	ldr	r3, [r7, #16]
 801ca70:	2100      	movs	r1, #0
 801ca72:	4618      	mov	r0, r3
 801ca74:	f7fe f86b 	bl	801ab4e <unlock_fs>
 801ca78:	2300      	movs	r3, #0
}
 801ca7a:	4618      	mov	r0, r3
 801ca7c:	3730      	adds	r7, #48	; 0x30
 801ca7e:	46bd      	mov	sp, r7
 801ca80:	bd80      	pop	{r7, pc}

0801ca82 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801ca82:	b580      	push	{r7, lr}
 801ca84:	b086      	sub	sp, #24
 801ca86:	af00      	add	r7, sp, #0
 801ca88:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	f107 0208 	add.w	r2, r7, #8
 801ca90:	4611      	mov	r1, r2
 801ca92:	4618      	mov	r0, r3
 801ca94:	f7ff fbe0 	bl	801c258 <validate>
 801ca98:	4603      	mov	r3, r0
 801ca9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801ca9c:	7dfb      	ldrb	r3, [r7, #23]
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	d16d      	bne.n	801cb7e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	7d1b      	ldrb	r3, [r3, #20]
 801caa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d067      	beq.n	801cb7e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	7d1b      	ldrb	r3, [r3, #20]
 801cab2:	b25b      	sxtb	r3, r3
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	da1a      	bge.n	801caee <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801cab8:	68bb      	ldr	r3, [r7, #8]
 801caba:	7858      	ldrb	r0, [r3, #1]
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	6a1a      	ldr	r2, [r3, #32]
 801cac6:	2301      	movs	r3, #1
 801cac8:	f7fd feee 	bl	801a8a8 <disk_write>
 801cacc:	4603      	mov	r3, r0
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d006      	beq.n	801cae0 <f_sync+0x5e>
 801cad2:	68bb      	ldr	r3, [r7, #8]
 801cad4:	2101      	movs	r1, #1
 801cad6:	4618      	mov	r0, r3
 801cad8:	f7fe f839 	bl	801ab4e <unlock_fs>
 801cadc:	2301      	movs	r3, #1
 801cade:	e055      	b.n	801cb8c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	7d1b      	ldrb	r3, [r3, #20]
 801cae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cae8:	b2da      	uxtb	r2, r3
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801caee:	f7fd fc25 	bl	801a33c <get_fattime>
 801caf2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801caf4:	68ba      	ldr	r2, [r7, #8]
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cafa:	4619      	mov	r1, r3
 801cafc:	4610      	mov	r0, r2
 801cafe:	f7fe f9f1 	bl	801aee4 <move_window>
 801cb02:	4603      	mov	r3, r0
 801cb04:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801cb06:	7dfb      	ldrb	r3, [r7, #23]
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	d138      	bne.n	801cb7e <f_sync+0xfc>
					dir = fp->dir_ptr;
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb10:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801cb12:	68fb      	ldr	r3, [r7, #12]
 801cb14:	330b      	adds	r3, #11
 801cb16:	781a      	ldrb	r2, [r3, #0]
 801cb18:	68fb      	ldr	r3, [r7, #12]
 801cb1a:	330b      	adds	r3, #11
 801cb1c:	f042 0220 	orr.w	r2, r2, #32
 801cb20:	b2d2      	uxtb	r2, r2
 801cb22:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	6818      	ldr	r0, [r3, #0]
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	689b      	ldr	r3, [r3, #8]
 801cb2c:	461a      	mov	r2, r3
 801cb2e:	68f9      	ldr	r1, [r7, #12]
 801cb30:	f7fe fef6 	bl	801b920 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	f103 021c 	add.w	r2, r3, #28
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	68db      	ldr	r3, [r3, #12]
 801cb3e:	4619      	mov	r1, r3
 801cb40:	4610      	mov	r0, r2
 801cb42:	f7fd ff45 	bl	801a9d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	3316      	adds	r3, #22
 801cb4a:	6939      	ldr	r1, [r7, #16]
 801cb4c:	4618      	mov	r0, r3
 801cb4e:	f7fd ff3f 	bl	801a9d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	3312      	adds	r3, #18
 801cb56:	2100      	movs	r1, #0
 801cb58:	4618      	mov	r0, r3
 801cb5a:	f7fd ff1e 	bl	801a99a <st_word>
					fs->wflag = 1;
 801cb5e:	68bb      	ldr	r3, [r7, #8]
 801cb60:	2201      	movs	r2, #1
 801cb62:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801cb64:	68bb      	ldr	r3, [r7, #8]
 801cb66:	4618      	mov	r0, r3
 801cb68:	f7fe f9ea 	bl	801af40 <sync_fs>
 801cb6c:	4603      	mov	r3, r0
 801cb6e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	7d1b      	ldrb	r3, [r3, #20]
 801cb74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801cb78:	b2da      	uxtb	r2, r3
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801cb7e:	68bb      	ldr	r3, [r7, #8]
 801cb80:	7dfa      	ldrb	r2, [r7, #23]
 801cb82:	4611      	mov	r1, r2
 801cb84:	4618      	mov	r0, r3
 801cb86:	f7fd ffe2 	bl	801ab4e <unlock_fs>
 801cb8a:	7dfb      	ldrb	r3, [r7, #23]
}
 801cb8c:	4618      	mov	r0, r3
 801cb8e:	3718      	adds	r7, #24
 801cb90:	46bd      	mov	sp, r7
 801cb92:	bd80      	pop	{r7, pc}

0801cb94 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801cb94:	b580      	push	{r7, lr}
 801cb96:	b084      	sub	sp, #16
 801cb98:	af00      	add	r7, sp, #0
 801cb9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801cb9c:	6878      	ldr	r0, [r7, #4]
 801cb9e:	f7ff ff70 	bl	801ca82 <f_sync>
 801cba2:	4603      	mov	r3, r0
 801cba4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801cba6:	7bfb      	ldrb	r3, [r7, #15]
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d11d      	bne.n	801cbe8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	f107 0208 	add.w	r2, r7, #8
 801cbb2:	4611      	mov	r1, r2
 801cbb4:	4618      	mov	r0, r3
 801cbb6:	f7ff fb4f 	bl	801c258 <validate>
 801cbba:	4603      	mov	r3, r0
 801cbbc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801cbbe:	7bfb      	ldrb	r3, [r7, #15]
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d111      	bne.n	801cbe8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	691b      	ldr	r3, [r3, #16]
 801cbc8:	4618      	mov	r0, r3
 801cbca:	f7fe f8e7 	bl	801ad9c <dec_lock>
 801cbce:	4603      	mov	r3, r0
 801cbd0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801cbd2:	7bfb      	ldrb	r3, [r7, #15]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d102      	bne.n	801cbde <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	2200      	movs	r2, #0
 801cbdc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801cbde:	68bb      	ldr	r3, [r7, #8]
 801cbe0:	2100      	movs	r1, #0
 801cbe2:	4618      	mov	r0, r3
 801cbe4:	f7fd ffb3 	bl	801ab4e <unlock_fs>
#endif
		}
	}
	return res;
 801cbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbea:	4618      	mov	r0, r3
 801cbec:	3710      	adds	r7, #16
 801cbee:	46bd      	mov	sp, r7
 801cbf0:	bd80      	pop	{r7, pc}
	...

0801cbf4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801cbf4:	b480      	push	{r7}
 801cbf6:	b087      	sub	sp, #28
 801cbf8:	af00      	add	r7, sp, #0
 801cbfa:	60f8      	str	r0, [r7, #12]
 801cbfc:	60b9      	str	r1, [r7, #8]
 801cbfe:	4613      	mov	r3, r2
 801cc00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801cc02:	2301      	movs	r3, #1
 801cc04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801cc06:	2300      	movs	r3, #0
 801cc08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801cc0a:	4b1f      	ldr	r3, [pc, #124]	; (801cc88 <FATFS_LinkDriverEx+0x94>)
 801cc0c:	7a5b      	ldrb	r3, [r3, #9]
 801cc0e:	b2db      	uxtb	r3, r3
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d131      	bne.n	801cc78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801cc14:	4b1c      	ldr	r3, [pc, #112]	; (801cc88 <FATFS_LinkDriverEx+0x94>)
 801cc16:	7a5b      	ldrb	r3, [r3, #9]
 801cc18:	b2db      	uxtb	r3, r3
 801cc1a:	461a      	mov	r2, r3
 801cc1c:	4b1a      	ldr	r3, [pc, #104]	; (801cc88 <FATFS_LinkDriverEx+0x94>)
 801cc1e:	2100      	movs	r1, #0
 801cc20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801cc22:	4b19      	ldr	r3, [pc, #100]	; (801cc88 <FATFS_LinkDriverEx+0x94>)
 801cc24:	7a5b      	ldrb	r3, [r3, #9]
 801cc26:	b2db      	uxtb	r3, r3
 801cc28:	4a17      	ldr	r2, [pc, #92]	; (801cc88 <FATFS_LinkDriverEx+0x94>)
 801cc2a:	009b      	lsls	r3, r3, #2
 801cc2c:	4413      	add	r3, r2
 801cc2e:	68fa      	ldr	r2, [r7, #12]
 801cc30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801cc32:	4b15      	ldr	r3, [pc, #84]	; (801cc88 <FATFS_LinkDriverEx+0x94>)
 801cc34:	7a5b      	ldrb	r3, [r3, #9]
 801cc36:	b2db      	uxtb	r3, r3
 801cc38:	461a      	mov	r2, r3
 801cc3a:	4b13      	ldr	r3, [pc, #76]	; (801cc88 <FATFS_LinkDriverEx+0x94>)
 801cc3c:	4413      	add	r3, r2
 801cc3e:	79fa      	ldrb	r2, [r7, #7]
 801cc40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801cc42:	4b11      	ldr	r3, [pc, #68]	; (801cc88 <FATFS_LinkDriverEx+0x94>)
 801cc44:	7a5b      	ldrb	r3, [r3, #9]
 801cc46:	b2db      	uxtb	r3, r3
 801cc48:	1c5a      	adds	r2, r3, #1
 801cc4a:	b2d1      	uxtb	r1, r2
 801cc4c:	4a0e      	ldr	r2, [pc, #56]	; (801cc88 <FATFS_LinkDriverEx+0x94>)
 801cc4e:	7251      	strb	r1, [r2, #9]
 801cc50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801cc52:	7dbb      	ldrb	r3, [r7, #22]
 801cc54:	3330      	adds	r3, #48	; 0x30
 801cc56:	b2da      	uxtb	r2, r3
 801cc58:	68bb      	ldr	r3, [r7, #8]
 801cc5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801cc5c:	68bb      	ldr	r3, [r7, #8]
 801cc5e:	3301      	adds	r3, #1
 801cc60:	223a      	movs	r2, #58	; 0x3a
 801cc62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801cc64:	68bb      	ldr	r3, [r7, #8]
 801cc66:	3302      	adds	r3, #2
 801cc68:	222f      	movs	r2, #47	; 0x2f
 801cc6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801cc6c:	68bb      	ldr	r3, [r7, #8]
 801cc6e:	3303      	adds	r3, #3
 801cc70:	2200      	movs	r2, #0
 801cc72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801cc74:	2300      	movs	r3, #0
 801cc76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801cc78:	7dfb      	ldrb	r3, [r7, #23]
}
 801cc7a:	4618      	mov	r0, r3
 801cc7c:	371c      	adds	r7, #28
 801cc7e:	46bd      	mov	sp, r7
 801cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc84:	4770      	bx	lr
 801cc86:	bf00      	nop
 801cc88:	24000a68 	.word	0x24000a68

0801cc8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801cc8c:	b580      	push	{r7, lr}
 801cc8e:	b082      	sub	sp, #8
 801cc90:	af00      	add	r7, sp, #0
 801cc92:	6078      	str	r0, [r7, #4]
 801cc94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801cc96:	2200      	movs	r2, #0
 801cc98:	6839      	ldr	r1, [r7, #0]
 801cc9a:	6878      	ldr	r0, [r7, #4]
 801cc9c:	f7ff ffaa 	bl	801cbf4 <FATFS_LinkDriverEx>
 801cca0:	4603      	mov	r3, r0
}
 801cca2:	4618      	mov	r0, r3
 801cca4:	3708      	adds	r7, #8
 801cca6:	46bd      	mov	sp, r7
 801cca8:	bd80      	pop	{r7, pc}

0801ccaa <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801ccaa:	b580      	push	{r7, lr}
 801ccac:	b084      	sub	sp, #16
 801ccae:	af00      	add	r7, sp, #0
 801ccb0:	4603      	mov	r3, r0
 801ccb2:	6039      	str	r1, [r7, #0]
 801ccb4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801ccb6:	2200      	movs	r2, #0
 801ccb8:	2101      	movs	r1, #1
 801ccba:	2001      	movs	r0, #1
 801ccbc:	f000 fb3a 	bl	801d334 <osSemaphoreNew>
 801ccc0:	4602      	mov	r2, r0
 801ccc2:	683b      	ldr	r3, [r7, #0]
 801ccc4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801ccc6:	683b      	ldr	r3, [r7, #0]
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	bf14      	ite	ne
 801ccce:	2301      	movne	r3, #1
 801ccd0:	2300      	moveq	r3, #0
 801ccd2:	b2db      	uxtb	r3, r3
 801ccd4:	60fb      	str	r3, [r7, #12]

    return ret;
 801ccd6:	68fb      	ldr	r3, [r7, #12]
}
 801ccd8:	4618      	mov	r0, r3
 801ccda:	3710      	adds	r7, #16
 801ccdc:	46bd      	mov	sp, r7
 801ccde:	bd80      	pop	{r7, pc}

0801cce0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801cce0:	b580      	push	{r7, lr}
 801cce2:	b082      	sub	sp, #8
 801cce4:	af00      	add	r7, sp, #0
 801cce6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801cce8:	6878      	ldr	r0, [r7, #4]
 801ccea:	f000 fc7f 	bl	801d5ec <osSemaphoreDelete>
#endif
    return 1;
 801ccee:	2301      	movs	r3, #1
}
 801ccf0:	4618      	mov	r0, r3
 801ccf2:	3708      	adds	r7, #8
 801ccf4:	46bd      	mov	sp, r7
 801ccf6:	bd80      	pop	{r7, pc}

0801ccf8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801ccf8:	b580      	push	{r7, lr}
 801ccfa:	b084      	sub	sp, #16
 801ccfc:	af00      	add	r7, sp, #0
 801ccfe:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801cd00:	2300      	movs	r3, #0
 801cd02:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 801cd04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801cd08:	6878      	ldr	r0, [r7, #4]
 801cd0a:	f000 fbb1 	bl	801d470 <osSemaphoreAcquire>
 801cd0e:	4603      	mov	r3, r0
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	d101      	bne.n	801cd18 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 801cd14:	2301      	movs	r3, #1
 801cd16:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801cd18:	68fb      	ldr	r3, [r7, #12]
}
 801cd1a:	4618      	mov	r0, r3
 801cd1c:	3710      	adds	r7, #16
 801cd1e:	46bd      	mov	sp, r7
 801cd20:	bd80      	pop	{r7, pc}

0801cd22 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801cd22:	b580      	push	{r7, lr}
 801cd24:	b082      	sub	sp, #8
 801cd26:	af00      	add	r7, sp, #0
 801cd28:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801cd2a:	6878      	ldr	r0, [r7, #4]
 801cd2c:	f000 fc06 	bl	801d53c <osSemaphoreRelease>
#endif
}
 801cd30:	bf00      	nop
 801cd32:	3708      	adds	r7, #8
 801cd34:	46bd      	mov	sp, r7
 801cd36:	bd80      	pop	{r7, pc}

0801cd38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801cd38:	b480      	push	{r7}
 801cd3a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801cd3c:	bf00      	nop
 801cd3e:	46bd      	mov	sp, r7
 801cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd44:	4770      	bx	lr
	...

0801cd48 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801cd48:	b480      	push	{r7}
 801cd4a:	b085      	sub	sp, #20
 801cd4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801cd4e:	f3ef 8305 	mrs	r3, IPSR
 801cd52:	60bb      	str	r3, [r7, #8]
  return(result);
 801cd54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d10f      	bne.n	801cd7a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd5a:	f3ef 8310 	mrs	r3, PRIMASK
 801cd5e:	607b      	str	r3, [r7, #4]
  return(result);
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	d105      	bne.n	801cd72 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801cd66:	f3ef 8311 	mrs	r3, BASEPRI
 801cd6a:	603b      	str	r3, [r7, #0]
  return(result);
 801cd6c:	683b      	ldr	r3, [r7, #0]
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d007      	beq.n	801cd82 <osKernelInitialize+0x3a>
 801cd72:	4b0e      	ldr	r3, [pc, #56]	; (801cdac <osKernelInitialize+0x64>)
 801cd74:	681b      	ldr	r3, [r3, #0]
 801cd76:	2b02      	cmp	r3, #2
 801cd78:	d103      	bne.n	801cd82 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801cd7a:	f06f 0305 	mvn.w	r3, #5
 801cd7e:	60fb      	str	r3, [r7, #12]
 801cd80:	e00c      	b.n	801cd9c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 801cd82:	4b0a      	ldr	r3, [pc, #40]	; (801cdac <osKernelInitialize+0x64>)
 801cd84:	681b      	ldr	r3, [r3, #0]
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d105      	bne.n	801cd96 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801cd8a:	4b08      	ldr	r3, [pc, #32]	; (801cdac <osKernelInitialize+0x64>)
 801cd8c:	2201      	movs	r2, #1
 801cd8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801cd90:	2300      	movs	r3, #0
 801cd92:	60fb      	str	r3, [r7, #12]
 801cd94:	e002      	b.n	801cd9c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801cd96:	f04f 33ff 	mov.w	r3, #4294967295
 801cd9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801cd9c:	68fb      	ldr	r3, [r7, #12]
}
 801cd9e:	4618      	mov	r0, r3
 801cda0:	3714      	adds	r7, #20
 801cda2:	46bd      	mov	sp, r7
 801cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cda8:	4770      	bx	lr
 801cdaa:	bf00      	nop
 801cdac:	24000a74 	.word	0x24000a74

0801cdb0 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 801cdb0:	b580      	push	{r7, lr}
 801cdb2:	b082      	sub	sp, #8
 801cdb4:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 801cdb6:	f002 fdc3 	bl	801f940 <xTaskGetSchedulerState>
 801cdba:	4603      	mov	r3, r0
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	d004      	beq.n	801cdca <osKernelGetState+0x1a>
 801cdc0:	2b02      	cmp	r3, #2
 801cdc2:	d105      	bne.n	801cdd0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 801cdc4:	2302      	movs	r3, #2
 801cdc6:	607b      	str	r3, [r7, #4]
      break;
 801cdc8:	e00c      	b.n	801cde4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 801cdca:	2303      	movs	r3, #3
 801cdcc:	607b      	str	r3, [r7, #4]
      break;
 801cdce:	e009      	b.n	801cde4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 801cdd0:	4b07      	ldr	r3, [pc, #28]	; (801cdf0 <osKernelGetState+0x40>)
 801cdd2:	681b      	ldr	r3, [r3, #0]
 801cdd4:	2b01      	cmp	r3, #1
 801cdd6:	d102      	bne.n	801cdde <osKernelGetState+0x2e>
        state = osKernelReady;
 801cdd8:	2301      	movs	r3, #1
 801cdda:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 801cddc:	e001      	b.n	801cde2 <osKernelGetState+0x32>
        state = osKernelInactive;
 801cdde:	2300      	movs	r3, #0
 801cde0:	607b      	str	r3, [r7, #4]
      break;
 801cde2:	bf00      	nop
  }

  return (state);
 801cde4:	687b      	ldr	r3, [r7, #4]
}
 801cde6:	4618      	mov	r0, r3
 801cde8:	3708      	adds	r7, #8
 801cdea:	46bd      	mov	sp, r7
 801cdec:	bd80      	pop	{r7, pc}
 801cdee:	bf00      	nop
 801cdf0:	24000a74 	.word	0x24000a74

0801cdf4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 801cdf4:	b580      	push	{r7, lr}
 801cdf6:	b084      	sub	sp, #16
 801cdf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801cdfa:	f3ef 8305 	mrs	r3, IPSR
 801cdfe:	60bb      	str	r3, [r7, #8]
  return(result);
 801ce00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d10f      	bne.n	801ce26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce06:	f3ef 8310 	mrs	r3, PRIMASK
 801ce0a:	607b      	str	r3, [r7, #4]
  return(result);
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d105      	bne.n	801ce1e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801ce12:	f3ef 8311 	mrs	r3, BASEPRI
 801ce16:	603b      	str	r3, [r7, #0]
  return(result);
 801ce18:	683b      	ldr	r3, [r7, #0]
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d007      	beq.n	801ce2e <osKernelStart+0x3a>
 801ce1e:	4b0f      	ldr	r3, [pc, #60]	; (801ce5c <osKernelStart+0x68>)
 801ce20:	681b      	ldr	r3, [r3, #0]
 801ce22:	2b02      	cmp	r3, #2
 801ce24:	d103      	bne.n	801ce2e <osKernelStart+0x3a>
    stat = osErrorISR;
 801ce26:	f06f 0305 	mvn.w	r3, #5
 801ce2a:	60fb      	str	r3, [r7, #12]
 801ce2c:	e010      	b.n	801ce50 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801ce2e:	4b0b      	ldr	r3, [pc, #44]	; (801ce5c <osKernelStart+0x68>)
 801ce30:	681b      	ldr	r3, [r3, #0]
 801ce32:	2b01      	cmp	r3, #1
 801ce34:	d109      	bne.n	801ce4a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801ce36:	f7ff ff7f 	bl	801cd38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801ce3a:	4b08      	ldr	r3, [pc, #32]	; (801ce5c <osKernelStart+0x68>)
 801ce3c:	2202      	movs	r2, #2
 801ce3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801ce40:	f002 f936 	bl	801f0b0 <vTaskStartScheduler>
      stat = osOK;
 801ce44:	2300      	movs	r3, #0
 801ce46:	60fb      	str	r3, [r7, #12]
 801ce48:	e002      	b.n	801ce50 <osKernelStart+0x5c>
    } else {
      stat = osError;
 801ce4a:	f04f 33ff 	mov.w	r3, #4294967295
 801ce4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801ce50:	68fb      	ldr	r3, [r7, #12]
}
 801ce52:	4618      	mov	r0, r3
 801ce54:	3710      	adds	r7, #16
 801ce56:	46bd      	mov	sp, r7
 801ce58:	bd80      	pop	{r7, pc}
 801ce5a:	bf00      	nop
 801ce5c:	24000a74 	.word	0x24000a74

0801ce60 <osKernelLock>:

int32_t osKernelLock (void) {
 801ce60:	b580      	push	{r7, lr}
 801ce62:	b084      	sub	sp, #16
 801ce64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ce66:	f3ef 8305 	mrs	r3, IPSR
 801ce6a:	60bb      	str	r3, [r7, #8]
  return(result);
 801ce6c:	68bb      	ldr	r3, [r7, #8]
  int32_t lock;

  if (IS_IRQ()) {
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d10f      	bne.n	801ce92 <osKernelLock+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce72:	f3ef 8310 	mrs	r3, PRIMASK
 801ce76:	607b      	str	r3, [r7, #4]
  return(result);
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d105      	bne.n	801ce8a <osKernelLock+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801ce7e:	f3ef 8311 	mrs	r3, BASEPRI
 801ce82:	603b      	str	r3, [r7, #0]
  return(result);
 801ce84:	683b      	ldr	r3, [r7, #0]
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d007      	beq.n	801ce9a <osKernelLock+0x3a>
 801ce8a:	4b10      	ldr	r3, [pc, #64]	; (801cecc <osKernelLock+0x6c>)
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	2b02      	cmp	r3, #2
 801ce90:	d103      	bne.n	801ce9a <osKernelLock+0x3a>
    lock = (int32_t)osErrorISR;
 801ce92:	f06f 0305 	mvn.w	r3, #5
 801ce96:	60fb      	str	r3, [r7, #12]
 801ce98:	e013      	b.n	801cec2 <osKernelLock+0x62>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 801ce9a:	f002 fd51 	bl	801f940 <xTaskGetSchedulerState>
 801ce9e:	4603      	mov	r3, r0
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d002      	beq.n	801ceaa <osKernelLock+0x4a>
 801cea4:	2b02      	cmp	r3, #2
 801cea6:	d003      	beq.n	801ceb0 <osKernelLock+0x50>
 801cea8:	e007      	b.n	801ceba <osKernelLock+0x5a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 801ceaa:	2301      	movs	r3, #1
 801ceac:	60fb      	str	r3, [r7, #12]
        break;
 801ceae:	e008      	b.n	801cec2 <osKernelLock+0x62>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 801ceb0:	f002 f962 	bl	801f178 <vTaskSuspendAll>
        lock = 0;
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	60fb      	str	r3, [r7, #12]
        break;
 801ceb8:	e003      	b.n	801cec2 <osKernelLock+0x62>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 801ceba:	f04f 33ff 	mov.w	r3, #4294967295
 801cebe:	60fb      	str	r3, [r7, #12]
        break;
 801cec0:	bf00      	nop
    }
  }

  return (lock);
 801cec2:	68fb      	ldr	r3, [r7, #12]
}
 801cec4:	4618      	mov	r0, r3
 801cec6:	3710      	adds	r7, #16
 801cec8:	46bd      	mov	sp, r7
 801ceca:	bd80      	pop	{r7, pc}
 801cecc:	24000a74 	.word	0x24000a74

0801ced0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 801ced0:	b580      	push	{r7, lr}
 801ced2:	b084      	sub	sp, #16
 801ced4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ced6:	f3ef 8305 	mrs	r3, IPSR
 801ceda:	60bb      	str	r3, [r7, #8]
  return(result);
 801cedc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 801cede:	2b00      	cmp	r3, #0
 801cee0:	d10f      	bne.n	801cf02 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cee2:	f3ef 8310 	mrs	r3, PRIMASK
 801cee6:	607b      	str	r3, [r7, #4]
  return(result);
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d105      	bne.n	801cefa <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801ceee:	f3ef 8311 	mrs	r3, BASEPRI
 801cef2:	603b      	str	r3, [r7, #0]
  return(result);
 801cef4:	683b      	ldr	r3, [r7, #0]
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d007      	beq.n	801cf0a <osKernelGetTickCount+0x3a>
 801cefa:	4b08      	ldr	r3, [pc, #32]	; (801cf1c <osKernelGetTickCount+0x4c>)
 801cefc:	681b      	ldr	r3, [r3, #0]
 801cefe:	2b02      	cmp	r3, #2
 801cf00:	d103      	bne.n	801cf0a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 801cf02:	f002 f9f3 	bl	801f2ec <xTaskGetTickCountFromISR>
 801cf06:	60f8      	str	r0, [r7, #12]
 801cf08:	e002      	b.n	801cf10 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 801cf0a:	f002 f9df 	bl	801f2cc <xTaskGetTickCount>
 801cf0e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 801cf10:	68fb      	ldr	r3, [r7, #12]
}
 801cf12:	4618      	mov	r0, r3
 801cf14:	3710      	adds	r7, #16
 801cf16:	46bd      	mov	sp, r7
 801cf18:	bd80      	pop	{r7, pc}
 801cf1a:	bf00      	nop
 801cf1c:	24000a74 	.word	0x24000a74

0801cf20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801cf20:	b580      	push	{r7, lr}
 801cf22:	b090      	sub	sp, #64	; 0x40
 801cf24:	af04      	add	r7, sp, #16
 801cf26:	60f8      	str	r0, [r7, #12]
 801cf28:	60b9      	str	r1, [r7, #8]
 801cf2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801cf30:	f3ef 8305 	mrs	r3, IPSR
 801cf34:	61fb      	str	r3, [r7, #28]
  return(result);
 801cf36:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	f040 808f 	bne.w	801d05c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf3e:	f3ef 8310 	mrs	r3, PRIMASK
 801cf42:	61bb      	str	r3, [r7, #24]
  return(result);
 801cf44:	69bb      	ldr	r3, [r7, #24]
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d105      	bne.n	801cf56 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801cf4a:	f3ef 8311 	mrs	r3, BASEPRI
 801cf4e:	617b      	str	r3, [r7, #20]
  return(result);
 801cf50:	697b      	ldr	r3, [r7, #20]
 801cf52:	2b00      	cmp	r3, #0
 801cf54:	d003      	beq.n	801cf5e <osThreadNew+0x3e>
 801cf56:	4b44      	ldr	r3, [pc, #272]	; (801d068 <osThreadNew+0x148>)
 801cf58:	681b      	ldr	r3, [r3, #0]
 801cf5a:	2b02      	cmp	r3, #2
 801cf5c:	d07e      	beq.n	801d05c <osThreadNew+0x13c>
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	2b00      	cmp	r3, #0
 801cf62:	d07b      	beq.n	801d05c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 801cf64:	2380      	movs	r3, #128	; 0x80
 801cf66:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 801cf68:	2318      	movs	r3, #24
 801cf6a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 801cf6c:	2300      	movs	r3, #0
 801cf6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 801cf70:	f04f 33ff 	mov.w	r3, #4294967295
 801cf74:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d045      	beq.n	801d008 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 801cf7c:	687b      	ldr	r3, [r7, #4]
 801cf7e:	681b      	ldr	r3, [r3, #0]
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d002      	beq.n	801cf8a <osThreadNew+0x6a>
        name = attr->name;
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	699b      	ldr	r3, [r3, #24]
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d002      	beq.n	801cf98 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	699b      	ldr	r3, [r3, #24]
 801cf96:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801cf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d008      	beq.n	801cfb0 <osThreadNew+0x90>
 801cf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfa0:	2b38      	cmp	r3, #56	; 0x38
 801cfa2:	d805      	bhi.n	801cfb0 <osThreadNew+0x90>
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	685b      	ldr	r3, [r3, #4]
 801cfa8:	f003 0301 	and.w	r3, r3, #1
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	d001      	beq.n	801cfb4 <osThreadNew+0x94>
        return (NULL);
 801cfb0:	2300      	movs	r3, #0
 801cfb2:	e054      	b.n	801d05e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 801cfb4:	687b      	ldr	r3, [r7, #4]
 801cfb6:	695b      	ldr	r3, [r3, #20]
 801cfb8:	2b00      	cmp	r3, #0
 801cfba:	d003      	beq.n	801cfc4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	695b      	ldr	r3, [r3, #20]
 801cfc0:	089b      	lsrs	r3, r3, #2
 801cfc2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	689b      	ldr	r3, [r3, #8]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d00e      	beq.n	801cfea <osThreadNew+0xca>
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	68db      	ldr	r3, [r3, #12]
 801cfd0:	2b5b      	cmp	r3, #91	; 0x5b
 801cfd2:	d90a      	bls.n	801cfea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801cfd8:	2b00      	cmp	r3, #0
 801cfda:	d006      	beq.n	801cfea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	695b      	ldr	r3, [r3, #20]
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d002      	beq.n	801cfea <osThreadNew+0xca>
        mem = 1;
 801cfe4:	2301      	movs	r3, #1
 801cfe6:	623b      	str	r3, [r7, #32]
 801cfe8:	e010      	b.n	801d00c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	689b      	ldr	r3, [r3, #8]
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d10c      	bne.n	801d00c <osThreadNew+0xec>
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	68db      	ldr	r3, [r3, #12]
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d108      	bne.n	801d00c <osThreadNew+0xec>
 801cffa:	687b      	ldr	r3, [r7, #4]
 801cffc:	691b      	ldr	r3, [r3, #16]
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d104      	bne.n	801d00c <osThreadNew+0xec>
          mem = 0;
 801d002:	2300      	movs	r3, #0
 801d004:	623b      	str	r3, [r7, #32]
 801d006:	e001      	b.n	801d00c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 801d008:	2300      	movs	r3, #0
 801d00a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801d00c:	6a3b      	ldr	r3, [r7, #32]
 801d00e:	2b01      	cmp	r3, #1
 801d010:	d110      	bne.n	801d034 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801d012:	687b      	ldr	r3, [r7, #4]
 801d014:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801d016:	687a      	ldr	r2, [r7, #4]
 801d018:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801d01a:	9202      	str	r2, [sp, #8]
 801d01c:	9301      	str	r3, [sp, #4]
 801d01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d020:	9300      	str	r3, [sp, #0]
 801d022:	68bb      	ldr	r3, [r7, #8]
 801d024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d028:	68f8      	ldr	r0, [r7, #12]
 801d02a:	f001 fdf5 	bl	801ec18 <xTaskCreateStatic>
 801d02e:	4603      	mov	r3, r0
 801d030:	613b      	str	r3, [r7, #16]
 801d032:	e013      	b.n	801d05c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 801d034:	6a3b      	ldr	r3, [r7, #32]
 801d036:	2b00      	cmp	r3, #0
 801d038:	d110      	bne.n	801d05c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801d03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d03c:	b29a      	uxth	r2, r3
 801d03e:	f107 0310 	add.w	r3, r7, #16
 801d042:	9301      	str	r3, [sp, #4]
 801d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d046:	9300      	str	r3, [sp, #0]
 801d048:	68bb      	ldr	r3, [r7, #8]
 801d04a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d04c:	68f8      	ldr	r0, [r7, #12]
 801d04e:	f001 fe3d 	bl	801eccc <xTaskCreate>
 801d052:	4603      	mov	r3, r0
 801d054:	2b01      	cmp	r3, #1
 801d056:	d001      	beq.n	801d05c <osThreadNew+0x13c>
          hTask = NULL;
 801d058:	2300      	movs	r3, #0
 801d05a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801d05c:	693b      	ldr	r3, [r7, #16]
}
 801d05e:	4618      	mov	r0, r3
 801d060:	3730      	adds	r7, #48	; 0x30
 801d062:	46bd      	mov	sp, r7
 801d064:	bd80      	pop	{r7, pc}
 801d066:	bf00      	nop
 801d068:	24000a74 	.word	0x24000a74

0801d06c <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 801d06c:	b580      	push	{r7, lr}
 801d06e:	b08a      	sub	sp, #40	; 0x28
 801d070:	af02      	add	r7, sp, #8
 801d072:	6078      	str	r0, [r7, #4]
 801d074:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 801d07a:	69fb      	ldr	r3, [r7, #28]
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	d002      	beq.n	801d086 <osThreadFlagsSet+0x1a>
 801d080:	683b      	ldr	r3, [r7, #0]
 801d082:	2b00      	cmp	r3, #0
 801d084:	da03      	bge.n	801d08e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 801d086:	f06f 0303 	mvn.w	r3, #3
 801d08a:	60fb      	str	r3, [r7, #12]
 801d08c:	e046      	b.n	801d11c <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 801d08e:	f04f 33ff 	mov.w	r3, #4294967295
 801d092:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d094:	f3ef 8305 	mrs	r3, IPSR
 801d098:	61bb      	str	r3, [r7, #24]
  return(result);
 801d09a:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	d10f      	bne.n	801d0c0 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d0a0:	f3ef 8310 	mrs	r3, PRIMASK
 801d0a4:	617b      	str	r3, [r7, #20]
  return(result);
 801d0a6:	697b      	ldr	r3, [r7, #20]
 801d0a8:	2b00      	cmp	r3, #0
 801d0aa:	d105      	bne.n	801d0b8 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801d0ac:	f3ef 8311 	mrs	r3, BASEPRI
 801d0b0:	613b      	str	r3, [r7, #16]
  return(result);
 801d0b2:	693b      	ldr	r3, [r7, #16]
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	d024      	beq.n	801d102 <osThreadFlagsSet+0x96>
 801d0b8:	4b1b      	ldr	r3, [pc, #108]	; (801d128 <osThreadFlagsSet+0xbc>)
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	2b02      	cmp	r3, #2
 801d0be:	d120      	bne.n	801d102 <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 801d0c0:	2300      	movs	r3, #0
 801d0c2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 801d0c4:	f107 0308 	add.w	r3, r7, #8
 801d0c8:	9300      	str	r3, [sp, #0]
 801d0ca:	2300      	movs	r3, #0
 801d0cc:	2201      	movs	r2, #1
 801d0ce:	6839      	ldr	r1, [r7, #0]
 801d0d0:	69f8      	ldr	r0, [r7, #28]
 801d0d2:	f002 fec9 	bl	801fe68 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 801d0d6:	f107 020c 	add.w	r2, r7, #12
 801d0da:	2300      	movs	r3, #0
 801d0dc:	9300      	str	r3, [sp, #0]
 801d0de:	4613      	mov	r3, r2
 801d0e0:	2200      	movs	r2, #0
 801d0e2:	2100      	movs	r1, #0
 801d0e4:	69f8      	ldr	r0, [r7, #28]
 801d0e6:	f002 febf 	bl	801fe68 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 801d0ea:	68bb      	ldr	r3, [r7, #8]
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	d015      	beq.n	801d11c <osThreadFlagsSet+0xb0>
 801d0f0:	4b0e      	ldr	r3, [pc, #56]	; (801d12c <osThreadFlagsSet+0xc0>)
 801d0f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d0f6:	601a      	str	r2, [r3, #0]
 801d0f8:	f3bf 8f4f 	dsb	sy
 801d0fc:	f3bf 8f6f 	isb	sy
 801d100:	e00c      	b.n	801d11c <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 801d102:	2300      	movs	r3, #0
 801d104:	2201      	movs	r2, #1
 801d106:	6839      	ldr	r1, [r7, #0]
 801d108:	69f8      	ldr	r0, [r7, #28]
 801d10a:	f002 fdf9 	bl	801fd00 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 801d10e:	f107 030c 	add.w	r3, r7, #12
 801d112:	2200      	movs	r2, #0
 801d114:	2100      	movs	r1, #0
 801d116:	69f8      	ldr	r0, [r7, #28]
 801d118:	f002 fdf2 	bl	801fd00 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 801d11c:	68fb      	ldr	r3, [r7, #12]
}
 801d11e:	4618      	mov	r0, r3
 801d120:	3720      	adds	r7, #32
 801d122:	46bd      	mov	sp, r7
 801d124:	bd80      	pop	{r7, pc}
 801d126:	bf00      	nop
 801d128:	24000a74 	.word	0x24000a74
 801d12c:	e000ed04 	.word	0xe000ed04

0801d130 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 801d130:	b580      	push	{r7, lr}
 801d132:	b08e      	sub	sp, #56	; 0x38
 801d134:	af00      	add	r7, sp, #0
 801d136:	60f8      	str	r0, [r7, #12]
 801d138:	60b9      	str	r1, [r7, #8]
 801d13a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d13c:	f3ef 8305 	mrs	r3, IPSR
 801d140:	61fb      	str	r3, [r7, #28]
  return(result);
 801d142:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 801d144:	2b00      	cmp	r3, #0
 801d146:	d10f      	bne.n	801d168 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d148:	f3ef 8310 	mrs	r3, PRIMASK
 801d14c:	61bb      	str	r3, [r7, #24]
  return(result);
 801d14e:	69bb      	ldr	r3, [r7, #24]
 801d150:	2b00      	cmp	r3, #0
 801d152:	d105      	bne.n	801d160 <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801d154:	f3ef 8311 	mrs	r3, BASEPRI
 801d158:	617b      	str	r3, [r7, #20]
  return(result);
 801d15a:	697b      	ldr	r3, [r7, #20]
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d007      	beq.n	801d170 <osThreadFlagsWait+0x40>
 801d160:	4b3c      	ldr	r3, [pc, #240]	; (801d254 <osThreadFlagsWait+0x124>)
 801d162:	681b      	ldr	r3, [r3, #0]
 801d164:	2b02      	cmp	r3, #2
 801d166:	d103      	bne.n	801d170 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 801d168:	f06f 0305 	mvn.w	r3, #5
 801d16c:	637b      	str	r3, [r7, #52]	; 0x34
 801d16e:	e06b      	b.n	801d248 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	2b00      	cmp	r3, #0
 801d174:	da03      	bge.n	801d17e <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 801d176:	f06f 0303 	mvn.w	r3, #3
 801d17a:	637b      	str	r3, [r7, #52]	; 0x34
 801d17c:	e064      	b.n	801d248 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 801d17e:	68bb      	ldr	r3, [r7, #8]
 801d180:	f003 0302 	and.w	r3, r3, #2
 801d184:	2b00      	cmp	r3, #0
 801d186:	d002      	beq.n	801d18e <osThreadFlagsWait+0x5e>
      clear = 0U;
 801d188:	2300      	movs	r3, #0
 801d18a:	633b      	str	r3, [r7, #48]	; 0x30
 801d18c:	e001      	b.n	801d192 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 801d192:	2300      	movs	r3, #0
 801d194:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 801d19a:	f002 f897 	bl	801f2cc <xTaskGetTickCount>
 801d19e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 801d1a0:	f107 0210 	add.w	r2, r7, #16
 801d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d1a8:	2000      	movs	r0, #0
 801d1aa:	f002 fd4f 	bl	801fc4c <xTaskNotifyWait>
 801d1ae:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 801d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1b2:	2b01      	cmp	r3, #1
 801d1b4:	d137      	bne.n	801d226 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 801d1b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d1b8:	68fb      	ldr	r3, [r7, #12]
 801d1ba:	4013      	ands	r3, r2
 801d1bc:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 801d1be:	693b      	ldr	r3, [r7, #16]
 801d1c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d1c2:	4313      	orrs	r3, r2
 801d1c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 801d1c6:	68bb      	ldr	r3, [r7, #8]
 801d1c8:	f003 0301 	and.w	r3, r3, #1
 801d1cc:	2b00      	cmp	r3, #0
 801d1ce:	d00c      	beq.n	801d1ea <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 801d1d0:	68fa      	ldr	r2, [r7, #12]
 801d1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1d4:	4013      	ands	r3, r2
 801d1d6:	68fa      	ldr	r2, [r7, #12]
 801d1d8:	429a      	cmp	r2, r3
 801d1da:	d032      	beq.n	801d242 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	d10f      	bne.n	801d202 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 801d1e2:	f06f 0302 	mvn.w	r3, #2
 801d1e6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 801d1e8:	e02e      	b.n	801d248 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 801d1ea:	68fa      	ldr	r2, [r7, #12]
 801d1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1ee:	4013      	ands	r3, r2
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	d128      	bne.n	801d246 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	2b00      	cmp	r3, #0
 801d1f8:	d103      	bne.n	801d202 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 801d1fa:	f06f 0302 	mvn.w	r3, #2
 801d1fe:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 801d200:	e022      	b.n	801d248 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 801d202:	f002 f863 	bl	801f2cc <xTaskGetTickCount>
 801d206:	4602      	mov	r2, r0
 801d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d20a:	1ad3      	subs	r3, r2, r3
 801d20c:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 801d20e:	6a3a      	ldr	r2, [r7, #32]
 801d210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d212:	429a      	cmp	r2, r3
 801d214:	d902      	bls.n	801d21c <osThreadFlagsWait+0xec>
          tout  = 0;
 801d216:	2300      	movs	r3, #0
 801d218:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d21a:	e00e      	b.n	801d23a <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 801d21c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d21e:	6a3b      	ldr	r3, [r7, #32]
 801d220:	1ad3      	subs	r3, r2, r3
 801d222:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d224:	e009      	b.n	801d23a <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	2b00      	cmp	r3, #0
 801d22a:	d103      	bne.n	801d234 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 801d22c:	f06f 0302 	mvn.w	r3, #2
 801d230:	637b      	str	r3, [r7, #52]	; 0x34
 801d232:	e002      	b.n	801d23a <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 801d234:	f06f 0301 	mvn.w	r3, #1
 801d238:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 801d23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d23c:	2b00      	cmp	r3, #0
 801d23e:	d1af      	bne.n	801d1a0 <osThreadFlagsWait+0x70>
 801d240:	e002      	b.n	801d248 <osThreadFlagsWait+0x118>
            break;
 801d242:	bf00      	nop
 801d244:	e000      	b.n	801d248 <osThreadFlagsWait+0x118>
            break;
 801d246:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 801d248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801d24a:	4618      	mov	r0, r3
 801d24c:	3738      	adds	r7, #56	; 0x38
 801d24e:	46bd      	mov	sp, r7
 801d250:	bd80      	pop	{r7, pc}
 801d252:	bf00      	nop
 801d254:	24000a74 	.word	0x24000a74

0801d258 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 801d258:	b580      	push	{r7, lr}
 801d25a:	b086      	sub	sp, #24
 801d25c:	af00      	add	r7, sp, #0
 801d25e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d260:	f3ef 8305 	mrs	r3, IPSR
 801d264:	613b      	str	r3, [r7, #16]
  return(result);
 801d266:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d10f      	bne.n	801d28c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d26c:	f3ef 8310 	mrs	r3, PRIMASK
 801d270:	60fb      	str	r3, [r7, #12]
  return(result);
 801d272:	68fb      	ldr	r3, [r7, #12]
 801d274:	2b00      	cmp	r3, #0
 801d276:	d105      	bne.n	801d284 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801d278:	f3ef 8311 	mrs	r3, BASEPRI
 801d27c:	60bb      	str	r3, [r7, #8]
  return(result);
 801d27e:	68bb      	ldr	r3, [r7, #8]
 801d280:	2b00      	cmp	r3, #0
 801d282:	d007      	beq.n	801d294 <osDelay+0x3c>
 801d284:	4b0a      	ldr	r3, [pc, #40]	; (801d2b0 <osDelay+0x58>)
 801d286:	681b      	ldr	r3, [r3, #0]
 801d288:	2b02      	cmp	r3, #2
 801d28a:	d103      	bne.n	801d294 <osDelay+0x3c>
    stat = osErrorISR;
 801d28c:	f06f 0305 	mvn.w	r3, #5
 801d290:	617b      	str	r3, [r7, #20]
 801d292:	e007      	b.n	801d2a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 801d294:	2300      	movs	r3, #0
 801d296:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	d002      	beq.n	801d2a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 801d29e:	6878      	ldr	r0, [r7, #4]
 801d2a0:	f001 fed2 	bl	801f048 <vTaskDelay>
    }
  }

  return (stat);
 801d2a4:	697b      	ldr	r3, [r7, #20]
}
 801d2a6:	4618      	mov	r0, r3
 801d2a8:	3718      	adds	r7, #24
 801d2aa:	46bd      	mov	sp, r7
 801d2ac:	bd80      	pop	{r7, pc}
 801d2ae:	bf00      	nop
 801d2b0:	24000a74 	.word	0x24000a74

0801d2b4 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 801d2b4:	b580      	push	{r7, lr}
 801d2b6:	b088      	sub	sp, #32
 801d2b8:	af00      	add	r7, sp, #0
 801d2ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d2bc:	f3ef 8305 	mrs	r3, IPSR
 801d2c0:	617b      	str	r3, [r7, #20]
  return(result);
 801d2c2:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d10f      	bne.n	801d2e8 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d2c8:	f3ef 8310 	mrs	r3, PRIMASK
 801d2cc:	613b      	str	r3, [r7, #16]
  return(result);
 801d2ce:	693b      	ldr	r3, [r7, #16]
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	d105      	bne.n	801d2e0 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801d2d4:	f3ef 8311 	mrs	r3, BASEPRI
 801d2d8:	60fb      	str	r3, [r7, #12]
  return(result);
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d007      	beq.n	801d2f0 <osDelayUntil+0x3c>
 801d2e0:	4b13      	ldr	r3, [pc, #76]	; (801d330 <osDelayUntil+0x7c>)
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	2b02      	cmp	r3, #2
 801d2e6:	d103      	bne.n	801d2f0 <osDelayUntil+0x3c>
    stat = osErrorISR;
 801d2e8:	f06f 0305 	mvn.w	r3, #5
 801d2ec:	61fb      	str	r3, [r7, #28]
 801d2ee:	e019      	b.n	801d324 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 801d2f4:	f001 ffea 	bl	801f2cc <xTaskGetTickCount>
 801d2f8:	4603      	mov	r3, r0
 801d2fa:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 801d2fc:	68bb      	ldr	r3, [r7, #8]
 801d2fe:	687a      	ldr	r2, [r7, #4]
 801d300:	1ad3      	subs	r3, r2, r3
 801d302:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 801d304:	69bb      	ldr	r3, [r7, #24]
 801d306:	2b00      	cmp	r3, #0
 801d308:	d009      	beq.n	801d31e <osDelayUntil+0x6a>
 801d30a:	69bb      	ldr	r3, [r7, #24]
 801d30c:	2b00      	cmp	r3, #0
 801d30e:	db06      	blt.n	801d31e <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 801d310:	f107 0308 	add.w	r3, r7, #8
 801d314:	69b9      	ldr	r1, [r7, #24]
 801d316:	4618      	mov	r0, r3
 801d318:	f001 fe1c 	bl	801ef54 <vTaskDelayUntil>
 801d31c:	e002      	b.n	801d324 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 801d31e:	f06f 0303 	mvn.w	r3, #3
 801d322:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 801d324:	69fb      	ldr	r3, [r7, #28]
}
 801d326:	4618      	mov	r0, r3
 801d328:	3720      	adds	r7, #32
 801d32a:	46bd      	mov	sp, r7
 801d32c:	bd80      	pop	{r7, pc}
 801d32e:	bf00      	nop
 801d330:	24000a74 	.word	0x24000a74

0801d334 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801d334:	b580      	push	{r7, lr}
 801d336:	b08c      	sub	sp, #48	; 0x30
 801d338:	af02      	add	r7, sp, #8
 801d33a:	60f8      	str	r0, [r7, #12]
 801d33c:	60b9      	str	r1, [r7, #8]
 801d33e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801d340:	2300      	movs	r3, #0
 801d342:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d344:	f3ef 8305 	mrs	r3, IPSR
 801d348:	61bb      	str	r3, [r7, #24]
  return(result);
 801d34a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	f040 8087 	bne.w	801d460 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d352:	f3ef 8310 	mrs	r3, PRIMASK
 801d356:	617b      	str	r3, [r7, #20]
  return(result);
 801d358:	697b      	ldr	r3, [r7, #20]
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	d105      	bne.n	801d36a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801d35e:	f3ef 8311 	mrs	r3, BASEPRI
 801d362:	613b      	str	r3, [r7, #16]
  return(result);
 801d364:	693b      	ldr	r3, [r7, #16]
 801d366:	2b00      	cmp	r3, #0
 801d368:	d003      	beq.n	801d372 <osSemaphoreNew+0x3e>
 801d36a:	4b40      	ldr	r3, [pc, #256]	; (801d46c <osSemaphoreNew+0x138>)
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	2b02      	cmp	r3, #2
 801d370:	d076      	beq.n	801d460 <osSemaphoreNew+0x12c>
 801d372:	68fb      	ldr	r3, [r7, #12]
 801d374:	2b00      	cmp	r3, #0
 801d376:	d073      	beq.n	801d460 <osSemaphoreNew+0x12c>
 801d378:	68ba      	ldr	r2, [r7, #8]
 801d37a:	68fb      	ldr	r3, [r7, #12]
 801d37c:	429a      	cmp	r2, r3
 801d37e:	d86f      	bhi.n	801d460 <osSemaphoreNew+0x12c>
    mem = -1;
 801d380:	f04f 33ff 	mov.w	r3, #4294967295
 801d384:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	2b00      	cmp	r3, #0
 801d38a:	d015      	beq.n	801d3b8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801d38c:	687b      	ldr	r3, [r7, #4]
 801d38e:	689b      	ldr	r3, [r3, #8]
 801d390:	2b00      	cmp	r3, #0
 801d392:	d006      	beq.n	801d3a2 <osSemaphoreNew+0x6e>
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	68db      	ldr	r3, [r3, #12]
 801d398:	2b4f      	cmp	r3, #79	; 0x4f
 801d39a:	d902      	bls.n	801d3a2 <osSemaphoreNew+0x6e>
        mem = 1;
 801d39c:	2301      	movs	r3, #1
 801d39e:	623b      	str	r3, [r7, #32]
 801d3a0:	e00c      	b.n	801d3bc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	689b      	ldr	r3, [r3, #8]
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d108      	bne.n	801d3bc <osSemaphoreNew+0x88>
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	68db      	ldr	r3, [r3, #12]
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	d104      	bne.n	801d3bc <osSemaphoreNew+0x88>
          mem = 0;
 801d3b2:	2300      	movs	r3, #0
 801d3b4:	623b      	str	r3, [r7, #32]
 801d3b6:	e001      	b.n	801d3bc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 801d3b8:	2300      	movs	r3, #0
 801d3ba:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 801d3bc:	6a3b      	ldr	r3, [r7, #32]
 801d3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d3c2:	d04d      	beq.n	801d460 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 801d3c4:	68fb      	ldr	r3, [r7, #12]
 801d3c6:	2b01      	cmp	r3, #1
 801d3c8:	d129      	bne.n	801d41e <osSemaphoreNew+0xea>
        if (mem == 1) {
 801d3ca:	6a3b      	ldr	r3, [r7, #32]
 801d3cc:	2b01      	cmp	r3, #1
 801d3ce:	d10b      	bne.n	801d3e8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	689a      	ldr	r2, [r3, #8]
 801d3d4:	2303      	movs	r3, #3
 801d3d6:	9300      	str	r3, [sp, #0]
 801d3d8:	4613      	mov	r3, r2
 801d3da:	2200      	movs	r2, #0
 801d3dc:	2100      	movs	r1, #0
 801d3de:	2001      	movs	r0, #1
 801d3e0:	f000 fc72 	bl	801dcc8 <xQueueGenericCreateStatic>
 801d3e4:	6278      	str	r0, [r7, #36]	; 0x24
 801d3e6:	e005      	b.n	801d3f4 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 801d3e8:	2203      	movs	r2, #3
 801d3ea:	2100      	movs	r1, #0
 801d3ec:	2001      	movs	r0, #1
 801d3ee:	f000 fcde 	bl	801ddae <xQueueGenericCreate>
 801d3f2:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801d3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	d022      	beq.n	801d440 <osSemaphoreNew+0x10c>
 801d3fa:	68bb      	ldr	r3, [r7, #8]
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	d01f      	beq.n	801d440 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801d400:	2300      	movs	r3, #0
 801d402:	2200      	movs	r2, #0
 801d404:	2100      	movs	r1, #0
 801d406:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d408:	f000 fd9a 	bl	801df40 <xQueueGenericSend>
 801d40c:	4603      	mov	r3, r0
 801d40e:	2b01      	cmp	r3, #1
 801d410:	d016      	beq.n	801d440 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 801d412:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d414:	f001 fa2f 	bl	801e876 <vQueueDelete>
            hSemaphore = NULL;
 801d418:	2300      	movs	r3, #0
 801d41a:	627b      	str	r3, [r7, #36]	; 0x24
 801d41c:	e010      	b.n	801d440 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 801d41e:	6a3b      	ldr	r3, [r7, #32]
 801d420:	2b01      	cmp	r3, #1
 801d422:	d108      	bne.n	801d436 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	689b      	ldr	r3, [r3, #8]
 801d428:	461a      	mov	r2, r3
 801d42a:	68b9      	ldr	r1, [r7, #8]
 801d42c:	68f8      	ldr	r0, [r7, #12]
 801d42e:	f000 fd20 	bl	801de72 <xQueueCreateCountingSemaphoreStatic>
 801d432:	6278      	str	r0, [r7, #36]	; 0x24
 801d434:	e004      	b.n	801d440 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801d436:	68b9      	ldr	r1, [r7, #8]
 801d438:	68f8      	ldr	r0, [r7, #12]
 801d43a:	f000 fd4f 	bl	801dedc <xQueueCreateCountingSemaphore>
 801d43e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801d440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d442:	2b00      	cmp	r3, #0
 801d444:	d00c      	beq.n	801d460 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	2b00      	cmp	r3, #0
 801d44a:	d003      	beq.n	801d454 <osSemaphoreNew+0x120>
          name = attr->name;
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	61fb      	str	r3, [r7, #28]
 801d452:	e001      	b.n	801d458 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 801d454:	2300      	movs	r3, #0
 801d456:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801d458:	69f9      	ldr	r1, [r7, #28]
 801d45a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d45c:	f001 fb56 	bl	801eb0c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d462:	4618      	mov	r0, r3
 801d464:	3728      	adds	r7, #40	; 0x28
 801d466:	46bd      	mov	sp, r7
 801d468:	bd80      	pop	{r7, pc}
 801d46a:	bf00      	nop
 801d46c:	24000a74 	.word	0x24000a74

0801d470 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801d470:	b580      	push	{r7, lr}
 801d472:	b088      	sub	sp, #32
 801d474:	af00      	add	r7, sp, #0
 801d476:	6078      	str	r0, [r7, #4]
 801d478:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801d47e:	2300      	movs	r3, #0
 801d480:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801d482:	69bb      	ldr	r3, [r7, #24]
 801d484:	2b00      	cmp	r3, #0
 801d486:	d103      	bne.n	801d490 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801d488:	f06f 0303 	mvn.w	r3, #3
 801d48c:	61fb      	str	r3, [r7, #28]
 801d48e:	e04b      	b.n	801d528 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d490:	f3ef 8305 	mrs	r3, IPSR
 801d494:	617b      	str	r3, [r7, #20]
  return(result);
 801d496:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d10f      	bne.n	801d4bc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d49c:	f3ef 8310 	mrs	r3, PRIMASK
 801d4a0:	613b      	str	r3, [r7, #16]
  return(result);
 801d4a2:	693b      	ldr	r3, [r7, #16]
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d105      	bne.n	801d4b4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801d4a8:	f3ef 8311 	mrs	r3, BASEPRI
 801d4ac:	60fb      	str	r3, [r7, #12]
  return(result);
 801d4ae:	68fb      	ldr	r3, [r7, #12]
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d026      	beq.n	801d502 <osSemaphoreAcquire+0x92>
 801d4b4:	4b1f      	ldr	r3, [pc, #124]	; (801d534 <osSemaphoreAcquire+0xc4>)
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	2b02      	cmp	r3, #2
 801d4ba:	d122      	bne.n	801d502 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 801d4bc:	683b      	ldr	r3, [r7, #0]
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	d003      	beq.n	801d4ca <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801d4c2:	f06f 0303 	mvn.w	r3, #3
 801d4c6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801d4c8:	e02d      	b.n	801d526 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801d4ca:	2300      	movs	r3, #0
 801d4cc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801d4ce:	f107 0308 	add.w	r3, r7, #8
 801d4d2:	461a      	mov	r2, r3
 801d4d4:	2100      	movs	r1, #0
 801d4d6:	69b8      	ldr	r0, [r7, #24]
 801d4d8:	f001 f92e 	bl	801e738 <xQueueReceiveFromISR>
 801d4dc:	4603      	mov	r3, r0
 801d4de:	2b01      	cmp	r3, #1
 801d4e0:	d003      	beq.n	801d4ea <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 801d4e2:	f06f 0302 	mvn.w	r3, #2
 801d4e6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801d4e8:	e01d      	b.n	801d526 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801d4ea:	68bb      	ldr	r3, [r7, #8]
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d01a      	beq.n	801d526 <osSemaphoreAcquire+0xb6>
 801d4f0:	4b11      	ldr	r3, [pc, #68]	; (801d538 <osSemaphoreAcquire+0xc8>)
 801d4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d4f6:	601a      	str	r2, [r3, #0]
 801d4f8:	f3bf 8f4f 	dsb	sy
 801d4fc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 801d500:	e011      	b.n	801d526 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801d502:	6839      	ldr	r1, [r7, #0]
 801d504:	69b8      	ldr	r0, [r7, #24]
 801d506:	f001 f80f 	bl	801e528 <xQueueSemaphoreTake>
 801d50a:	4603      	mov	r3, r0
 801d50c:	2b01      	cmp	r3, #1
 801d50e:	d00b      	beq.n	801d528 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 801d510:	683b      	ldr	r3, [r7, #0]
 801d512:	2b00      	cmp	r3, #0
 801d514:	d003      	beq.n	801d51e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801d516:	f06f 0301 	mvn.w	r3, #1
 801d51a:	61fb      	str	r3, [r7, #28]
 801d51c:	e004      	b.n	801d528 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801d51e:	f06f 0302 	mvn.w	r3, #2
 801d522:	61fb      	str	r3, [r7, #28]
 801d524:	e000      	b.n	801d528 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801d526:	bf00      	nop
      }
    }
  }

  return (stat);
 801d528:	69fb      	ldr	r3, [r7, #28]
}
 801d52a:	4618      	mov	r0, r3
 801d52c:	3720      	adds	r7, #32
 801d52e:	46bd      	mov	sp, r7
 801d530:	bd80      	pop	{r7, pc}
 801d532:	bf00      	nop
 801d534:	24000a74 	.word	0x24000a74
 801d538:	e000ed04 	.word	0xe000ed04

0801d53c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801d53c:	b580      	push	{r7, lr}
 801d53e:	b088      	sub	sp, #32
 801d540:	af00      	add	r7, sp, #0
 801d542:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801d548:	2300      	movs	r3, #0
 801d54a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801d54c:	69bb      	ldr	r3, [r7, #24]
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d103      	bne.n	801d55a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801d552:	f06f 0303 	mvn.w	r3, #3
 801d556:	61fb      	str	r3, [r7, #28]
 801d558:	e03e      	b.n	801d5d8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d55a:	f3ef 8305 	mrs	r3, IPSR
 801d55e:	617b      	str	r3, [r7, #20]
  return(result);
 801d560:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801d562:	2b00      	cmp	r3, #0
 801d564:	d10f      	bne.n	801d586 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d566:	f3ef 8310 	mrs	r3, PRIMASK
 801d56a:	613b      	str	r3, [r7, #16]
  return(result);
 801d56c:	693b      	ldr	r3, [r7, #16]
 801d56e:	2b00      	cmp	r3, #0
 801d570:	d105      	bne.n	801d57e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801d572:	f3ef 8311 	mrs	r3, BASEPRI
 801d576:	60fb      	str	r3, [r7, #12]
  return(result);
 801d578:	68fb      	ldr	r3, [r7, #12]
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d01e      	beq.n	801d5bc <osSemaphoreRelease+0x80>
 801d57e:	4b19      	ldr	r3, [pc, #100]	; (801d5e4 <osSemaphoreRelease+0xa8>)
 801d580:	681b      	ldr	r3, [r3, #0]
 801d582:	2b02      	cmp	r3, #2
 801d584:	d11a      	bne.n	801d5bc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 801d586:	2300      	movs	r3, #0
 801d588:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801d58a:	f107 0308 	add.w	r3, r7, #8
 801d58e:	4619      	mov	r1, r3
 801d590:	69b8      	ldr	r0, [r7, #24]
 801d592:	f000 fe63 	bl	801e25c <xQueueGiveFromISR>
 801d596:	4603      	mov	r3, r0
 801d598:	2b01      	cmp	r3, #1
 801d59a:	d003      	beq.n	801d5a4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 801d59c:	f06f 0302 	mvn.w	r3, #2
 801d5a0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801d5a2:	e018      	b.n	801d5d6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 801d5a4:	68bb      	ldr	r3, [r7, #8]
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	d015      	beq.n	801d5d6 <osSemaphoreRelease+0x9a>
 801d5aa:	4b0f      	ldr	r3, [pc, #60]	; (801d5e8 <osSemaphoreRelease+0xac>)
 801d5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d5b0:	601a      	str	r2, [r3, #0]
 801d5b2:	f3bf 8f4f 	dsb	sy
 801d5b6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801d5ba:	e00c      	b.n	801d5d6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801d5bc:	2300      	movs	r3, #0
 801d5be:	2200      	movs	r2, #0
 801d5c0:	2100      	movs	r1, #0
 801d5c2:	69b8      	ldr	r0, [r7, #24]
 801d5c4:	f000 fcbc 	bl	801df40 <xQueueGenericSend>
 801d5c8:	4603      	mov	r3, r0
 801d5ca:	2b01      	cmp	r3, #1
 801d5cc:	d004      	beq.n	801d5d8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801d5ce:	f06f 0302 	mvn.w	r3, #2
 801d5d2:	61fb      	str	r3, [r7, #28]
 801d5d4:	e000      	b.n	801d5d8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801d5d6:	bf00      	nop
    }
  }

  return (stat);
 801d5d8:	69fb      	ldr	r3, [r7, #28]
}
 801d5da:	4618      	mov	r0, r3
 801d5dc:	3720      	adds	r7, #32
 801d5de:	46bd      	mov	sp, r7
 801d5e0:	bd80      	pop	{r7, pc}
 801d5e2:	bf00      	nop
 801d5e4:	24000a74 	.word	0x24000a74
 801d5e8:	e000ed04 	.word	0xe000ed04

0801d5ec <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801d5ec:	b580      	push	{r7, lr}
 801d5ee:	b088      	sub	sp, #32
 801d5f0:	af00      	add	r7, sp, #0
 801d5f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d5f8:	f3ef 8305 	mrs	r3, IPSR
 801d5fc:	617b      	str	r3, [r7, #20]
  return(result);
 801d5fe:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801d600:	2b00      	cmp	r3, #0
 801d602:	d10f      	bne.n	801d624 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d604:	f3ef 8310 	mrs	r3, PRIMASK
 801d608:	613b      	str	r3, [r7, #16]
  return(result);
 801d60a:	693b      	ldr	r3, [r7, #16]
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	d105      	bne.n	801d61c <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801d610:	f3ef 8311 	mrs	r3, BASEPRI
 801d614:	60fb      	str	r3, [r7, #12]
  return(result);
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	2b00      	cmp	r3, #0
 801d61a:	d007      	beq.n	801d62c <osSemaphoreDelete+0x40>
 801d61c:	4b0d      	ldr	r3, [pc, #52]	; (801d654 <osSemaphoreDelete+0x68>)
 801d61e:	681b      	ldr	r3, [r3, #0]
 801d620:	2b02      	cmp	r3, #2
 801d622:	d103      	bne.n	801d62c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 801d624:	f06f 0305 	mvn.w	r3, #5
 801d628:	61fb      	str	r3, [r7, #28]
 801d62a:	e00e      	b.n	801d64a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 801d62c:	69bb      	ldr	r3, [r7, #24]
 801d62e:	2b00      	cmp	r3, #0
 801d630:	d103      	bne.n	801d63a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 801d632:	f06f 0303 	mvn.w	r3, #3
 801d636:	61fb      	str	r3, [r7, #28]
 801d638:	e007      	b.n	801d64a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801d63a:	69b8      	ldr	r0, [r7, #24]
 801d63c:	f001 fa8e 	bl	801eb5c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801d640:	2300      	movs	r3, #0
 801d642:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 801d644:	69b8      	ldr	r0, [r7, #24]
 801d646:	f001 f916 	bl	801e876 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801d64a:	69fb      	ldr	r3, [r7, #28]
}
 801d64c:	4618      	mov	r0, r3
 801d64e:	3720      	adds	r7, #32
 801d650:	46bd      	mov	sp, r7
 801d652:	bd80      	pop	{r7, pc}
 801d654:	24000a74 	.word	0x24000a74

0801d658 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801d658:	b580      	push	{r7, lr}
 801d65a:	b08c      	sub	sp, #48	; 0x30
 801d65c:	af02      	add	r7, sp, #8
 801d65e:	60f8      	str	r0, [r7, #12]
 801d660:	60b9      	str	r1, [r7, #8]
 801d662:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801d664:	2300      	movs	r3, #0
 801d666:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d668:	f3ef 8305 	mrs	r3, IPSR
 801d66c:	61bb      	str	r3, [r7, #24]
  return(result);
 801d66e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801d670:	2b00      	cmp	r3, #0
 801d672:	d170      	bne.n	801d756 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d674:	f3ef 8310 	mrs	r3, PRIMASK
 801d678:	617b      	str	r3, [r7, #20]
  return(result);
 801d67a:	697b      	ldr	r3, [r7, #20]
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	d105      	bne.n	801d68c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801d680:	f3ef 8311 	mrs	r3, BASEPRI
 801d684:	613b      	str	r3, [r7, #16]
  return(result);
 801d686:	693b      	ldr	r3, [r7, #16]
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d003      	beq.n	801d694 <osMessageQueueNew+0x3c>
 801d68c:	4b34      	ldr	r3, [pc, #208]	; (801d760 <osMessageQueueNew+0x108>)
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	2b02      	cmp	r3, #2
 801d692:	d060      	beq.n	801d756 <osMessageQueueNew+0xfe>
 801d694:	68fb      	ldr	r3, [r7, #12]
 801d696:	2b00      	cmp	r3, #0
 801d698:	d05d      	beq.n	801d756 <osMessageQueueNew+0xfe>
 801d69a:	68bb      	ldr	r3, [r7, #8]
 801d69c:	2b00      	cmp	r3, #0
 801d69e:	d05a      	beq.n	801d756 <osMessageQueueNew+0xfe>
    mem = -1;
 801d6a0:	f04f 33ff 	mov.w	r3, #4294967295
 801d6a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d029      	beq.n	801d700 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	689b      	ldr	r3, [r3, #8]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d012      	beq.n	801d6da <osMessageQueueNew+0x82>
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	68db      	ldr	r3, [r3, #12]
 801d6b8:	2b4f      	cmp	r3, #79	; 0x4f
 801d6ba:	d90e      	bls.n	801d6da <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	d00a      	beq.n	801d6da <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	695a      	ldr	r2, [r3, #20]
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	68b9      	ldr	r1, [r7, #8]
 801d6cc:	fb01 f303 	mul.w	r3, r1, r3
 801d6d0:	429a      	cmp	r2, r3
 801d6d2:	d302      	bcc.n	801d6da <osMessageQueueNew+0x82>
        mem = 1;
 801d6d4:	2301      	movs	r3, #1
 801d6d6:	623b      	str	r3, [r7, #32]
 801d6d8:	e014      	b.n	801d704 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	689b      	ldr	r3, [r3, #8]
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d110      	bne.n	801d704 <osMessageQueueNew+0xac>
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	68db      	ldr	r3, [r3, #12]
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	d10c      	bne.n	801d704 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d108      	bne.n	801d704 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	695b      	ldr	r3, [r3, #20]
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d104      	bne.n	801d704 <osMessageQueueNew+0xac>
          mem = 0;
 801d6fa:	2300      	movs	r3, #0
 801d6fc:	623b      	str	r3, [r7, #32]
 801d6fe:	e001      	b.n	801d704 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 801d700:	2300      	movs	r3, #0
 801d702:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801d704:	6a3b      	ldr	r3, [r7, #32]
 801d706:	2b01      	cmp	r3, #1
 801d708:	d10c      	bne.n	801d724 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801d70a:	687b      	ldr	r3, [r7, #4]
 801d70c:	691a      	ldr	r2, [r3, #16]
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	6899      	ldr	r1, [r3, #8]
 801d712:	2300      	movs	r3, #0
 801d714:	9300      	str	r3, [sp, #0]
 801d716:	460b      	mov	r3, r1
 801d718:	68b9      	ldr	r1, [r7, #8]
 801d71a:	68f8      	ldr	r0, [r7, #12]
 801d71c:	f000 fad4 	bl	801dcc8 <xQueueGenericCreateStatic>
 801d720:	6278      	str	r0, [r7, #36]	; 0x24
 801d722:	e008      	b.n	801d736 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 801d724:	6a3b      	ldr	r3, [r7, #32]
 801d726:	2b00      	cmp	r3, #0
 801d728:	d105      	bne.n	801d736 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801d72a:	2200      	movs	r2, #0
 801d72c:	68b9      	ldr	r1, [r7, #8]
 801d72e:	68f8      	ldr	r0, [r7, #12]
 801d730:	f000 fb3d 	bl	801ddae <xQueueGenericCreate>
 801d734:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801d736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d738:	2b00      	cmp	r3, #0
 801d73a:	d00c      	beq.n	801d756 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	2b00      	cmp	r3, #0
 801d740:	d003      	beq.n	801d74a <osMessageQueueNew+0xf2>
        name = attr->name;
 801d742:	687b      	ldr	r3, [r7, #4]
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	61fb      	str	r3, [r7, #28]
 801d748:	e001      	b.n	801d74e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801d74a:	2300      	movs	r3, #0
 801d74c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801d74e:	69f9      	ldr	r1, [r7, #28]
 801d750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d752:	f001 f9db 	bl	801eb0c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d758:	4618      	mov	r0, r3
 801d75a:	3728      	adds	r7, #40	; 0x28
 801d75c:	46bd      	mov	sp, r7
 801d75e:	bd80      	pop	{r7, pc}
 801d760:	24000a74 	.word	0x24000a74

0801d764 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801d764:	b580      	push	{r7, lr}
 801d766:	b08a      	sub	sp, #40	; 0x28
 801d768:	af00      	add	r7, sp, #0
 801d76a:	60f8      	str	r0, [r7, #12]
 801d76c:	60b9      	str	r1, [r7, #8]
 801d76e:	603b      	str	r3, [r7, #0]
 801d770:	4613      	mov	r3, r2
 801d772:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801d774:	68fb      	ldr	r3, [r7, #12]
 801d776:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801d778:	2300      	movs	r3, #0
 801d77a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d77c:	f3ef 8305 	mrs	r3, IPSR
 801d780:	61fb      	str	r3, [r7, #28]
  return(result);
 801d782:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801d784:	2b00      	cmp	r3, #0
 801d786:	d10f      	bne.n	801d7a8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d788:	f3ef 8310 	mrs	r3, PRIMASK
 801d78c:	61bb      	str	r3, [r7, #24]
  return(result);
 801d78e:	69bb      	ldr	r3, [r7, #24]
 801d790:	2b00      	cmp	r3, #0
 801d792:	d105      	bne.n	801d7a0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801d794:	f3ef 8311 	mrs	r3, BASEPRI
 801d798:	617b      	str	r3, [r7, #20]
  return(result);
 801d79a:	697b      	ldr	r3, [r7, #20]
 801d79c:	2b00      	cmp	r3, #0
 801d79e:	d02c      	beq.n	801d7fa <osMessageQueuePut+0x96>
 801d7a0:	4b28      	ldr	r3, [pc, #160]	; (801d844 <osMessageQueuePut+0xe0>)
 801d7a2:	681b      	ldr	r3, [r3, #0]
 801d7a4:	2b02      	cmp	r3, #2
 801d7a6:	d128      	bne.n	801d7fa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801d7a8:	6a3b      	ldr	r3, [r7, #32]
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d005      	beq.n	801d7ba <osMessageQueuePut+0x56>
 801d7ae:	68bb      	ldr	r3, [r7, #8]
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	d002      	beq.n	801d7ba <osMessageQueuePut+0x56>
 801d7b4:	683b      	ldr	r3, [r7, #0]
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	d003      	beq.n	801d7c2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801d7ba:	f06f 0303 	mvn.w	r3, #3
 801d7be:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801d7c0:	e039      	b.n	801d836 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 801d7c2:	2300      	movs	r3, #0
 801d7c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801d7c6:	f107 0210 	add.w	r2, r7, #16
 801d7ca:	2300      	movs	r3, #0
 801d7cc:	68b9      	ldr	r1, [r7, #8]
 801d7ce:	6a38      	ldr	r0, [r7, #32]
 801d7d0:	f000 fcb0 	bl	801e134 <xQueueGenericSendFromISR>
 801d7d4:	4603      	mov	r3, r0
 801d7d6:	2b01      	cmp	r3, #1
 801d7d8:	d003      	beq.n	801d7e2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801d7da:	f06f 0302 	mvn.w	r3, #2
 801d7de:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801d7e0:	e029      	b.n	801d836 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 801d7e2:	693b      	ldr	r3, [r7, #16]
 801d7e4:	2b00      	cmp	r3, #0
 801d7e6:	d026      	beq.n	801d836 <osMessageQueuePut+0xd2>
 801d7e8:	4b17      	ldr	r3, [pc, #92]	; (801d848 <osMessageQueuePut+0xe4>)
 801d7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d7ee:	601a      	str	r2, [r3, #0]
 801d7f0:	f3bf 8f4f 	dsb	sy
 801d7f4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801d7f8:	e01d      	b.n	801d836 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801d7fa:	6a3b      	ldr	r3, [r7, #32]
 801d7fc:	2b00      	cmp	r3, #0
 801d7fe:	d002      	beq.n	801d806 <osMessageQueuePut+0xa2>
 801d800:	68bb      	ldr	r3, [r7, #8]
 801d802:	2b00      	cmp	r3, #0
 801d804:	d103      	bne.n	801d80e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801d806:	f06f 0303 	mvn.w	r3, #3
 801d80a:	627b      	str	r3, [r7, #36]	; 0x24
 801d80c:	e014      	b.n	801d838 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801d80e:	2300      	movs	r3, #0
 801d810:	683a      	ldr	r2, [r7, #0]
 801d812:	68b9      	ldr	r1, [r7, #8]
 801d814:	6a38      	ldr	r0, [r7, #32]
 801d816:	f000 fb93 	bl	801df40 <xQueueGenericSend>
 801d81a:	4603      	mov	r3, r0
 801d81c:	2b01      	cmp	r3, #1
 801d81e:	d00b      	beq.n	801d838 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 801d820:	683b      	ldr	r3, [r7, #0]
 801d822:	2b00      	cmp	r3, #0
 801d824:	d003      	beq.n	801d82e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801d826:	f06f 0301 	mvn.w	r3, #1
 801d82a:	627b      	str	r3, [r7, #36]	; 0x24
 801d82c:	e004      	b.n	801d838 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801d82e:	f06f 0302 	mvn.w	r3, #2
 801d832:	627b      	str	r3, [r7, #36]	; 0x24
 801d834:	e000      	b.n	801d838 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801d836:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801d838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d83a:	4618      	mov	r0, r3
 801d83c:	3728      	adds	r7, #40	; 0x28
 801d83e:	46bd      	mov	sp, r7
 801d840:	bd80      	pop	{r7, pc}
 801d842:	bf00      	nop
 801d844:	24000a74 	.word	0x24000a74
 801d848:	e000ed04 	.word	0xe000ed04

0801d84c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801d84c:	b580      	push	{r7, lr}
 801d84e:	b08a      	sub	sp, #40	; 0x28
 801d850:	af00      	add	r7, sp, #0
 801d852:	60f8      	str	r0, [r7, #12]
 801d854:	60b9      	str	r1, [r7, #8]
 801d856:	607a      	str	r2, [r7, #4]
 801d858:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801d85e:	2300      	movs	r3, #0
 801d860:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d862:	f3ef 8305 	mrs	r3, IPSR
 801d866:	61fb      	str	r3, [r7, #28]
  return(result);
 801d868:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	d10f      	bne.n	801d88e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d86e:	f3ef 8310 	mrs	r3, PRIMASK
 801d872:	61bb      	str	r3, [r7, #24]
  return(result);
 801d874:	69bb      	ldr	r3, [r7, #24]
 801d876:	2b00      	cmp	r3, #0
 801d878:	d105      	bne.n	801d886 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801d87a:	f3ef 8311 	mrs	r3, BASEPRI
 801d87e:	617b      	str	r3, [r7, #20]
  return(result);
 801d880:	697b      	ldr	r3, [r7, #20]
 801d882:	2b00      	cmp	r3, #0
 801d884:	d02c      	beq.n	801d8e0 <osMessageQueueGet+0x94>
 801d886:	4b28      	ldr	r3, [pc, #160]	; (801d928 <osMessageQueueGet+0xdc>)
 801d888:	681b      	ldr	r3, [r3, #0]
 801d88a:	2b02      	cmp	r3, #2
 801d88c:	d128      	bne.n	801d8e0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801d88e:	6a3b      	ldr	r3, [r7, #32]
 801d890:	2b00      	cmp	r3, #0
 801d892:	d005      	beq.n	801d8a0 <osMessageQueueGet+0x54>
 801d894:	68bb      	ldr	r3, [r7, #8]
 801d896:	2b00      	cmp	r3, #0
 801d898:	d002      	beq.n	801d8a0 <osMessageQueueGet+0x54>
 801d89a:	683b      	ldr	r3, [r7, #0]
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d003      	beq.n	801d8a8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 801d8a0:	f06f 0303 	mvn.w	r3, #3
 801d8a4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801d8a6:	e038      	b.n	801d91a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 801d8a8:	2300      	movs	r3, #0
 801d8aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801d8ac:	f107 0310 	add.w	r3, r7, #16
 801d8b0:	461a      	mov	r2, r3
 801d8b2:	68b9      	ldr	r1, [r7, #8]
 801d8b4:	6a38      	ldr	r0, [r7, #32]
 801d8b6:	f000 ff3f 	bl	801e738 <xQueueReceiveFromISR>
 801d8ba:	4603      	mov	r3, r0
 801d8bc:	2b01      	cmp	r3, #1
 801d8be:	d003      	beq.n	801d8c8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 801d8c0:	f06f 0302 	mvn.w	r3, #2
 801d8c4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801d8c6:	e028      	b.n	801d91a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801d8c8:	693b      	ldr	r3, [r7, #16]
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d025      	beq.n	801d91a <osMessageQueueGet+0xce>
 801d8ce:	4b17      	ldr	r3, [pc, #92]	; (801d92c <osMessageQueueGet+0xe0>)
 801d8d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d8d4:	601a      	str	r2, [r3, #0]
 801d8d6:	f3bf 8f4f 	dsb	sy
 801d8da:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801d8de:	e01c      	b.n	801d91a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801d8e0:	6a3b      	ldr	r3, [r7, #32]
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d002      	beq.n	801d8ec <osMessageQueueGet+0xa0>
 801d8e6:	68bb      	ldr	r3, [r7, #8]
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	d103      	bne.n	801d8f4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801d8ec:	f06f 0303 	mvn.w	r3, #3
 801d8f0:	627b      	str	r3, [r7, #36]	; 0x24
 801d8f2:	e013      	b.n	801d91c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801d8f4:	683a      	ldr	r2, [r7, #0]
 801d8f6:	68b9      	ldr	r1, [r7, #8]
 801d8f8:	6a38      	ldr	r0, [r7, #32]
 801d8fa:	f000 fd39 	bl	801e370 <xQueueReceive>
 801d8fe:	4603      	mov	r3, r0
 801d900:	2b01      	cmp	r3, #1
 801d902:	d00b      	beq.n	801d91c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 801d904:	683b      	ldr	r3, [r7, #0]
 801d906:	2b00      	cmp	r3, #0
 801d908:	d003      	beq.n	801d912 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801d90a:	f06f 0301 	mvn.w	r3, #1
 801d90e:	627b      	str	r3, [r7, #36]	; 0x24
 801d910:	e004      	b.n	801d91c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801d912:	f06f 0302 	mvn.w	r3, #2
 801d916:	627b      	str	r3, [r7, #36]	; 0x24
 801d918:	e000      	b.n	801d91c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801d91a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801d91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d91e:	4618      	mov	r0, r3
 801d920:	3728      	adds	r7, #40	; 0x28
 801d922:	46bd      	mov	sp, r7
 801d924:	bd80      	pop	{r7, pc}
 801d926:	bf00      	nop
 801d928:	24000a74 	.word	0x24000a74
 801d92c:	e000ed04 	.word	0xe000ed04

0801d930 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 801d930:	b580      	push	{r7, lr}
 801d932:	b08c      	sub	sp, #48	; 0x30
 801d934:	af00      	add	r7, sp, #0
 801d936:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 801d93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d93e:	2b00      	cmp	r3, #0
 801d940:	d102      	bne.n	801d948 <osMessageQueueGetSpace+0x18>
    space = 0U;
 801d942:	2300      	movs	r3, #0
 801d944:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d946:	e033      	b.n	801d9b0 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d948:	f3ef 8305 	mrs	r3, IPSR
 801d94c:	623b      	str	r3, [r7, #32]
  return(result);
 801d94e:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 801d950:	2b00      	cmp	r3, #0
 801d952:	d10f      	bne.n	801d974 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d954:	f3ef 8310 	mrs	r3, PRIMASK
 801d958:	61fb      	str	r3, [r7, #28]
  return(result);
 801d95a:	69fb      	ldr	r3, [r7, #28]
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d105      	bne.n	801d96c <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801d960:	f3ef 8311 	mrs	r3, BASEPRI
 801d964:	61bb      	str	r3, [r7, #24]
  return(result);
 801d966:	69bb      	ldr	r3, [r7, #24]
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d01d      	beq.n	801d9a8 <osMessageQueueGetSpace+0x78>
 801d96c:	4b13      	ldr	r3, [pc, #76]	; (801d9bc <osMessageQueueGetSpace+0x8c>)
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	2b02      	cmp	r3, #2
 801d972:	d119      	bne.n	801d9a8 <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801d974:	f3ef 8211 	mrs	r2, BASEPRI
 801d978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d97c:	f383 8811 	msr	BASEPRI, r3
 801d980:	f3bf 8f6f 	isb	sy
 801d984:	f3bf 8f4f 	dsb	sy
 801d988:	613a      	str	r2, [r7, #16]
 801d98a:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801d98c:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 801d98e:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 801d990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801d994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d998:	1ad3      	subs	r3, r2, r3
 801d99a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d99e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801d9a0:	697b      	ldr	r3, [r7, #20]
 801d9a2:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 801d9a6:	e003      	b.n	801d9b0 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 801d9a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d9aa:	f000 ff42 	bl	801e832 <uxQueueSpacesAvailable>
 801d9ae:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 801d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801d9b2:	4618      	mov	r0, r3
 801d9b4:	3730      	adds	r7, #48	; 0x30
 801d9b6:	46bd      	mov	sp, r7
 801d9b8:	bd80      	pop	{r7, pc}
 801d9ba:	bf00      	nop
 801d9bc:	24000a74 	.word	0x24000a74

0801d9c0 <osMessageQueueReset>:

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 801d9c0:	b580      	push	{r7, lr}
 801d9c2:	b088      	sub	sp, #32
 801d9c4:	af00      	add	r7, sp, #0
 801d9c6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801d9c8:	687b      	ldr	r3, [r7, #4]
 801d9ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801d9cc:	f3ef 8305 	mrs	r3, IPSR
 801d9d0:	617b      	str	r3, [r7, #20]
  return(result);
 801d9d2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	d10f      	bne.n	801d9f8 <osMessageQueueReset+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d9d8:	f3ef 8310 	mrs	r3, PRIMASK
 801d9dc:	613b      	str	r3, [r7, #16]
  return(result);
 801d9de:	693b      	ldr	r3, [r7, #16]
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d105      	bne.n	801d9f0 <osMessageQueueReset+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801d9e4:	f3ef 8311 	mrs	r3, BASEPRI
 801d9e8:	60fb      	str	r3, [r7, #12]
  return(result);
 801d9ea:	68fb      	ldr	r3, [r7, #12]
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	d007      	beq.n	801da00 <osMessageQueueReset+0x40>
 801d9f0:	4b0c      	ldr	r3, [pc, #48]	; (801da24 <osMessageQueueReset+0x64>)
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	2b02      	cmp	r3, #2
 801d9f6:	d103      	bne.n	801da00 <osMessageQueueReset+0x40>
    stat = osErrorISR;
 801d9f8:	f06f 0305 	mvn.w	r3, #5
 801d9fc:	61fb      	str	r3, [r7, #28]
 801d9fe:	e00c      	b.n	801da1a <osMessageQueueReset+0x5a>
  }
  else if (hQueue == NULL) {
 801da00:	69bb      	ldr	r3, [r7, #24]
 801da02:	2b00      	cmp	r3, #0
 801da04:	d103      	bne.n	801da0e <osMessageQueueReset+0x4e>
    stat = osErrorParameter;
 801da06:	f06f 0303 	mvn.w	r3, #3
 801da0a:	61fb      	str	r3, [r7, #28]
 801da0c:	e005      	b.n	801da1a <osMessageQueueReset+0x5a>
  }
  else {
    stat = osOK;
 801da0e:	2300      	movs	r3, #0
 801da10:	61fb      	str	r3, [r7, #28]
    (void)xQueueReset (hQueue);
 801da12:	2100      	movs	r1, #0
 801da14:	69b8      	ldr	r0, [r7, #24]
 801da16:	f000 f8ef 	bl	801dbf8 <xQueueGenericReset>
  }

  return (stat);
 801da1a:	69fb      	ldr	r3, [r7, #28]
}
 801da1c:	4618      	mov	r0, r3
 801da1e:	3720      	adds	r7, #32
 801da20:	46bd      	mov	sp, r7
 801da22:	bd80      	pop	{r7, pc}
 801da24:	24000a74 	.word	0x24000a74

0801da28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801da28:	b480      	push	{r7}
 801da2a:	b085      	sub	sp, #20
 801da2c:	af00      	add	r7, sp, #0
 801da2e:	60f8      	str	r0, [r7, #12]
 801da30:	60b9      	str	r1, [r7, #8]
 801da32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	4a07      	ldr	r2, [pc, #28]	; (801da54 <vApplicationGetIdleTaskMemory+0x2c>)
 801da38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801da3a:	68bb      	ldr	r3, [r7, #8]
 801da3c:	4a06      	ldr	r2, [pc, #24]	; (801da58 <vApplicationGetIdleTaskMemory+0x30>)
 801da3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	2280      	movs	r2, #128	; 0x80
 801da44:	601a      	str	r2, [r3, #0]
}
 801da46:	bf00      	nop
 801da48:	3714      	adds	r7, #20
 801da4a:	46bd      	mov	sp, r7
 801da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da50:	4770      	bx	lr
 801da52:	bf00      	nop
 801da54:	24000a78 	.word	0x24000a78
 801da58:	24000ad4 	.word	0x24000ad4

0801da5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801da5c:	b480      	push	{r7}
 801da5e:	b085      	sub	sp, #20
 801da60:	af00      	add	r7, sp, #0
 801da62:	60f8      	str	r0, [r7, #12]
 801da64:	60b9      	str	r1, [r7, #8]
 801da66:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	4a07      	ldr	r2, [pc, #28]	; (801da88 <vApplicationGetTimerTaskMemory+0x2c>)
 801da6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801da6e:	68bb      	ldr	r3, [r7, #8]
 801da70:	4a06      	ldr	r2, [pc, #24]	; (801da8c <vApplicationGetTimerTaskMemory+0x30>)
 801da72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	f44f 7280 	mov.w	r2, #256	; 0x100
 801da7a:	601a      	str	r2, [r3, #0]
}
 801da7c:	bf00      	nop
 801da7e:	3714      	adds	r7, #20
 801da80:	46bd      	mov	sp, r7
 801da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da86:	4770      	bx	lr
 801da88:	24000cd4 	.word	0x24000cd4
 801da8c:	24000d30 	.word	0x24000d30

0801da90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801da90:	b480      	push	{r7}
 801da92:	b083      	sub	sp, #12
 801da94:	af00      	add	r7, sp, #0
 801da96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	f103 0208 	add.w	r2, r3, #8
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	f04f 32ff 	mov.w	r2, #4294967295
 801daa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	f103 0208 	add.w	r2, r3, #8
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	f103 0208 	add.w	r2, r3, #8
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	2200      	movs	r2, #0
 801dac2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801dac4:	bf00      	nop
 801dac6:	370c      	adds	r7, #12
 801dac8:	46bd      	mov	sp, r7
 801daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dace:	4770      	bx	lr

0801dad0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801dad0:	b480      	push	{r7}
 801dad2:	b083      	sub	sp, #12
 801dad4:	af00      	add	r7, sp, #0
 801dad6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	2200      	movs	r2, #0
 801dadc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801dade:	bf00      	nop
 801dae0:	370c      	adds	r7, #12
 801dae2:	46bd      	mov	sp, r7
 801dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dae8:	4770      	bx	lr

0801daea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801daea:	b480      	push	{r7}
 801daec:	b085      	sub	sp, #20
 801daee:	af00      	add	r7, sp, #0
 801daf0:	6078      	str	r0, [r7, #4]
 801daf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	685b      	ldr	r3, [r3, #4]
 801daf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801dafa:	683b      	ldr	r3, [r7, #0]
 801dafc:	68fa      	ldr	r2, [r7, #12]
 801dafe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801db00:	68fb      	ldr	r3, [r7, #12]
 801db02:	689a      	ldr	r2, [r3, #8]
 801db04:	683b      	ldr	r3, [r7, #0]
 801db06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	689b      	ldr	r3, [r3, #8]
 801db0c:	683a      	ldr	r2, [r7, #0]
 801db0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801db10:	68fb      	ldr	r3, [r7, #12]
 801db12:	683a      	ldr	r2, [r7, #0]
 801db14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801db16:	683b      	ldr	r3, [r7, #0]
 801db18:	687a      	ldr	r2, [r7, #4]
 801db1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	681b      	ldr	r3, [r3, #0]
 801db20:	1c5a      	adds	r2, r3, #1
 801db22:	687b      	ldr	r3, [r7, #4]
 801db24:	601a      	str	r2, [r3, #0]
}
 801db26:	bf00      	nop
 801db28:	3714      	adds	r7, #20
 801db2a:	46bd      	mov	sp, r7
 801db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db30:	4770      	bx	lr

0801db32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801db32:	b480      	push	{r7}
 801db34:	b085      	sub	sp, #20
 801db36:	af00      	add	r7, sp, #0
 801db38:	6078      	str	r0, [r7, #4]
 801db3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801db3c:	683b      	ldr	r3, [r7, #0]
 801db3e:	681b      	ldr	r3, [r3, #0]
 801db40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801db42:	68bb      	ldr	r3, [r7, #8]
 801db44:	f1b3 3fff 	cmp.w	r3, #4294967295
 801db48:	d103      	bne.n	801db52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	691b      	ldr	r3, [r3, #16]
 801db4e:	60fb      	str	r3, [r7, #12]
 801db50:	e00c      	b.n	801db6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	3308      	adds	r3, #8
 801db56:	60fb      	str	r3, [r7, #12]
 801db58:	e002      	b.n	801db60 <vListInsert+0x2e>
 801db5a:	68fb      	ldr	r3, [r7, #12]
 801db5c:	685b      	ldr	r3, [r3, #4]
 801db5e:	60fb      	str	r3, [r7, #12]
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	685b      	ldr	r3, [r3, #4]
 801db64:	681b      	ldr	r3, [r3, #0]
 801db66:	68ba      	ldr	r2, [r7, #8]
 801db68:	429a      	cmp	r2, r3
 801db6a:	d2f6      	bcs.n	801db5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	685a      	ldr	r2, [r3, #4]
 801db70:	683b      	ldr	r3, [r7, #0]
 801db72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801db74:	683b      	ldr	r3, [r7, #0]
 801db76:	685b      	ldr	r3, [r3, #4]
 801db78:	683a      	ldr	r2, [r7, #0]
 801db7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801db7c:	683b      	ldr	r3, [r7, #0]
 801db7e:	68fa      	ldr	r2, [r7, #12]
 801db80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801db82:	68fb      	ldr	r3, [r7, #12]
 801db84:	683a      	ldr	r2, [r7, #0]
 801db86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801db88:	683b      	ldr	r3, [r7, #0]
 801db8a:	687a      	ldr	r2, [r7, #4]
 801db8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	681b      	ldr	r3, [r3, #0]
 801db92:	1c5a      	adds	r2, r3, #1
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	601a      	str	r2, [r3, #0]
}
 801db98:	bf00      	nop
 801db9a:	3714      	adds	r7, #20
 801db9c:	46bd      	mov	sp, r7
 801db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dba2:	4770      	bx	lr

0801dba4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801dba4:	b480      	push	{r7}
 801dba6:	b085      	sub	sp, #20
 801dba8:	af00      	add	r7, sp, #0
 801dbaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	691b      	ldr	r3, [r3, #16]
 801dbb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	685b      	ldr	r3, [r3, #4]
 801dbb6:	687a      	ldr	r2, [r7, #4]
 801dbb8:	6892      	ldr	r2, [r2, #8]
 801dbba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	689b      	ldr	r3, [r3, #8]
 801dbc0:	687a      	ldr	r2, [r7, #4]
 801dbc2:	6852      	ldr	r2, [r2, #4]
 801dbc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801dbc6:	68fb      	ldr	r3, [r7, #12]
 801dbc8:	685b      	ldr	r3, [r3, #4]
 801dbca:	687a      	ldr	r2, [r7, #4]
 801dbcc:	429a      	cmp	r2, r3
 801dbce:	d103      	bne.n	801dbd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	689a      	ldr	r2, [r3, #8]
 801dbd4:	68fb      	ldr	r3, [r7, #12]
 801dbd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801dbd8:	687b      	ldr	r3, [r7, #4]
 801dbda:	2200      	movs	r2, #0
 801dbdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801dbde:	68fb      	ldr	r3, [r7, #12]
 801dbe0:	681b      	ldr	r3, [r3, #0]
 801dbe2:	1e5a      	subs	r2, r3, #1
 801dbe4:	68fb      	ldr	r3, [r7, #12]
 801dbe6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801dbe8:	68fb      	ldr	r3, [r7, #12]
 801dbea:	681b      	ldr	r3, [r3, #0]
}
 801dbec:	4618      	mov	r0, r3
 801dbee:	3714      	adds	r7, #20
 801dbf0:	46bd      	mov	sp, r7
 801dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbf6:	4770      	bx	lr

0801dbf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801dbf8:	b580      	push	{r7, lr}
 801dbfa:	b084      	sub	sp, #16
 801dbfc:	af00      	add	r7, sp, #0
 801dbfe:	6078      	str	r0, [r7, #4]
 801dc00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801dc06:	68fb      	ldr	r3, [r7, #12]
 801dc08:	2b00      	cmp	r3, #0
 801dc0a:	d109      	bne.n	801dc20 <xQueueGenericReset+0x28>
	__asm volatile
 801dc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dc10:	f383 8811 	msr	BASEPRI, r3
 801dc14:	f3bf 8f6f 	isb	sy
 801dc18:	f3bf 8f4f 	dsb	sy
 801dc1c:	60bb      	str	r3, [r7, #8]
 801dc1e:	e7fe      	b.n	801dc1e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 801dc20:	f002 febc 	bl	802099c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801dc24:	68fb      	ldr	r3, [r7, #12]
 801dc26:	681a      	ldr	r2, [r3, #0]
 801dc28:	68fb      	ldr	r3, [r7, #12]
 801dc2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dc2c:	68f9      	ldr	r1, [r7, #12]
 801dc2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801dc30:	fb01 f303 	mul.w	r3, r1, r3
 801dc34:	441a      	add	r2, r3
 801dc36:	68fb      	ldr	r3, [r7, #12]
 801dc38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801dc3a:	68fb      	ldr	r3, [r7, #12]
 801dc3c:	2200      	movs	r2, #0
 801dc3e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801dc40:	68fb      	ldr	r3, [r7, #12]
 801dc42:	681a      	ldr	r2, [r3, #0]
 801dc44:	68fb      	ldr	r3, [r7, #12]
 801dc46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801dc48:	68fb      	ldr	r3, [r7, #12]
 801dc4a:	681a      	ldr	r2, [r3, #0]
 801dc4c:	68fb      	ldr	r3, [r7, #12]
 801dc4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dc50:	3b01      	subs	r3, #1
 801dc52:	68f9      	ldr	r1, [r7, #12]
 801dc54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801dc56:	fb01 f303 	mul.w	r3, r1, r3
 801dc5a:	441a      	add	r2, r3
 801dc5c:	68fb      	ldr	r3, [r7, #12]
 801dc5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	22ff      	movs	r2, #255	; 0xff
 801dc64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801dc68:	68fb      	ldr	r3, [r7, #12]
 801dc6a:	22ff      	movs	r2, #255	; 0xff
 801dc6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801dc70:	683b      	ldr	r3, [r7, #0]
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d114      	bne.n	801dca0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801dc76:	68fb      	ldr	r3, [r7, #12]
 801dc78:	691b      	ldr	r3, [r3, #16]
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d01a      	beq.n	801dcb4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801dc7e:	68fb      	ldr	r3, [r7, #12]
 801dc80:	3310      	adds	r3, #16
 801dc82:	4618      	mov	r0, r3
 801dc84:	f001 fca6 	bl	801f5d4 <xTaskRemoveFromEventList>
 801dc88:	4603      	mov	r3, r0
 801dc8a:	2b00      	cmp	r3, #0
 801dc8c:	d012      	beq.n	801dcb4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801dc8e:	4b0d      	ldr	r3, [pc, #52]	; (801dcc4 <xQueueGenericReset+0xcc>)
 801dc90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801dc94:	601a      	str	r2, [r3, #0]
 801dc96:	f3bf 8f4f 	dsb	sy
 801dc9a:	f3bf 8f6f 	isb	sy
 801dc9e:	e009      	b.n	801dcb4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801dca0:	68fb      	ldr	r3, [r7, #12]
 801dca2:	3310      	adds	r3, #16
 801dca4:	4618      	mov	r0, r3
 801dca6:	f7ff fef3 	bl	801da90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801dcaa:	68fb      	ldr	r3, [r7, #12]
 801dcac:	3324      	adds	r3, #36	; 0x24
 801dcae:	4618      	mov	r0, r3
 801dcb0:	f7ff feee 	bl	801da90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801dcb4:	f002 fea0 	bl	80209f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801dcb8:	2301      	movs	r3, #1
}
 801dcba:	4618      	mov	r0, r3
 801dcbc:	3710      	adds	r7, #16
 801dcbe:	46bd      	mov	sp, r7
 801dcc0:	bd80      	pop	{r7, pc}
 801dcc2:	bf00      	nop
 801dcc4:	e000ed04 	.word	0xe000ed04

0801dcc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801dcc8:	b580      	push	{r7, lr}
 801dcca:	b08e      	sub	sp, #56	; 0x38
 801dccc:	af02      	add	r7, sp, #8
 801dcce:	60f8      	str	r0, [r7, #12]
 801dcd0:	60b9      	str	r1, [r7, #8]
 801dcd2:	607a      	str	r2, [r7, #4]
 801dcd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801dcd6:	68fb      	ldr	r3, [r7, #12]
 801dcd8:	2b00      	cmp	r3, #0
 801dcda:	d109      	bne.n	801dcf0 <xQueueGenericCreateStatic+0x28>
 801dcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dce0:	f383 8811 	msr	BASEPRI, r3
 801dce4:	f3bf 8f6f 	isb	sy
 801dce8:	f3bf 8f4f 	dsb	sy
 801dcec:	62bb      	str	r3, [r7, #40]	; 0x28
 801dcee:	e7fe      	b.n	801dcee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801dcf0:	683b      	ldr	r3, [r7, #0]
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d109      	bne.n	801dd0a <xQueueGenericCreateStatic+0x42>
 801dcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dcfa:	f383 8811 	msr	BASEPRI, r3
 801dcfe:	f3bf 8f6f 	isb	sy
 801dd02:	f3bf 8f4f 	dsb	sy
 801dd06:	627b      	str	r3, [r7, #36]	; 0x24
 801dd08:	e7fe      	b.n	801dd08 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801dd0a:	687b      	ldr	r3, [r7, #4]
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	d002      	beq.n	801dd16 <xQueueGenericCreateStatic+0x4e>
 801dd10:	68bb      	ldr	r3, [r7, #8]
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	d001      	beq.n	801dd1a <xQueueGenericCreateStatic+0x52>
 801dd16:	2301      	movs	r3, #1
 801dd18:	e000      	b.n	801dd1c <xQueueGenericCreateStatic+0x54>
 801dd1a:	2300      	movs	r3, #0
 801dd1c:	2b00      	cmp	r3, #0
 801dd1e:	d109      	bne.n	801dd34 <xQueueGenericCreateStatic+0x6c>
 801dd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dd24:	f383 8811 	msr	BASEPRI, r3
 801dd28:	f3bf 8f6f 	isb	sy
 801dd2c:	f3bf 8f4f 	dsb	sy
 801dd30:	623b      	str	r3, [r7, #32]
 801dd32:	e7fe      	b.n	801dd32 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801dd34:	687b      	ldr	r3, [r7, #4]
 801dd36:	2b00      	cmp	r3, #0
 801dd38:	d102      	bne.n	801dd40 <xQueueGenericCreateStatic+0x78>
 801dd3a:	68bb      	ldr	r3, [r7, #8]
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	d101      	bne.n	801dd44 <xQueueGenericCreateStatic+0x7c>
 801dd40:	2301      	movs	r3, #1
 801dd42:	e000      	b.n	801dd46 <xQueueGenericCreateStatic+0x7e>
 801dd44:	2300      	movs	r3, #0
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d109      	bne.n	801dd5e <xQueueGenericCreateStatic+0x96>
 801dd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dd4e:	f383 8811 	msr	BASEPRI, r3
 801dd52:	f3bf 8f6f 	isb	sy
 801dd56:	f3bf 8f4f 	dsb	sy
 801dd5a:	61fb      	str	r3, [r7, #28]
 801dd5c:	e7fe      	b.n	801dd5c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801dd5e:	2350      	movs	r3, #80	; 0x50
 801dd60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801dd62:	697b      	ldr	r3, [r7, #20]
 801dd64:	2b50      	cmp	r3, #80	; 0x50
 801dd66:	d009      	beq.n	801dd7c <xQueueGenericCreateStatic+0xb4>
 801dd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dd6c:	f383 8811 	msr	BASEPRI, r3
 801dd70:	f3bf 8f6f 	isb	sy
 801dd74:	f3bf 8f4f 	dsb	sy
 801dd78:	61bb      	str	r3, [r7, #24]
 801dd7a:	e7fe      	b.n	801dd7a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801dd7c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801dd7e:	683b      	ldr	r3, [r7, #0]
 801dd80:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801dd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d00d      	beq.n	801dda4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801dd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd8a:	2201      	movs	r2, #1
 801dd8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801dd90:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801dd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd96:	9300      	str	r3, [sp, #0]
 801dd98:	4613      	mov	r3, r2
 801dd9a:	687a      	ldr	r2, [r7, #4]
 801dd9c:	68b9      	ldr	r1, [r7, #8]
 801dd9e:	68f8      	ldr	r0, [r7, #12]
 801dda0:	f000 f844 	bl	801de2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801dda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801dda6:	4618      	mov	r0, r3
 801dda8:	3730      	adds	r7, #48	; 0x30
 801ddaa:	46bd      	mov	sp, r7
 801ddac:	bd80      	pop	{r7, pc}

0801ddae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801ddae:	b580      	push	{r7, lr}
 801ddb0:	b08a      	sub	sp, #40	; 0x28
 801ddb2:	af02      	add	r7, sp, #8
 801ddb4:	60f8      	str	r0, [r7, #12]
 801ddb6:	60b9      	str	r1, [r7, #8]
 801ddb8:	4613      	mov	r3, r2
 801ddba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801ddbc:	68fb      	ldr	r3, [r7, #12]
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	d109      	bne.n	801ddd6 <xQueueGenericCreate+0x28>
 801ddc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ddc6:	f383 8811 	msr	BASEPRI, r3
 801ddca:	f3bf 8f6f 	isb	sy
 801ddce:	f3bf 8f4f 	dsb	sy
 801ddd2:	613b      	str	r3, [r7, #16]
 801ddd4:	e7fe      	b.n	801ddd4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801ddd6:	68bb      	ldr	r3, [r7, #8]
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d102      	bne.n	801dde2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801dddc:	2300      	movs	r3, #0
 801ddde:	61fb      	str	r3, [r7, #28]
 801dde0:	e004      	b.n	801ddec <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801dde2:	68fb      	ldr	r3, [r7, #12]
 801dde4:	68ba      	ldr	r2, [r7, #8]
 801dde6:	fb02 f303 	mul.w	r3, r2, r3
 801ddea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801ddec:	69fb      	ldr	r3, [r7, #28]
 801ddee:	3350      	adds	r3, #80	; 0x50
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	f002 feed 	bl	8020bd0 <pvPortMalloc>
 801ddf6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801ddf8:	69bb      	ldr	r3, [r7, #24]
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	d011      	beq.n	801de22 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801ddfe:	69bb      	ldr	r3, [r7, #24]
 801de00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801de02:	697b      	ldr	r3, [r7, #20]
 801de04:	3350      	adds	r3, #80	; 0x50
 801de06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801de08:	69bb      	ldr	r3, [r7, #24]
 801de0a:	2200      	movs	r2, #0
 801de0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801de10:	79fa      	ldrb	r2, [r7, #7]
 801de12:	69bb      	ldr	r3, [r7, #24]
 801de14:	9300      	str	r3, [sp, #0]
 801de16:	4613      	mov	r3, r2
 801de18:	697a      	ldr	r2, [r7, #20]
 801de1a:	68b9      	ldr	r1, [r7, #8]
 801de1c:	68f8      	ldr	r0, [r7, #12]
 801de1e:	f000 f805 	bl	801de2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801de22:	69bb      	ldr	r3, [r7, #24]
	}
 801de24:	4618      	mov	r0, r3
 801de26:	3720      	adds	r7, #32
 801de28:	46bd      	mov	sp, r7
 801de2a:	bd80      	pop	{r7, pc}

0801de2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801de2c:	b580      	push	{r7, lr}
 801de2e:	b084      	sub	sp, #16
 801de30:	af00      	add	r7, sp, #0
 801de32:	60f8      	str	r0, [r7, #12]
 801de34:	60b9      	str	r1, [r7, #8]
 801de36:	607a      	str	r2, [r7, #4]
 801de38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801de3a:	68bb      	ldr	r3, [r7, #8]
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d103      	bne.n	801de48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801de40:	69bb      	ldr	r3, [r7, #24]
 801de42:	69ba      	ldr	r2, [r7, #24]
 801de44:	601a      	str	r2, [r3, #0]
 801de46:	e002      	b.n	801de4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801de48:	69bb      	ldr	r3, [r7, #24]
 801de4a:	687a      	ldr	r2, [r7, #4]
 801de4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801de4e:	69bb      	ldr	r3, [r7, #24]
 801de50:	68fa      	ldr	r2, [r7, #12]
 801de52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801de54:	69bb      	ldr	r3, [r7, #24]
 801de56:	68ba      	ldr	r2, [r7, #8]
 801de58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801de5a:	2101      	movs	r1, #1
 801de5c:	69b8      	ldr	r0, [r7, #24]
 801de5e:	f7ff fecb 	bl	801dbf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801de62:	69bb      	ldr	r3, [r7, #24]
 801de64:	78fa      	ldrb	r2, [r7, #3]
 801de66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801de6a:	bf00      	nop
 801de6c:	3710      	adds	r7, #16
 801de6e:	46bd      	mov	sp, r7
 801de70:	bd80      	pop	{r7, pc}

0801de72 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801de72:	b580      	push	{r7, lr}
 801de74:	b08a      	sub	sp, #40	; 0x28
 801de76:	af02      	add	r7, sp, #8
 801de78:	60f8      	str	r0, [r7, #12]
 801de7a:	60b9      	str	r1, [r7, #8]
 801de7c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801de7e:	68fb      	ldr	r3, [r7, #12]
 801de80:	2b00      	cmp	r3, #0
 801de82:	d109      	bne.n	801de98 <xQueueCreateCountingSemaphoreStatic+0x26>
 801de84:	f04f 0350 	mov.w	r3, #80	; 0x50
 801de88:	f383 8811 	msr	BASEPRI, r3
 801de8c:	f3bf 8f6f 	isb	sy
 801de90:	f3bf 8f4f 	dsb	sy
 801de94:	61bb      	str	r3, [r7, #24]
 801de96:	e7fe      	b.n	801de96 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801de98:	68ba      	ldr	r2, [r7, #8]
 801de9a:	68fb      	ldr	r3, [r7, #12]
 801de9c:	429a      	cmp	r2, r3
 801de9e:	d909      	bls.n	801deb4 <xQueueCreateCountingSemaphoreStatic+0x42>
 801dea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dea4:	f383 8811 	msr	BASEPRI, r3
 801dea8:	f3bf 8f6f 	isb	sy
 801deac:	f3bf 8f4f 	dsb	sy
 801deb0:	617b      	str	r3, [r7, #20]
 801deb2:	e7fe      	b.n	801deb2 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801deb4:	2302      	movs	r3, #2
 801deb6:	9300      	str	r3, [sp, #0]
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	2200      	movs	r2, #0
 801debc:	2100      	movs	r1, #0
 801debe:	68f8      	ldr	r0, [r7, #12]
 801dec0:	f7ff ff02 	bl	801dcc8 <xQueueGenericCreateStatic>
 801dec4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801dec6:	69fb      	ldr	r3, [r7, #28]
 801dec8:	2b00      	cmp	r3, #0
 801deca:	d002      	beq.n	801ded2 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801decc:	69fb      	ldr	r3, [r7, #28]
 801dece:	68ba      	ldr	r2, [r7, #8]
 801ded0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801ded2:	69fb      	ldr	r3, [r7, #28]
	}
 801ded4:	4618      	mov	r0, r3
 801ded6:	3720      	adds	r7, #32
 801ded8:	46bd      	mov	sp, r7
 801deda:	bd80      	pop	{r7, pc}

0801dedc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801dedc:	b580      	push	{r7, lr}
 801dede:	b086      	sub	sp, #24
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	6078      	str	r0, [r7, #4]
 801dee4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	2b00      	cmp	r3, #0
 801deea:	d109      	bne.n	801df00 <xQueueCreateCountingSemaphore+0x24>
 801deec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801def0:	f383 8811 	msr	BASEPRI, r3
 801def4:	f3bf 8f6f 	isb	sy
 801def8:	f3bf 8f4f 	dsb	sy
 801defc:	613b      	str	r3, [r7, #16]
 801defe:	e7fe      	b.n	801defe <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 801df00:	683a      	ldr	r2, [r7, #0]
 801df02:	687b      	ldr	r3, [r7, #4]
 801df04:	429a      	cmp	r2, r3
 801df06:	d909      	bls.n	801df1c <xQueueCreateCountingSemaphore+0x40>
 801df08:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df0c:	f383 8811 	msr	BASEPRI, r3
 801df10:	f3bf 8f6f 	isb	sy
 801df14:	f3bf 8f4f 	dsb	sy
 801df18:	60fb      	str	r3, [r7, #12]
 801df1a:	e7fe      	b.n	801df1a <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801df1c:	2202      	movs	r2, #2
 801df1e:	2100      	movs	r1, #0
 801df20:	6878      	ldr	r0, [r7, #4]
 801df22:	f7ff ff44 	bl	801ddae <xQueueGenericCreate>
 801df26:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801df28:	697b      	ldr	r3, [r7, #20]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	d002      	beq.n	801df34 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801df2e:	697b      	ldr	r3, [r7, #20]
 801df30:	683a      	ldr	r2, [r7, #0]
 801df32:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801df34:	697b      	ldr	r3, [r7, #20]
	}
 801df36:	4618      	mov	r0, r3
 801df38:	3718      	adds	r7, #24
 801df3a:	46bd      	mov	sp, r7
 801df3c:	bd80      	pop	{r7, pc}
	...

0801df40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801df40:	b580      	push	{r7, lr}
 801df42:	b08e      	sub	sp, #56	; 0x38
 801df44:	af00      	add	r7, sp, #0
 801df46:	60f8      	str	r0, [r7, #12]
 801df48:	60b9      	str	r1, [r7, #8]
 801df4a:	607a      	str	r2, [r7, #4]
 801df4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801df4e:	2300      	movs	r3, #0
 801df50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801df52:	68fb      	ldr	r3, [r7, #12]
 801df54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801df56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df58:	2b00      	cmp	r3, #0
 801df5a:	d109      	bne.n	801df70 <xQueueGenericSend+0x30>
 801df5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df60:	f383 8811 	msr	BASEPRI, r3
 801df64:	f3bf 8f6f 	isb	sy
 801df68:	f3bf 8f4f 	dsb	sy
 801df6c:	62bb      	str	r3, [r7, #40]	; 0x28
 801df6e:	e7fe      	b.n	801df6e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801df70:	68bb      	ldr	r3, [r7, #8]
 801df72:	2b00      	cmp	r3, #0
 801df74:	d103      	bne.n	801df7e <xQueueGenericSend+0x3e>
 801df76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	d101      	bne.n	801df82 <xQueueGenericSend+0x42>
 801df7e:	2301      	movs	r3, #1
 801df80:	e000      	b.n	801df84 <xQueueGenericSend+0x44>
 801df82:	2300      	movs	r3, #0
 801df84:	2b00      	cmp	r3, #0
 801df86:	d109      	bne.n	801df9c <xQueueGenericSend+0x5c>
 801df88:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df8c:	f383 8811 	msr	BASEPRI, r3
 801df90:	f3bf 8f6f 	isb	sy
 801df94:	f3bf 8f4f 	dsb	sy
 801df98:	627b      	str	r3, [r7, #36]	; 0x24
 801df9a:	e7fe      	b.n	801df9a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801df9c:	683b      	ldr	r3, [r7, #0]
 801df9e:	2b02      	cmp	r3, #2
 801dfa0:	d103      	bne.n	801dfaa <xQueueGenericSend+0x6a>
 801dfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dfa6:	2b01      	cmp	r3, #1
 801dfa8:	d101      	bne.n	801dfae <xQueueGenericSend+0x6e>
 801dfaa:	2301      	movs	r3, #1
 801dfac:	e000      	b.n	801dfb0 <xQueueGenericSend+0x70>
 801dfae:	2300      	movs	r3, #0
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	d109      	bne.n	801dfc8 <xQueueGenericSend+0x88>
 801dfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dfb8:	f383 8811 	msr	BASEPRI, r3
 801dfbc:	f3bf 8f6f 	isb	sy
 801dfc0:	f3bf 8f4f 	dsb	sy
 801dfc4:	623b      	str	r3, [r7, #32]
 801dfc6:	e7fe      	b.n	801dfc6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801dfc8:	f001 fcba 	bl	801f940 <xTaskGetSchedulerState>
 801dfcc:	4603      	mov	r3, r0
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d102      	bne.n	801dfd8 <xQueueGenericSend+0x98>
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	d101      	bne.n	801dfdc <xQueueGenericSend+0x9c>
 801dfd8:	2301      	movs	r3, #1
 801dfda:	e000      	b.n	801dfde <xQueueGenericSend+0x9e>
 801dfdc:	2300      	movs	r3, #0
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	d109      	bne.n	801dff6 <xQueueGenericSend+0xb6>
 801dfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dfe6:	f383 8811 	msr	BASEPRI, r3
 801dfea:	f3bf 8f6f 	isb	sy
 801dfee:	f3bf 8f4f 	dsb	sy
 801dff2:	61fb      	str	r3, [r7, #28]
 801dff4:	e7fe      	b.n	801dff4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801dff6:	f002 fcd1 	bl	802099c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801dffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801dffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e002:	429a      	cmp	r2, r3
 801e004:	d302      	bcc.n	801e00c <xQueueGenericSend+0xcc>
 801e006:	683b      	ldr	r3, [r7, #0]
 801e008:	2b02      	cmp	r3, #2
 801e00a:	d129      	bne.n	801e060 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801e00c:	683a      	ldr	r2, [r7, #0]
 801e00e:	68b9      	ldr	r1, [r7, #8]
 801e010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e012:	f000 fc6a 	bl	801e8ea <prvCopyDataToQueue>
 801e016:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e01c:	2b00      	cmp	r3, #0
 801e01e:	d010      	beq.n	801e042 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e022:	3324      	adds	r3, #36	; 0x24
 801e024:	4618      	mov	r0, r3
 801e026:	f001 fad5 	bl	801f5d4 <xTaskRemoveFromEventList>
 801e02a:	4603      	mov	r3, r0
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d013      	beq.n	801e058 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801e030:	4b3f      	ldr	r3, [pc, #252]	; (801e130 <xQueueGenericSend+0x1f0>)
 801e032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e036:	601a      	str	r2, [r3, #0]
 801e038:	f3bf 8f4f 	dsb	sy
 801e03c:	f3bf 8f6f 	isb	sy
 801e040:	e00a      	b.n	801e058 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801e042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e044:	2b00      	cmp	r3, #0
 801e046:	d007      	beq.n	801e058 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801e048:	4b39      	ldr	r3, [pc, #228]	; (801e130 <xQueueGenericSend+0x1f0>)
 801e04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e04e:	601a      	str	r2, [r3, #0]
 801e050:	f3bf 8f4f 	dsb	sy
 801e054:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801e058:	f002 fcce 	bl	80209f8 <vPortExitCritical>
				return pdPASS;
 801e05c:	2301      	movs	r3, #1
 801e05e:	e063      	b.n	801e128 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	2b00      	cmp	r3, #0
 801e064:	d103      	bne.n	801e06e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801e066:	f002 fcc7 	bl	80209f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801e06a:	2300      	movs	r3, #0
 801e06c:	e05c      	b.n	801e128 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801e06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e070:	2b00      	cmp	r3, #0
 801e072:	d106      	bne.n	801e082 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801e074:	f107 0314 	add.w	r3, r7, #20
 801e078:	4618      	mov	r0, r3
 801e07a:	f001 fb0d 	bl	801f698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801e07e:	2301      	movs	r3, #1
 801e080:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801e082:	f002 fcb9 	bl	80209f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801e086:	f001 f877 	bl	801f178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801e08a:	f002 fc87 	bl	802099c <vPortEnterCritical>
 801e08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e094:	b25b      	sxtb	r3, r3
 801e096:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e09a:	d103      	bne.n	801e0a4 <xQueueGenericSend+0x164>
 801e09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e09e:	2200      	movs	r2, #0
 801e0a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e0a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e0aa:	b25b      	sxtb	r3, r3
 801e0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e0b0:	d103      	bne.n	801e0ba <xQueueGenericSend+0x17a>
 801e0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e0b4:	2200      	movs	r2, #0
 801e0b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e0ba:	f002 fc9d 	bl	80209f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801e0be:	1d3a      	adds	r2, r7, #4
 801e0c0:	f107 0314 	add.w	r3, r7, #20
 801e0c4:	4611      	mov	r1, r2
 801e0c6:	4618      	mov	r0, r3
 801e0c8:	f001 fafc 	bl	801f6c4 <xTaskCheckForTimeOut>
 801e0cc:	4603      	mov	r3, r0
 801e0ce:	2b00      	cmp	r3, #0
 801e0d0:	d124      	bne.n	801e11c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801e0d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e0d4:	f000 fd01 	bl	801eada <prvIsQueueFull>
 801e0d8:	4603      	mov	r3, r0
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d018      	beq.n	801e110 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801e0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e0e0:	3310      	adds	r3, #16
 801e0e2:	687a      	ldr	r2, [r7, #4]
 801e0e4:	4611      	mov	r1, r2
 801e0e6:	4618      	mov	r0, r3
 801e0e8:	f001 fa26 	bl	801f538 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801e0ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e0ee:	f000 fc8c 	bl	801ea0a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801e0f2:	f001 f84f 	bl	801f194 <xTaskResumeAll>
 801e0f6:	4603      	mov	r3, r0
 801e0f8:	2b00      	cmp	r3, #0
 801e0fa:	f47f af7c 	bne.w	801dff6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 801e0fe:	4b0c      	ldr	r3, [pc, #48]	; (801e130 <xQueueGenericSend+0x1f0>)
 801e100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e104:	601a      	str	r2, [r3, #0]
 801e106:	f3bf 8f4f 	dsb	sy
 801e10a:	f3bf 8f6f 	isb	sy
 801e10e:	e772      	b.n	801dff6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801e110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e112:	f000 fc7a 	bl	801ea0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801e116:	f001 f83d 	bl	801f194 <xTaskResumeAll>
 801e11a:	e76c      	b.n	801dff6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801e11c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e11e:	f000 fc74 	bl	801ea0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801e122:	f001 f837 	bl	801f194 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801e126:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801e128:	4618      	mov	r0, r3
 801e12a:	3738      	adds	r7, #56	; 0x38
 801e12c:	46bd      	mov	sp, r7
 801e12e:	bd80      	pop	{r7, pc}
 801e130:	e000ed04 	.word	0xe000ed04

0801e134 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801e134:	b580      	push	{r7, lr}
 801e136:	b08e      	sub	sp, #56	; 0x38
 801e138:	af00      	add	r7, sp, #0
 801e13a:	60f8      	str	r0, [r7, #12]
 801e13c:	60b9      	str	r1, [r7, #8]
 801e13e:	607a      	str	r2, [r7, #4]
 801e140:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801e142:	68fb      	ldr	r3, [r7, #12]
 801e144:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801e146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d109      	bne.n	801e160 <xQueueGenericSendFromISR+0x2c>
 801e14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e150:	f383 8811 	msr	BASEPRI, r3
 801e154:	f3bf 8f6f 	isb	sy
 801e158:	f3bf 8f4f 	dsb	sy
 801e15c:	627b      	str	r3, [r7, #36]	; 0x24
 801e15e:	e7fe      	b.n	801e15e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e160:	68bb      	ldr	r3, [r7, #8]
 801e162:	2b00      	cmp	r3, #0
 801e164:	d103      	bne.n	801e16e <xQueueGenericSendFromISR+0x3a>
 801e166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	d101      	bne.n	801e172 <xQueueGenericSendFromISR+0x3e>
 801e16e:	2301      	movs	r3, #1
 801e170:	e000      	b.n	801e174 <xQueueGenericSendFromISR+0x40>
 801e172:	2300      	movs	r3, #0
 801e174:	2b00      	cmp	r3, #0
 801e176:	d109      	bne.n	801e18c <xQueueGenericSendFromISR+0x58>
 801e178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e17c:	f383 8811 	msr	BASEPRI, r3
 801e180:	f3bf 8f6f 	isb	sy
 801e184:	f3bf 8f4f 	dsb	sy
 801e188:	623b      	str	r3, [r7, #32]
 801e18a:	e7fe      	b.n	801e18a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801e18c:	683b      	ldr	r3, [r7, #0]
 801e18e:	2b02      	cmp	r3, #2
 801e190:	d103      	bne.n	801e19a <xQueueGenericSendFromISR+0x66>
 801e192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e196:	2b01      	cmp	r3, #1
 801e198:	d101      	bne.n	801e19e <xQueueGenericSendFromISR+0x6a>
 801e19a:	2301      	movs	r3, #1
 801e19c:	e000      	b.n	801e1a0 <xQueueGenericSendFromISR+0x6c>
 801e19e:	2300      	movs	r3, #0
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	d109      	bne.n	801e1b8 <xQueueGenericSendFromISR+0x84>
 801e1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e1a8:	f383 8811 	msr	BASEPRI, r3
 801e1ac:	f3bf 8f6f 	isb	sy
 801e1b0:	f3bf 8f4f 	dsb	sy
 801e1b4:	61fb      	str	r3, [r7, #28]
 801e1b6:	e7fe      	b.n	801e1b6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801e1b8:	f002 fccc 	bl	8020b54 <vPortValidateInterruptPriority>
	__asm volatile
 801e1bc:	f3ef 8211 	mrs	r2, BASEPRI
 801e1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e1c4:	f383 8811 	msr	BASEPRI, r3
 801e1c8:	f3bf 8f6f 	isb	sy
 801e1cc:	f3bf 8f4f 	dsb	sy
 801e1d0:	61ba      	str	r2, [r7, #24]
 801e1d2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801e1d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801e1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801e1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e1da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e1de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e1e0:	429a      	cmp	r2, r3
 801e1e2:	d302      	bcc.n	801e1ea <xQueueGenericSendFromISR+0xb6>
 801e1e4:	683b      	ldr	r3, [r7, #0]
 801e1e6:	2b02      	cmp	r3, #2
 801e1e8:	d12c      	bne.n	801e244 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801e1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e1ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e1f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801e1f4:	683a      	ldr	r2, [r7, #0]
 801e1f6:	68b9      	ldr	r1, [r7, #8]
 801e1f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e1fa:	f000 fb76 	bl	801e8ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801e1fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801e202:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e206:	d112      	bne.n	801e22e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	d016      	beq.n	801e23e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e212:	3324      	adds	r3, #36	; 0x24
 801e214:	4618      	mov	r0, r3
 801e216:	f001 f9dd 	bl	801f5d4 <xTaskRemoveFromEventList>
 801e21a:	4603      	mov	r3, r0
 801e21c:	2b00      	cmp	r3, #0
 801e21e:	d00e      	beq.n	801e23e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	2b00      	cmp	r3, #0
 801e224:	d00b      	beq.n	801e23e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	2201      	movs	r2, #1
 801e22a:	601a      	str	r2, [r3, #0]
 801e22c:	e007      	b.n	801e23e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801e22e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e232:	3301      	adds	r3, #1
 801e234:	b2db      	uxtb	r3, r3
 801e236:	b25a      	sxtb	r2, r3
 801e238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e23a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801e23e:	2301      	movs	r3, #1
 801e240:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801e242:	e001      	b.n	801e248 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801e244:	2300      	movs	r3, #0
 801e246:	637b      	str	r3, [r7, #52]	; 0x34
 801e248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e24a:	613b      	str	r3, [r7, #16]
	__asm volatile
 801e24c:	693b      	ldr	r3, [r7, #16]
 801e24e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801e252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801e254:	4618      	mov	r0, r3
 801e256:	3738      	adds	r7, #56	; 0x38
 801e258:	46bd      	mov	sp, r7
 801e25a:	bd80      	pop	{r7, pc}

0801e25c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801e25c:	b580      	push	{r7, lr}
 801e25e:	b08e      	sub	sp, #56	; 0x38
 801e260:	af00      	add	r7, sp, #0
 801e262:	6078      	str	r0, [r7, #4]
 801e264:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801e26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d109      	bne.n	801e284 <xQueueGiveFromISR+0x28>
	__asm volatile
 801e270:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e274:	f383 8811 	msr	BASEPRI, r3
 801e278:	f3bf 8f6f 	isb	sy
 801e27c:	f3bf 8f4f 	dsb	sy
 801e280:	623b      	str	r3, [r7, #32]
 801e282:	e7fe      	b.n	801e282 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801e284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e288:	2b00      	cmp	r3, #0
 801e28a:	d009      	beq.n	801e2a0 <xQueueGiveFromISR+0x44>
 801e28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e290:	f383 8811 	msr	BASEPRI, r3
 801e294:	f3bf 8f6f 	isb	sy
 801e298:	f3bf 8f4f 	dsb	sy
 801e29c:	61fb      	str	r3, [r7, #28]
 801e29e:	e7fe      	b.n	801e29e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801e2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e2a2:	681b      	ldr	r3, [r3, #0]
 801e2a4:	2b00      	cmp	r3, #0
 801e2a6:	d103      	bne.n	801e2b0 <xQueueGiveFromISR+0x54>
 801e2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e2aa:	689b      	ldr	r3, [r3, #8]
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	d101      	bne.n	801e2b4 <xQueueGiveFromISR+0x58>
 801e2b0:	2301      	movs	r3, #1
 801e2b2:	e000      	b.n	801e2b6 <xQueueGiveFromISR+0x5a>
 801e2b4:	2300      	movs	r3, #0
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	d109      	bne.n	801e2ce <xQueueGiveFromISR+0x72>
 801e2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e2be:	f383 8811 	msr	BASEPRI, r3
 801e2c2:	f3bf 8f6f 	isb	sy
 801e2c6:	f3bf 8f4f 	dsb	sy
 801e2ca:	61bb      	str	r3, [r7, #24]
 801e2cc:	e7fe      	b.n	801e2cc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801e2ce:	f002 fc41 	bl	8020b54 <vPortValidateInterruptPriority>
	__asm volatile
 801e2d2:	f3ef 8211 	mrs	r2, BASEPRI
 801e2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e2da:	f383 8811 	msr	BASEPRI, r3
 801e2de:	f3bf 8f6f 	isb	sy
 801e2e2:	f3bf 8f4f 	dsb	sy
 801e2e6:	617a      	str	r2, [r7, #20]
 801e2e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801e2ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801e2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801e2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801e2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e2f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e2f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e2fa:	429a      	cmp	r2, r3
 801e2fc:	d22b      	bcs.n	801e356 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801e308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e30a:	1c5a      	adds	r2, r3, #1
 801e30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e30e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801e310:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801e314:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e318:	d112      	bne.n	801e340 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801e31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e31e:	2b00      	cmp	r3, #0
 801e320:	d016      	beq.n	801e350 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801e322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e324:	3324      	adds	r3, #36	; 0x24
 801e326:	4618      	mov	r0, r3
 801e328:	f001 f954 	bl	801f5d4 <xTaskRemoveFromEventList>
 801e32c:	4603      	mov	r3, r0
 801e32e:	2b00      	cmp	r3, #0
 801e330:	d00e      	beq.n	801e350 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801e332:	683b      	ldr	r3, [r7, #0]
 801e334:	2b00      	cmp	r3, #0
 801e336:	d00b      	beq.n	801e350 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801e338:	683b      	ldr	r3, [r7, #0]
 801e33a:	2201      	movs	r2, #1
 801e33c:	601a      	str	r2, [r3, #0]
 801e33e:	e007      	b.n	801e350 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801e340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e344:	3301      	adds	r3, #1
 801e346:	b2db      	uxtb	r3, r3
 801e348:	b25a      	sxtb	r2, r3
 801e34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e34c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801e350:	2301      	movs	r3, #1
 801e352:	637b      	str	r3, [r7, #52]	; 0x34
 801e354:	e001      	b.n	801e35a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801e356:	2300      	movs	r3, #0
 801e358:	637b      	str	r3, [r7, #52]	; 0x34
 801e35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e35c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801e35e:	68fb      	ldr	r3, [r7, #12]
 801e360:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801e364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801e366:	4618      	mov	r0, r3
 801e368:	3738      	adds	r7, #56	; 0x38
 801e36a:	46bd      	mov	sp, r7
 801e36c:	bd80      	pop	{r7, pc}
	...

0801e370 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801e370:	b580      	push	{r7, lr}
 801e372:	b08c      	sub	sp, #48	; 0x30
 801e374:	af00      	add	r7, sp, #0
 801e376:	60f8      	str	r0, [r7, #12]
 801e378:	60b9      	str	r1, [r7, #8]
 801e37a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801e37c:	2300      	movs	r3, #0
 801e37e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801e380:	68fb      	ldr	r3, [r7, #12]
 801e382:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801e384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e386:	2b00      	cmp	r3, #0
 801e388:	d109      	bne.n	801e39e <xQueueReceive+0x2e>
	__asm volatile
 801e38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e38e:	f383 8811 	msr	BASEPRI, r3
 801e392:	f3bf 8f6f 	isb	sy
 801e396:	f3bf 8f4f 	dsb	sy
 801e39a:	623b      	str	r3, [r7, #32]
 801e39c:	e7fe      	b.n	801e39c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e39e:	68bb      	ldr	r3, [r7, #8]
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	d103      	bne.n	801e3ac <xQueueReceive+0x3c>
 801e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e3a8:	2b00      	cmp	r3, #0
 801e3aa:	d101      	bne.n	801e3b0 <xQueueReceive+0x40>
 801e3ac:	2301      	movs	r3, #1
 801e3ae:	e000      	b.n	801e3b2 <xQueueReceive+0x42>
 801e3b0:	2300      	movs	r3, #0
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	d109      	bne.n	801e3ca <xQueueReceive+0x5a>
 801e3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e3ba:	f383 8811 	msr	BASEPRI, r3
 801e3be:	f3bf 8f6f 	isb	sy
 801e3c2:	f3bf 8f4f 	dsb	sy
 801e3c6:	61fb      	str	r3, [r7, #28]
 801e3c8:	e7fe      	b.n	801e3c8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801e3ca:	f001 fab9 	bl	801f940 <xTaskGetSchedulerState>
 801e3ce:	4603      	mov	r3, r0
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d102      	bne.n	801e3da <xQueueReceive+0x6a>
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d101      	bne.n	801e3de <xQueueReceive+0x6e>
 801e3da:	2301      	movs	r3, #1
 801e3dc:	e000      	b.n	801e3e0 <xQueueReceive+0x70>
 801e3de:	2300      	movs	r3, #0
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d109      	bne.n	801e3f8 <xQueueReceive+0x88>
 801e3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e3e8:	f383 8811 	msr	BASEPRI, r3
 801e3ec:	f3bf 8f6f 	isb	sy
 801e3f0:	f3bf 8f4f 	dsb	sy
 801e3f4:	61bb      	str	r3, [r7, #24]
 801e3f6:	e7fe      	b.n	801e3f6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801e3f8:	f002 fad0 	bl	802099c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801e3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e400:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801e402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e404:	2b00      	cmp	r3, #0
 801e406:	d01f      	beq.n	801e448 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801e408:	68b9      	ldr	r1, [r7, #8]
 801e40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e40c:	f000 fad7 	bl	801e9be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801e410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e412:	1e5a      	subs	r2, r3, #1
 801e414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e416:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e41a:	691b      	ldr	r3, [r3, #16]
 801e41c:	2b00      	cmp	r3, #0
 801e41e:	d00f      	beq.n	801e440 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e422:	3310      	adds	r3, #16
 801e424:	4618      	mov	r0, r3
 801e426:	f001 f8d5 	bl	801f5d4 <xTaskRemoveFromEventList>
 801e42a:	4603      	mov	r3, r0
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	d007      	beq.n	801e440 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801e430:	4b3c      	ldr	r3, [pc, #240]	; (801e524 <xQueueReceive+0x1b4>)
 801e432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e436:	601a      	str	r2, [r3, #0]
 801e438:	f3bf 8f4f 	dsb	sy
 801e43c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801e440:	f002 fada 	bl	80209f8 <vPortExitCritical>
				return pdPASS;
 801e444:	2301      	movs	r3, #1
 801e446:	e069      	b.n	801e51c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	2b00      	cmp	r3, #0
 801e44c:	d103      	bne.n	801e456 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801e44e:	f002 fad3 	bl	80209f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801e452:	2300      	movs	r3, #0
 801e454:	e062      	b.n	801e51c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801e456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d106      	bne.n	801e46a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801e45c:	f107 0310 	add.w	r3, r7, #16
 801e460:	4618      	mov	r0, r3
 801e462:	f001 f919 	bl	801f698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801e466:	2301      	movs	r3, #1
 801e468:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801e46a:	f002 fac5 	bl	80209f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801e46e:	f000 fe83 	bl	801f178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801e472:	f002 fa93 	bl	802099c <vPortEnterCritical>
 801e476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e47c:	b25b      	sxtb	r3, r3
 801e47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e482:	d103      	bne.n	801e48c <xQueueReceive+0x11c>
 801e484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e486:	2200      	movs	r2, #0
 801e488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e48e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e492:	b25b      	sxtb	r3, r3
 801e494:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e498:	d103      	bne.n	801e4a2 <xQueueReceive+0x132>
 801e49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e49c:	2200      	movs	r2, #0
 801e49e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e4a2:	f002 faa9 	bl	80209f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801e4a6:	1d3a      	adds	r2, r7, #4
 801e4a8:	f107 0310 	add.w	r3, r7, #16
 801e4ac:	4611      	mov	r1, r2
 801e4ae:	4618      	mov	r0, r3
 801e4b0:	f001 f908 	bl	801f6c4 <xTaskCheckForTimeOut>
 801e4b4:	4603      	mov	r3, r0
 801e4b6:	2b00      	cmp	r3, #0
 801e4b8:	d123      	bne.n	801e502 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801e4ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e4bc:	f000 faf7 	bl	801eaae <prvIsQueueEmpty>
 801e4c0:	4603      	mov	r3, r0
 801e4c2:	2b00      	cmp	r3, #0
 801e4c4:	d017      	beq.n	801e4f6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801e4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4c8:	3324      	adds	r3, #36	; 0x24
 801e4ca:	687a      	ldr	r2, [r7, #4]
 801e4cc:	4611      	mov	r1, r2
 801e4ce:	4618      	mov	r0, r3
 801e4d0:	f001 f832 	bl	801f538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801e4d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e4d6:	f000 fa98 	bl	801ea0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801e4da:	f000 fe5b 	bl	801f194 <xTaskResumeAll>
 801e4de:	4603      	mov	r3, r0
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	d189      	bne.n	801e3f8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 801e4e4:	4b0f      	ldr	r3, [pc, #60]	; (801e524 <xQueueReceive+0x1b4>)
 801e4e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e4ea:	601a      	str	r2, [r3, #0]
 801e4ec:	f3bf 8f4f 	dsb	sy
 801e4f0:	f3bf 8f6f 	isb	sy
 801e4f4:	e780      	b.n	801e3f8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801e4f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e4f8:	f000 fa87 	bl	801ea0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801e4fc:	f000 fe4a 	bl	801f194 <xTaskResumeAll>
 801e500:	e77a      	b.n	801e3f8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801e502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e504:	f000 fa81 	bl	801ea0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801e508:	f000 fe44 	bl	801f194 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801e50c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e50e:	f000 face 	bl	801eaae <prvIsQueueEmpty>
 801e512:	4603      	mov	r3, r0
 801e514:	2b00      	cmp	r3, #0
 801e516:	f43f af6f 	beq.w	801e3f8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801e51a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801e51c:	4618      	mov	r0, r3
 801e51e:	3730      	adds	r7, #48	; 0x30
 801e520:	46bd      	mov	sp, r7
 801e522:	bd80      	pop	{r7, pc}
 801e524:	e000ed04 	.word	0xe000ed04

0801e528 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801e528:	b580      	push	{r7, lr}
 801e52a:	b08e      	sub	sp, #56	; 0x38
 801e52c:	af00      	add	r7, sp, #0
 801e52e:	6078      	str	r0, [r7, #4]
 801e530:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801e532:	2300      	movs	r3, #0
 801e534:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801e536:	687b      	ldr	r3, [r7, #4]
 801e538:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801e53a:	2300      	movs	r3, #0
 801e53c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801e53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e540:	2b00      	cmp	r3, #0
 801e542:	d109      	bne.n	801e558 <xQueueSemaphoreTake+0x30>
 801e544:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e548:	f383 8811 	msr	BASEPRI, r3
 801e54c:	f3bf 8f6f 	isb	sy
 801e550:	f3bf 8f4f 	dsb	sy
 801e554:	623b      	str	r3, [r7, #32]
 801e556:	e7fe      	b.n	801e556 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801e558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e55a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e55c:	2b00      	cmp	r3, #0
 801e55e:	d009      	beq.n	801e574 <xQueueSemaphoreTake+0x4c>
 801e560:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e564:	f383 8811 	msr	BASEPRI, r3
 801e568:	f3bf 8f6f 	isb	sy
 801e56c:	f3bf 8f4f 	dsb	sy
 801e570:	61fb      	str	r3, [r7, #28]
 801e572:	e7fe      	b.n	801e572 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801e574:	f001 f9e4 	bl	801f940 <xTaskGetSchedulerState>
 801e578:	4603      	mov	r3, r0
 801e57a:	2b00      	cmp	r3, #0
 801e57c:	d102      	bne.n	801e584 <xQueueSemaphoreTake+0x5c>
 801e57e:	683b      	ldr	r3, [r7, #0]
 801e580:	2b00      	cmp	r3, #0
 801e582:	d101      	bne.n	801e588 <xQueueSemaphoreTake+0x60>
 801e584:	2301      	movs	r3, #1
 801e586:	e000      	b.n	801e58a <xQueueSemaphoreTake+0x62>
 801e588:	2300      	movs	r3, #0
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	d109      	bne.n	801e5a2 <xQueueSemaphoreTake+0x7a>
 801e58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e592:	f383 8811 	msr	BASEPRI, r3
 801e596:	f3bf 8f6f 	isb	sy
 801e59a:	f3bf 8f4f 	dsb	sy
 801e59e:	61bb      	str	r3, [r7, #24]
 801e5a0:	e7fe      	b.n	801e5a0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801e5a2:	f002 f9fb 	bl	802099c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801e5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e5aa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801e5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	d024      	beq.n	801e5fc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801e5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5b4:	1e5a      	subs	r2, r3, #1
 801e5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5b8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801e5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5bc:	681b      	ldr	r3, [r3, #0]
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	d104      	bne.n	801e5cc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801e5c2:	f001 fb2f 	bl	801fc24 <pvTaskIncrementMutexHeldCount>
 801e5c6:	4602      	mov	r2, r0
 801e5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5ce:	691b      	ldr	r3, [r3, #16]
 801e5d0:	2b00      	cmp	r3, #0
 801e5d2:	d00f      	beq.n	801e5f4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5d6:	3310      	adds	r3, #16
 801e5d8:	4618      	mov	r0, r3
 801e5da:	f000 fffb 	bl	801f5d4 <xTaskRemoveFromEventList>
 801e5de:	4603      	mov	r3, r0
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	d007      	beq.n	801e5f4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801e5e4:	4b53      	ldr	r3, [pc, #332]	; (801e734 <xQueueSemaphoreTake+0x20c>)
 801e5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e5ea:	601a      	str	r2, [r3, #0]
 801e5ec:	f3bf 8f4f 	dsb	sy
 801e5f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801e5f4:	f002 fa00 	bl	80209f8 <vPortExitCritical>
				return pdPASS;
 801e5f8:	2301      	movs	r3, #1
 801e5fa:	e096      	b.n	801e72a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801e5fc:	683b      	ldr	r3, [r7, #0]
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d110      	bne.n	801e624 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e604:	2b00      	cmp	r3, #0
 801e606:	d009      	beq.n	801e61c <xQueueSemaphoreTake+0xf4>
 801e608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e60c:	f383 8811 	msr	BASEPRI, r3
 801e610:	f3bf 8f6f 	isb	sy
 801e614:	f3bf 8f4f 	dsb	sy
 801e618:	617b      	str	r3, [r7, #20]
 801e61a:	e7fe      	b.n	801e61a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801e61c:	f002 f9ec 	bl	80209f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801e620:	2300      	movs	r3, #0
 801e622:	e082      	b.n	801e72a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 801e624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e626:	2b00      	cmp	r3, #0
 801e628:	d106      	bne.n	801e638 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801e62a:	f107 030c 	add.w	r3, r7, #12
 801e62e:	4618      	mov	r0, r3
 801e630:	f001 f832 	bl	801f698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801e634:	2301      	movs	r3, #1
 801e636:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801e638:	f002 f9de 	bl	80209f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801e63c:	f000 fd9c 	bl	801f178 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801e640:	f002 f9ac 	bl	802099c <vPortEnterCritical>
 801e644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e64a:	b25b      	sxtb	r3, r3
 801e64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e650:	d103      	bne.n	801e65a <xQueueSemaphoreTake+0x132>
 801e652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e654:	2200      	movs	r2, #0
 801e656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e65c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801e660:	b25b      	sxtb	r3, r3
 801e662:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e666:	d103      	bne.n	801e670 <xQueueSemaphoreTake+0x148>
 801e668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e66a:	2200      	movs	r2, #0
 801e66c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e670:	f002 f9c2 	bl	80209f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801e674:	463a      	mov	r2, r7
 801e676:	f107 030c 	add.w	r3, r7, #12
 801e67a:	4611      	mov	r1, r2
 801e67c:	4618      	mov	r0, r3
 801e67e:	f001 f821 	bl	801f6c4 <xTaskCheckForTimeOut>
 801e682:	4603      	mov	r3, r0
 801e684:	2b00      	cmp	r3, #0
 801e686:	d132      	bne.n	801e6ee <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801e688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e68a:	f000 fa10 	bl	801eaae <prvIsQueueEmpty>
 801e68e:	4603      	mov	r3, r0
 801e690:	2b00      	cmp	r3, #0
 801e692:	d026      	beq.n	801e6e2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801e694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e696:	681b      	ldr	r3, [r3, #0]
 801e698:	2b00      	cmp	r3, #0
 801e69a:	d109      	bne.n	801e6b0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 801e69c:	f002 f97e 	bl	802099c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801e6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6a2:	689b      	ldr	r3, [r3, #8]
 801e6a4:	4618      	mov	r0, r3
 801e6a6:	f001 f969 	bl	801f97c <xTaskPriorityInherit>
 801e6aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801e6ac:	f002 f9a4 	bl	80209f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801e6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e6b2:	3324      	adds	r3, #36	; 0x24
 801e6b4:	683a      	ldr	r2, [r7, #0]
 801e6b6:	4611      	mov	r1, r2
 801e6b8:	4618      	mov	r0, r3
 801e6ba:	f000 ff3d 	bl	801f538 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801e6be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e6c0:	f000 f9a3 	bl	801ea0a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801e6c4:	f000 fd66 	bl	801f194 <xTaskResumeAll>
 801e6c8:	4603      	mov	r3, r0
 801e6ca:	2b00      	cmp	r3, #0
 801e6cc:	f47f af69 	bne.w	801e5a2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 801e6d0:	4b18      	ldr	r3, [pc, #96]	; (801e734 <xQueueSemaphoreTake+0x20c>)
 801e6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e6d6:	601a      	str	r2, [r3, #0]
 801e6d8:	f3bf 8f4f 	dsb	sy
 801e6dc:	f3bf 8f6f 	isb	sy
 801e6e0:	e75f      	b.n	801e5a2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801e6e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e6e4:	f000 f991 	bl	801ea0a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801e6e8:	f000 fd54 	bl	801f194 <xTaskResumeAll>
 801e6ec:	e759      	b.n	801e5a2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801e6ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e6f0:	f000 f98b 	bl	801ea0a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801e6f4:	f000 fd4e 	bl	801f194 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801e6f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e6fa:	f000 f9d8 	bl	801eaae <prvIsQueueEmpty>
 801e6fe:	4603      	mov	r3, r0
 801e700:	2b00      	cmp	r3, #0
 801e702:	f43f af4e 	beq.w	801e5a2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801e706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e708:	2b00      	cmp	r3, #0
 801e70a:	d00d      	beq.n	801e728 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 801e70c:	f002 f946 	bl	802099c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801e710:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801e712:	f000 f8d2 	bl	801e8ba <prvGetDisinheritPriorityAfterTimeout>
 801e716:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801e718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e71a:	689b      	ldr	r3, [r3, #8]
 801e71c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e71e:	4618      	mov	r0, r3
 801e720:	f001 fa00 	bl	801fb24 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801e724:	f002 f968 	bl	80209f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801e728:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801e72a:	4618      	mov	r0, r3
 801e72c:	3738      	adds	r7, #56	; 0x38
 801e72e:	46bd      	mov	sp, r7
 801e730:	bd80      	pop	{r7, pc}
 801e732:	bf00      	nop
 801e734:	e000ed04 	.word	0xe000ed04

0801e738 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801e738:	b580      	push	{r7, lr}
 801e73a:	b08e      	sub	sp, #56	; 0x38
 801e73c:	af00      	add	r7, sp, #0
 801e73e:	60f8      	str	r0, [r7, #12]
 801e740:	60b9      	str	r1, [r7, #8]
 801e742:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801e744:	68fb      	ldr	r3, [r7, #12]
 801e746:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801e748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e74a:	2b00      	cmp	r3, #0
 801e74c:	d109      	bne.n	801e762 <xQueueReceiveFromISR+0x2a>
 801e74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e752:	f383 8811 	msr	BASEPRI, r3
 801e756:	f3bf 8f6f 	isb	sy
 801e75a:	f3bf 8f4f 	dsb	sy
 801e75e:	623b      	str	r3, [r7, #32]
 801e760:	e7fe      	b.n	801e760 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801e762:	68bb      	ldr	r3, [r7, #8]
 801e764:	2b00      	cmp	r3, #0
 801e766:	d103      	bne.n	801e770 <xQueueReceiveFromISR+0x38>
 801e768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d101      	bne.n	801e774 <xQueueReceiveFromISR+0x3c>
 801e770:	2301      	movs	r3, #1
 801e772:	e000      	b.n	801e776 <xQueueReceiveFromISR+0x3e>
 801e774:	2300      	movs	r3, #0
 801e776:	2b00      	cmp	r3, #0
 801e778:	d109      	bne.n	801e78e <xQueueReceiveFromISR+0x56>
 801e77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e77e:	f383 8811 	msr	BASEPRI, r3
 801e782:	f3bf 8f6f 	isb	sy
 801e786:	f3bf 8f4f 	dsb	sy
 801e78a:	61fb      	str	r3, [r7, #28]
 801e78c:	e7fe      	b.n	801e78c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801e78e:	f002 f9e1 	bl	8020b54 <vPortValidateInterruptPriority>
	__asm volatile
 801e792:	f3ef 8211 	mrs	r2, BASEPRI
 801e796:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e79a:	f383 8811 	msr	BASEPRI, r3
 801e79e:	f3bf 8f6f 	isb	sy
 801e7a2:	f3bf 8f4f 	dsb	sy
 801e7a6:	61ba      	str	r2, [r7, #24]
 801e7a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801e7aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801e7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801e7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e7b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801e7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7b6:	2b00      	cmp	r3, #0
 801e7b8:	d02f      	beq.n	801e81a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801e7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e7bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801e7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801e7c4:	68b9      	ldr	r1, [r7, #8]
 801e7c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e7c8:	f000 f8f9 	bl	801e9be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801e7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7ce:	1e5a      	subs	r2, r3, #1
 801e7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e7d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801e7d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801e7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e7dc:	d112      	bne.n	801e804 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801e7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e7e0:	691b      	ldr	r3, [r3, #16]
 801e7e2:	2b00      	cmp	r3, #0
 801e7e4:	d016      	beq.n	801e814 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801e7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e7e8:	3310      	adds	r3, #16
 801e7ea:	4618      	mov	r0, r3
 801e7ec:	f000 fef2 	bl	801f5d4 <xTaskRemoveFromEventList>
 801e7f0:	4603      	mov	r3, r0
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d00e      	beq.n	801e814 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	2b00      	cmp	r3, #0
 801e7fa:	d00b      	beq.n	801e814 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801e7fc:	687b      	ldr	r3, [r7, #4]
 801e7fe:	2201      	movs	r2, #1
 801e800:	601a      	str	r2, [r3, #0]
 801e802:	e007      	b.n	801e814 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801e804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e808:	3301      	adds	r3, #1
 801e80a:	b2db      	uxtb	r3, r3
 801e80c:	b25a      	sxtb	r2, r3
 801e80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801e814:	2301      	movs	r3, #1
 801e816:	637b      	str	r3, [r7, #52]	; 0x34
 801e818:	e001      	b.n	801e81e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801e81a:	2300      	movs	r3, #0
 801e81c:	637b      	str	r3, [r7, #52]	; 0x34
 801e81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e820:	613b      	str	r3, [r7, #16]
	__asm volatile
 801e822:	693b      	ldr	r3, [r7, #16]
 801e824:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801e828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801e82a:	4618      	mov	r0, r3
 801e82c:	3738      	adds	r7, #56	; 0x38
 801e82e:	46bd      	mov	sp, r7
 801e830:	bd80      	pop	{r7, pc}

0801e832 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 801e832:	b580      	push	{r7, lr}
 801e834:	b086      	sub	sp, #24
 801e836:	af00      	add	r7, sp, #0
 801e838:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 801e83e:	697b      	ldr	r3, [r7, #20]
 801e840:	2b00      	cmp	r3, #0
 801e842:	d109      	bne.n	801e858 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 801e844:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e848:	f383 8811 	msr	BASEPRI, r3
 801e84c:	f3bf 8f6f 	isb	sy
 801e850:	f3bf 8f4f 	dsb	sy
 801e854:	60fb      	str	r3, [r7, #12]
 801e856:	e7fe      	b.n	801e856 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 801e858:	f002 f8a0 	bl	802099c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 801e85c:	697b      	ldr	r3, [r7, #20]
 801e85e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e860:	697b      	ldr	r3, [r7, #20]
 801e862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e864:	1ad3      	subs	r3, r2, r3
 801e866:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801e868:	f002 f8c6 	bl	80209f8 <vPortExitCritical>

	return uxReturn;
 801e86c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801e86e:	4618      	mov	r0, r3
 801e870:	3718      	adds	r7, #24
 801e872:	46bd      	mov	sp, r7
 801e874:	bd80      	pop	{r7, pc}

0801e876 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801e876:	b580      	push	{r7, lr}
 801e878:	b084      	sub	sp, #16
 801e87a:	af00      	add	r7, sp, #0
 801e87c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801e87e:	687b      	ldr	r3, [r7, #4]
 801e880:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	2b00      	cmp	r3, #0
 801e886:	d109      	bne.n	801e89c <vQueueDelete+0x26>
 801e888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e88c:	f383 8811 	msr	BASEPRI, r3
 801e890:	f3bf 8f6f 	isb	sy
 801e894:	f3bf 8f4f 	dsb	sy
 801e898:	60bb      	str	r3, [r7, #8]
 801e89a:	e7fe      	b.n	801e89a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801e89c:	68f8      	ldr	r0, [r7, #12]
 801e89e:	f000 f95d 	bl	801eb5c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801e8a2:	68fb      	ldr	r3, [r7, #12]
 801e8a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	d102      	bne.n	801e8b2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 801e8ac:	68f8      	ldr	r0, [r7, #12]
 801e8ae:	f002 fa51 	bl	8020d54 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801e8b2:	bf00      	nop
 801e8b4:	3710      	adds	r7, #16
 801e8b6:	46bd      	mov	sp, r7
 801e8b8:	bd80      	pop	{r7, pc}

0801e8ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801e8ba:	b480      	push	{r7}
 801e8bc:	b085      	sub	sp, #20
 801e8be:	af00      	add	r7, sp, #0
 801e8c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801e8c2:	687b      	ldr	r3, [r7, #4]
 801e8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d006      	beq.n	801e8d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e8ce:	681b      	ldr	r3, [r3, #0]
 801e8d0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801e8d4:	60fb      	str	r3, [r7, #12]
 801e8d6:	e001      	b.n	801e8dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801e8d8:	2300      	movs	r3, #0
 801e8da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801e8dc:	68fb      	ldr	r3, [r7, #12]
	}
 801e8de:	4618      	mov	r0, r3
 801e8e0:	3714      	adds	r7, #20
 801e8e2:	46bd      	mov	sp, r7
 801e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8e8:	4770      	bx	lr

0801e8ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801e8ea:	b580      	push	{r7, lr}
 801e8ec:	b086      	sub	sp, #24
 801e8ee:	af00      	add	r7, sp, #0
 801e8f0:	60f8      	str	r0, [r7, #12]
 801e8f2:	60b9      	str	r1, [r7, #8]
 801e8f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801e8f6:	2300      	movs	r3, #0
 801e8f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801e8fa:	68fb      	ldr	r3, [r7, #12]
 801e8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e8fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e904:	2b00      	cmp	r3, #0
 801e906:	d10d      	bne.n	801e924 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	681b      	ldr	r3, [r3, #0]
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	d14d      	bne.n	801e9ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801e910:	68fb      	ldr	r3, [r7, #12]
 801e912:	689b      	ldr	r3, [r3, #8]
 801e914:	4618      	mov	r0, r3
 801e916:	f001 f899 	bl	801fa4c <xTaskPriorityDisinherit>
 801e91a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801e91c:	68fb      	ldr	r3, [r7, #12]
 801e91e:	2200      	movs	r2, #0
 801e920:	609a      	str	r2, [r3, #8]
 801e922:	e043      	b.n	801e9ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	2b00      	cmp	r3, #0
 801e928:	d119      	bne.n	801e95e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801e92a:	68fb      	ldr	r3, [r7, #12]
 801e92c:	6858      	ldr	r0, [r3, #4]
 801e92e:	68fb      	ldr	r3, [r7, #12]
 801e930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e932:	461a      	mov	r2, r3
 801e934:	68b9      	ldr	r1, [r7, #8]
 801e936:	f003 fc21 	bl	802217c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801e93a:	68fb      	ldr	r3, [r7, #12]
 801e93c:	685a      	ldr	r2, [r3, #4]
 801e93e:	68fb      	ldr	r3, [r7, #12]
 801e940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e942:	441a      	add	r2, r3
 801e944:	68fb      	ldr	r3, [r7, #12]
 801e946:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801e948:	68fb      	ldr	r3, [r7, #12]
 801e94a:	685a      	ldr	r2, [r3, #4]
 801e94c:	68fb      	ldr	r3, [r7, #12]
 801e94e:	689b      	ldr	r3, [r3, #8]
 801e950:	429a      	cmp	r2, r3
 801e952:	d32b      	bcc.n	801e9ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801e954:	68fb      	ldr	r3, [r7, #12]
 801e956:	681a      	ldr	r2, [r3, #0]
 801e958:	68fb      	ldr	r3, [r7, #12]
 801e95a:	605a      	str	r2, [r3, #4]
 801e95c:	e026      	b.n	801e9ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801e95e:	68fb      	ldr	r3, [r7, #12]
 801e960:	68d8      	ldr	r0, [r3, #12]
 801e962:	68fb      	ldr	r3, [r7, #12]
 801e964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e966:	461a      	mov	r2, r3
 801e968:	68b9      	ldr	r1, [r7, #8]
 801e96a:	f003 fc07 	bl	802217c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801e96e:	68fb      	ldr	r3, [r7, #12]
 801e970:	68da      	ldr	r2, [r3, #12]
 801e972:	68fb      	ldr	r3, [r7, #12]
 801e974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e976:	425b      	negs	r3, r3
 801e978:	441a      	add	r2, r3
 801e97a:	68fb      	ldr	r3, [r7, #12]
 801e97c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801e97e:	68fb      	ldr	r3, [r7, #12]
 801e980:	68da      	ldr	r2, [r3, #12]
 801e982:	68fb      	ldr	r3, [r7, #12]
 801e984:	681b      	ldr	r3, [r3, #0]
 801e986:	429a      	cmp	r2, r3
 801e988:	d207      	bcs.n	801e99a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801e98a:	68fb      	ldr	r3, [r7, #12]
 801e98c:	689a      	ldr	r2, [r3, #8]
 801e98e:	68fb      	ldr	r3, [r7, #12]
 801e990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e992:	425b      	negs	r3, r3
 801e994:	441a      	add	r2, r3
 801e996:	68fb      	ldr	r3, [r7, #12]
 801e998:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801e99a:	687b      	ldr	r3, [r7, #4]
 801e99c:	2b02      	cmp	r3, #2
 801e99e:	d105      	bne.n	801e9ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801e9a0:	693b      	ldr	r3, [r7, #16]
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	d002      	beq.n	801e9ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801e9a6:	693b      	ldr	r3, [r7, #16]
 801e9a8:	3b01      	subs	r3, #1
 801e9aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801e9ac:	693b      	ldr	r3, [r7, #16]
 801e9ae:	1c5a      	adds	r2, r3, #1
 801e9b0:	68fb      	ldr	r3, [r7, #12]
 801e9b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801e9b4:	697b      	ldr	r3, [r7, #20]
}
 801e9b6:	4618      	mov	r0, r3
 801e9b8:	3718      	adds	r7, #24
 801e9ba:	46bd      	mov	sp, r7
 801e9bc:	bd80      	pop	{r7, pc}

0801e9be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801e9be:	b580      	push	{r7, lr}
 801e9c0:	b082      	sub	sp, #8
 801e9c2:	af00      	add	r7, sp, #0
 801e9c4:	6078      	str	r0, [r7, #4]
 801e9c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801e9c8:	687b      	ldr	r3, [r7, #4]
 801e9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	d018      	beq.n	801ea02 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801e9d0:	687b      	ldr	r3, [r7, #4]
 801e9d2:	68da      	ldr	r2, [r3, #12]
 801e9d4:	687b      	ldr	r3, [r7, #4]
 801e9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e9d8:	441a      	add	r2, r3
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801e9de:	687b      	ldr	r3, [r7, #4]
 801e9e0:	68da      	ldr	r2, [r3, #12]
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	689b      	ldr	r3, [r3, #8]
 801e9e6:	429a      	cmp	r2, r3
 801e9e8:	d303      	bcc.n	801e9f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801e9ea:	687b      	ldr	r3, [r7, #4]
 801e9ec:	681a      	ldr	r2, [r3, #0]
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	68d9      	ldr	r1, [r3, #12]
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e9fa:	461a      	mov	r2, r3
 801e9fc:	6838      	ldr	r0, [r7, #0]
 801e9fe:	f003 fbbd 	bl	802217c <memcpy>
	}
}
 801ea02:	bf00      	nop
 801ea04:	3708      	adds	r7, #8
 801ea06:	46bd      	mov	sp, r7
 801ea08:	bd80      	pop	{r7, pc}

0801ea0a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801ea0a:	b580      	push	{r7, lr}
 801ea0c:	b084      	sub	sp, #16
 801ea0e:	af00      	add	r7, sp, #0
 801ea10:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801ea12:	f001 ffc3 	bl	802099c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801ea16:	687b      	ldr	r3, [r7, #4]
 801ea18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ea1c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801ea1e:	e011      	b.n	801ea44 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea24:	2b00      	cmp	r3, #0
 801ea26:	d012      	beq.n	801ea4e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	3324      	adds	r3, #36	; 0x24
 801ea2c:	4618      	mov	r0, r3
 801ea2e:	f000 fdd1 	bl	801f5d4 <xTaskRemoveFromEventList>
 801ea32:	4603      	mov	r3, r0
 801ea34:	2b00      	cmp	r3, #0
 801ea36:	d001      	beq.n	801ea3c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801ea38:	f000 fea4 	bl	801f784 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801ea3c:	7bfb      	ldrb	r3, [r7, #15]
 801ea3e:	3b01      	subs	r3, #1
 801ea40:	b2db      	uxtb	r3, r3
 801ea42:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801ea44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	dce9      	bgt.n	801ea20 <prvUnlockQueue+0x16>
 801ea4c:	e000      	b.n	801ea50 <prvUnlockQueue+0x46>
					break;
 801ea4e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	22ff      	movs	r2, #255	; 0xff
 801ea54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801ea58:	f001 ffce 	bl	80209f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801ea5c:	f001 ff9e 	bl	802099c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801ea60:	687b      	ldr	r3, [r7, #4]
 801ea62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ea66:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ea68:	e011      	b.n	801ea8e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	691b      	ldr	r3, [r3, #16]
 801ea6e:	2b00      	cmp	r3, #0
 801ea70:	d012      	beq.n	801ea98 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	3310      	adds	r3, #16
 801ea76:	4618      	mov	r0, r3
 801ea78:	f000 fdac 	bl	801f5d4 <xTaskRemoveFromEventList>
 801ea7c:	4603      	mov	r3, r0
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	d001      	beq.n	801ea86 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801ea82:	f000 fe7f 	bl	801f784 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801ea86:	7bbb      	ldrb	r3, [r7, #14]
 801ea88:	3b01      	subs	r3, #1
 801ea8a:	b2db      	uxtb	r3, r3
 801ea8c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ea8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ea92:	2b00      	cmp	r3, #0
 801ea94:	dce9      	bgt.n	801ea6a <prvUnlockQueue+0x60>
 801ea96:	e000      	b.n	801ea9a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801ea98:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801ea9a:	687b      	ldr	r3, [r7, #4]
 801ea9c:	22ff      	movs	r2, #255	; 0xff
 801ea9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801eaa2:	f001 ffa9 	bl	80209f8 <vPortExitCritical>
}
 801eaa6:	bf00      	nop
 801eaa8:	3710      	adds	r7, #16
 801eaaa:	46bd      	mov	sp, r7
 801eaac:	bd80      	pop	{r7, pc}

0801eaae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801eaae:	b580      	push	{r7, lr}
 801eab0:	b084      	sub	sp, #16
 801eab2:	af00      	add	r7, sp, #0
 801eab4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801eab6:	f001 ff71 	bl	802099c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801eaba:	687b      	ldr	r3, [r7, #4]
 801eabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801eabe:	2b00      	cmp	r3, #0
 801eac0:	d102      	bne.n	801eac8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801eac2:	2301      	movs	r3, #1
 801eac4:	60fb      	str	r3, [r7, #12]
 801eac6:	e001      	b.n	801eacc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801eac8:	2300      	movs	r3, #0
 801eaca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801eacc:	f001 ff94 	bl	80209f8 <vPortExitCritical>

	return xReturn;
 801ead0:	68fb      	ldr	r3, [r7, #12]
}
 801ead2:	4618      	mov	r0, r3
 801ead4:	3710      	adds	r7, #16
 801ead6:	46bd      	mov	sp, r7
 801ead8:	bd80      	pop	{r7, pc}

0801eada <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801eada:	b580      	push	{r7, lr}
 801eadc:	b084      	sub	sp, #16
 801eade:	af00      	add	r7, sp, #0
 801eae0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801eae2:	f001 ff5b 	bl	802099c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801eaee:	429a      	cmp	r2, r3
 801eaf0:	d102      	bne.n	801eaf8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801eaf2:	2301      	movs	r3, #1
 801eaf4:	60fb      	str	r3, [r7, #12]
 801eaf6:	e001      	b.n	801eafc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801eaf8:	2300      	movs	r3, #0
 801eafa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801eafc:	f001 ff7c 	bl	80209f8 <vPortExitCritical>

	return xReturn;
 801eb00:	68fb      	ldr	r3, [r7, #12]
}
 801eb02:	4618      	mov	r0, r3
 801eb04:	3710      	adds	r7, #16
 801eb06:	46bd      	mov	sp, r7
 801eb08:	bd80      	pop	{r7, pc}
	...

0801eb0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801eb0c:	b480      	push	{r7}
 801eb0e:	b085      	sub	sp, #20
 801eb10:	af00      	add	r7, sp, #0
 801eb12:	6078      	str	r0, [r7, #4]
 801eb14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801eb16:	2300      	movs	r3, #0
 801eb18:	60fb      	str	r3, [r7, #12]
 801eb1a:	e014      	b.n	801eb46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801eb1c:	4a0e      	ldr	r2, [pc, #56]	; (801eb58 <vQueueAddToRegistry+0x4c>)
 801eb1e:	68fb      	ldr	r3, [r7, #12]
 801eb20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801eb24:	2b00      	cmp	r3, #0
 801eb26:	d10b      	bne.n	801eb40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801eb28:	490b      	ldr	r1, [pc, #44]	; (801eb58 <vQueueAddToRegistry+0x4c>)
 801eb2a:	68fb      	ldr	r3, [r7, #12]
 801eb2c:	683a      	ldr	r2, [r7, #0]
 801eb2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801eb32:	4a09      	ldr	r2, [pc, #36]	; (801eb58 <vQueueAddToRegistry+0x4c>)
 801eb34:	68fb      	ldr	r3, [r7, #12]
 801eb36:	00db      	lsls	r3, r3, #3
 801eb38:	4413      	add	r3, r2
 801eb3a:	687a      	ldr	r2, [r7, #4]
 801eb3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801eb3e:	e005      	b.n	801eb4c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801eb40:	68fb      	ldr	r3, [r7, #12]
 801eb42:	3301      	adds	r3, #1
 801eb44:	60fb      	str	r3, [r7, #12]
 801eb46:	68fb      	ldr	r3, [r7, #12]
 801eb48:	2b07      	cmp	r3, #7
 801eb4a:	d9e7      	bls.n	801eb1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801eb4c:	bf00      	nop
 801eb4e:	3714      	adds	r7, #20
 801eb50:	46bd      	mov	sp, r7
 801eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb56:	4770      	bx	lr
 801eb58:	2400a124 	.word	0x2400a124

0801eb5c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801eb5c:	b480      	push	{r7}
 801eb5e:	b085      	sub	sp, #20
 801eb60:	af00      	add	r7, sp, #0
 801eb62:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801eb64:	2300      	movs	r3, #0
 801eb66:	60fb      	str	r3, [r7, #12]
 801eb68:	e016      	b.n	801eb98 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801eb6a:	4a10      	ldr	r2, [pc, #64]	; (801ebac <vQueueUnregisterQueue+0x50>)
 801eb6c:	68fb      	ldr	r3, [r7, #12]
 801eb6e:	00db      	lsls	r3, r3, #3
 801eb70:	4413      	add	r3, r2
 801eb72:	685b      	ldr	r3, [r3, #4]
 801eb74:	687a      	ldr	r2, [r7, #4]
 801eb76:	429a      	cmp	r2, r3
 801eb78:	d10b      	bne.n	801eb92 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801eb7a:	4a0c      	ldr	r2, [pc, #48]	; (801ebac <vQueueUnregisterQueue+0x50>)
 801eb7c:	68fb      	ldr	r3, [r7, #12]
 801eb7e:	2100      	movs	r1, #0
 801eb80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801eb84:	4a09      	ldr	r2, [pc, #36]	; (801ebac <vQueueUnregisterQueue+0x50>)
 801eb86:	68fb      	ldr	r3, [r7, #12]
 801eb88:	00db      	lsls	r3, r3, #3
 801eb8a:	4413      	add	r3, r2
 801eb8c:	2200      	movs	r2, #0
 801eb8e:	605a      	str	r2, [r3, #4]
				break;
 801eb90:	e005      	b.n	801eb9e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801eb92:	68fb      	ldr	r3, [r7, #12]
 801eb94:	3301      	adds	r3, #1
 801eb96:	60fb      	str	r3, [r7, #12]
 801eb98:	68fb      	ldr	r3, [r7, #12]
 801eb9a:	2b07      	cmp	r3, #7
 801eb9c:	d9e5      	bls.n	801eb6a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801eb9e:	bf00      	nop
 801eba0:	3714      	adds	r7, #20
 801eba2:	46bd      	mov	sp, r7
 801eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eba8:	4770      	bx	lr
 801ebaa:	bf00      	nop
 801ebac:	2400a124 	.word	0x2400a124

0801ebb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ebb0:	b580      	push	{r7, lr}
 801ebb2:	b086      	sub	sp, #24
 801ebb4:	af00      	add	r7, sp, #0
 801ebb6:	60f8      	str	r0, [r7, #12]
 801ebb8:	60b9      	str	r1, [r7, #8]
 801ebba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801ebbc:	68fb      	ldr	r3, [r7, #12]
 801ebbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801ebc0:	f001 feec 	bl	802099c <vPortEnterCritical>
 801ebc4:	697b      	ldr	r3, [r7, #20]
 801ebc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ebca:	b25b      	sxtb	r3, r3
 801ebcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ebd0:	d103      	bne.n	801ebda <vQueueWaitForMessageRestricted+0x2a>
 801ebd2:	697b      	ldr	r3, [r7, #20]
 801ebd4:	2200      	movs	r2, #0
 801ebd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ebda:	697b      	ldr	r3, [r7, #20]
 801ebdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ebe0:	b25b      	sxtb	r3, r3
 801ebe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ebe6:	d103      	bne.n	801ebf0 <vQueueWaitForMessageRestricted+0x40>
 801ebe8:	697b      	ldr	r3, [r7, #20]
 801ebea:	2200      	movs	r2, #0
 801ebec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ebf0:	f001 ff02 	bl	80209f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801ebf4:	697b      	ldr	r3, [r7, #20]
 801ebf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ebf8:	2b00      	cmp	r3, #0
 801ebfa:	d106      	bne.n	801ec0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801ebfc:	697b      	ldr	r3, [r7, #20]
 801ebfe:	3324      	adds	r3, #36	; 0x24
 801ec00:	687a      	ldr	r2, [r7, #4]
 801ec02:	68b9      	ldr	r1, [r7, #8]
 801ec04:	4618      	mov	r0, r3
 801ec06:	f000 fcbb 	bl	801f580 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801ec0a:	6978      	ldr	r0, [r7, #20]
 801ec0c:	f7ff fefd 	bl	801ea0a <prvUnlockQueue>
	}
 801ec10:	bf00      	nop
 801ec12:	3718      	adds	r7, #24
 801ec14:	46bd      	mov	sp, r7
 801ec16:	bd80      	pop	{r7, pc}

0801ec18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801ec18:	b580      	push	{r7, lr}
 801ec1a:	b08e      	sub	sp, #56	; 0x38
 801ec1c:	af04      	add	r7, sp, #16
 801ec1e:	60f8      	str	r0, [r7, #12]
 801ec20:	60b9      	str	r1, [r7, #8]
 801ec22:	607a      	str	r2, [r7, #4]
 801ec24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801ec26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	d109      	bne.n	801ec40 <xTaskCreateStatic+0x28>
 801ec2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ec30:	f383 8811 	msr	BASEPRI, r3
 801ec34:	f3bf 8f6f 	isb	sy
 801ec38:	f3bf 8f4f 	dsb	sy
 801ec3c:	623b      	str	r3, [r7, #32]
 801ec3e:	e7fe      	b.n	801ec3e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 801ec40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ec42:	2b00      	cmp	r3, #0
 801ec44:	d109      	bne.n	801ec5a <xTaskCreateStatic+0x42>
 801ec46:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ec4a:	f383 8811 	msr	BASEPRI, r3
 801ec4e:	f3bf 8f6f 	isb	sy
 801ec52:	f3bf 8f4f 	dsb	sy
 801ec56:	61fb      	str	r3, [r7, #28]
 801ec58:	e7fe      	b.n	801ec58 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801ec5a:	235c      	movs	r3, #92	; 0x5c
 801ec5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801ec5e:	693b      	ldr	r3, [r7, #16]
 801ec60:	2b5c      	cmp	r3, #92	; 0x5c
 801ec62:	d009      	beq.n	801ec78 <xTaskCreateStatic+0x60>
 801ec64:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ec68:	f383 8811 	msr	BASEPRI, r3
 801ec6c:	f3bf 8f6f 	isb	sy
 801ec70:	f3bf 8f4f 	dsb	sy
 801ec74:	61bb      	str	r3, [r7, #24]
 801ec76:	e7fe      	b.n	801ec76 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801ec78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801ec7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ec7c:	2b00      	cmp	r3, #0
 801ec7e:	d01e      	beq.n	801ecbe <xTaskCreateStatic+0xa6>
 801ec80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec82:	2b00      	cmp	r3, #0
 801ec84:	d01b      	beq.n	801ecbe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801ec86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ec88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801ec8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ec8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801ec90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec92:	2202      	movs	r2, #2
 801ec94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801ec98:	2300      	movs	r3, #0
 801ec9a:	9303      	str	r3, [sp, #12]
 801ec9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec9e:	9302      	str	r3, [sp, #8]
 801eca0:	f107 0314 	add.w	r3, r7, #20
 801eca4:	9301      	str	r3, [sp, #4]
 801eca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eca8:	9300      	str	r3, [sp, #0]
 801ecaa:	683b      	ldr	r3, [r7, #0]
 801ecac:	687a      	ldr	r2, [r7, #4]
 801ecae:	68b9      	ldr	r1, [r7, #8]
 801ecb0:	68f8      	ldr	r0, [r7, #12]
 801ecb2:	f000 f850 	bl	801ed56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ecb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ecb8:	f000 f8dc 	bl	801ee74 <prvAddNewTaskToReadyList>
 801ecbc:	e001      	b.n	801ecc2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 801ecbe:	2300      	movs	r3, #0
 801ecc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801ecc2:	697b      	ldr	r3, [r7, #20]
	}
 801ecc4:	4618      	mov	r0, r3
 801ecc6:	3728      	adds	r7, #40	; 0x28
 801ecc8:	46bd      	mov	sp, r7
 801ecca:	bd80      	pop	{r7, pc}

0801eccc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801eccc:	b580      	push	{r7, lr}
 801ecce:	b08c      	sub	sp, #48	; 0x30
 801ecd0:	af04      	add	r7, sp, #16
 801ecd2:	60f8      	str	r0, [r7, #12]
 801ecd4:	60b9      	str	r1, [r7, #8]
 801ecd6:	603b      	str	r3, [r7, #0]
 801ecd8:	4613      	mov	r3, r2
 801ecda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801ecdc:	88fb      	ldrh	r3, [r7, #6]
 801ecde:	009b      	lsls	r3, r3, #2
 801ece0:	4618      	mov	r0, r3
 801ece2:	f001 ff75 	bl	8020bd0 <pvPortMalloc>
 801ece6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801ece8:	697b      	ldr	r3, [r7, #20]
 801ecea:	2b00      	cmp	r3, #0
 801ecec:	d00e      	beq.n	801ed0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801ecee:	205c      	movs	r0, #92	; 0x5c
 801ecf0:	f001 ff6e 	bl	8020bd0 <pvPortMalloc>
 801ecf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801ecf6:	69fb      	ldr	r3, [r7, #28]
 801ecf8:	2b00      	cmp	r3, #0
 801ecfa:	d003      	beq.n	801ed04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801ecfc:	69fb      	ldr	r3, [r7, #28]
 801ecfe:	697a      	ldr	r2, [r7, #20]
 801ed00:	631a      	str	r2, [r3, #48]	; 0x30
 801ed02:	e005      	b.n	801ed10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801ed04:	6978      	ldr	r0, [r7, #20]
 801ed06:	f002 f825 	bl	8020d54 <vPortFree>
 801ed0a:	e001      	b.n	801ed10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801ed10:	69fb      	ldr	r3, [r7, #28]
 801ed12:	2b00      	cmp	r3, #0
 801ed14:	d017      	beq.n	801ed46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801ed16:	69fb      	ldr	r3, [r7, #28]
 801ed18:	2200      	movs	r2, #0
 801ed1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801ed1e:	88fa      	ldrh	r2, [r7, #6]
 801ed20:	2300      	movs	r3, #0
 801ed22:	9303      	str	r3, [sp, #12]
 801ed24:	69fb      	ldr	r3, [r7, #28]
 801ed26:	9302      	str	r3, [sp, #8]
 801ed28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed2a:	9301      	str	r3, [sp, #4]
 801ed2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed2e:	9300      	str	r3, [sp, #0]
 801ed30:	683b      	ldr	r3, [r7, #0]
 801ed32:	68b9      	ldr	r1, [r7, #8]
 801ed34:	68f8      	ldr	r0, [r7, #12]
 801ed36:	f000 f80e 	bl	801ed56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801ed3a:	69f8      	ldr	r0, [r7, #28]
 801ed3c:	f000 f89a 	bl	801ee74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801ed40:	2301      	movs	r3, #1
 801ed42:	61bb      	str	r3, [r7, #24]
 801ed44:	e002      	b.n	801ed4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801ed46:	f04f 33ff 	mov.w	r3, #4294967295
 801ed4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801ed4c:	69bb      	ldr	r3, [r7, #24]
	}
 801ed4e:	4618      	mov	r0, r3
 801ed50:	3720      	adds	r7, #32
 801ed52:	46bd      	mov	sp, r7
 801ed54:	bd80      	pop	{r7, pc}

0801ed56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801ed56:	b580      	push	{r7, lr}
 801ed58:	b088      	sub	sp, #32
 801ed5a:	af00      	add	r7, sp, #0
 801ed5c:	60f8      	str	r0, [r7, #12]
 801ed5e:	60b9      	str	r1, [r7, #8]
 801ed60:	607a      	str	r2, [r7, #4]
 801ed62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801ed64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	009b      	lsls	r3, r3, #2
 801ed6c:	461a      	mov	r2, r3
 801ed6e:	21a5      	movs	r1, #165	; 0xa5
 801ed70:	f003 fa0f 	bl	8022192 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801ed74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ed78:	6879      	ldr	r1, [r7, #4]
 801ed7a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801ed7e:	440b      	add	r3, r1
 801ed80:	009b      	lsls	r3, r3, #2
 801ed82:	4413      	add	r3, r2
 801ed84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801ed86:	69bb      	ldr	r3, [r7, #24]
 801ed88:	f023 0307 	bic.w	r3, r3, #7
 801ed8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801ed8e:	69bb      	ldr	r3, [r7, #24]
 801ed90:	f003 0307 	and.w	r3, r3, #7
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	d009      	beq.n	801edac <prvInitialiseNewTask+0x56>
 801ed98:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ed9c:	f383 8811 	msr	BASEPRI, r3
 801eda0:	f3bf 8f6f 	isb	sy
 801eda4:	f3bf 8f4f 	dsb	sy
 801eda8:	617b      	str	r3, [r7, #20]
 801edaa:	e7fe      	b.n	801edaa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801edac:	68bb      	ldr	r3, [r7, #8]
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d01f      	beq.n	801edf2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801edb2:	2300      	movs	r3, #0
 801edb4:	61fb      	str	r3, [r7, #28]
 801edb6:	e012      	b.n	801edde <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801edb8:	68ba      	ldr	r2, [r7, #8]
 801edba:	69fb      	ldr	r3, [r7, #28]
 801edbc:	4413      	add	r3, r2
 801edbe:	7819      	ldrb	r1, [r3, #0]
 801edc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801edc2:	69fb      	ldr	r3, [r7, #28]
 801edc4:	4413      	add	r3, r2
 801edc6:	3334      	adds	r3, #52	; 0x34
 801edc8:	460a      	mov	r2, r1
 801edca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801edcc:	68ba      	ldr	r2, [r7, #8]
 801edce:	69fb      	ldr	r3, [r7, #28]
 801edd0:	4413      	add	r3, r2
 801edd2:	781b      	ldrb	r3, [r3, #0]
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	d006      	beq.n	801ede6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801edd8:	69fb      	ldr	r3, [r7, #28]
 801edda:	3301      	adds	r3, #1
 801eddc:	61fb      	str	r3, [r7, #28]
 801edde:	69fb      	ldr	r3, [r7, #28]
 801ede0:	2b0f      	cmp	r3, #15
 801ede2:	d9e9      	bls.n	801edb8 <prvInitialiseNewTask+0x62>
 801ede4:	e000      	b.n	801ede8 <prvInitialiseNewTask+0x92>
			{
				break;
 801ede6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801ede8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801edea:	2200      	movs	r2, #0
 801edec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801edf0:	e003      	b.n	801edfa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801edf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801edf4:	2200      	movs	r2, #0
 801edf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801edfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801edfc:	2b37      	cmp	r3, #55	; 0x37
 801edfe:	d901      	bls.n	801ee04 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801ee00:	2337      	movs	r3, #55	; 0x37
 801ee02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801ee04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ee08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801ee0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ee0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801ee10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee12:	2200      	movs	r2, #0
 801ee14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801ee16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee18:	3304      	adds	r3, #4
 801ee1a:	4618      	mov	r0, r3
 801ee1c:	f7fe fe58 	bl	801dad0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801ee20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee22:	3318      	adds	r3, #24
 801ee24:	4618      	mov	r0, r3
 801ee26:	f7fe fe53 	bl	801dad0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801ee2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ee2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ee30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801ee36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801ee3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ee3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801ee40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee42:	2200      	movs	r2, #0
 801ee44:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801ee46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee48:	2200      	movs	r2, #0
 801ee4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801ee4e:	683a      	ldr	r2, [r7, #0]
 801ee50:	68f9      	ldr	r1, [r7, #12]
 801ee52:	69b8      	ldr	r0, [r7, #24]
 801ee54:	f001 fc7a 	bl	802074c <pxPortInitialiseStack>
 801ee58:	4602      	mov	r2, r0
 801ee5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ee5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801ee5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee60:	2b00      	cmp	r3, #0
 801ee62:	d002      	beq.n	801ee6a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801ee64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ee68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ee6a:	bf00      	nop
 801ee6c:	3720      	adds	r7, #32
 801ee6e:	46bd      	mov	sp, r7
 801ee70:	bd80      	pop	{r7, pc}
	...

0801ee74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801ee74:	b580      	push	{r7, lr}
 801ee76:	b082      	sub	sp, #8
 801ee78:	af00      	add	r7, sp, #0
 801ee7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801ee7c:	f001 fd8e 	bl	802099c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801ee80:	4b2d      	ldr	r3, [pc, #180]	; (801ef38 <prvAddNewTaskToReadyList+0xc4>)
 801ee82:	681b      	ldr	r3, [r3, #0]
 801ee84:	3301      	adds	r3, #1
 801ee86:	4a2c      	ldr	r2, [pc, #176]	; (801ef38 <prvAddNewTaskToReadyList+0xc4>)
 801ee88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801ee8a:	4b2c      	ldr	r3, [pc, #176]	; (801ef3c <prvAddNewTaskToReadyList+0xc8>)
 801ee8c:	681b      	ldr	r3, [r3, #0]
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d109      	bne.n	801eea6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801ee92:	4a2a      	ldr	r2, [pc, #168]	; (801ef3c <prvAddNewTaskToReadyList+0xc8>)
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801ee98:	4b27      	ldr	r3, [pc, #156]	; (801ef38 <prvAddNewTaskToReadyList+0xc4>)
 801ee9a:	681b      	ldr	r3, [r3, #0]
 801ee9c:	2b01      	cmp	r3, #1
 801ee9e:	d110      	bne.n	801eec2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801eea0:	f000 fc94 	bl	801f7cc <prvInitialiseTaskLists>
 801eea4:	e00d      	b.n	801eec2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801eea6:	4b26      	ldr	r3, [pc, #152]	; (801ef40 <prvAddNewTaskToReadyList+0xcc>)
 801eea8:	681b      	ldr	r3, [r3, #0]
 801eeaa:	2b00      	cmp	r3, #0
 801eeac:	d109      	bne.n	801eec2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801eeae:	4b23      	ldr	r3, [pc, #140]	; (801ef3c <prvAddNewTaskToReadyList+0xc8>)
 801eeb0:	681b      	ldr	r3, [r3, #0]
 801eeb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801eeb4:	687b      	ldr	r3, [r7, #4]
 801eeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eeb8:	429a      	cmp	r2, r3
 801eeba:	d802      	bhi.n	801eec2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801eebc:	4a1f      	ldr	r2, [pc, #124]	; (801ef3c <prvAddNewTaskToReadyList+0xc8>)
 801eebe:	687b      	ldr	r3, [r7, #4]
 801eec0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801eec2:	4b20      	ldr	r3, [pc, #128]	; (801ef44 <prvAddNewTaskToReadyList+0xd0>)
 801eec4:	681b      	ldr	r3, [r3, #0]
 801eec6:	3301      	adds	r3, #1
 801eec8:	4a1e      	ldr	r2, [pc, #120]	; (801ef44 <prvAddNewTaskToReadyList+0xd0>)
 801eeca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801eecc:	4b1d      	ldr	r3, [pc, #116]	; (801ef44 <prvAddNewTaskToReadyList+0xd0>)
 801eece:	681a      	ldr	r2, [r3, #0]
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801eed8:	4b1b      	ldr	r3, [pc, #108]	; (801ef48 <prvAddNewTaskToReadyList+0xd4>)
 801eeda:	681b      	ldr	r3, [r3, #0]
 801eedc:	429a      	cmp	r2, r3
 801eede:	d903      	bls.n	801eee8 <prvAddNewTaskToReadyList+0x74>
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eee4:	4a18      	ldr	r2, [pc, #96]	; (801ef48 <prvAddNewTaskToReadyList+0xd4>)
 801eee6:	6013      	str	r3, [r2, #0]
 801eee8:	687b      	ldr	r3, [r7, #4]
 801eeea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801eeec:	4613      	mov	r3, r2
 801eeee:	009b      	lsls	r3, r3, #2
 801eef0:	4413      	add	r3, r2
 801eef2:	009b      	lsls	r3, r3, #2
 801eef4:	4a15      	ldr	r2, [pc, #84]	; (801ef4c <prvAddNewTaskToReadyList+0xd8>)
 801eef6:	441a      	add	r2, r3
 801eef8:	687b      	ldr	r3, [r7, #4]
 801eefa:	3304      	adds	r3, #4
 801eefc:	4619      	mov	r1, r3
 801eefe:	4610      	mov	r0, r2
 801ef00:	f7fe fdf3 	bl	801daea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801ef04:	f001 fd78 	bl	80209f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801ef08:	4b0d      	ldr	r3, [pc, #52]	; (801ef40 <prvAddNewTaskToReadyList+0xcc>)
 801ef0a:	681b      	ldr	r3, [r3, #0]
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	d00e      	beq.n	801ef2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801ef10:	4b0a      	ldr	r3, [pc, #40]	; (801ef3c <prvAddNewTaskToReadyList+0xc8>)
 801ef12:	681b      	ldr	r3, [r3, #0]
 801ef14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ef1a:	429a      	cmp	r2, r3
 801ef1c:	d207      	bcs.n	801ef2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801ef1e:	4b0c      	ldr	r3, [pc, #48]	; (801ef50 <prvAddNewTaskToReadyList+0xdc>)
 801ef20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ef24:	601a      	str	r2, [r3, #0]
 801ef26:	f3bf 8f4f 	dsb	sy
 801ef2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ef2e:	bf00      	nop
 801ef30:	3708      	adds	r7, #8
 801ef32:	46bd      	mov	sp, r7
 801ef34:	bd80      	pop	{r7, pc}
 801ef36:	bf00      	nop
 801ef38:	24001604 	.word	0x24001604
 801ef3c:	24001130 	.word	0x24001130
 801ef40:	24001610 	.word	0x24001610
 801ef44:	24001620 	.word	0x24001620
 801ef48:	2400160c 	.word	0x2400160c
 801ef4c:	24001134 	.word	0x24001134
 801ef50:	e000ed04 	.word	0xe000ed04

0801ef54 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 801ef54:	b580      	push	{r7, lr}
 801ef56:	b08a      	sub	sp, #40	; 0x28
 801ef58:	af00      	add	r7, sp, #0
 801ef5a:	6078      	str	r0, [r7, #4]
 801ef5c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801ef5e:	2300      	movs	r3, #0
 801ef60:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801ef62:	687b      	ldr	r3, [r7, #4]
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	d109      	bne.n	801ef7c <vTaskDelayUntil+0x28>
 801ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ef6c:	f383 8811 	msr	BASEPRI, r3
 801ef70:	f3bf 8f6f 	isb	sy
 801ef74:	f3bf 8f4f 	dsb	sy
 801ef78:	617b      	str	r3, [r7, #20]
 801ef7a:	e7fe      	b.n	801ef7a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 801ef7c:	683b      	ldr	r3, [r7, #0]
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d109      	bne.n	801ef96 <vTaskDelayUntil+0x42>
 801ef82:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ef86:	f383 8811 	msr	BASEPRI, r3
 801ef8a:	f3bf 8f6f 	isb	sy
 801ef8e:	f3bf 8f4f 	dsb	sy
 801ef92:	613b      	str	r3, [r7, #16]
 801ef94:	e7fe      	b.n	801ef94 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 801ef96:	4b29      	ldr	r3, [pc, #164]	; (801f03c <vTaskDelayUntil+0xe8>)
 801ef98:	681b      	ldr	r3, [r3, #0]
 801ef9a:	2b00      	cmp	r3, #0
 801ef9c:	d009      	beq.n	801efb2 <vTaskDelayUntil+0x5e>
 801ef9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801efa2:	f383 8811 	msr	BASEPRI, r3
 801efa6:	f3bf 8f6f 	isb	sy
 801efaa:	f3bf 8f4f 	dsb	sy
 801efae:	60fb      	str	r3, [r7, #12]
 801efb0:	e7fe      	b.n	801efb0 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 801efb2:	f000 f8e1 	bl	801f178 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801efb6:	4b22      	ldr	r3, [pc, #136]	; (801f040 <vTaskDelayUntil+0xec>)
 801efb8:	681b      	ldr	r3, [r3, #0]
 801efba:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 801efbc:	687b      	ldr	r3, [r7, #4]
 801efbe:	681b      	ldr	r3, [r3, #0]
 801efc0:	683a      	ldr	r2, [r7, #0]
 801efc2:	4413      	add	r3, r2
 801efc4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801efc6:	687b      	ldr	r3, [r7, #4]
 801efc8:	681b      	ldr	r3, [r3, #0]
 801efca:	6a3a      	ldr	r2, [r7, #32]
 801efcc:	429a      	cmp	r2, r3
 801efce:	d20b      	bcs.n	801efe8 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	69fa      	ldr	r2, [r7, #28]
 801efd6:	429a      	cmp	r2, r3
 801efd8:	d211      	bcs.n	801effe <vTaskDelayUntil+0xaa>
 801efda:	69fa      	ldr	r2, [r7, #28]
 801efdc:	6a3b      	ldr	r3, [r7, #32]
 801efde:	429a      	cmp	r2, r3
 801efe0:	d90d      	bls.n	801effe <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 801efe2:	2301      	movs	r3, #1
 801efe4:	627b      	str	r3, [r7, #36]	; 0x24
 801efe6:	e00a      	b.n	801effe <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	681b      	ldr	r3, [r3, #0]
 801efec:	69fa      	ldr	r2, [r7, #28]
 801efee:	429a      	cmp	r2, r3
 801eff0:	d303      	bcc.n	801effa <vTaskDelayUntil+0xa6>
 801eff2:	69fa      	ldr	r2, [r7, #28]
 801eff4:	6a3b      	ldr	r3, [r7, #32]
 801eff6:	429a      	cmp	r2, r3
 801eff8:	d901      	bls.n	801effe <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 801effa:	2301      	movs	r3, #1
 801effc:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801effe:	687b      	ldr	r3, [r7, #4]
 801f000:	69fa      	ldr	r2, [r7, #28]
 801f002:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801f004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f006:	2b00      	cmp	r3, #0
 801f008:	d006      	beq.n	801f018 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801f00a:	69fa      	ldr	r2, [r7, #28]
 801f00c:	6a3b      	ldr	r3, [r7, #32]
 801f00e:	1ad3      	subs	r3, r2, r3
 801f010:	2100      	movs	r1, #0
 801f012:	4618      	mov	r0, r3
 801f014:	f001 f800 	bl	8020018 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801f018:	f000 f8bc 	bl	801f194 <xTaskResumeAll>
 801f01c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801f01e:	69bb      	ldr	r3, [r7, #24]
 801f020:	2b00      	cmp	r3, #0
 801f022:	d107      	bne.n	801f034 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 801f024:	4b07      	ldr	r3, [pc, #28]	; (801f044 <vTaskDelayUntil+0xf0>)
 801f026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f02a:	601a      	str	r2, [r3, #0]
 801f02c:	f3bf 8f4f 	dsb	sy
 801f030:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801f034:	bf00      	nop
 801f036:	3728      	adds	r7, #40	; 0x28
 801f038:	46bd      	mov	sp, r7
 801f03a:	bd80      	pop	{r7, pc}
 801f03c:	2400162c 	.word	0x2400162c
 801f040:	24001608 	.word	0x24001608
 801f044:	e000ed04 	.word	0xe000ed04

0801f048 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801f048:	b580      	push	{r7, lr}
 801f04a:	b084      	sub	sp, #16
 801f04c:	af00      	add	r7, sp, #0
 801f04e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801f050:	2300      	movs	r3, #0
 801f052:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	2b00      	cmp	r3, #0
 801f058:	d016      	beq.n	801f088 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801f05a:	4b13      	ldr	r3, [pc, #76]	; (801f0a8 <vTaskDelay+0x60>)
 801f05c:	681b      	ldr	r3, [r3, #0]
 801f05e:	2b00      	cmp	r3, #0
 801f060:	d009      	beq.n	801f076 <vTaskDelay+0x2e>
 801f062:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f066:	f383 8811 	msr	BASEPRI, r3
 801f06a:	f3bf 8f6f 	isb	sy
 801f06e:	f3bf 8f4f 	dsb	sy
 801f072:	60bb      	str	r3, [r7, #8]
 801f074:	e7fe      	b.n	801f074 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801f076:	f000 f87f 	bl	801f178 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801f07a:	2100      	movs	r1, #0
 801f07c:	6878      	ldr	r0, [r7, #4]
 801f07e:	f000 ffcb 	bl	8020018 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801f082:	f000 f887 	bl	801f194 <xTaskResumeAll>
 801f086:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801f088:	68fb      	ldr	r3, [r7, #12]
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	d107      	bne.n	801f09e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801f08e:	4b07      	ldr	r3, [pc, #28]	; (801f0ac <vTaskDelay+0x64>)
 801f090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f094:	601a      	str	r2, [r3, #0]
 801f096:	f3bf 8f4f 	dsb	sy
 801f09a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801f09e:	bf00      	nop
 801f0a0:	3710      	adds	r7, #16
 801f0a2:	46bd      	mov	sp, r7
 801f0a4:	bd80      	pop	{r7, pc}
 801f0a6:	bf00      	nop
 801f0a8:	2400162c 	.word	0x2400162c
 801f0ac:	e000ed04 	.word	0xe000ed04

0801f0b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801f0b0:	b580      	push	{r7, lr}
 801f0b2:	b08a      	sub	sp, #40	; 0x28
 801f0b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801f0b6:	2300      	movs	r3, #0
 801f0b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801f0ba:	2300      	movs	r3, #0
 801f0bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801f0be:	463a      	mov	r2, r7
 801f0c0:	1d39      	adds	r1, r7, #4
 801f0c2:	f107 0308 	add.w	r3, r7, #8
 801f0c6:	4618      	mov	r0, r3
 801f0c8:	f7fe fcae 	bl	801da28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801f0cc:	6839      	ldr	r1, [r7, #0]
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	68ba      	ldr	r2, [r7, #8]
 801f0d2:	9202      	str	r2, [sp, #8]
 801f0d4:	9301      	str	r3, [sp, #4]
 801f0d6:	2300      	movs	r3, #0
 801f0d8:	9300      	str	r3, [sp, #0]
 801f0da:	2300      	movs	r3, #0
 801f0dc:	460a      	mov	r2, r1
 801f0de:	4920      	ldr	r1, [pc, #128]	; (801f160 <vTaskStartScheduler+0xb0>)
 801f0e0:	4820      	ldr	r0, [pc, #128]	; (801f164 <vTaskStartScheduler+0xb4>)
 801f0e2:	f7ff fd99 	bl	801ec18 <xTaskCreateStatic>
 801f0e6:	4602      	mov	r2, r0
 801f0e8:	4b1f      	ldr	r3, [pc, #124]	; (801f168 <vTaskStartScheduler+0xb8>)
 801f0ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801f0ec:	4b1e      	ldr	r3, [pc, #120]	; (801f168 <vTaskStartScheduler+0xb8>)
 801f0ee:	681b      	ldr	r3, [r3, #0]
 801f0f0:	2b00      	cmp	r3, #0
 801f0f2:	d002      	beq.n	801f0fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801f0f4:	2301      	movs	r3, #1
 801f0f6:	617b      	str	r3, [r7, #20]
 801f0f8:	e001      	b.n	801f0fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801f0fa:	2300      	movs	r3, #0
 801f0fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801f0fe:	697b      	ldr	r3, [r7, #20]
 801f100:	2b01      	cmp	r3, #1
 801f102:	d102      	bne.n	801f10a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801f104:	f000 ffdc 	bl	80200c0 <xTimerCreateTimerTask>
 801f108:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801f10a:	697b      	ldr	r3, [r7, #20]
 801f10c:	2b01      	cmp	r3, #1
 801f10e:	d115      	bne.n	801f13c <vTaskStartScheduler+0x8c>
 801f110:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f114:	f383 8811 	msr	BASEPRI, r3
 801f118:	f3bf 8f6f 	isb	sy
 801f11c:	f3bf 8f4f 	dsb	sy
 801f120:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801f122:	4b12      	ldr	r3, [pc, #72]	; (801f16c <vTaskStartScheduler+0xbc>)
 801f124:	f04f 32ff 	mov.w	r2, #4294967295
 801f128:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801f12a:	4b11      	ldr	r3, [pc, #68]	; (801f170 <vTaskStartScheduler+0xc0>)
 801f12c:	2201      	movs	r2, #1
 801f12e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801f130:	4b10      	ldr	r3, [pc, #64]	; (801f174 <vTaskStartScheduler+0xc4>)
 801f132:	2200      	movs	r2, #0
 801f134:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801f136:	f001 fb93 	bl	8020860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801f13a:	e00d      	b.n	801f158 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801f13c:	697b      	ldr	r3, [r7, #20]
 801f13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f142:	d109      	bne.n	801f158 <vTaskStartScheduler+0xa8>
 801f144:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f148:	f383 8811 	msr	BASEPRI, r3
 801f14c:	f3bf 8f6f 	isb	sy
 801f150:	f3bf 8f4f 	dsb	sy
 801f154:	60fb      	str	r3, [r7, #12]
 801f156:	e7fe      	b.n	801f156 <vTaskStartScheduler+0xa6>
}
 801f158:	bf00      	nop
 801f15a:	3718      	adds	r7, #24
 801f15c:	46bd      	mov	sp, r7
 801f15e:	bd80      	pop	{r7, pc}
 801f160:	080234d4 	.word	0x080234d4
 801f164:	0801f79d 	.word	0x0801f79d
 801f168:	24001628 	.word	0x24001628
 801f16c:	24001624 	.word	0x24001624
 801f170:	24001610 	.word	0x24001610
 801f174:	24001608 	.word	0x24001608

0801f178 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801f178:	b480      	push	{r7}
 801f17a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801f17c:	4b04      	ldr	r3, [pc, #16]	; (801f190 <vTaskSuspendAll+0x18>)
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	3301      	adds	r3, #1
 801f182:	4a03      	ldr	r2, [pc, #12]	; (801f190 <vTaskSuspendAll+0x18>)
 801f184:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801f186:	bf00      	nop
 801f188:	46bd      	mov	sp, r7
 801f18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f18e:	4770      	bx	lr
 801f190:	2400162c 	.word	0x2400162c

0801f194 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801f194:	b580      	push	{r7, lr}
 801f196:	b084      	sub	sp, #16
 801f198:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801f19a:	2300      	movs	r3, #0
 801f19c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801f19e:	2300      	movs	r3, #0
 801f1a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801f1a2:	4b41      	ldr	r3, [pc, #260]	; (801f2a8 <xTaskResumeAll+0x114>)
 801f1a4:	681b      	ldr	r3, [r3, #0]
 801f1a6:	2b00      	cmp	r3, #0
 801f1a8:	d109      	bne.n	801f1be <xTaskResumeAll+0x2a>
 801f1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f1ae:	f383 8811 	msr	BASEPRI, r3
 801f1b2:	f3bf 8f6f 	isb	sy
 801f1b6:	f3bf 8f4f 	dsb	sy
 801f1ba:	603b      	str	r3, [r7, #0]
 801f1bc:	e7fe      	b.n	801f1bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801f1be:	f001 fbed 	bl	802099c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801f1c2:	4b39      	ldr	r3, [pc, #228]	; (801f2a8 <xTaskResumeAll+0x114>)
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	3b01      	subs	r3, #1
 801f1c8:	4a37      	ldr	r2, [pc, #220]	; (801f2a8 <xTaskResumeAll+0x114>)
 801f1ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f1cc:	4b36      	ldr	r3, [pc, #216]	; (801f2a8 <xTaskResumeAll+0x114>)
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	2b00      	cmp	r3, #0
 801f1d2:	d162      	bne.n	801f29a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801f1d4:	4b35      	ldr	r3, [pc, #212]	; (801f2ac <xTaskResumeAll+0x118>)
 801f1d6:	681b      	ldr	r3, [r3, #0]
 801f1d8:	2b00      	cmp	r3, #0
 801f1da:	d05e      	beq.n	801f29a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801f1dc:	e02f      	b.n	801f23e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f1de:	4b34      	ldr	r3, [pc, #208]	; (801f2b0 <xTaskResumeAll+0x11c>)
 801f1e0:	68db      	ldr	r3, [r3, #12]
 801f1e2:	68db      	ldr	r3, [r3, #12]
 801f1e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801f1e6:	68fb      	ldr	r3, [r7, #12]
 801f1e8:	3318      	adds	r3, #24
 801f1ea:	4618      	mov	r0, r3
 801f1ec:	f7fe fcda 	bl	801dba4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801f1f0:	68fb      	ldr	r3, [r7, #12]
 801f1f2:	3304      	adds	r3, #4
 801f1f4:	4618      	mov	r0, r3
 801f1f6:	f7fe fcd5 	bl	801dba4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801f1fa:	68fb      	ldr	r3, [r7, #12]
 801f1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f1fe:	4b2d      	ldr	r3, [pc, #180]	; (801f2b4 <xTaskResumeAll+0x120>)
 801f200:	681b      	ldr	r3, [r3, #0]
 801f202:	429a      	cmp	r2, r3
 801f204:	d903      	bls.n	801f20e <xTaskResumeAll+0x7a>
 801f206:	68fb      	ldr	r3, [r7, #12]
 801f208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f20a:	4a2a      	ldr	r2, [pc, #168]	; (801f2b4 <xTaskResumeAll+0x120>)
 801f20c:	6013      	str	r3, [r2, #0]
 801f20e:	68fb      	ldr	r3, [r7, #12]
 801f210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f212:	4613      	mov	r3, r2
 801f214:	009b      	lsls	r3, r3, #2
 801f216:	4413      	add	r3, r2
 801f218:	009b      	lsls	r3, r3, #2
 801f21a:	4a27      	ldr	r2, [pc, #156]	; (801f2b8 <xTaskResumeAll+0x124>)
 801f21c:	441a      	add	r2, r3
 801f21e:	68fb      	ldr	r3, [r7, #12]
 801f220:	3304      	adds	r3, #4
 801f222:	4619      	mov	r1, r3
 801f224:	4610      	mov	r0, r2
 801f226:	f7fe fc60 	bl	801daea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801f22a:	68fb      	ldr	r3, [r7, #12]
 801f22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f22e:	4b23      	ldr	r3, [pc, #140]	; (801f2bc <xTaskResumeAll+0x128>)
 801f230:	681b      	ldr	r3, [r3, #0]
 801f232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f234:	429a      	cmp	r2, r3
 801f236:	d302      	bcc.n	801f23e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801f238:	4b21      	ldr	r3, [pc, #132]	; (801f2c0 <xTaskResumeAll+0x12c>)
 801f23a:	2201      	movs	r2, #1
 801f23c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801f23e:	4b1c      	ldr	r3, [pc, #112]	; (801f2b0 <xTaskResumeAll+0x11c>)
 801f240:	681b      	ldr	r3, [r3, #0]
 801f242:	2b00      	cmp	r3, #0
 801f244:	d1cb      	bne.n	801f1de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801f246:	68fb      	ldr	r3, [r7, #12]
 801f248:	2b00      	cmp	r3, #0
 801f24a:	d001      	beq.n	801f250 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801f24c:	f000 fb58 	bl	801f900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801f250:	4b1c      	ldr	r3, [pc, #112]	; (801f2c4 <xTaskResumeAll+0x130>)
 801f252:	681b      	ldr	r3, [r3, #0]
 801f254:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801f256:	687b      	ldr	r3, [r7, #4]
 801f258:	2b00      	cmp	r3, #0
 801f25a:	d010      	beq.n	801f27e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801f25c:	f000 f858 	bl	801f310 <xTaskIncrementTick>
 801f260:	4603      	mov	r3, r0
 801f262:	2b00      	cmp	r3, #0
 801f264:	d002      	beq.n	801f26c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801f266:	4b16      	ldr	r3, [pc, #88]	; (801f2c0 <xTaskResumeAll+0x12c>)
 801f268:	2201      	movs	r2, #1
 801f26a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	3b01      	subs	r3, #1
 801f270:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801f272:	687b      	ldr	r3, [r7, #4]
 801f274:	2b00      	cmp	r3, #0
 801f276:	d1f1      	bne.n	801f25c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 801f278:	4b12      	ldr	r3, [pc, #72]	; (801f2c4 <xTaskResumeAll+0x130>)
 801f27a:	2200      	movs	r2, #0
 801f27c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801f27e:	4b10      	ldr	r3, [pc, #64]	; (801f2c0 <xTaskResumeAll+0x12c>)
 801f280:	681b      	ldr	r3, [r3, #0]
 801f282:	2b00      	cmp	r3, #0
 801f284:	d009      	beq.n	801f29a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801f286:	2301      	movs	r3, #1
 801f288:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801f28a:	4b0f      	ldr	r3, [pc, #60]	; (801f2c8 <xTaskResumeAll+0x134>)
 801f28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f290:	601a      	str	r2, [r3, #0]
 801f292:	f3bf 8f4f 	dsb	sy
 801f296:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801f29a:	f001 fbad 	bl	80209f8 <vPortExitCritical>

	return xAlreadyYielded;
 801f29e:	68bb      	ldr	r3, [r7, #8]
}
 801f2a0:	4618      	mov	r0, r3
 801f2a2:	3710      	adds	r7, #16
 801f2a4:	46bd      	mov	sp, r7
 801f2a6:	bd80      	pop	{r7, pc}
 801f2a8:	2400162c 	.word	0x2400162c
 801f2ac:	24001604 	.word	0x24001604
 801f2b0:	240015c4 	.word	0x240015c4
 801f2b4:	2400160c 	.word	0x2400160c
 801f2b8:	24001134 	.word	0x24001134
 801f2bc:	24001130 	.word	0x24001130
 801f2c0:	24001618 	.word	0x24001618
 801f2c4:	24001614 	.word	0x24001614
 801f2c8:	e000ed04 	.word	0xe000ed04

0801f2cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801f2cc:	b480      	push	{r7}
 801f2ce:	b083      	sub	sp, #12
 801f2d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801f2d2:	4b05      	ldr	r3, [pc, #20]	; (801f2e8 <xTaskGetTickCount+0x1c>)
 801f2d4:	681b      	ldr	r3, [r3, #0]
 801f2d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801f2d8:	687b      	ldr	r3, [r7, #4]
}
 801f2da:	4618      	mov	r0, r3
 801f2dc:	370c      	adds	r7, #12
 801f2de:	46bd      	mov	sp, r7
 801f2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2e4:	4770      	bx	lr
 801f2e6:	bf00      	nop
 801f2e8:	24001608 	.word	0x24001608

0801f2ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801f2ec:	b580      	push	{r7, lr}
 801f2ee:	b082      	sub	sp, #8
 801f2f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801f2f2:	f001 fc2f 	bl	8020b54 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801f2f6:	2300      	movs	r3, #0
 801f2f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801f2fa:	4b04      	ldr	r3, [pc, #16]	; (801f30c <xTaskGetTickCountFromISR+0x20>)
 801f2fc:	681b      	ldr	r3, [r3, #0]
 801f2fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801f300:	683b      	ldr	r3, [r7, #0]
}
 801f302:	4618      	mov	r0, r3
 801f304:	3708      	adds	r7, #8
 801f306:	46bd      	mov	sp, r7
 801f308:	bd80      	pop	{r7, pc}
 801f30a:	bf00      	nop
 801f30c:	24001608 	.word	0x24001608

0801f310 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801f310:	b580      	push	{r7, lr}
 801f312:	b086      	sub	sp, #24
 801f314:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801f316:	2300      	movs	r3, #0
 801f318:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f31a:	4b4e      	ldr	r3, [pc, #312]	; (801f454 <xTaskIncrementTick+0x144>)
 801f31c:	681b      	ldr	r3, [r3, #0]
 801f31e:	2b00      	cmp	r3, #0
 801f320:	f040 8088 	bne.w	801f434 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801f324:	4b4c      	ldr	r3, [pc, #304]	; (801f458 <xTaskIncrementTick+0x148>)
 801f326:	681b      	ldr	r3, [r3, #0]
 801f328:	3301      	adds	r3, #1
 801f32a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801f32c:	4a4a      	ldr	r2, [pc, #296]	; (801f458 <xTaskIncrementTick+0x148>)
 801f32e:	693b      	ldr	r3, [r7, #16]
 801f330:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801f332:	693b      	ldr	r3, [r7, #16]
 801f334:	2b00      	cmp	r3, #0
 801f336:	d11f      	bne.n	801f378 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801f338:	4b48      	ldr	r3, [pc, #288]	; (801f45c <xTaskIncrementTick+0x14c>)
 801f33a:	681b      	ldr	r3, [r3, #0]
 801f33c:	681b      	ldr	r3, [r3, #0]
 801f33e:	2b00      	cmp	r3, #0
 801f340:	d009      	beq.n	801f356 <xTaskIncrementTick+0x46>
 801f342:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f346:	f383 8811 	msr	BASEPRI, r3
 801f34a:	f3bf 8f6f 	isb	sy
 801f34e:	f3bf 8f4f 	dsb	sy
 801f352:	603b      	str	r3, [r7, #0]
 801f354:	e7fe      	b.n	801f354 <xTaskIncrementTick+0x44>
 801f356:	4b41      	ldr	r3, [pc, #260]	; (801f45c <xTaskIncrementTick+0x14c>)
 801f358:	681b      	ldr	r3, [r3, #0]
 801f35a:	60fb      	str	r3, [r7, #12]
 801f35c:	4b40      	ldr	r3, [pc, #256]	; (801f460 <xTaskIncrementTick+0x150>)
 801f35e:	681b      	ldr	r3, [r3, #0]
 801f360:	4a3e      	ldr	r2, [pc, #248]	; (801f45c <xTaskIncrementTick+0x14c>)
 801f362:	6013      	str	r3, [r2, #0]
 801f364:	4a3e      	ldr	r2, [pc, #248]	; (801f460 <xTaskIncrementTick+0x150>)
 801f366:	68fb      	ldr	r3, [r7, #12]
 801f368:	6013      	str	r3, [r2, #0]
 801f36a:	4b3e      	ldr	r3, [pc, #248]	; (801f464 <xTaskIncrementTick+0x154>)
 801f36c:	681b      	ldr	r3, [r3, #0]
 801f36e:	3301      	adds	r3, #1
 801f370:	4a3c      	ldr	r2, [pc, #240]	; (801f464 <xTaskIncrementTick+0x154>)
 801f372:	6013      	str	r3, [r2, #0]
 801f374:	f000 fac4 	bl	801f900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801f378:	4b3b      	ldr	r3, [pc, #236]	; (801f468 <xTaskIncrementTick+0x158>)
 801f37a:	681b      	ldr	r3, [r3, #0]
 801f37c:	693a      	ldr	r2, [r7, #16]
 801f37e:	429a      	cmp	r2, r3
 801f380:	d349      	bcc.n	801f416 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801f382:	4b36      	ldr	r3, [pc, #216]	; (801f45c <xTaskIncrementTick+0x14c>)
 801f384:	681b      	ldr	r3, [r3, #0]
 801f386:	681b      	ldr	r3, [r3, #0]
 801f388:	2b00      	cmp	r3, #0
 801f38a:	d104      	bne.n	801f396 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f38c:	4b36      	ldr	r3, [pc, #216]	; (801f468 <xTaskIncrementTick+0x158>)
 801f38e:	f04f 32ff 	mov.w	r2, #4294967295
 801f392:	601a      	str	r2, [r3, #0]
					break;
 801f394:	e03f      	b.n	801f416 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f396:	4b31      	ldr	r3, [pc, #196]	; (801f45c <xTaskIncrementTick+0x14c>)
 801f398:	681b      	ldr	r3, [r3, #0]
 801f39a:	68db      	ldr	r3, [r3, #12]
 801f39c:	68db      	ldr	r3, [r3, #12]
 801f39e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801f3a0:	68bb      	ldr	r3, [r7, #8]
 801f3a2:	685b      	ldr	r3, [r3, #4]
 801f3a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801f3a6:	693a      	ldr	r2, [r7, #16]
 801f3a8:	687b      	ldr	r3, [r7, #4]
 801f3aa:	429a      	cmp	r2, r3
 801f3ac:	d203      	bcs.n	801f3b6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801f3ae:	4a2e      	ldr	r2, [pc, #184]	; (801f468 <xTaskIncrementTick+0x158>)
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801f3b4:	e02f      	b.n	801f416 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801f3b6:	68bb      	ldr	r3, [r7, #8]
 801f3b8:	3304      	adds	r3, #4
 801f3ba:	4618      	mov	r0, r3
 801f3bc:	f7fe fbf2 	bl	801dba4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801f3c0:	68bb      	ldr	r3, [r7, #8]
 801f3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	d004      	beq.n	801f3d2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801f3c8:	68bb      	ldr	r3, [r7, #8]
 801f3ca:	3318      	adds	r3, #24
 801f3cc:	4618      	mov	r0, r3
 801f3ce:	f7fe fbe9 	bl	801dba4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801f3d2:	68bb      	ldr	r3, [r7, #8]
 801f3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f3d6:	4b25      	ldr	r3, [pc, #148]	; (801f46c <xTaskIncrementTick+0x15c>)
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	429a      	cmp	r2, r3
 801f3dc:	d903      	bls.n	801f3e6 <xTaskIncrementTick+0xd6>
 801f3de:	68bb      	ldr	r3, [r7, #8]
 801f3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f3e2:	4a22      	ldr	r2, [pc, #136]	; (801f46c <xTaskIncrementTick+0x15c>)
 801f3e4:	6013      	str	r3, [r2, #0]
 801f3e6:	68bb      	ldr	r3, [r7, #8]
 801f3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f3ea:	4613      	mov	r3, r2
 801f3ec:	009b      	lsls	r3, r3, #2
 801f3ee:	4413      	add	r3, r2
 801f3f0:	009b      	lsls	r3, r3, #2
 801f3f2:	4a1f      	ldr	r2, [pc, #124]	; (801f470 <xTaskIncrementTick+0x160>)
 801f3f4:	441a      	add	r2, r3
 801f3f6:	68bb      	ldr	r3, [r7, #8]
 801f3f8:	3304      	adds	r3, #4
 801f3fa:	4619      	mov	r1, r3
 801f3fc:	4610      	mov	r0, r2
 801f3fe:	f7fe fb74 	bl	801daea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801f402:	68bb      	ldr	r3, [r7, #8]
 801f404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f406:	4b1b      	ldr	r3, [pc, #108]	; (801f474 <xTaskIncrementTick+0x164>)
 801f408:	681b      	ldr	r3, [r3, #0]
 801f40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f40c:	429a      	cmp	r2, r3
 801f40e:	d3b8      	bcc.n	801f382 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801f410:	2301      	movs	r3, #1
 801f412:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801f414:	e7b5      	b.n	801f382 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801f416:	4b17      	ldr	r3, [pc, #92]	; (801f474 <xTaskIncrementTick+0x164>)
 801f418:	681b      	ldr	r3, [r3, #0]
 801f41a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f41c:	4914      	ldr	r1, [pc, #80]	; (801f470 <xTaskIncrementTick+0x160>)
 801f41e:	4613      	mov	r3, r2
 801f420:	009b      	lsls	r3, r3, #2
 801f422:	4413      	add	r3, r2
 801f424:	009b      	lsls	r3, r3, #2
 801f426:	440b      	add	r3, r1
 801f428:	681b      	ldr	r3, [r3, #0]
 801f42a:	2b01      	cmp	r3, #1
 801f42c:	d907      	bls.n	801f43e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801f42e:	2301      	movs	r3, #1
 801f430:	617b      	str	r3, [r7, #20]
 801f432:	e004      	b.n	801f43e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801f434:	4b10      	ldr	r3, [pc, #64]	; (801f478 <xTaskIncrementTick+0x168>)
 801f436:	681b      	ldr	r3, [r3, #0]
 801f438:	3301      	adds	r3, #1
 801f43a:	4a0f      	ldr	r2, [pc, #60]	; (801f478 <xTaskIncrementTick+0x168>)
 801f43c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801f43e:	4b0f      	ldr	r3, [pc, #60]	; (801f47c <xTaskIncrementTick+0x16c>)
 801f440:	681b      	ldr	r3, [r3, #0]
 801f442:	2b00      	cmp	r3, #0
 801f444:	d001      	beq.n	801f44a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801f446:	2301      	movs	r3, #1
 801f448:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801f44a:	697b      	ldr	r3, [r7, #20]
}
 801f44c:	4618      	mov	r0, r3
 801f44e:	3718      	adds	r7, #24
 801f450:	46bd      	mov	sp, r7
 801f452:	bd80      	pop	{r7, pc}
 801f454:	2400162c 	.word	0x2400162c
 801f458:	24001608 	.word	0x24001608
 801f45c:	240015bc 	.word	0x240015bc
 801f460:	240015c0 	.word	0x240015c0
 801f464:	2400161c 	.word	0x2400161c
 801f468:	24001624 	.word	0x24001624
 801f46c:	2400160c 	.word	0x2400160c
 801f470:	24001134 	.word	0x24001134
 801f474:	24001130 	.word	0x24001130
 801f478:	24001614 	.word	0x24001614
 801f47c:	24001618 	.word	0x24001618

0801f480 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801f480:	b480      	push	{r7}
 801f482:	b085      	sub	sp, #20
 801f484:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801f486:	4b27      	ldr	r3, [pc, #156]	; (801f524 <vTaskSwitchContext+0xa4>)
 801f488:	681b      	ldr	r3, [r3, #0]
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	d003      	beq.n	801f496 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801f48e:	4b26      	ldr	r3, [pc, #152]	; (801f528 <vTaskSwitchContext+0xa8>)
 801f490:	2201      	movs	r2, #1
 801f492:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801f494:	e040      	b.n	801f518 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801f496:	4b24      	ldr	r3, [pc, #144]	; (801f528 <vTaskSwitchContext+0xa8>)
 801f498:	2200      	movs	r2, #0
 801f49a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f49c:	4b23      	ldr	r3, [pc, #140]	; (801f52c <vTaskSwitchContext+0xac>)
 801f49e:	681b      	ldr	r3, [r3, #0]
 801f4a0:	60fb      	str	r3, [r7, #12]
 801f4a2:	e00f      	b.n	801f4c4 <vTaskSwitchContext+0x44>
 801f4a4:	68fb      	ldr	r3, [r7, #12]
 801f4a6:	2b00      	cmp	r3, #0
 801f4a8:	d109      	bne.n	801f4be <vTaskSwitchContext+0x3e>
 801f4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f4ae:	f383 8811 	msr	BASEPRI, r3
 801f4b2:	f3bf 8f6f 	isb	sy
 801f4b6:	f3bf 8f4f 	dsb	sy
 801f4ba:	607b      	str	r3, [r7, #4]
 801f4bc:	e7fe      	b.n	801f4bc <vTaskSwitchContext+0x3c>
 801f4be:	68fb      	ldr	r3, [r7, #12]
 801f4c0:	3b01      	subs	r3, #1
 801f4c2:	60fb      	str	r3, [r7, #12]
 801f4c4:	491a      	ldr	r1, [pc, #104]	; (801f530 <vTaskSwitchContext+0xb0>)
 801f4c6:	68fa      	ldr	r2, [r7, #12]
 801f4c8:	4613      	mov	r3, r2
 801f4ca:	009b      	lsls	r3, r3, #2
 801f4cc:	4413      	add	r3, r2
 801f4ce:	009b      	lsls	r3, r3, #2
 801f4d0:	440b      	add	r3, r1
 801f4d2:	681b      	ldr	r3, [r3, #0]
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d0e5      	beq.n	801f4a4 <vTaskSwitchContext+0x24>
 801f4d8:	68fa      	ldr	r2, [r7, #12]
 801f4da:	4613      	mov	r3, r2
 801f4dc:	009b      	lsls	r3, r3, #2
 801f4de:	4413      	add	r3, r2
 801f4e0:	009b      	lsls	r3, r3, #2
 801f4e2:	4a13      	ldr	r2, [pc, #76]	; (801f530 <vTaskSwitchContext+0xb0>)
 801f4e4:	4413      	add	r3, r2
 801f4e6:	60bb      	str	r3, [r7, #8]
 801f4e8:	68bb      	ldr	r3, [r7, #8]
 801f4ea:	685b      	ldr	r3, [r3, #4]
 801f4ec:	685a      	ldr	r2, [r3, #4]
 801f4ee:	68bb      	ldr	r3, [r7, #8]
 801f4f0:	605a      	str	r2, [r3, #4]
 801f4f2:	68bb      	ldr	r3, [r7, #8]
 801f4f4:	685a      	ldr	r2, [r3, #4]
 801f4f6:	68bb      	ldr	r3, [r7, #8]
 801f4f8:	3308      	adds	r3, #8
 801f4fa:	429a      	cmp	r2, r3
 801f4fc:	d104      	bne.n	801f508 <vTaskSwitchContext+0x88>
 801f4fe:	68bb      	ldr	r3, [r7, #8]
 801f500:	685b      	ldr	r3, [r3, #4]
 801f502:	685a      	ldr	r2, [r3, #4]
 801f504:	68bb      	ldr	r3, [r7, #8]
 801f506:	605a      	str	r2, [r3, #4]
 801f508:	68bb      	ldr	r3, [r7, #8]
 801f50a:	685b      	ldr	r3, [r3, #4]
 801f50c:	68db      	ldr	r3, [r3, #12]
 801f50e:	4a09      	ldr	r2, [pc, #36]	; (801f534 <vTaskSwitchContext+0xb4>)
 801f510:	6013      	str	r3, [r2, #0]
 801f512:	4a06      	ldr	r2, [pc, #24]	; (801f52c <vTaskSwitchContext+0xac>)
 801f514:	68fb      	ldr	r3, [r7, #12]
 801f516:	6013      	str	r3, [r2, #0]
}
 801f518:	bf00      	nop
 801f51a:	3714      	adds	r7, #20
 801f51c:	46bd      	mov	sp, r7
 801f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f522:	4770      	bx	lr
 801f524:	2400162c 	.word	0x2400162c
 801f528:	24001618 	.word	0x24001618
 801f52c:	2400160c 	.word	0x2400160c
 801f530:	24001134 	.word	0x24001134
 801f534:	24001130 	.word	0x24001130

0801f538 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801f538:	b580      	push	{r7, lr}
 801f53a:	b084      	sub	sp, #16
 801f53c:	af00      	add	r7, sp, #0
 801f53e:	6078      	str	r0, [r7, #4]
 801f540:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801f542:	687b      	ldr	r3, [r7, #4]
 801f544:	2b00      	cmp	r3, #0
 801f546:	d109      	bne.n	801f55c <vTaskPlaceOnEventList+0x24>
 801f548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f54c:	f383 8811 	msr	BASEPRI, r3
 801f550:	f3bf 8f6f 	isb	sy
 801f554:	f3bf 8f4f 	dsb	sy
 801f558:	60fb      	str	r3, [r7, #12]
 801f55a:	e7fe      	b.n	801f55a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801f55c:	4b07      	ldr	r3, [pc, #28]	; (801f57c <vTaskPlaceOnEventList+0x44>)
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	3318      	adds	r3, #24
 801f562:	4619      	mov	r1, r3
 801f564:	6878      	ldr	r0, [r7, #4]
 801f566:	f7fe fae4 	bl	801db32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801f56a:	2101      	movs	r1, #1
 801f56c:	6838      	ldr	r0, [r7, #0]
 801f56e:	f000 fd53 	bl	8020018 <prvAddCurrentTaskToDelayedList>
}
 801f572:	bf00      	nop
 801f574:	3710      	adds	r7, #16
 801f576:	46bd      	mov	sp, r7
 801f578:	bd80      	pop	{r7, pc}
 801f57a:	bf00      	nop
 801f57c:	24001130 	.word	0x24001130

0801f580 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801f580:	b580      	push	{r7, lr}
 801f582:	b086      	sub	sp, #24
 801f584:	af00      	add	r7, sp, #0
 801f586:	60f8      	str	r0, [r7, #12]
 801f588:	60b9      	str	r1, [r7, #8]
 801f58a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801f58c:	68fb      	ldr	r3, [r7, #12]
 801f58e:	2b00      	cmp	r3, #0
 801f590:	d109      	bne.n	801f5a6 <vTaskPlaceOnEventListRestricted+0x26>
 801f592:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f596:	f383 8811 	msr	BASEPRI, r3
 801f59a:	f3bf 8f6f 	isb	sy
 801f59e:	f3bf 8f4f 	dsb	sy
 801f5a2:	617b      	str	r3, [r7, #20]
 801f5a4:	e7fe      	b.n	801f5a4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801f5a6:	4b0a      	ldr	r3, [pc, #40]	; (801f5d0 <vTaskPlaceOnEventListRestricted+0x50>)
 801f5a8:	681b      	ldr	r3, [r3, #0]
 801f5aa:	3318      	adds	r3, #24
 801f5ac:	4619      	mov	r1, r3
 801f5ae:	68f8      	ldr	r0, [r7, #12]
 801f5b0:	f7fe fa9b 	bl	801daea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801f5b4:	687b      	ldr	r3, [r7, #4]
 801f5b6:	2b00      	cmp	r3, #0
 801f5b8:	d002      	beq.n	801f5c0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801f5ba:	f04f 33ff 	mov.w	r3, #4294967295
 801f5be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801f5c0:	6879      	ldr	r1, [r7, #4]
 801f5c2:	68b8      	ldr	r0, [r7, #8]
 801f5c4:	f000 fd28 	bl	8020018 <prvAddCurrentTaskToDelayedList>
	}
 801f5c8:	bf00      	nop
 801f5ca:	3718      	adds	r7, #24
 801f5cc:	46bd      	mov	sp, r7
 801f5ce:	bd80      	pop	{r7, pc}
 801f5d0:	24001130 	.word	0x24001130

0801f5d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801f5d4:	b580      	push	{r7, lr}
 801f5d6:	b086      	sub	sp, #24
 801f5d8:	af00      	add	r7, sp, #0
 801f5da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	68db      	ldr	r3, [r3, #12]
 801f5e0:	68db      	ldr	r3, [r3, #12]
 801f5e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801f5e4:	693b      	ldr	r3, [r7, #16]
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	d109      	bne.n	801f5fe <xTaskRemoveFromEventList+0x2a>
 801f5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f5ee:	f383 8811 	msr	BASEPRI, r3
 801f5f2:	f3bf 8f6f 	isb	sy
 801f5f6:	f3bf 8f4f 	dsb	sy
 801f5fa:	60fb      	str	r3, [r7, #12]
 801f5fc:	e7fe      	b.n	801f5fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801f5fe:	693b      	ldr	r3, [r7, #16]
 801f600:	3318      	adds	r3, #24
 801f602:	4618      	mov	r0, r3
 801f604:	f7fe face 	bl	801dba4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f608:	4b1d      	ldr	r3, [pc, #116]	; (801f680 <xTaskRemoveFromEventList+0xac>)
 801f60a:	681b      	ldr	r3, [r3, #0]
 801f60c:	2b00      	cmp	r3, #0
 801f60e:	d11d      	bne.n	801f64c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801f610:	693b      	ldr	r3, [r7, #16]
 801f612:	3304      	adds	r3, #4
 801f614:	4618      	mov	r0, r3
 801f616:	f7fe fac5 	bl	801dba4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801f61a:	693b      	ldr	r3, [r7, #16]
 801f61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f61e:	4b19      	ldr	r3, [pc, #100]	; (801f684 <xTaskRemoveFromEventList+0xb0>)
 801f620:	681b      	ldr	r3, [r3, #0]
 801f622:	429a      	cmp	r2, r3
 801f624:	d903      	bls.n	801f62e <xTaskRemoveFromEventList+0x5a>
 801f626:	693b      	ldr	r3, [r7, #16]
 801f628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f62a:	4a16      	ldr	r2, [pc, #88]	; (801f684 <xTaskRemoveFromEventList+0xb0>)
 801f62c:	6013      	str	r3, [r2, #0]
 801f62e:	693b      	ldr	r3, [r7, #16]
 801f630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f632:	4613      	mov	r3, r2
 801f634:	009b      	lsls	r3, r3, #2
 801f636:	4413      	add	r3, r2
 801f638:	009b      	lsls	r3, r3, #2
 801f63a:	4a13      	ldr	r2, [pc, #76]	; (801f688 <xTaskRemoveFromEventList+0xb4>)
 801f63c:	441a      	add	r2, r3
 801f63e:	693b      	ldr	r3, [r7, #16]
 801f640:	3304      	adds	r3, #4
 801f642:	4619      	mov	r1, r3
 801f644:	4610      	mov	r0, r2
 801f646:	f7fe fa50 	bl	801daea <vListInsertEnd>
 801f64a:	e005      	b.n	801f658 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801f64c:	693b      	ldr	r3, [r7, #16]
 801f64e:	3318      	adds	r3, #24
 801f650:	4619      	mov	r1, r3
 801f652:	480e      	ldr	r0, [pc, #56]	; (801f68c <xTaskRemoveFromEventList+0xb8>)
 801f654:	f7fe fa49 	bl	801daea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801f658:	693b      	ldr	r3, [r7, #16]
 801f65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f65c:	4b0c      	ldr	r3, [pc, #48]	; (801f690 <xTaskRemoveFromEventList+0xbc>)
 801f65e:	681b      	ldr	r3, [r3, #0]
 801f660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f662:	429a      	cmp	r2, r3
 801f664:	d905      	bls.n	801f672 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801f666:	2301      	movs	r3, #1
 801f668:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801f66a:	4b0a      	ldr	r3, [pc, #40]	; (801f694 <xTaskRemoveFromEventList+0xc0>)
 801f66c:	2201      	movs	r2, #1
 801f66e:	601a      	str	r2, [r3, #0]
 801f670:	e001      	b.n	801f676 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801f672:	2300      	movs	r3, #0
 801f674:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801f676:	697b      	ldr	r3, [r7, #20]
}
 801f678:	4618      	mov	r0, r3
 801f67a:	3718      	adds	r7, #24
 801f67c:	46bd      	mov	sp, r7
 801f67e:	bd80      	pop	{r7, pc}
 801f680:	2400162c 	.word	0x2400162c
 801f684:	2400160c 	.word	0x2400160c
 801f688:	24001134 	.word	0x24001134
 801f68c:	240015c4 	.word	0x240015c4
 801f690:	24001130 	.word	0x24001130
 801f694:	24001618 	.word	0x24001618

0801f698 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801f698:	b480      	push	{r7}
 801f69a:	b083      	sub	sp, #12
 801f69c:	af00      	add	r7, sp, #0
 801f69e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801f6a0:	4b06      	ldr	r3, [pc, #24]	; (801f6bc <vTaskInternalSetTimeOutState+0x24>)
 801f6a2:	681a      	ldr	r2, [r3, #0]
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801f6a8:	4b05      	ldr	r3, [pc, #20]	; (801f6c0 <vTaskInternalSetTimeOutState+0x28>)
 801f6aa:	681a      	ldr	r2, [r3, #0]
 801f6ac:	687b      	ldr	r3, [r7, #4]
 801f6ae:	605a      	str	r2, [r3, #4]
}
 801f6b0:	bf00      	nop
 801f6b2:	370c      	adds	r7, #12
 801f6b4:	46bd      	mov	sp, r7
 801f6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6ba:	4770      	bx	lr
 801f6bc:	2400161c 	.word	0x2400161c
 801f6c0:	24001608 	.word	0x24001608

0801f6c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801f6c4:	b580      	push	{r7, lr}
 801f6c6:	b088      	sub	sp, #32
 801f6c8:	af00      	add	r7, sp, #0
 801f6ca:	6078      	str	r0, [r7, #4]
 801f6cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	2b00      	cmp	r3, #0
 801f6d2:	d109      	bne.n	801f6e8 <xTaskCheckForTimeOut+0x24>
 801f6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f6d8:	f383 8811 	msr	BASEPRI, r3
 801f6dc:	f3bf 8f6f 	isb	sy
 801f6e0:	f3bf 8f4f 	dsb	sy
 801f6e4:	613b      	str	r3, [r7, #16]
 801f6e6:	e7fe      	b.n	801f6e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 801f6e8:	683b      	ldr	r3, [r7, #0]
 801f6ea:	2b00      	cmp	r3, #0
 801f6ec:	d109      	bne.n	801f702 <xTaskCheckForTimeOut+0x3e>
 801f6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f6f2:	f383 8811 	msr	BASEPRI, r3
 801f6f6:	f3bf 8f6f 	isb	sy
 801f6fa:	f3bf 8f4f 	dsb	sy
 801f6fe:	60fb      	str	r3, [r7, #12]
 801f700:	e7fe      	b.n	801f700 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 801f702:	f001 f94b 	bl	802099c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801f706:	4b1d      	ldr	r3, [pc, #116]	; (801f77c <xTaskCheckForTimeOut+0xb8>)
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801f70c:	687b      	ldr	r3, [r7, #4]
 801f70e:	685b      	ldr	r3, [r3, #4]
 801f710:	69ba      	ldr	r2, [r7, #24]
 801f712:	1ad3      	subs	r3, r2, r3
 801f714:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801f716:	683b      	ldr	r3, [r7, #0]
 801f718:	681b      	ldr	r3, [r3, #0]
 801f71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f71e:	d102      	bne.n	801f726 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801f720:	2300      	movs	r3, #0
 801f722:	61fb      	str	r3, [r7, #28]
 801f724:	e023      	b.n	801f76e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801f726:	687b      	ldr	r3, [r7, #4]
 801f728:	681a      	ldr	r2, [r3, #0]
 801f72a:	4b15      	ldr	r3, [pc, #84]	; (801f780 <xTaskCheckForTimeOut+0xbc>)
 801f72c:	681b      	ldr	r3, [r3, #0]
 801f72e:	429a      	cmp	r2, r3
 801f730:	d007      	beq.n	801f742 <xTaskCheckForTimeOut+0x7e>
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	685b      	ldr	r3, [r3, #4]
 801f736:	69ba      	ldr	r2, [r7, #24]
 801f738:	429a      	cmp	r2, r3
 801f73a:	d302      	bcc.n	801f742 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801f73c:	2301      	movs	r3, #1
 801f73e:	61fb      	str	r3, [r7, #28]
 801f740:	e015      	b.n	801f76e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801f742:	683b      	ldr	r3, [r7, #0]
 801f744:	681b      	ldr	r3, [r3, #0]
 801f746:	697a      	ldr	r2, [r7, #20]
 801f748:	429a      	cmp	r2, r3
 801f74a:	d20b      	bcs.n	801f764 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801f74c:	683b      	ldr	r3, [r7, #0]
 801f74e:	681a      	ldr	r2, [r3, #0]
 801f750:	697b      	ldr	r3, [r7, #20]
 801f752:	1ad2      	subs	r2, r2, r3
 801f754:	683b      	ldr	r3, [r7, #0]
 801f756:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801f758:	6878      	ldr	r0, [r7, #4]
 801f75a:	f7ff ff9d 	bl	801f698 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801f75e:	2300      	movs	r3, #0
 801f760:	61fb      	str	r3, [r7, #28]
 801f762:	e004      	b.n	801f76e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801f764:	683b      	ldr	r3, [r7, #0]
 801f766:	2200      	movs	r2, #0
 801f768:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801f76a:	2301      	movs	r3, #1
 801f76c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801f76e:	f001 f943 	bl	80209f8 <vPortExitCritical>

	return xReturn;
 801f772:	69fb      	ldr	r3, [r7, #28]
}
 801f774:	4618      	mov	r0, r3
 801f776:	3720      	adds	r7, #32
 801f778:	46bd      	mov	sp, r7
 801f77a:	bd80      	pop	{r7, pc}
 801f77c:	24001608 	.word	0x24001608
 801f780:	2400161c 	.word	0x2400161c

0801f784 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801f784:	b480      	push	{r7}
 801f786:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801f788:	4b03      	ldr	r3, [pc, #12]	; (801f798 <vTaskMissedYield+0x14>)
 801f78a:	2201      	movs	r2, #1
 801f78c:	601a      	str	r2, [r3, #0]
}
 801f78e:	bf00      	nop
 801f790:	46bd      	mov	sp, r7
 801f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f796:	4770      	bx	lr
 801f798:	24001618 	.word	0x24001618

0801f79c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801f79c:	b580      	push	{r7, lr}
 801f79e:	b082      	sub	sp, #8
 801f7a0:	af00      	add	r7, sp, #0
 801f7a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801f7a4:	f000 f852 	bl	801f84c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801f7a8:	4b06      	ldr	r3, [pc, #24]	; (801f7c4 <prvIdleTask+0x28>)
 801f7aa:	681b      	ldr	r3, [r3, #0]
 801f7ac:	2b01      	cmp	r3, #1
 801f7ae:	d9f9      	bls.n	801f7a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 801f7b0:	4b05      	ldr	r3, [pc, #20]	; (801f7c8 <prvIdleTask+0x2c>)
 801f7b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801f7b6:	601a      	str	r2, [r3, #0]
 801f7b8:	f3bf 8f4f 	dsb	sy
 801f7bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801f7c0:	e7f0      	b.n	801f7a4 <prvIdleTask+0x8>
 801f7c2:	bf00      	nop
 801f7c4:	24001134 	.word	0x24001134
 801f7c8:	e000ed04 	.word	0xe000ed04

0801f7cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801f7cc:	b580      	push	{r7, lr}
 801f7ce:	b082      	sub	sp, #8
 801f7d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801f7d2:	2300      	movs	r3, #0
 801f7d4:	607b      	str	r3, [r7, #4]
 801f7d6:	e00c      	b.n	801f7f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801f7d8:	687a      	ldr	r2, [r7, #4]
 801f7da:	4613      	mov	r3, r2
 801f7dc:	009b      	lsls	r3, r3, #2
 801f7de:	4413      	add	r3, r2
 801f7e0:	009b      	lsls	r3, r3, #2
 801f7e2:	4a12      	ldr	r2, [pc, #72]	; (801f82c <prvInitialiseTaskLists+0x60>)
 801f7e4:	4413      	add	r3, r2
 801f7e6:	4618      	mov	r0, r3
 801f7e8:	f7fe f952 	bl	801da90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801f7ec:	687b      	ldr	r3, [r7, #4]
 801f7ee:	3301      	adds	r3, #1
 801f7f0:	607b      	str	r3, [r7, #4]
 801f7f2:	687b      	ldr	r3, [r7, #4]
 801f7f4:	2b37      	cmp	r3, #55	; 0x37
 801f7f6:	d9ef      	bls.n	801f7d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801f7f8:	480d      	ldr	r0, [pc, #52]	; (801f830 <prvInitialiseTaskLists+0x64>)
 801f7fa:	f7fe f949 	bl	801da90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801f7fe:	480d      	ldr	r0, [pc, #52]	; (801f834 <prvInitialiseTaskLists+0x68>)
 801f800:	f7fe f946 	bl	801da90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801f804:	480c      	ldr	r0, [pc, #48]	; (801f838 <prvInitialiseTaskLists+0x6c>)
 801f806:	f7fe f943 	bl	801da90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801f80a:	480c      	ldr	r0, [pc, #48]	; (801f83c <prvInitialiseTaskLists+0x70>)
 801f80c:	f7fe f940 	bl	801da90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801f810:	480b      	ldr	r0, [pc, #44]	; (801f840 <prvInitialiseTaskLists+0x74>)
 801f812:	f7fe f93d 	bl	801da90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801f816:	4b0b      	ldr	r3, [pc, #44]	; (801f844 <prvInitialiseTaskLists+0x78>)
 801f818:	4a05      	ldr	r2, [pc, #20]	; (801f830 <prvInitialiseTaskLists+0x64>)
 801f81a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801f81c:	4b0a      	ldr	r3, [pc, #40]	; (801f848 <prvInitialiseTaskLists+0x7c>)
 801f81e:	4a05      	ldr	r2, [pc, #20]	; (801f834 <prvInitialiseTaskLists+0x68>)
 801f820:	601a      	str	r2, [r3, #0]
}
 801f822:	bf00      	nop
 801f824:	3708      	adds	r7, #8
 801f826:	46bd      	mov	sp, r7
 801f828:	bd80      	pop	{r7, pc}
 801f82a:	bf00      	nop
 801f82c:	24001134 	.word	0x24001134
 801f830:	24001594 	.word	0x24001594
 801f834:	240015a8 	.word	0x240015a8
 801f838:	240015c4 	.word	0x240015c4
 801f83c:	240015d8 	.word	0x240015d8
 801f840:	240015f0 	.word	0x240015f0
 801f844:	240015bc 	.word	0x240015bc
 801f848:	240015c0 	.word	0x240015c0

0801f84c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801f84c:	b580      	push	{r7, lr}
 801f84e:	b082      	sub	sp, #8
 801f850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801f852:	e019      	b.n	801f888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801f854:	f001 f8a2 	bl	802099c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f858:	4b0f      	ldr	r3, [pc, #60]	; (801f898 <prvCheckTasksWaitingTermination+0x4c>)
 801f85a:	68db      	ldr	r3, [r3, #12]
 801f85c:	68db      	ldr	r3, [r3, #12]
 801f85e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	3304      	adds	r3, #4
 801f864:	4618      	mov	r0, r3
 801f866:	f7fe f99d 	bl	801dba4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801f86a:	4b0c      	ldr	r3, [pc, #48]	; (801f89c <prvCheckTasksWaitingTermination+0x50>)
 801f86c:	681b      	ldr	r3, [r3, #0]
 801f86e:	3b01      	subs	r3, #1
 801f870:	4a0a      	ldr	r2, [pc, #40]	; (801f89c <prvCheckTasksWaitingTermination+0x50>)
 801f872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801f874:	4b0a      	ldr	r3, [pc, #40]	; (801f8a0 <prvCheckTasksWaitingTermination+0x54>)
 801f876:	681b      	ldr	r3, [r3, #0]
 801f878:	3b01      	subs	r3, #1
 801f87a:	4a09      	ldr	r2, [pc, #36]	; (801f8a0 <prvCheckTasksWaitingTermination+0x54>)
 801f87c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801f87e:	f001 f8bb 	bl	80209f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801f882:	6878      	ldr	r0, [r7, #4]
 801f884:	f000 f80e 	bl	801f8a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801f888:	4b05      	ldr	r3, [pc, #20]	; (801f8a0 <prvCheckTasksWaitingTermination+0x54>)
 801f88a:	681b      	ldr	r3, [r3, #0]
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	d1e1      	bne.n	801f854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801f890:	bf00      	nop
 801f892:	3708      	adds	r7, #8
 801f894:	46bd      	mov	sp, r7
 801f896:	bd80      	pop	{r7, pc}
 801f898:	240015d8 	.word	0x240015d8
 801f89c:	24001604 	.word	0x24001604
 801f8a0:	240015ec 	.word	0x240015ec

0801f8a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801f8a4:	b580      	push	{r7, lr}
 801f8a6:	b084      	sub	sp, #16
 801f8a8:	af00      	add	r7, sp, #0
 801f8aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801f8ac:	687b      	ldr	r3, [r7, #4]
 801f8ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801f8b2:	2b00      	cmp	r3, #0
 801f8b4:	d108      	bne.n	801f8c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f8ba:	4618      	mov	r0, r3
 801f8bc:	f001 fa4a 	bl	8020d54 <vPortFree>
				vPortFree( pxTCB );
 801f8c0:	6878      	ldr	r0, [r7, #4]
 801f8c2:	f001 fa47 	bl	8020d54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801f8c6:	e017      	b.n	801f8f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801f8c8:	687b      	ldr	r3, [r7, #4]
 801f8ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801f8ce:	2b01      	cmp	r3, #1
 801f8d0:	d103      	bne.n	801f8da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801f8d2:	6878      	ldr	r0, [r7, #4]
 801f8d4:	f001 fa3e 	bl	8020d54 <vPortFree>
	}
 801f8d8:	e00e      	b.n	801f8f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801f8e0:	2b02      	cmp	r3, #2
 801f8e2:	d009      	beq.n	801f8f8 <prvDeleteTCB+0x54>
 801f8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801f8e8:	f383 8811 	msr	BASEPRI, r3
 801f8ec:	f3bf 8f6f 	isb	sy
 801f8f0:	f3bf 8f4f 	dsb	sy
 801f8f4:	60fb      	str	r3, [r7, #12]
 801f8f6:	e7fe      	b.n	801f8f6 <prvDeleteTCB+0x52>
	}
 801f8f8:	bf00      	nop
 801f8fa:	3710      	adds	r7, #16
 801f8fc:	46bd      	mov	sp, r7
 801f8fe:	bd80      	pop	{r7, pc}

0801f900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801f900:	b480      	push	{r7}
 801f902:	b083      	sub	sp, #12
 801f904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801f906:	4b0c      	ldr	r3, [pc, #48]	; (801f938 <prvResetNextTaskUnblockTime+0x38>)
 801f908:	681b      	ldr	r3, [r3, #0]
 801f90a:	681b      	ldr	r3, [r3, #0]
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	d104      	bne.n	801f91a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801f910:	4b0a      	ldr	r3, [pc, #40]	; (801f93c <prvResetNextTaskUnblockTime+0x3c>)
 801f912:	f04f 32ff 	mov.w	r2, #4294967295
 801f916:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801f918:	e008      	b.n	801f92c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801f91a:	4b07      	ldr	r3, [pc, #28]	; (801f938 <prvResetNextTaskUnblockTime+0x38>)
 801f91c:	681b      	ldr	r3, [r3, #0]
 801f91e:	68db      	ldr	r3, [r3, #12]
 801f920:	68db      	ldr	r3, [r3, #12]
 801f922:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801f924:	687b      	ldr	r3, [r7, #4]
 801f926:	685b      	ldr	r3, [r3, #4]
 801f928:	4a04      	ldr	r2, [pc, #16]	; (801f93c <prvResetNextTaskUnblockTime+0x3c>)
 801f92a:	6013      	str	r3, [r2, #0]
}
 801f92c:	bf00      	nop
 801f92e:	370c      	adds	r7, #12
 801f930:	46bd      	mov	sp, r7
 801f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f936:	4770      	bx	lr
 801f938:	240015bc 	.word	0x240015bc
 801f93c:	24001624 	.word	0x24001624

0801f940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801f940:	b480      	push	{r7}
 801f942:	b083      	sub	sp, #12
 801f944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801f946:	4b0b      	ldr	r3, [pc, #44]	; (801f974 <xTaskGetSchedulerState+0x34>)
 801f948:	681b      	ldr	r3, [r3, #0]
 801f94a:	2b00      	cmp	r3, #0
 801f94c:	d102      	bne.n	801f954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801f94e:	2301      	movs	r3, #1
 801f950:	607b      	str	r3, [r7, #4]
 801f952:	e008      	b.n	801f966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801f954:	4b08      	ldr	r3, [pc, #32]	; (801f978 <xTaskGetSchedulerState+0x38>)
 801f956:	681b      	ldr	r3, [r3, #0]
 801f958:	2b00      	cmp	r3, #0
 801f95a:	d102      	bne.n	801f962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801f95c:	2302      	movs	r3, #2
 801f95e:	607b      	str	r3, [r7, #4]
 801f960:	e001      	b.n	801f966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801f962:	2300      	movs	r3, #0
 801f964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801f966:	687b      	ldr	r3, [r7, #4]
	}
 801f968:	4618      	mov	r0, r3
 801f96a:	370c      	adds	r7, #12
 801f96c:	46bd      	mov	sp, r7
 801f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f972:	4770      	bx	lr
 801f974:	24001610 	.word	0x24001610
 801f978:	2400162c 	.word	0x2400162c

0801f97c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801f97c:	b580      	push	{r7, lr}
 801f97e:	b084      	sub	sp, #16
 801f980:	af00      	add	r7, sp, #0
 801f982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801f988:	2300      	movs	r3, #0
 801f98a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801f98c:	687b      	ldr	r3, [r7, #4]
 801f98e:	2b00      	cmp	r3, #0
 801f990:	d051      	beq.n	801fa36 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801f992:	68bb      	ldr	r3, [r7, #8]
 801f994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f996:	4b2a      	ldr	r3, [pc, #168]	; (801fa40 <xTaskPriorityInherit+0xc4>)
 801f998:	681b      	ldr	r3, [r3, #0]
 801f99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f99c:	429a      	cmp	r2, r3
 801f99e:	d241      	bcs.n	801fa24 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801f9a0:	68bb      	ldr	r3, [r7, #8]
 801f9a2:	699b      	ldr	r3, [r3, #24]
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	db06      	blt.n	801f9b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801f9a8:	4b25      	ldr	r3, [pc, #148]	; (801fa40 <xTaskPriorityInherit+0xc4>)
 801f9aa:	681b      	ldr	r3, [r3, #0]
 801f9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f9ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801f9b2:	68bb      	ldr	r3, [r7, #8]
 801f9b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801f9b6:	68bb      	ldr	r3, [r7, #8]
 801f9b8:	6959      	ldr	r1, [r3, #20]
 801f9ba:	68bb      	ldr	r3, [r7, #8]
 801f9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f9be:	4613      	mov	r3, r2
 801f9c0:	009b      	lsls	r3, r3, #2
 801f9c2:	4413      	add	r3, r2
 801f9c4:	009b      	lsls	r3, r3, #2
 801f9c6:	4a1f      	ldr	r2, [pc, #124]	; (801fa44 <xTaskPriorityInherit+0xc8>)
 801f9c8:	4413      	add	r3, r2
 801f9ca:	4299      	cmp	r1, r3
 801f9cc:	d122      	bne.n	801fa14 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801f9ce:	68bb      	ldr	r3, [r7, #8]
 801f9d0:	3304      	adds	r3, #4
 801f9d2:	4618      	mov	r0, r3
 801f9d4:	f7fe f8e6 	bl	801dba4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801f9d8:	4b19      	ldr	r3, [pc, #100]	; (801fa40 <xTaskPriorityInherit+0xc4>)
 801f9da:	681b      	ldr	r3, [r3, #0]
 801f9dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f9de:	68bb      	ldr	r3, [r7, #8]
 801f9e0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801f9e2:	68bb      	ldr	r3, [r7, #8]
 801f9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f9e6:	4b18      	ldr	r3, [pc, #96]	; (801fa48 <xTaskPriorityInherit+0xcc>)
 801f9e8:	681b      	ldr	r3, [r3, #0]
 801f9ea:	429a      	cmp	r2, r3
 801f9ec:	d903      	bls.n	801f9f6 <xTaskPriorityInherit+0x7a>
 801f9ee:	68bb      	ldr	r3, [r7, #8]
 801f9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f9f2:	4a15      	ldr	r2, [pc, #84]	; (801fa48 <xTaskPriorityInherit+0xcc>)
 801f9f4:	6013      	str	r3, [r2, #0]
 801f9f6:	68bb      	ldr	r3, [r7, #8]
 801f9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f9fa:	4613      	mov	r3, r2
 801f9fc:	009b      	lsls	r3, r3, #2
 801f9fe:	4413      	add	r3, r2
 801fa00:	009b      	lsls	r3, r3, #2
 801fa02:	4a10      	ldr	r2, [pc, #64]	; (801fa44 <xTaskPriorityInherit+0xc8>)
 801fa04:	441a      	add	r2, r3
 801fa06:	68bb      	ldr	r3, [r7, #8]
 801fa08:	3304      	adds	r3, #4
 801fa0a:	4619      	mov	r1, r3
 801fa0c:	4610      	mov	r0, r2
 801fa0e:	f7fe f86c 	bl	801daea <vListInsertEnd>
 801fa12:	e004      	b.n	801fa1e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801fa14:	4b0a      	ldr	r3, [pc, #40]	; (801fa40 <xTaskPriorityInherit+0xc4>)
 801fa16:	681b      	ldr	r3, [r3, #0]
 801fa18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fa1a:	68bb      	ldr	r3, [r7, #8]
 801fa1c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801fa1e:	2301      	movs	r3, #1
 801fa20:	60fb      	str	r3, [r7, #12]
 801fa22:	e008      	b.n	801fa36 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801fa24:	68bb      	ldr	r3, [r7, #8]
 801fa26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fa28:	4b05      	ldr	r3, [pc, #20]	; (801fa40 <xTaskPriorityInherit+0xc4>)
 801fa2a:	681b      	ldr	r3, [r3, #0]
 801fa2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fa2e:	429a      	cmp	r2, r3
 801fa30:	d201      	bcs.n	801fa36 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801fa32:	2301      	movs	r3, #1
 801fa34:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801fa36:	68fb      	ldr	r3, [r7, #12]
	}
 801fa38:	4618      	mov	r0, r3
 801fa3a:	3710      	adds	r7, #16
 801fa3c:	46bd      	mov	sp, r7
 801fa3e:	bd80      	pop	{r7, pc}
 801fa40:	24001130 	.word	0x24001130
 801fa44:	24001134 	.word	0x24001134
 801fa48:	2400160c 	.word	0x2400160c

0801fa4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801fa4c:	b580      	push	{r7, lr}
 801fa4e:	b086      	sub	sp, #24
 801fa50:	af00      	add	r7, sp, #0
 801fa52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801fa58:	2300      	movs	r3, #0
 801fa5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801fa5c:	687b      	ldr	r3, [r7, #4]
 801fa5e:	2b00      	cmp	r3, #0
 801fa60:	d054      	beq.n	801fb0c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801fa62:	4b2d      	ldr	r3, [pc, #180]	; (801fb18 <xTaskPriorityDisinherit+0xcc>)
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	693a      	ldr	r2, [r7, #16]
 801fa68:	429a      	cmp	r2, r3
 801fa6a:	d009      	beq.n	801fa80 <xTaskPriorityDisinherit+0x34>
 801fa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fa70:	f383 8811 	msr	BASEPRI, r3
 801fa74:	f3bf 8f6f 	isb	sy
 801fa78:	f3bf 8f4f 	dsb	sy
 801fa7c:	60fb      	str	r3, [r7, #12]
 801fa7e:	e7fe      	b.n	801fa7e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801fa80:	693b      	ldr	r3, [r7, #16]
 801fa82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	d109      	bne.n	801fa9c <xTaskPriorityDisinherit+0x50>
 801fa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fa8c:	f383 8811 	msr	BASEPRI, r3
 801fa90:	f3bf 8f6f 	isb	sy
 801fa94:	f3bf 8f4f 	dsb	sy
 801fa98:	60bb      	str	r3, [r7, #8]
 801fa9a:	e7fe      	b.n	801fa9a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801fa9c:	693b      	ldr	r3, [r7, #16]
 801fa9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801faa0:	1e5a      	subs	r2, r3, #1
 801faa2:	693b      	ldr	r3, [r7, #16]
 801faa4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801faa6:	693b      	ldr	r3, [r7, #16]
 801faa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801faaa:	693b      	ldr	r3, [r7, #16]
 801faac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801faae:	429a      	cmp	r2, r3
 801fab0:	d02c      	beq.n	801fb0c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801fab2:	693b      	ldr	r3, [r7, #16]
 801fab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fab6:	2b00      	cmp	r3, #0
 801fab8:	d128      	bne.n	801fb0c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801faba:	693b      	ldr	r3, [r7, #16]
 801fabc:	3304      	adds	r3, #4
 801fabe:	4618      	mov	r0, r3
 801fac0:	f7fe f870 	bl	801dba4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801fac4:	693b      	ldr	r3, [r7, #16]
 801fac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fac8:	693b      	ldr	r3, [r7, #16]
 801faca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801facc:	693b      	ldr	r3, [r7, #16]
 801face:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fad0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801fad4:	693b      	ldr	r3, [r7, #16]
 801fad6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801fad8:	693b      	ldr	r3, [r7, #16]
 801fada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fadc:	4b0f      	ldr	r3, [pc, #60]	; (801fb1c <xTaskPriorityDisinherit+0xd0>)
 801fade:	681b      	ldr	r3, [r3, #0]
 801fae0:	429a      	cmp	r2, r3
 801fae2:	d903      	bls.n	801faec <xTaskPriorityDisinherit+0xa0>
 801fae4:	693b      	ldr	r3, [r7, #16]
 801fae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fae8:	4a0c      	ldr	r2, [pc, #48]	; (801fb1c <xTaskPriorityDisinherit+0xd0>)
 801faea:	6013      	str	r3, [r2, #0]
 801faec:	693b      	ldr	r3, [r7, #16]
 801faee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801faf0:	4613      	mov	r3, r2
 801faf2:	009b      	lsls	r3, r3, #2
 801faf4:	4413      	add	r3, r2
 801faf6:	009b      	lsls	r3, r3, #2
 801faf8:	4a09      	ldr	r2, [pc, #36]	; (801fb20 <xTaskPriorityDisinherit+0xd4>)
 801fafa:	441a      	add	r2, r3
 801fafc:	693b      	ldr	r3, [r7, #16]
 801fafe:	3304      	adds	r3, #4
 801fb00:	4619      	mov	r1, r3
 801fb02:	4610      	mov	r0, r2
 801fb04:	f7fd fff1 	bl	801daea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801fb08:	2301      	movs	r3, #1
 801fb0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801fb0c:	697b      	ldr	r3, [r7, #20]
	}
 801fb0e:	4618      	mov	r0, r3
 801fb10:	3718      	adds	r7, #24
 801fb12:	46bd      	mov	sp, r7
 801fb14:	bd80      	pop	{r7, pc}
 801fb16:	bf00      	nop
 801fb18:	24001130 	.word	0x24001130
 801fb1c:	2400160c 	.word	0x2400160c
 801fb20:	24001134 	.word	0x24001134

0801fb24 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801fb24:	b580      	push	{r7, lr}
 801fb26:	b088      	sub	sp, #32
 801fb28:	af00      	add	r7, sp, #0
 801fb2a:	6078      	str	r0, [r7, #4]
 801fb2c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801fb2e:	687b      	ldr	r3, [r7, #4]
 801fb30:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801fb32:	2301      	movs	r3, #1
 801fb34:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	d068      	beq.n	801fc0e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801fb3c:	69bb      	ldr	r3, [r7, #24]
 801fb3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d109      	bne.n	801fb58 <vTaskPriorityDisinheritAfterTimeout+0x34>
 801fb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fb48:	f383 8811 	msr	BASEPRI, r3
 801fb4c:	f3bf 8f6f 	isb	sy
 801fb50:	f3bf 8f4f 	dsb	sy
 801fb54:	60fb      	str	r3, [r7, #12]
 801fb56:	e7fe      	b.n	801fb56 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801fb58:	69bb      	ldr	r3, [r7, #24]
 801fb5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fb5c:	683a      	ldr	r2, [r7, #0]
 801fb5e:	429a      	cmp	r2, r3
 801fb60:	d902      	bls.n	801fb68 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801fb62:	683b      	ldr	r3, [r7, #0]
 801fb64:	61fb      	str	r3, [r7, #28]
 801fb66:	e002      	b.n	801fb6e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801fb68:	69bb      	ldr	r3, [r7, #24]
 801fb6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fb6c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801fb6e:	69bb      	ldr	r3, [r7, #24]
 801fb70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fb72:	69fa      	ldr	r2, [r7, #28]
 801fb74:	429a      	cmp	r2, r3
 801fb76:	d04a      	beq.n	801fc0e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801fb78:	69bb      	ldr	r3, [r7, #24]
 801fb7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fb7c:	697a      	ldr	r2, [r7, #20]
 801fb7e:	429a      	cmp	r2, r3
 801fb80:	d145      	bne.n	801fc0e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801fb82:	4b25      	ldr	r3, [pc, #148]	; (801fc18 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 801fb84:	681b      	ldr	r3, [r3, #0]
 801fb86:	69ba      	ldr	r2, [r7, #24]
 801fb88:	429a      	cmp	r2, r3
 801fb8a:	d109      	bne.n	801fba0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 801fb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fb90:	f383 8811 	msr	BASEPRI, r3
 801fb94:	f3bf 8f6f 	isb	sy
 801fb98:	f3bf 8f4f 	dsb	sy
 801fb9c:	60bb      	str	r3, [r7, #8]
 801fb9e:	e7fe      	b.n	801fb9e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801fba0:	69bb      	ldr	r3, [r7, #24]
 801fba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fba4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801fba6:	69bb      	ldr	r3, [r7, #24]
 801fba8:	69fa      	ldr	r2, [r7, #28]
 801fbaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801fbac:	69bb      	ldr	r3, [r7, #24]
 801fbae:	699b      	ldr	r3, [r3, #24]
 801fbb0:	2b00      	cmp	r3, #0
 801fbb2:	db04      	blt.n	801fbbe <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801fbb4:	69fb      	ldr	r3, [r7, #28]
 801fbb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801fbba:	69bb      	ldr	r3, [r7, #24]
 801fbbc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801fbbe:	69bb      	ldr	r3, [r7, #24]
 801fbc0:	6959      	ldr	r1, [r3, #20]
 801fbc2:	693a      	ldr	r2, [r7, #16]
 801fbc4:	4613      	mov	r3, r2
 801fbc6:	009b      	lsls	r3, r3, #2
 801fbc8:	4413      	add	r3, r2
 801fbca:	009b      	lsls	r3, r3, #2
 801fbcc:	4a13      	ldr	r2, [pc, #76]	; (801fc1c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801fbce:	4413      	add	r3, r2
 801fbd0:	4299      	cmp	r1, r3
 801fbd2:	d11c      	bne.n	801fc0e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801fbd4:	69bb      	ldr	r3, [r7, #24]
 801fbd6:	3304      	adds	r3, #4
 801fbd8:	4618      	mov	r0, r3
 801fbda:	f7fd ffe3 	bl	801dba4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801fbde:	69bb      	ldr	r3, [r7, #24]
 801fbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fbe2:	4b0f      	ldr	r3, [pc, #60]	; (801fc20 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801fbe4:	681b      	ldr	r3, [r3, #0]
 801fbe6:	429a      	cmp	r2, r3
 801fbe8:	d903      	bls.n	801fbf2 <vTaskPriorityDisinheritAfterTimeout+0xce>
 801fbea:	69bb      	ldr	r3, [r7, #24]
 801fbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fbee:	4a0c      	ldr	r2, [pc, #48]	; (801fc20 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801fbf0:	6013      	str	r3, [r2, #0]
 801fbf2:	69bb      	ldr	r3, [r7, #24]
 801fbf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fbf6:	4613      	mov	r3, r2
 801fbf8:	009b      	lsls	r3, r3, #2
 801fbfa:	4413      	add	r3, r2
 801fbfc:	009b      	lsls	r3, r3, #2
 801fbfe:	4a07      	ldr	r2, [pc, #28]	; (801fc1c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801fc00:	441a      	add	r2, r3
 801fc02:	69bb      	ldr	r3, [r7, #24]
 801fc04:	3304      	adds	r3, #4
 801fc06:	4619      	mov	r1, r3
 801fc08:	4610      	mov	r0, r2
 801fc0a:	f7fd ff6e 	bl	801daea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801fc0e:	bf00      	nop
 801fc10:	3720      	adds	r7, #32
 801fc12:	46bd      	mov	sp, r7
 801fc14:	bd80      	pop	{r7, pc}
 801fc16:	bf00      	nop
 801fc18:	24001130 	.word	0x24001130
 801fc1c:	24001134 	.word	0x24001134
 801fc20:	2400160c 	.word	0x2400160c

0801fc24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801fc24:	b480      	push	{r7}
 801fc26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801fc28:	4b07      	ldr	r3, [pc, #28]	; (801fc48 <pvTaskIncrementMutexHeldCount+0x24>)
 801fc2a:	681b      	ldr	r3, [r3, #0]
 801fc2c:	2b00      	cmp	r3, #0
 801fc2e:	d004      	beq.n	801fc3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801fc30:	4b05      	ldr	r3, [pc, #20]	; (801fc48 <pvTaskIncrementMutexHeldCount+0x24>)
 801fc32:	681b      	ldr	r3, [r3, #0]
 801fc34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fc36:	3201      	adds	r2, #1
 801fc38:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801fc3a:	4b03      	ldr	r3, [pc, #12]	; (801fc48 <pvTaskIncrementMutexHeldCount+0x24>)
 801fc3c:	681b      	ldr	r3, [r3, #0]
	}
 801fc3e:	4618      	mov	r0, r3
 801fc40:	46bd      	mov	sp, r7
 801fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc46:	4770      	bx	lr
 801fc48:	24001130 	.word	0x24001130

0801fc4c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801fc4c:	b580      	push	{r7, lr}
 801fc4e:	b086      	sub	sp, #24
 801fc50:	af00      	add	r7, sp, #0
 801fc52:	60f8      	str	r0, [r7, #12]
 801fc54:	60b9      	str	r1, [r7, #8]
 801fc56:	607a      	str	r2, [r7, #4]
 801fc58:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801fc5a:	f000 fe9f 	bl	802099c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801fc5e:	4b26      	ldr	r3, [pc, #152]	; (801fcf8 <xTaskNotifyWait+0xac>)
 801fc60:	681b      	ldr	r3, [r3, #0]
 801fc62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801fc66:	b2db      	uxtb	r3, r3
 801fc68:	2b02      	cmp	r3, #2
 801fc6a:	d01a      	beq.n	801fca2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801fc6c:	4b22      	ldr	r3, [pc, #136]	; (801fcf8 <xTaskNotifyWait+0xac>)
 801fc6e:	681b      	ldr	r3, [r3, #0]
 801fc70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801fc72:	68fa      	ldr	r2, [r7, #12]
 801fc74:	43d2      	mvns	r2, r2
 801fc76:	400a      	ands	r2, r1
 801fc78:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801fc7a:	4b1f      	ldr	r3, [pc, #124]	; (801fcf8 <xTaskNotifyWait+0xac>)
 801fc7c:	681b      	ldr	r3, [r3, #0]
 801fc7e:	2201      	movs	r2, #1
 801fc80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 801fc84:	683b      	ldr	r3, [r7, #0]
 801fc86:	2b00      	cmp	r3, #0
 801fc88:	d00b      	beq.n	801fca2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801fc8a:	2101      	movs	r1, #1
 801fc8c:	6838      	ldr	r0, [r7, #0]
 801fc8e:	f000 f9c3 	bl	8020018 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801fc92:	4b1a      	ldr	r3, [pc, #104]	; (801fcfc <xTaskNotifyWait+0xb0>)
 801fc94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fc98:	601a      	str	r2, [r3, #0]
 801fc9a:	f3bf 8f4f 	dsb	sy
 801fc9e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801fca2:	f000 fea9 	bl	80209f8 <vPortExitCritical>

		taskENTER_CRITICAL();
 801fca6:	f000 fe79 	bl	802099c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801fcaa:	687b      	ldr	r3, [r7, #4]
 801fcac:	2b00      	cmp	r3, #0
 801fcae:	d004      	beq.n	801fcba <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801fcb0:	4b11      	ldr	r3, [pc, #68]	; (801fcf8 <xTaskNotifyWait+0xac>)
 801fcb2:	681b      	ldr	r3, [r3, #0]
 801fcb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fcb6:	687b      	ldr	r3, [r7, #4]
 801fcb8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801fcba:	4b0f      	ldr	r3, [pc, #60]	; (801fcf8 <xTaskNotifyWait+0xac>)
 801fcbc:	681b      	ldr	r3, [r3, #0]
 801fcbe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801fcc2:	b2db      	uxtb	r3, r3
 801fcc4:	2b02      	cmp	r3, #2
 801fcc6:	d002      	beq.n	801fcce <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801fcc8:	2300      	movs	r3, #0
 801fcca:	617b      	str	r3, [r7, #20]
 801fccc:	e008      	b.n	801fce0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801fcce:	4b0a      	ldr	r3, [pc, #40]	; (801fcf8 <xTaskNotifyWait+0xac>)
 801fcd0:	681b      	ldr	r3, [r3, #0]
 801fcd2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801fcd4:	68ba      	ldr	r2, [r7, #8]
 801fcd6:	43d2      	mvns	r2, r2
 801fcd8:	400a      	ands	r2, r1
 801fcda:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 801fcdc:	2301      	movs	r3, #1
 801fcde:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801fce0:	4b05      	ldr	r3, [pc, #20]	; (801fcf8 <xTaskNotifyWait+0xac>)
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	2200      	movs	r2, #0
 801fce6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 801fcea:	f000 fe85 	bl	80209f8 <vPortExitCritical>

		return xReturn;
 801fcee:	697b      	ldr	r3, [r7, #20]
	}
 801fcf0:	4618      	mov	r0, r3
 801fcf2:	3718      	adds	r7, #24
 801fcf4:	46bd      	mov	sp, r7
 801fcf6:	bd80      	pop	{r7, pc}
 801fcf8:	24001130 	.word	0x24001130
 801fcfc:	e000ed04 	.word	0xe000ed04

0801fd00 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801fd00:	b580      	push	{r7, lr}
 801fd02:	b08a      	sub	sp, #40	; 0x28
 801fd04:	af00      	add	r7, sp, #0
 801fd06:	60f8      	str	r0, [r7, #12]
 801fd08:	60b9      	str	r1, [r7, #8]
 801fd0a:	603b      	str	r3, [r7, #0]
 801fd0c:	4613      	mov	r3, r2
 801fd0e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801fd10:	2301      	movs	r3, #1
 801fd12:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801fd14:	68fb      	ldr	r3, [r7, #12]
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	d109      	bne.n	801fd2e <xTaskGenericNotify+0x2e>
 801fd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fd1e:	f383 8811 	msr	BASEPRI, r3
 801fd22:	f3bf 8f6f 	isb	sy
 801fd26:	f3bf 8f4f 	dsb	sy
 801fd2a:	61bb      	str	r3, [r7, #24]
 801fd2c:	e7fe      	b.n	801fd2c <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 801fd2e:	68fb      	ldr	r3, [r7, #12]
 801fd30:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801fd32:	f000 fe33 	bl	802099c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801fd36:	683b      	ldr	r3, [r7, #0]
 801fd38:	2b00      	cmp	r3, #0
 801fd3a:	d003      	beq.n	801fd44 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801fd3c:	6a3b      	ldr	r3, [r7, #32]
 801fd3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fd40:	683b      	ldr	r3, [r7, #0]
 801fd42:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801fd44:	6a3b      	ldr	r3, [r7, #32]
 801fd46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801fd4a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801fd4c:	6a3b      	ldr	r3, [r7, #32]
 801fd4e:	2202      	movs	r2, #2
 801fd50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 801fd54:	79fb      	ldrb	r3, [r7, #7]
 801fd56:	2b04      	cmp	r3, #4
 801fd58:	d827      	bhi.n	801fdaa <xTaskGenericNotify+0xaa>
 801fd5a:	a201      	add	r2, pc, #4	; (adr r2, 801fd60 <xTaskGenericNotify+0x60>)
 801fd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fd60:	0801fdc9 	.word	0x0801fdc9
 801fd64:	0801fd75 	.word	0x0801fd75
 801fd68:	0801fd83 	.word	0x0801fd83
 801fd6c:	0801fd8f 	.word	0x0801fd8f
 801fd70:	0801fd97 	.word	0x0801fd97
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801fd74:	6a3b      	ldr	r3, [r7, #32]
 801fd76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fd78:	68bb      	ldr	r3, [r7, #8]
 801fd7a:	431a      	orrs	r2, r3
 801fd7c:	6a3b      	ldr	r3, [r7, #32]
 801fd7e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801fd80:	e025      	b.n	801fdce <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801fd82:	6a3b      	ldr	r3, [r7, #32]
 801fd84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fd86:	1c5a      	adds	r2, r3, #1
 801fd88:	6a3b      	ldr	r3, [r7, #32]
 801fd8a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801fd8c:	e01f      	b.n	801fdce <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801fd8e:	6a3b      	ldr	r3, [r7, #32]
 801fd90:	68ba      	ldr	r2, [r7, #8]
 801fd92:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801fd94:	e01b      	b.n	801fdce <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801fd96:	7ffb      	ldrb	r3, [r7, #31]
 801fd98:	2b02      	cmp	r3, #2
 801fd9a:	d003      	beq.n	801fda4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801fd9c:	6a3b      	ldr	r3, [r7, #32]
 801fd9e:	68ba      	ldr	r2, [r7, #8]
 801fda0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801fda2:	e014      	b.n	801fdce <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 801fda4:	2300      	movs	r3, #0
 801fda6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801fda8:	e011      	b.n	801fdce <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801fdaa:	6a3b      	ldr	r3, [r7, #32]
 801fdac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fdae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fdb2:	d00b      	beq.n	801fdcc <xTaskGenericNotify+0xcc>
 801fdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fdb8:	f383 8811 	msr	BASEPRI, r3
 801fdbc:	f3bf 8f6f 	isb	sy
 801fdc0:	f3bf 8f4f 	dsb	sy
 801fdc4:	617b      	str	r3, [r7, #20]
 801fdc6:	e7fe      	b.n	801fdc6 <xTaskGenericNotify+0xc6>
					break;
 801fdc8:	bf00      	nop
 801fdca:	e000      	b.n	801fdce <xTaskGenericNotify+0xce>

					break;
 801fdcc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801fdce:	7ffb      	ldrb	r3, [r7, #31]
 801fdd0:	2b01      	cmp	r3, #1
 801fdd2:	d139      	bne.n	801fe48 <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801fdd4:	6a3b      	ldr	r3, [r7, #32]
 801fdd6:	3304      	adds	r3, #4
 801fdd8:	4618      	mov	r0, r3
 801fdda:	f7fd fee3 	bl	801dba4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801fdde:	6a3b      	ldr	r3, [r7, #32]
 801fde0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fde2:	4b1d      	ldr	r3, [pc, #116]	; (801fe58 <xTaskGenericNotify+0x158>)
 801fde4:	681b      	ldr	r3, [r3, #0]
 801fde6:	429a      	cmp	r2, r3
 801fde8:	d903      	bls.n	801fdf2 <xTaskGenericNotify+0xf2>
 801fdea:	6a3b      	ldr	r3, [r7, #32]
 801fdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fdee:	4a1a      	ldr	r2, [pc, #104]	; (801fe58 <xTaskGenericNotify+0x158>)
 801fdf0:	6013      	str	r3, [r2, #0]
 801fdf2:	6a3b      	ldr	r3, [r7, #32]
 801fdf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fdf6:	4613      	mov	r3, r2
 801fdf8:	009b      	lsls	r3, r3, #2
 801fdfa:	4413      	add	r3, r2
 801fdfc:	009b      	lsls	r3, r3, #2
 801fdfe:	4a17      	ldr	r2, [pc, #92]	; (801fe5c <xTaskGenericNotify+0x15c>)
 801fe00:	441a      	add	r2, r3
 801fe02:	6a3b      	ldr	r3, [r7, #32]
 801fe04:	3304      	adds	r3, #4
 801fe06:	4619      	mov	r1, r3
 801fe08:	4610      	mov	r0, r2
 801fe0a:	f7fd fe6e 	bl	801daea <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801fe0e:	6a3b      	ldr	r3, [r7, #32]
 801fe10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe12:	2b00      	cmp	r3, #0
 801fe14:	d009      	beq.n	801fe2a <xTaskGenericNotify+0x12a>
 801fe16:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fe1a:	f383 8811 	msr	BASEPRI, r3
 801fe1e:	f3bf 8f6f 	isb	sy
 801fe22:	f3bf 8f4f 	dsb	sy
 801fe26:	613b      	str	r3, [r7, #16]
 801fe28:	e7fe      	b.n	801fe28 <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801fe2a:	6a3b      	ldr	r3, [r7, #32]
 801fe2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fe2e:	4b0c      	ldr	r3, [pc, #48]	; (801fe60 <xTaskGenericNotify+0x160>)
 801fe30:	681b      	ldr	r3, [r3, #0]
 801fe32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe34:	429a      	cmp	r2, r3
 801fe36:	d907      	bls.n	801fe48 <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801fe38:	4b0a      	ldr	r3, [pc, #40]	; (801fe64 <xTaskGenericNotify+0x164>)
 801fe3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801fe3e:	601a      	str	r2, [r3, #0]
 801fe40:	f3bf 8f4f 	dsb	sy
 801fe44:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801fe48:	f000 fdd6 	bl	80209f8 <vPortExitCritical>

		return xReturn;
 801fe4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801fe4e:	4618      	mov	r0, r3
 801fe50:	3728      	adds	r7, #40	; 0x28
 801fe52:	46bd      	mov	sp, r7
 801fe54:	bd80      	pop	{r7, pc}
 801fe56:	bf00      	nop
 801fe58:	2400160c 	.word	0x2400160c
 801fe5c:	24001134 	.word	0x24001134
 801fe60:	24001130 	.word	0x24001130
 801fe64:	e000ed04 	.word	0xe000ed04

0801fe68 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801fe68:	b580      	push	{r7, lr}
 801fe6a:	b08e      	sub	sp, #56	; 0x38
 801fe6c:	af00      	add	r7, sp, #0
 801fe6e:	60f8      	str	r0, [r7, #12]
 801fe70:	60b9      	str	r1, [r7, #8]
 801fe72:	603b      	str	r3, [r7, #0]
 801fe74:	4613      	mov	r3, r2
 801fe76:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 801fe78:	2301      	movs	r3, #1
 801fe7a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801fe7c:	68fb      	ldr	r3, [r7, #12]
 801fe7e:	2b00      	cmp	r3, #0
 801fe80:	d109      	bne.n	801fe96 <xTaskGenericNotifyFromISR+0x2e>
 801fe82:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fe86:	f383 8811 	msr	BASEPRI, r3
 801fe8a:	f3bf 8f6f 	isb	sy
 801fe8e:	f3bf 8f4f 	dsb	sy
 801fe92:	627b      	str	r3, [r7, #36]	; 0x24
 801fe94:	e7fe      	b.n	801fe94 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801fe96:	f000 fe5d 	bl	8020b54 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801fe9a:	68fb      	ldr	r3, [r7, #12]
 801fe9c:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801fe9e:	f3ef 8211 	mrs	r2, BASEPRI
 801fea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801fea6:	f383 8811 	msr	BASEPRI, r3
 801feaa:	f3bf 8f6f 	isb	sy
 801feae:	f3bf 8f4f 	dsb	sy
 801feb2:	623a      	str	r2, [r7, #32]
 801feb4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 801feb6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801feb8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801feba:	683b      	ldr	r3, [r7, #0]
 801febc:	2b00      	cmp	r3, #0
 801febe:	d003      	beq.n	801fec8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801fec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fec2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801fec4:	683b      	ldr	r3, [r7, #0]
 801fec6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801fec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801feca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801fece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801fed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fed4:	2202      	movs	r2, #2
 801fed6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 801feda:	79fb      	ldrb	r3, [r7, #7]
 801fedc:	2b04      	cmp	r3, #4
 801fede:	d829      	bhi.n	801ff34 <xTaskGenericNotifyFromISR+0xcc>
 801fee0:	a201      	add	r2, pc, #4	; (adr r2, 801fee8 <xTaskGenericNotifyFromISR+0x80>)
 801fee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fee6:	bf00      	nop
 801fee8:	0801ff53 	.word	0x0801ff53
 801feec:	0801fefd 	.word	0x0801fefd
 801fef0:	0801ff0b 	.word	0x0801ff0b
 801fef4:	0801ff17 	.word	0x0801ff17
 801fef8:	0801ff1f 	.word	0x0801ff1f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801fefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fefe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801ff00:	68bb      	ldr	r3, [r7, #8]
 801ff02:	431a      	orrs	r2, r3
 801ff04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff06:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801ff08:	e026      	b.n	801ff58 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801ff0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ff0e:	1c5a      	adds	r2, r3, #1
 801ff10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff12:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801ff14:	e020      	b.n	801ff58 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801ff16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff18:	68ba      	ldr	r2, [r7, #8]
 801ff1a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801ff1c:	e01c      	b.n	801ff58 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801ff1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ff22:	2b02      	cmp	r3, #2
 801ff24:	d003      	beq.n	801ff2e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801ff26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff28:	68ba      	ldr	r2, [r7, #8]
 801ff2a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801ff2c:	e014      	b.n	801ff58 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 801ff2e:	2300      	movs	r3, #0
 801ff30:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801ff32:	e011      	b.n	801ff58 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801ff34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ff38:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ff3c:	d00b      	beq.n	801ff56 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 801ff3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ff42:	f383 8811 	msr	BASEPRI, r3
 801ff46:	f3bf 8f6f 	isb	sy
 801ff4a:	f3bf 8f4f 	dsb	sy
 801ff4e:	61bb      	str	r3, [r7, #24]
 801ff50:	e7fe      	b.n	801ff50 <xTaskGenericNotifyFromISR+0xe8>
					break;
 801ff52:	bf00      	nop
 801ff54:	e000      	b.n	801ff58 <xTaskGenericNotifyFromISR+0xf0>
					break;
 801ff56:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801ff58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801ff5c:	2b01      	cmp	r3, #1
 801ff5e:	d145      	bne.n	801ffec <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801ff60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ff64:	2b00      	cmp	r3, #0
 801ff66:	d009      	beq.n	801ff7c <xTaskGenericNotifyFromISR+0x114>
 801ff68:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ff6c:	f383 8811 	msr	BASEPRI, r3
 801ff70:	f3bf 8f6f 	isb	sy
 801ff74:	f3bf 8f4f 	dsb	sy
 801ff78:	617b      	str	r3, [r7, #20]
 801ff7a:	e7fe      	b.n	801ff7a <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ff7c:	4b20      	ldr	r3, [pc, #128]	; (8020000 <xTaskGenericNotifyFromISR+0x198>)
 801ff7e:	681b      	ldr	r3, [r3, #0]
 801ff80:	2b00      	cmp	r3, #0
 801ff82:	d11d      	bne.n	801ffc0 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ff84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff86:	3304      	adds	r3, #4
 801ff88:	4618      	mov	r0, r3
 801ff8a:	f7fd fe0b 	bl	801dba4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801ff8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ff92:	4b1c      	ldr	r3, [pc, #112]	; (8020004 <xTaskGenericNotifyFromISR+0x19c>)
 801ff94:	681b      	ldr	r3, [r3, #0]
 801ff96:	429a      	cmp	r2, r3
 801ff98:	d903      	bls.n	801ffa2 <xTaskGenericNotifyFromISR+0x13a>
 801ff9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ff9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff9e:	4a19      	ldr	r2, [pc, #100]	; (8020004 <xTaskGenericNotifyFromISR+0x19c>)
 801ffa0:	6013      	str	r3, [r2, #0]
 801ffa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ffa6:	4613      	mov	r3, r2
 801ffa8:	009b      	lsls	r3, r3, #2
 801ffaa:	4413      	add	r3, r2
 801ffac:	009b      	lsls	r3, r3, #2
 801ffae:	4a16      	ldr	r2, [pc, #88]	; (8020008 <xTaskGenericNotifyFromISR+0x1a0>)
 801ffb0:	441a      	add	r2, r3
 801ffb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffb4:	3304      	adds	r3, #4
 801ffb6:	4619      	mov	r1, r3
 801ffb8:	4610      	mov	r0, r2
 801ffba:	f7fd fd96 	bl	801daea <vListInsertEnd>
 801ffbe:	e005      	b.n	801ffcc <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801ffc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffc2:	3318      	adds	r3, #24
 801ffc4:	4619      	mov	r1, r3
 801ffc6:	4811      	ldr	r0, [pc, #68]	; (802000c <xTaskGenericNotifyFromISR+0x1a4>)
 801ffc8:	f7fd fd8f 	bl	801daea <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801ffcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ffce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ffd0:	4b0f      	ldr	r3, [pc, #60]	; (8020010 <xTaskGenericNotifyFromISR+0x1a8>)
 801ffd2:	681b      	ldr	r3, [r3, #0]
 801ffd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ffd6:	429a      	cmp	r2, r3
 801ffd8:	d908      	bls.n	801ffec <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801ffda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ffdc:	2b00      	cmp	r3, #0
 801ffde:	d002      	beq.n	801ffe6 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 801ffe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ffe2:	2201      	movs	r2, #1
 801ffe4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801ffe6:	4b0b      	ldr	r3, [pc, #44]	; (8020014 <xTaskGenericNotifyFromISR+0x1ac>)
 801ffe8:	2201      	movs	r2, #1
 801ffea:	601a      	str	r2, [r3, #0]
 801ffec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffee:	613b      	str	r3, [r7, #16]
	__asm volatile
 801fff0:	693b      	ldr	r3, [r7, #16]
 801fff2:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801fff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 801fff8:	4618      	mov	r0, r3
 801fffa:	3738      	adds	r7, #56	; 0x38
 801fffc:	46bd      	mov	sp, r7
 801fffe:	bd80      	pop	{r7, pc}
 8020000:	2400162c 	.word	0x2400162c
 8020004:	2400160c 	.word	0x2400160c
 8020008:	24001134 	.word	0x24001134
 802000c:	240015c4 	.word	0x240015c4
 8020010:	24001130 	.word	0x24001130
 8020014:	24001618 	.word	0x24001618

08020018 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8020018:	b580      	push	{r7, lr}
 802001a:	b084      	sub	sp, #16
 802001c:	af00      	add	r7, sp, #0
 802001e:	6078      	str	r0, [r7, #4]
 8020020:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8020022:	4b21      	ldr	r3, [pc, #132]	; (80200a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8020024:	681b      	ldr	r3, [r3, #0]
 8020026:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8020028:	4b20      	ldr	r3, [pc, #128]	; (80200ac <prvAddCurrentTaskToDelayedList+0x94>)
 802002a:	681b      	ldr	r3, [r3, #0]
 802002c:	3304      	adds	r3, #4
 802002e:	4618      	mov	r0, r3
 8020030:	f7fd fdb8 	bl	801dba4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	f1b3 3fff 	cmp.w	r3, #4294967295
 802003a:	d10a      	bne.n	8020052 <prvAddCurrentTaskToDelayedList+0x3a>
 802003c:	683b      	ldr	r3, [r7, #0]
 802003e:	2b00      	cmp	r3, #0
 8020040:	d007      	beq.n	8020052 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8020042:	4b1a      	ldr	r3, [pc, #104]	; (80200ac <prvAddCurrentTaskToDelayedList+0x94>)
 8020044:	681b      	ldr	r3, [r3, #0]
 8020046:	3304      	adds	r3, #4
 8020048:	4619      	mov	r1, r3
 802004a:	4819      	ldr	r0, [pc, #100]	; (80200b0 <prvAddCurrentTaskToDelayedList+0x98>)
 802004c:	f7fd fd4d 	bl	801daea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8020050:	e026      	b.n	80200a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8020052:	68fa      	ldr	r2, [r7, #12]
 8020054:	687b      	ldr	r3, [r7, #4]
 8020056:	4413      	add	r3, r2
 8020058:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 802005a:	4b14      	ldr	r3, [pc, #80]	; (80200ac <prvAddCurrentTaskToDelayedList+0x94>)
 802005c:	681b      	ldr	r3, [r3, #0]
 802005e:	68ba      	ldr	r2, [r7, #8]
 8020060:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8020062:	68ba      	ldr	r2, [r7, #8]
 8020064:	68fb      	ldr	r3, [r7, #12]
 8020066:	429a      	cmp	r2, r3
 8020068:	d209      	bcs.n	802007e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802006a:	4b12      	ldr	r3, [pc, #72]	; (80200b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 802006c:	681a      	ldr	r2, [r3, #0]
 802006e:	4b0f      	ldr	r3, [pc, #60]	; (80200ac <prvAddCurrentTaskToDelayedList+0x94>)
 8020070:	681b      	ldr	r3, [r3, #0]
 8020072:	3304      	adds	r3, #4
 8020074:	4619      	mov	r1, r3
 8020076:	4610      	mov	r0, r2
 8020078:	f7fd fd5b 	bl	801db32 <vListInsert>
}
 802007c:	e010      	b.n	80200a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802007e:	4b0e      	ldr	r3, [pc, #56]	; (80200b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8020080:	681a      	ldr	r2, [r3, #0]
 8020082:	4b0a      	ldr	r3, [pc, #40]	; (80200ac <prvAddCurrentTaskToDelayedList+0x94>)
 8020084:	681b      	ldr	r3, [r3, #0]
 8020086:	3304      	adds	r3, #4
 8020088:	4619      	mov	r1, r3
 802008a:	4610      	mov	r0, r2
 802008c:	f7fd fd51 	bl	801db32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8020090:	4b0a      	ldr	r3, [pc, #40]	; (80200bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8020092:	681b      	ldr	r3, [r3, #0]
 8020094:	68ba      	ldr	r2, [r7, #8]
 8020096:	429a      	cmp	r2, r3
 8020098:	d202      	bcs.n	80200a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 802009a:	4a08      	ldr	r2, [pc, #32]	; (80200bc <prvAddCurrentTaskToDelayedList+0xa4>)
 802009c:	68bb      	ldr	r3, [r7, #8]
 802009e:	6013      	str	r3, [r2, #0]
}
 80200a0:	bf00      	nop
 80200a2:	3710      	adds	r7, #16
 80200a4:	46bd      	mov	sp, r7
 80200a6:	bd80      	pop	{r7, pc}
 80200a8:	24001608 	.word	0x24001608
 80200ac:	24001130 	.word	0x24001130
 80200b0:	240015f0 	.word	0x240015f0
 80200b4:	240015c0 	.word	0x240015c0
 80200b8:	240015bc 	.word	0x240015bc
 80200bc:	24001624 	.word	0x24001624

080200c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80200c0:	b580      	push	{r7, lr}
 80200c2:	b08a      	sub	sp, #40	; 0x28
 80200c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80200c6:	2300      	movs	r3, #0
 80200c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80200ca:	f000 faff 	bl	80206cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80200ce:	4b1c      	ldr	r3, [pc, #112]	; (8020140 <xTimerCreateTimerTask+0x80>)
 80200d0:	681b      	ldr	r3, [r3, #0]
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	d021      	beq.n	802011a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80200d6:	2300      	movs	r3, #0
 80200d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80200da:	2300      	movs	r3, #0
 80200dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80200de:	1d3a      	adds	r2, r7, #4
 80200e0:	f107 0108 	add.w	r1, r7, #8
 80200e4:	f107 030c 	add.w	r3, r7, #12
 80200e8:	4618      	mov	r0, r3
 80200ea:	f7fd fcb7 	bl	801da5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80200ee:	6879      	ldr	r1, [r7, #4]
 80200f0:	68bb      	ldr	r3, [r7, #8]
 80200f2:	68fa      	ldr	r2, [r7, #12]
 80200f4:	9202      	str	r2, [sp, #8]
 80200f6:	9301      	str	r3, [sp, #4]
 80200f8:	2302      	movs	r3, #2
 80200fa:	9300      	str	r3, [sp, #0]
 80200fc:	2300      	movs	r3, #0
 80200fe:	460a      	mov	r2, r1
 8020100:	4910      	ldr	r1, [pc, #64]	; (8020144 <xTimerCreateTimerTask+0x84>)
 8020102:	4811      	ldr	r0, [pc, #68]	; (8020148 <xTimerCreateTimerTask+0x88>)
 8020104:	f7fe fd88 	bl	801ec18 <xTaskCreateStatic>
 8020108:	4602      	mov	r2, r0
 802010a:	4b10      	ldr	r3, [pc, #64]	; (802014c <xTimerCreateTimerTask+0x8c>)
 802010c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 802010e:	4b0f      	ldr	r3, [pc, #60]	; (802014c <xTimerCreateTimerTask+0x8c>)
 8020110:	681b      	ldr	r3, [r3, #0]
 8020112:	2b00      	cmp	r3, #0
 8020114:	d001      	beq.n	802011a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8020116:	2301      	movs	r3, #1
 8020118:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 802011a:	697b      	ldr	r3, [r7, #20]
 802011c:	2b00      	cmp	r3, #0
 802011e:	d109      	bne.n	8020134 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8020120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020124:	f383 8811 	msr	BASEPRI, r3
 8020128:	f3bf 8f6f 	isb	sy
 802012c:	f3bf 8f4f 	dsb	sy
 8020130:	613b      	str	r3, [r7, #16]
 8020132:	e7fe      	b.n	8020132 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8020134:	697b      	ldr	r3, [r7, #20]
}
 8020136:	4618      	mov	r0, r3
 8020138:	3718      	adds	r7, #24
 802013a:	46bd      	mov	sp, r7
 802013c:	bd80      	pop	{r7, pc}
 802013e:	bf00      	nop
 8020140:	24001660 	.word	0x24001660
 8020144:	080234dc 	.word	0x080234dc
 8020148:	08020281 	.word	0x08020281
 802014c:	24001664 	.word	0x24001664

08020150 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8020150:	b580      	push	{r7, lr}
 8020152:	b08a      	sub	sp, #40	; 0x28
 8020154:	af00      	add	r7, sp, #0
 8020156:	60f8      	str	r0, [r7, #12]
 8020158:	60b9      	str	r1, [r7, #8]
 802015a:	607a      	str	r2, [r7, #4]
 802015c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 802015e:	2300      	movs	r3, #0
 8020160:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8020162:	68fb      	ldr	r3, [r7, #12]
 8020164:	2b00      	cmp	r3, #0
 8020166:	d109      	bne.n	802017c <xTimerGenericCommand+0x2c>
 8020168:	f04f 0350 	mov.w	r3, #80	; 0x50
 802016c:	f383 8811 	msr	BASEPRI, r3
 8020170:	f3bf 8f6f 	isb	sy
 8020174:	f3bf 8f4f 	dsb	sy
 8020178:	623b      	str	r3, [r7, #32]
 802017a:	e7fe      	b.n	802017a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 802017c:	4b19      	ldr	r3, [pc, #100]	; (80201e4 <xTimerGenericCommand+0x94>)
 802017e:	681b      	ldr	r3, [r3, #0]
 8020180:	2b00      	cmp	r3, #0
 8020182:	d02a      	beq.n	80201da <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8020184:	68bb      	ldr	r3, [r7, #8]
 8020186:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 802018c:	68fb      	ldr	r3, [r7, #12]
 802018e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8020190:	68bb      	ldr	r3, [r7, #8]
 8020192:	2b05      	cmp	r3, #5
 8020194:	dc18      	bgt.n	80201c8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8020196:	f7ff fbd3 	bl	801f940 <xTaskGetSchedulerState>
 802019a:	4603      	mov	r3, r0
 802019c:	2b02      	cmp	r3, #2
 802019e:	d109      	bne.n	80201b4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80201a0:	4b10      	ldr	r3, [pc, #64]	; (80201e4 <xTimerGenericCommand+0x94>)
 80201a2:	6818      	ldr	r0, [r3, #0]
 80201a4:	f107 0110 	add.w	r1, r7, #16
 80201a8:	2300      	movs	r3, #0
 80201aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80201ac:	f7fd fec8 	bl	801df40 <xQueueGenericSend>
 80201b0:	6278      	str	r0, [r7, #36]	; 0x24
 80201b2:	e012      	b.n	80201da <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80201b4:	4b0b      	ldr	r3, [pc, #44]	; (80201e4 <xTimerGenericCommand+0x94>)
 80201b6:	6818      	ldr	r0, [r3, #0]
 80201b8:	f107 0110 	add.w	r1, r7, #16
 80201bc:	2300      	movs	r3, #0
 80201be:	2200      	movs	r2, #0
 80201c0:	f7fd febe 	bl	801df40 <xQueueGenericSend>
 80201c4:	6278      	str	r0, [r7, #36]	; 0x24
 80201c6:	e008      	b.n	80201da <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80201c8:	4b06      	ldr	r3, [pc, #24]	; (80201e4 <xTimerGenericCommand+0x94>)
 80201ca:	6818      	ldr	r0, [r3, #0]
 80201cc:	f107 0110 	add.w	r1, r7, #16
 80201d0:	2300      	movs	r3, #0
 80201d2:	683a      	ldr	r2, [r7, #0]
 80201d4:	f7fd ffae 	bl	801e134 <xQueueGenericSendFromISR>
 80201d8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80201da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80201dc:	4618      	mov	r0, r3
 80201de:	3728      	adds	r7, #40	; 0x28
 80201e0:	46bd      	mov	sp, r7
 80201e2:	bd80      	pop	{r7, pc}
 80201e4:	24001660 	.word	0x24001660

080201e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80201e8:	b580      	push	{r7, lr}
 80201ea:	b088      	sub	sp, #32
 80201ec:	af02      	add	r7, sp, #8
 80201ee:	6078      	str	r0, [r7, #4]
 80201f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80201f2:	4b22      	ldr	r3, [pc, #136]	; (802027c <prvProcessExpiredTimer+0x94>)
 80201f4:	681b      	ldr	r3, [r3, #0]
 80201f6:	68db      	ldr	r3, [r3, #12]
 80201f8:	68db      	ldr	r3, [r3, #12]
 80201fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80201fc:	697b      	ldr	r3, [r7, #20]
 80201fe:	3304      	adds	r3, #4
 8020200:	4618      	mov	r0, r3
 8020202:	f7fd fccf 	bl	801dba4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8020206:	697b      	ldr	r3, [r7, #20]
 8020208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802020c:	f003 0304 	and.w	r3, r3, #4
 8020210:	2b00      	cmp	r3, #0
 8020212:	d021      	beq.n	8020258 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8020214:	697b      	ldr	r3, [r7, #20]
 8020216:	699a      	ldr	r2, [r3, #24]
 8020218:	687b      	ldr	r3, [r7, #4]
 802021a:	18d1      	adds	r1, r2, r3
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	683a      	ldr	r2, [r7, #0]
 8020220:	6978      	ldr	r0, [r7, #20]
 8020222:	f000 f8d1 	bl	80203c8 <prvInsertTimerInActiveList>
 8020226:	4603      	mov	r3, r0
 8020228:	2b00      	cmp	r3, #0
 802022a:	d01e      	beq.n	802026a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802022c:	2300      	movs	r3, #0
 802022e:	9300      	str	r3, [sp, #0]
 8020230:	2300      	movs	r3, #0
 8020232:	687a      	ldr	r2, [r7, #4]
 8020234:	2100      	movs	r1, #0
 8020236:	6978      	ldr	r0, [r7, #20]
 8020238:	f7ff ff8a 	bl	8020150 <xTimerGenericCommand>
 802023c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 802023e:	693b      	ldr	r3, [r7, #16]
 8020240:	2b00      	cmp	r3, #0
 8020242:	d112      	bne.n	802026a <prvProcessExpiredTimer+0x82>
 8020244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020248:	f383 8811 	msr	BASEPRI, r3
 802024c:	f3bf 8f6f 	isb	sy
 8020250:	f3bf 8f4f 	dsb	sy
 8020254:	60fb      	str	r3, [r7, #12]
 8020256:	e7fe      	b.n	8020256 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8020258:	697b      	ldr	r3, [r7, #20]
 802025a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802025e:	f023 0301 	bic.w	r3, r3, #1
 8020262:	b2da      	uxtb	r2, r3
 8020264:	697b      	ldr	r3, [r7, #20]
 8020266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802026a:	697b      	ldr	r3, [r7, #20]
 802026c:	6a1b      	ldr	r3, [r3, #32]
 802026e:	6978      	ldr	r0, [r7, #20]
 8020270:	4798      	blx	r3
}
 8020272:	bf00      	nop
 8020274:	3718      	adds	r7, #24
 8020276:	46bd      	mov	sp, r7
 8020278:	bd80      	pop	{r7, pc}
 802027a:	bf00      	nop
 802027c:	24001658 	.word	0x24001658

08020280 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8020280:	b580      	push	{r7, lr}
 8020282:	b084      	sub	sp, #16
 8020284:	af00      	add	r7, sp, #0
 8020286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8020288:	f107 0308 	add.w	r3, r7, #8
 802028c:	4618      	mov	r0, r3
 802028e:	f000 f857 	bl	8020340 <prvGetNextExpireTime>
 8020292:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8020294:	68bb      	ldr	r3, [r7, #8]
 8020296:	4619      	mov	r1, r3
 8020298:	68f8      	ldr	r0, [r7, #12]
 802029a:	f000 f803 	bl	80202a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 802029e:	f000 f8d5 	bl	802044c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80202a2:	e7f1      	b.n	8020288 <prvTimerTask+0x8>

080202a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80202a4:	b580      	push	{r7, lr}
 80202a6:	b084      	sub	sp, #16
 80202a8:	af00      	add	r7, sp, #0
 80202aa:	6078      	str	r0, [r7, #4]
 80202ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80202ae:	f7fe ff63 	bl	801f178 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80202b2:	f107 0308 	add.w	r3, r7, #8
 80202b6:	4618      	mov	r0, r3
 80202b8:	f000 f866 	bl	8020388 <prvSampleTimeNow>
 80202bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80202be:	68bb      	ldr	r3, [r7, #8]
 80202c0:	2b00      	cmp	r3, #0
 80202c2:	d130      	bne.n	8020326 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80202c4:	683b      	ldr	r3, [r7, #0]
 80202c6:	2b00      	cmp	r3, #0
 80202c8:	d10a      	bne.n	80202e0 <prvProcessTimerOrBlockTask+0x3c>
 80202ca:	687a      	ldr	r2, [r7, #4]
 80202cc:	68fb      	ldr	r3, [r7, #12]
 80202ce:	429a      	cmp	r2, r3
 80202d0:	d806      	bhi.n	80202e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80202d2:	f7fe ff5f 	bl	801f194 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80202d6:	68f9      	ldr	r1, [r7, #12]
 80202d8:	6878      	ldr	r0, [r7, #4]
 80202da:	f7ff ff85 	bl	80201e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80202de:	e024      	b.n	802032a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80202e0:	683b      	ldr	r3, [r7, #0]
 80202e2:	2b00      	cmp	r3, #0
 80202e4:	d008      	beq.n	80202f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80202e6:	4b13      	ldr	r3, [pc, #76]	; (8020334 <prvProcessTimerOrBlockTask+0x90>)
 80202e8:	681b      	ldr	r3, [r3, #0]
 80202ea:	681b      	ldr	r3, [r3, #0]
 80202ec:	2b00      	cmp	r3, #0
 80202ee:	d101      	bne.n	80202f4 <prvProcessTimerOrBlockTask+0x50>
 80202f0:	2301      	movs	r3, #1
 80202f2:	e000      	b.n	80202f6 <prvProcessTimerOrBlockTask+0x52>
 80202f4:	2300      	movs	r3, #0
 80202f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80202f8:	4b0f      	ldr	r3, [pc, #60]	; (8020338 <prvProcessTimerOrBlockTask+0x94>)
 80202fa:	6818      	ldr	r0, [r3, #0]
 80202fc:	687a      	ldr	r2, [r7, #4]
 80202fe:	68fb      	ldr	r3, [r7, #12]
 8020300:	1ad3      	subs	r3, r2, r3
 8020302:	683a      	ldr	r2, [r7, #0]
 8020304:	4619      	mov	r1, r3
 8020306:	f7fe fc53 	bl	801ebb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 802030a:	f7fe ff43 	bl	801f194 <xTaskResumeAll>
 802030e:	4603      	mov	r3, r0
 8020310:	2b00      	cmp	r3, #0
 8020312:	d10a      	bne.n	802032a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8020314:	4b09      	ldr	r3, [pc, #36]	; (802033c <prvProcessTimerOrBlockTask+0x98>)
 8020316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802031a:	601a      	str	r2, [r3, #0]
 802031c:	f3bf 8f4f 	dsb	sy
 8020320:	f3bf 8f6f 	isb	sy
}
 8020324:	e001      	b.n	802032a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8020326:	f7fe ff35 	bl	801f194 <xTaskResumeAll>
}
 802032a:	bf00      	nop
 802032c:	3710      	adds	r7, #16
 802032e:	46bd      	mov	sp, r7
 8020330:	bd80      	pop	{r7, pc}
 8020332:	bf00      	nop
 8020334:	2400165c 	.word	0x2400165c
 8020338:	24001660 	.word	0x24001660
 802033c:	e000ed04 	.word	0xe000ed04

08020340 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8020340:	b480      	push	{r7}
 8020342:	b085      	sub	sp, #20
 8020344:	af00      	add	r7, sp, #0
 8020346:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8020348:	4b0e      	ldr	r3, [pc, #56]	; (8020384 <prvGetNextExpireTime+0x44>)
 802034a:	681b      	ldr	r3, [r3, #0]
 802034c:	681b      	ldr	r3, [r3, #0]
 802034e:	2b00      	cmp	r3, #0
 8020350:	d101      	bne.n	8020356 <prvGetNextExpireTime+0x16>
 8020352:	2201      	movs	r2, #1
 8020354:	e000      	b.n	8020358 <prvGetNextExpireTime+0x18>
 8020356:	2200      	movs	r2, #0
 8020358:	687b      	ldr	r3, [r7, #4]
 802035a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	681b      	ldr	r3, [r3, #0]
 8020360:	2b00      	cmp	r3, #0
 8020362:	d105      	bne.n	8020370 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8020364:	4b07      	ldr	r3, [pc, #28]	; (8020384 <prvGetNextExpireTime+0x44>)
 8020366:	681b      	ldr	r3, [r3, #0]
 8020368:	68db      	ldr	r3, [r3, #12]
 802036a:	681b      	ldr	r3, [r3, #0]
 802036c:	60fb      	str	r3, [r7, #12]
 802036e:	e001      	b.n	8020374 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8020370:	2300      	movs	r3, #0
 8020372:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8020374:	68fb      	ldr	r3, [r7, #12]
}
 8020376:	4618      	mov	r0, r3
 8020378:	3714      	adds	r7, #20
 802037a:	46bd      	mov	sp, r7
 802037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020380:	4770      	bx	lr
 8020382:	bf00      	nop
 8020384:	24001658 	.word	0x24001658

08020388 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8020388:	b580      	push	{r7, lr}
 802038a:	b084      	sub	sp, #16
 802038c:	af00      	add	r7, sp, #0
 802038e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8020390:	f7fe ff9c 	bl	801f2cc <xTaskGetTickCount>
 8020394:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8020396:	4b0b      	ldr	r3, [pc, #44]	; (80203c4 <prvSampleTimeNow+0x3c>)
 8020398:	681b      	ldr	r3, [r3, #0]
 802039a:	68fa      	ldr	r2, [r7, #12]
 802039c:	429a      	cmp	r2, r3
 802039e:	d205      	bcs.n	80203ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80203a0:	f000 f930 	bl	8020604 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80203a4:	687b      	ldr	r3, [r7, #4]
 80203a6:	2201      	movs	r2, #1
 80203a8:	601a      	str	r2, [r3, #0]
 80203aa:	e002      	b.n	80203b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80203ac:	687b      	ldr	r3, [r7, #4]
 80203ae:	2200      	movs	r2, #0
 80203b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80203b2:	4a04      	ldr	r2, [pc, #16]	; (80203c4 <prvSampleTimeNow+0x3c>)
 80203b4:	68fb      	ldr	r3, [r7, #12]
 80203b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80203b8:	68fb      	ldr	r3, [r7, #12]
}
 80203ba:	4618      	mov	r0, r3
 80203bc:	3710      	adds	r7, #16
 80203be:	46bd      	mov	sp, r7
 80203c0:	bd80      	pop	{r7, pc}
 80203c2:	bf00      	nop
 80203c4:	24001668 	.word	0x24001668

080203c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80203c8:	b580      	push	{r7, lr}
 80203ca:	b086      	sub	sp, #24
 80203cc:	af00      	add	r7, sp, #0
 80203ce:	60f8      	str	r0, [r7, #12]
 80203d0:	60b9      	str	r1, [r7, #8]
 80203d2:	607a      	str	r2, [r7, #4]
 80203d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80203d6:	2300      	movs	r3, #0
 80203d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80203da:	68fb      	ldr	r3, [r7, #12]
 80203dc:	68ba      	ldr	r2, [r7, #8]
 80203de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80203e0:	68fb      	ldr	r3, [r7, #12]
 80203e2:	68fa      	ldr	r2, [r7, #12]
 80203e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80203e6:	68ba      	ldr	r2, [r7, #8]
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	429a      	cmp	r2, r3
 80203ec:	d812      	bhi.n	8020414 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80203ee:	687a      	ldr	r2, [r7, #4]
 80203f0:	683b      	ldr	r3, [r7, #0]
 80203f2:	1ad2      	subs	r2, r2, r3
 80203f4:	68fb      	ldr	r3, [r7, #12]
 80203f6:	699b      	ldr	r3, [r3, #24]
 80203f8:	429a      	cmp	r2, r3
 80203fa:	d302      	bcc.n	8020402 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80203fc:	2301      	movs	r3, #1
 80203fe:	617b      	str	r3, [r7, #20]
 8020400:	e01b      	b.n	802043a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8020402:	4b10      	ldr	r3, [pc, #64]	; (8020444 <prvInsertTimerInActiveList+0x7c>)
 8020404:	681a      	ldr	r2, [r3, #0]
 8020406:	68fb      	ldr	r3, [r7, #12]
 8020408:	3304      	adds	r3, #4
 802040a:	4619      	mov	r1, r3
 802040c:	4610      	mov	r0, r2
 802040e:	f7fd fb90 	bl	801db32 <vListInsert>
 8020412:	e012      	b.n	802043a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8020414:	687a      	ldr	r2, [r7, #4]
 8020416:	683b      	ldr	r3, [r7, #0]
 8020418:	429a      	cmp	r2, r3
 802041a:	d206      	bcs.n	802042a <prvInsertTimerInActiveList+0x62>
 802041c:	68ba      	ldr	r2, [r7, #8]
 802041e:	683b      	ldr	r3, [r7, #0]
 8020420:	429a      	cmp	r2, r3
 8020422:	d302      	bcc.n	802042a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8020424:	2301      	movs	r3, #1
 8020426:	617b      	str	r3, [r7, #20]
 8020428:	e007      	b.n	802043a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802042a:	4b07      	ldr	r3, [pc, #28]	; (8020448 <prvInsertTimerInActiveList+0x80>)
 802042c:	681a      	ldr	r2, [r3, #0]
 802042e:	68fb      	ldr	r3, [r7, #12]
 8020430:	3304      	adds	r3, #4
 8020432:	4619      	mov	r1, r3
 8020434:	4610      	mov	r0, r2
 8020436:	f7fd fb7c 	bl	801db32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 802043a:	697b      	ldr	r3, [r7, #20]
}
 802043c:	4618      	mov	r0, r3
 802043e:	3718      	adds	r7, #24
 8020440:	46bd      	mov	sp, r7
 8020442:	bd80      	pop	{r7, pc}
 8020444:	2400165c 	.word	0x2400165c
 8020448:	24001658 	.word	0x24001658

0802044c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 802044c:	b580      	push	{r7, lr}
 802044e:	b08e      	sub	sp, #56	; 0x38
 8020450:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8020452:	e0c6      	b.n	80205e2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8020454:	687b      	ldr	r3, [r7, #4]
 8020456:	2b00      	cmp	r3, #0
 8020458:	da17      	bge.n	802048a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 802045a:	1d3b      	adds	r3, r7, #4
 802045c:	3304      	adds	r3, #4
 802045e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8020460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020462:	2b00      	cmp	r3, #0
 8020464:	d109      	bne.n	802047a <prvProcessReceivedCommands+0x2e>
 8020466:	f04f 0350 	mov.w	r3, #80	; 0x50
 802046a:	f383 8811 	msr	BASEPRI, r3
 802046e:	f3bf 8f6f 	isb	sy
 8020472:	f3bf 8f4f 	dsb	sy
 8020476:	61fb      	str	r3, [r7, #28]
 8020478:	e7fe      	b.n	8020478 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802047c:	681b      	ldr	r3, [r3, #0]
 802047e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020480:	6850      	ldr	r0, [r2, #4]
 8020482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020484:	6892      	ldr	r2, [r2, #8]
 8020486:	4611      	mov	r1, r2
 8020488:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	2b00      	cmp	r3, #0
 802048e:	f2c0 80a7 	blt.w	80205e0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8020492:	68fb      	ldr	r3, [r7, #12]
 8020494:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8020496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020498:	695b      	ldr	r3, [r3, #20]
 802049a:	2b00      	cmp	r3, #0
 802049c:	d004      	beq.n	80204a8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802049e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204a0:	3304      	adds	r3, #4
 80204a2:	4618      	mov	r0, r3
 80204a4:	f7fd fb7e 	bl	801dba4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80204a8:	463b      	mov	r3, r7
 80204aa:	4618      	mov	r0, r3
 80204ac:	f7ff ff6c 	bl	8020388 <prvSampleTimeNow>
 80204b0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80204b2:	687b      	ldr	r3, [r7, #4]
 80204b4:	2b09      	cmp	r3, #9
 80204b6:	f200 8094 	bhi.w	80205e2 <prvProcessReceivedCommands+0x196>
 80204ba:	a201      	add	r2, pc, #4	; (adr r2, 80204c0 <prvProcessReceivedCommands+0x74>)
 80204bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80204c0:	080204e9 	.word	0x080204e9
 80204c4:	080204e9 	.word	0x080204e9
 80204c8:	080204e9 	.word	0x080204e9
 80204cc:	0802055b 	.word	0x0802055b
 80204d0:	0802056f 	.word	0x0802056f
 80204d4:	080205b7 	.word	0x080205b7
 80204d8:	080204e9 	.word	0x080204e9
 80204dc:	080204e9 	.word	0x080204e9
 80204e0:	0802055b 	.word	0x0802055b
 80204e4:	0802056f 	.word	0x0802056f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80204e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80204ee:	f043 0301 	orr.w	r3, r3, #1
 80204f2:	b2da      	uxtb	r2, r3
 80204f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80204fa:	68ba      	ldr	r2, [r7, #8]
 80204fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204fe:	699b      	ldr	r3, [r3, #24]
 8020500:	18d1      	adds	r1, r2, r3
 8020502:	68bb      	ldr	r3, [r7, #8]
 8020504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020508:	f7ff ff5e 	bl	80203c8 <prvInsertTimerInActiveList>
 802050c:	4603      	mov	r3, r0
 802050e:	2b00      	cmp	r3, #0
 8020510:	d067      	beq.n	80205e2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8020512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020514:	6a1b      	ldr	r3, [r3, #32]
 8020516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020518:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802051a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802051c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020520:	f003 0304 	and.w	r3, r3, #4
 8020524:	2b00      	cmp	r3, #0
 8020526:	d05c      	beq.n	80205e2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8020528:	68ba      	ldr	r2, [r7, #8]
 802052a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802052c:	699b      	ldr	r3, [r3, #24]
 802052e:	441a      	add	r2, r3
 8020530:	2300      	movs	r3, #0
 8020532:	9300      	str	r3, [sp, #0]
 8020534:	2300      	movs	r3, #0
 8020536:	2100      	movs	r1, #0
 8020538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802053a:	f7ff fe09 	bl	8020150 <xTimerGenericCommand>
 802053e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8020540:	6a3b      	ldr	r3, [r7, #32]
 8020542:	2b00      	cmp	r3, #0
 8020544:	d14d      	bne.n	80205e2 <prvProcessReceivedCommands+0x196>
 8020546:	f04f 0350 	mov.w	r3, #80	; 0x50
 802054a:	f383 8811 	msr	BASEPRI, r3
 802054e:	f3bf 8f6f 	isb	sy
 8020552:	f3bf 8f4f 	dsb	sy
 8020556:	61bb      	str	r3, [r7, #24]
 8020558:	e7fe      	b.n	8020558 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 802055a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802055c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020560:	f023 0301 	bic.w	r3, r3, #1
 8020564:	b2da      	uxtb	r2, r3
 8020566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020568:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 802056c:	e039      	b.n	80205e2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802056e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020574:	f043 0301 	orr.w	r3, r3, #1
 8020578:	b2da      	uxtb	r2, r3
 802057a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802057c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8020580:	68ba      	ldr	r2, [r7, #8]
 8020582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020584:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8020586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020588:	699b      	ldr	r3, [r3, #24]
 802058a:	2b00      	cmp	r3, #0
 802058c:	d109      	bne.n	80205a2 <prvProcessReceivedCommands+0x156>
 802058e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020592:	f383 8811 	msr	BASEPRI, r3
 8020596:	f3bf 8f6f 	isb	sy
 802059a:	f3bf 8f4f 	dsb	sy
 802059e:	617b      	str	r3, [r7, #20]
 80205a0:	e7fe      	b.n	80205a0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80205a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205a4:	699a      	ldr	r2, [r3, #24]
 80205a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205a8:	18d1      	adds	r1, r2, r3
 80205aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80205ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80205b0:	f7ff ff0a 	bl	80203c8 <prvInsertTimerInActiveList>
					break;
 80205b4:	e015      	b.n	80205e2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80205b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80205bc:	f003 0302 	and.w	r3, r3, #2
 80205c0:	2b00      	cmp	r3, #0
 80205c2:	d103      	bne.n	80205cc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80205c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80205c6:	f000 fbc5 	bl	8020d54 <vPortFree>
 80205ca:	e00a      	b.n	80205e2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80205cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80205d2:	f023 0301 	bic.w	r3, r3, #1
 80205d6:	b2da      	uxtb	r2, r3
 80205d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80205da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80205de:	e000      	b.n	80205e2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80205e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80205e2:	4b07      	ldr	r3, [pc, #28]	; (8020600 <prvProcessReceivedCommands+0x1b4>)
 80205e4:	681b      	ldr	r3, [r3, #0]
 80205e6:	1d39      	adds	r1, r7, #4
 80205e8:	2200      	movs	r2, #0
 80205ea:	4618      	mov	r0, r3
 80205ec:	f7fd fec0 	bl	801e370 <xQueueReceive>
 80205f0:	4603      	mov	r3, r0
 80205f2:	2b00      	cmp	r3, #0
 80205f4:	f47f af2e 	bne.w	8020454 <prvProcessReceivedCommands+0x8>
	}
}
 80205f8:	bf00      	nop
 80205fa:	3730      	adds	r7, #48	; 0x30
 80205fc:	46bd      	mov	sp, r7
 80205fe:	bd80      	pop	{r7, pc}
 8020600:	24001660 	.word	0x24001660

08020604 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8020604:	b580      	push	{r7, lr}
 8020606:	b088      	sub	sp, #32
 8020608:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802060a:	e047      	b.n	802069c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 802060c:	4b2d      	ldr	r3, [pc, #180]	; (80206c4 <prvSwitchTimerLists+0xc0>)
 802060e:	681b      	ldr	r3, [r3, #0]
 8020610:	68db      	ldr	r3, [r3, #12]
 8020612:	681b      	ldr	r3, [r3, #0]
 8020614:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8020616:	4b2b      	ldr	r3, [pc, #172]	; (80206c4 <prvSwitchTimerLists+0xc0>)
 8020618:	681b      	ldr	r3, [r3, #0]
 802061a:	68db      	ldr	r3, [r3, #12]
 802061c:	68db      	ldr	r3, [r3, #12]
 802061e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8020620:	68fb      	ldr	r3, [r7, #12]
 8020622:	3304      	adds	r3, #4
 8020624:	4618      	mov	r0, r3
 8020626:	f7fd fabd 	bl	801dba4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 802062a:	68fb      	ldr	r3, [r7, #12]
 802062c:	6a1b      	ldr	r3, [r3, #32]
 802062e:	68f8      	ldr	r0, [r7, #12]
 8020630:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8020632:	68fb      	ldr	r3, [r7, #12]
 8020634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8020638:	f003 0304 	and.w	r3, r3, #4
 802063c:	2b00      	cmp	r3, #0
 802063e:	d02d      	beq.n	802069c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8020640:	68fb      	ldr	r3, [r7, #12]
 8020642:	699b      	ldr	r3, [r3, #24]
 8020644:	693a      	ldr	r2, [r7, #16]
 8020646:	4413      	add	r3, r2
 8020648:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 802064a:	68ba      	ldr	r2, [r7, #8]
 802064c:	693b      	ldr	r3, [r7, #16]
 802064e:	429a      	cmp	r2, r3
 8020650:	d90e      	bls.n	8020670 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8020652:	68fb      	ldr	r3, [r7, #12]
 8020654:	68ba      	ldr	r2, [r7, #8]
 8020656:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8020658:	68fb      	ldr	r3, [r7, #12]
 802065a:	68fa      	ldr	r2, [r7, #12]
 802065c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802065e:	4b19      	ldr	r3, [pc, #100]	; (80206c4 <prvSwitchTimerLists+0xc0>)
 8020660:	681a      	ldr	r2, [r3, #0]
 8020662:	68fb      	ldr	r3, [r7, #12]
 8020664:	3304      	adds	r3, #4
 8020666:	4619      	mov	r1, r3
 8020668:	4610      	mov	r0, r2
 802066a:	f7fd fa62 	bl	801db32 <vListInsert>
 802066e:	e015      	b.n	802069c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8020670:	2300      	movs	r3, #0
 8020672:	9300      	str	r3, [sp, #0]
 8020674:	2300      	movs	r3, #0
 8020676:	693a      	ldr	r2, [r7, #16]
 8020678:	2100      	movs	r1, #0
 802067a:	68f8      	ldr	r0, [r7, #12]
 802067c:	f7ff fd68 	bl	8020150 <xTimerGenericCommand>
 8020680:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8020682:	687b      	ldr	r3, [r7, #4]
 8020684:	2b00      	cmp	r3, #0
 8020686:	d109      	bne.n	802069c <prvSwitchTimerLists+0x98>
 8020688:	f04f 0350 	mov.w	r3, #80	; 0x50
 802068c:	f383 8811 	msr	BASEPRI, r3
 8020690:	f3bf 8f6f 	isb	sy
 8020694:	f3bf 8f4f 	dsb	sy
 8020698:	603b      	str	r3, [r7, #0]
 802069a:	e7fe      	b.n	802069a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802069c:	4b09      	ldr	r3, [pc, #36]	; (80206c4 <prvSwitchTimerLists+0xc0>)
 802069e:	681b      	ldr	r3, [r3, #0]
 80206a0:	681b      	ldr	r3, [r3, #0]
 80206a2:	2b00      	cmp	r3, #0
 80206a4:	d1b2      	bne.n	802060c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80206a6:	4b07      	ldr	r3, [pc, #28]	; (80206c4 <prvSwitchTimerLists+0xc0>)
 80206a8:	681b      	ldr	r3, [r3, #0]
 80206aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80206ac:	4b06      	ldr	r3, [pc, #24]	; (80206c8 <prvSwitchTimerLists+0xc4>)
 80206ae:	681b      	ldr	r3, [r3, #0]
 80206b0:	4a04      	ldr	r2, [pc, #16]	; (80206c4 <prvSwitchTimerLists+0xc0>)
 80206b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80206b4:	4a04      	ldr	r2, [pc, #16]	; (80206c8 <prvSwitchTimerLists+0xc4>)
 80206b6:	697b      	ldr	r3, [r7, #20]
 80206b8:	6013      	str	r3, [r2, #0]
}
 80206ba:	bf00      	nop
 80206bc:	3718      	adds	r7, #24
 80206be:	46bd      	mov	sp, r7
 80206c0:	bd80      	pop	{r7, pc}
 80206c2:	bf00      	nop
 80206c4:	24001658 	.word	0x24001658
 80206c8:	2400165c 	.word	0x2400165c

080206cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80206cc:	b580      	push	{r7, lr}
 80206ce:	b082      	sub	sp, #8
 80206d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80206d2:	f000 f963 	bl	802099c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80206d6:	4b15      	ldr	r3, [pc, #84]	; (802072c <prvCheckForValidListAndQueue+0x60>)
 80206d8:	681b      	ldr	r3, [r3, #0]
 80206da:	2b00      	cmp	r3, #0
 80206dc:	d120      	bne.n	8020720 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80206de:	4814      	ldr	r0, [pc, #80]	; (8020730 <prvCheckForValidListAndQueue+0x64>)
 80206e0:	f7fd f9d6 	bl	801da90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80206e4:	4813      	ldr	r0, [pc, #76]	; (8020734 <prvCheckForValidListAndQueue+0x68>)
 80206e6:	f7fd f9d3 	bl	801da90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80206ea:	4b13      	ldr	r3, [pc, #76]	; (8020738 <prvCheckForValidListAndQueue+0x6c>)
 80206ec:	4a10      	ldr	r2, [pc, #64]	; (8020730 <prvCheckForValidListAndQueue+0x64>)
 80206ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80206f0:	4b12      	ldr	r3, [pc, #72]	; (802073c <prvCheckForValidListAndQueue+0x70>)
 80206f2:	4a10      	ldr	r2, [pc, #64]	; (8020734 <prvCheckForValidListAndQueue+0x68>)
 80206f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80206f6:	2300      	movs	r3, #0
 80206f8:	9300      	str	r3, [sp, #0]
 80206fa:	4b11      	ldr	r3, [pc, #68]	; (8020740 <prvCheckForValidListAndQueue+0x74>)
 80206fc:	4a11      	ldr	r2, [pc, #68]	; (8020744 <prvCheckForValidListAndQueue+0x78>)
 80206fe:	2110      	movs	r1, #16
 8020700:	200a      	movs	r0, #10
 8020702:	f7fd fae1 	bl	801dcc8 <xQueueGenericCreateStatic>
 8020706:	4602      	mov	r2, r0
 8020708:	4b08      	ldr	r3, [pc, #32]	; (802072c <prvCheckForValidListAndQueue+0x60>)
 802070a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 802070c:	4b07      	ldr	r3, [pc, #28]	; (802072c <prvCheckForValidListAndQueue+0x60>)
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	2b00      	cmp	r3, #0
 8020712:	d005      	beq.n	8020720 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8020714:	4b05      	ldr	r3, [pc, #20]	; (802072c <prvCheckForValidListAndQueue+0x60>)
 8020716:	681b      	ldr	r3, [r3, #0]
 8020718:	490b      	ldr	r1, [pc, #44]	; (8020748 <prvCheckForValidListAndQueue+0x7c>)
 802071a:	4618      	mov	r0, r3
 802071c:	f7fe f9f6 	bl	801eb0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8020720:	f000 f96a 	bl	80209f8 <vPortExitCritical>
}
 8020724:	bf00      	nop
 8020726:	46bd      	mov	sp, r7
 8020728:	bd80      	pop	{r7, pc}
 802072a:	bf00      	nop
 802072c:	24001660 	.word	0x24001660
 8020730:	24001630 	.word	0x24001630
 8020734:	24001644 	.word	0x24001644
 8020738:	24001658 	.word	0x24001658
 802073c:	2400165c 	.word	0x2400165c
 8020740:	2400170c 	.word	0x2400170c
 8020744:	2400166c 	.word	0x2400166c
 8020748:	080234e4 	.word	0x080234e4

0802074c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 802074c:	b480      	push	{r7}
 802074e:	b085      	sub	sp, #20
 8020750:	af00      	add	r7, sp, #0
 8020752:	60f8      	str	r0, [r7, #12]
 8020754:	60b9      	str	r1, [r7, #8]
 8020756:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8020758:	68fb      	ldr	r3, [r7, #12]
 802075a:	3b04      	subs	r3, #4
 802075c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 802075e:	68fb      	ldr	r3, [r7, #12]
 8020760:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8020764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8020766:	68fb      	ldr	r3, [r7, #12]
 8020768:	3b04      	subs	r3, #4
 802076a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 802076c:	68bb      	ldr	r3, [r7, #8]
 802076e:	f023 0201 	bic.w	r2, r3, #1
 8020772:	68fb      	ldr	r3, [r7, #12]
 8020774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8020776:	68fb      	ldr	r3, [r7, #12]
 8020778:	3b04      	subs	r3, #4
 802077a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 802077c:	4a0c      	ldr	r2, [pc, #48]	; (80207b0 <pxPortInitialiseStack+0x64>)
 802077e:	68fb      	ldr	r3, [r7, #12]
 8020780:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8020782:	68fb      	ldr	r3, [r7, #12]
 8020784:	3b14      	subs	r3, #20
 8020786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8020788:	687a      	ldr	r2, [r7, #4]
 802078a:	68fb      	ldr	r3, [r7, #12]
 802078c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 802078e:	68fb      	ldr	r3, [r7, #12]
 8020790:	3b04      	subs	r3, #4
 8020792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8020794:	68fb      	ldr	r3, [r7, #12]
 8020796:	f06f 0202 	mvn.w	r2, #2
 802079a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 802079c:	68fb      	ldr	r3, [r7, #12]
 802079e:	3b20      	subs	r3, #32
 80207a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80207a2:	68fb      	ldr	r3, [r7, #12]
}
 80207a4:	4618      	mov	r0, r3
 80207a6:	3714      	adds	r7, #20
 80207a8:	46bd      	mov	sp, r7
 80207aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207ae:	4770      	bx	lr
 80207b0:	080207b5 	.word	0x080207b5

080207b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80207b4:	b480      	push	{r7}
 80207b6:	b085      	sub	sp, #20
 80207b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80207ba:	2300      	movs	r3, #0
 80207bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80207be:	4b11      	ldr	r3, [pc, #68]	; (8020804 <prvTaskExitError+0x50>)
 80207c0:	681b      	ldr	r3, [r3, #0]
 80207c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80207c6:	d009      	beq.n	80207dc <prvTaskExitError+0x28>
 80207c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80207cc:	f383 8811 	msr	BASEPRI, r3
 80207d0:	f3bf 8f6f 	isb	sy
 80207d4:	f3bf 8f4f 	dsb	sy
 80207d8:	60fb      	str	r3, [r7, #12]
 80207da:	e7fe      	b.n	80207da <prvTaskExitError+0x26>
 80207dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80207e0:	f383 8811 	msr	BASEPRI, r3
 80207e4:	f3bf 8f6f 	isb	sy
 80207e8:	f3bf 8f4f 	dsb	sy
 80207ec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80207ee:	bf00      	nop
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d0fc      	beq.n	80207f0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80207f6:	bf00      	nop
 80207f8:	3714      	adds	r7, #20
 80207fa:	46bd      	mov	sp, r7
 80207fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020800:	4770      	bx	lr
 8020802:	bf00      	nop
 8020804:	240000dc 	.word	0x240000dc
	...

08020810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8020810:	4b07      	ldr	r3, [pc, #28]	; (8020830 <pxCurrentTCBConst2>)
 8020812:	6819      	ldr	r1, [r3, #0]
 8020814:	6808      	ldr	r0, [r1, #0]
 8020816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802081a:	f380 8809 	msr	PSP, r0
 802081e:	f3bf 8f6f 	isb	sy
 8020822:	f04f 0000 	mov.w	r0, #0
 8020826:	f380 8811 	msr	BASEPRI, r0
 802082a:	4770      	bx	lr
 802082c:	f3af 8000 	nop.w

08020830 <pxCurrentTCBConst2>:
 8020830:	24001130 	.word	0x24001130
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8020834:	bf00      	nop
 8020836:	bf00      	nop

08020838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8020838:	4808      	ldr	r0, [pc, #32]	; (802085c <prvPortStartFirstTask+0x24>)
 802083a:	6800      	ldr	r0, [r0, #0]
 802083c:	6800      	ldr	r0, [r0, #0]
 802083e:	f380 8808 	msr	MSP, r0
 8020842:	f04f 0000 	mov.w	r0, #0
 8020846:	f380 8814 	msr	CONTROL, r0
 802084a:	b662      	cpsie	i
 802084c:	b661      	cpsie	f
 802084e:	f3bf 8f4f 	dsb	sy
 8020852:	f3bf 8f6f 	isb	sy
 8020856:	df00      	svc	0
 8020858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802085a:	bf00      	nop
 802085c:	e000ed08 	.word	0xe000ed08

08020860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8020860:	b580      	push	{r7, lr}
 8020862:	b086      	sub	sp, #24
 8020864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8020866:	4b44      	ldr	r3, [pc, #272]	; (8020978 <xPortStartScheduler+0x118>)
 8020868:	681b      	ldr	r3, [r3, #0]
 802086a:	4a44      	ldr	r2, [pc, #272]	; (802097c <xPortStartScheduler+0x11c>)
 802086c:	4293      	cmp	r3, r2
 802086e:	d109      	bne.n	8020884 <xPortStartScheduler+0x24>
 8020870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020874:	f383 8811 	msr	BASEPRI, r3
 8020878:	f3bf 8f6f 	isb	sy
 802087c:	f3bf 8f4f 	dsb	sy
 8020880:	613b      	str	r3, [r7, #16]
 8020882:	e7fe      	b.n	8020882 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8020884:	4b3c      	ldr	r3, [pc, #240]	; (8020978 <xPortStartScheduler+0x118>)
 8020886:	681b      	ldr	r3, [r3, #0]
 8020888:	4a3d      	ldr	r2, [pc, #244]	; (8020980 <xPortStartScheduler+0x120>)
 802088a:	4293      	cmp	r3, r2
 802088c:	d109      	bne.n	80208a2 <xPortStartScheduler+0x42>
 802088e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020892:	f383 8811 	msr	BASEPRI, r3
 8020896:	f3bf 8f6f 	isb	sy
 802089a:	f3bf 8f4f 	dsb	sy
 802089e:	60fb      	str	r3, [r7, #12]
 80208a0:	e7fe      	b.n	80208a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80208a2:	4b38      	ldr	r3, [pc, #224]	; (8020984 <xPortStartScheduler+0x124>)
 80208a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80208a6:	697b      	ldr	r3, [r7, #20]
 80208a8:	781b      	ldrb	r3, [r3, #0]
 80208aa:	b2db      	uxtb	r3, r3
 80208ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80208ae:	697b      	ldr	r3, [r7, #20]
 80208b0:	22ff      	movs	r2, #255	; 0xff
 80208b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80208b4:	697b      	ldr	r3, [r7, #20]
 80208b6:	781b      	ldrb	r3, [r3, #0]
 80208b8:	b2db      	uxtb	r3, r3
 80208ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80208bc:	78fb      	ldrb	r3, [r7, #3]
 80208be:	b2db      	uxtb	r3, r3
 80208c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80208c4:	b2da      	uxtb	r2, r3
 80208c6:	4b30      	ldr	r3, [pc, #192]	; (8020988 <xPortStartScheduler+0x128>)
 80208c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80208ca:	4b30      	ldr	r3, [pc, #192]	; (802098c <xPortStartScheduler+0x12c>)
 80208cc:	2207      	movs	r2, #7
 80208ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80208d0:	e009      	b.n	80208e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80208d2:	4b2e      	ldr	r3, [pc, #184]	; (802098c <xPortStartScheduler+0x12c>)
 80208d4:	681b      	ldr	r3, [r3, #0]
 80208d6:	3b01      	subs	r3, #1
 80208d8:	4a2c      	ldr	r2, [pc, #176]	; (802098c <xPortStartScheduler+0x12c>)
 80208da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80208dc:	78fb      	ldrb	r3, [r7, #3]
 80208de:	b2db      	uxtb	r3, r3
 80208e0:	005b      	lsls	r3, r3, #1
 80208e2:	b2db      	uxtb	r3, r3
 80208e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80208e6:	78fb      	ldrb	r3, [r7, #3]
 80208e8:	b2db      	uxtb	r3, r3
 80208ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80208ee:	2b80      	cmp	r3, #128	; 0x80
 80208f0:	d0ef      	beq.n	80208d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80208f2:	4b26      	ldr	r3, [pc, #152]	; (802098c <xPortStartScheduler+0x12c>)
 80208f4:	681b      	ldr	r3, [r3, #0]
 80208f6:	f1c3 0307 	rsb	r3, r3, #7
 80208fa:	2b04      	cmp	r3, #4
 80208fc:	d009      	beq.n	8020912 <xPortStartScheduler+0xb2>
 80208fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020902:	f383 8811 	msr	BASEPRI, r3
 8020906:	f3bf 8f6f 	isb	sy
 802090a:	f3bf 8f4f 	dsb	sy
 802090e:	60bb      	str	r3, [r7, #8]
 8020910:	e7fe      	b.n	8020910 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8020912:	4b1e      	ldr	r3, [pc, #120]	; (802098c <xPortStartScheduler+0x12c>)
 8020914:	681b      	ldr	r3, [r3, #0]
 8020916:	021b      	lsls	r3, r3, #8
 8020918:	4a1c      	ldr	r2, [pc, #112]	; (802098c <xPortStartScheduler+0x12c>)
 802091a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 802091c:	4b1b      	ldr	r3, [pc, #108]	; (802098c <xPortStartScheduler+0x12c>)
 802091e:	681b      	ldr	r3, [r3, #0]
 8020920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8020924:	4a19      	ldr	r2, [pc, #100]	; (802098c <xPortStartScheduler+0x12c>)
 8020926:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8020928:	687b      	ldr	r3, [r7, #4]
 802092a:	b2da      	uxtb	r2, r3
 802092c:	697b      	ldr	r3, [r7, #20]
 802092e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8020930:	4b17      	ldr	r3, [pc, #92]	; (8020990 <xPortStartScheduler+0x130>)
 8020932:	681b      	ldr	r3, [r3, #0]
 8020934:	4a16      	ldr	r2, [pc, #88]	; (8020990 <xPortStartScheduler+0x130>)
 8020936:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802093a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 802093c:	4b14      	ldr	r3, [pc, #80]	; (8020990 <xPortStartScheduler+0x130>)
 802093e:	681b      	ldr	r3, [r3, #0]
 8020940:	4a13      	ldr	r2, [pc, #76]	; (8020990 <xPortStartScheduler+0x130>)
 8020942:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8020946:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8020948:	f000 f8d6 	bl	8020af8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 802094c:	4b11      	ldr	r3, [pc, #68]	; (8020994 <xPortStartScheduler+0x134>)
 802094e:	2200      	movs	r2, #0
 8020950:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8020952:	f000 f8f5 	bl	8020b40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8020956:	4b10      	ldr	r3, [pc, #64]	; (8020998 <xPortStartScheduler+0x138>)
 8020958:	681b      	ldr	r3, [r3, #0]
 802095a:	4a0f      	ldr	r2, [pc, #60]	; (8020998 <xPortStartScheduler+0x138>)
 802095c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8020960:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8020962:	f7ff ff69 	bl	8020838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8020966:	f7fe fd8b 	bl	801f480 <vTaskSwitchContext>
	prvTaskExitError();
 802096a:	f7ff ff23 	bl	80207b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 802096e:	2300      	movs	r3, #0
}
 8020970:	4618      	mov	r0, r3
 8020972:	3718      	adds	r7, #24
 8020974:	46bd      	mov	sp, r7
 8020976:	bd80      	pop	{r7, pc}
 8020978:	e000ed00 	.word	0xe000ed00
 802097c:	410fc271 	.word	0x410fc271
 8020980:	410fc270 	.word	0x410fc270
 8020984:	e000e400 	.word	0xe000e400
 8020988:	2400175c 	.word	0x2400175c
 802098c:	24001760 	.word	0x24001760
 8020990:	e000ed20 	.word	0xe000ed20
 8020994:	240000dc 	.word	0x240000dc
 8020998:	e000ef34 	.word	0xe000ef34

0802099c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 802099c:	b480      	push	{r7}
 802099e:	b083      	sub	sp, #12
 80209a0:	af00      	add	r7, sp, #0
 80209a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80209a6:	f383 8811 	msr	BASEPRI, r3
 80209aa:	f3bf 8f6f 	isb	sy
 80209ae:	f3bf 8f4f 	dsb	sy
 80209b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80209b4:	4b0e      	ldr	r3, [pc, #56]	; (80209f0 <vPortEnterCritical+0x54>)
 80209b6:	681b      	ldr	r3, [r3, #0]
 80209b8:	3301      	adds	r3, #1
 80209ba:	4a0d      	ldr	r2, [pc, #52]	; (80209f0 <vPortEnterCritical+0x54>)
 80209bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80209be:	4b0c      	ldr	r3, [pc, #48]	; (80209f0 <vPortEnterCritical+0x54>)
 80209c0:	681b      	ldr	r3, [r3, #0]
 80209c2:	2b01      	cmp	r3, #1
 80209c4:	d10e      	bne.n	80209e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80209c6:	4b0b      	ldr	r3, [pc, #44]	; (80209f4 <vPortEnterCritical+0x58>)
 80209c8:	681b      	ldr	r3, [r3, #0]
 80209ca:	b2db      	uxtb	r3, r3
 80209cc:	2b00      	cmp	r3, #0
 80209ce:	d009      	beq.n	80209e4 <vPortEnterCritical+0x48>
 80209d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80209d4:	f383 8811 	msr	BASEPRI, r3
 80209d8:	f3bf 8f6f 	isb	sy
 80209dc:	f3bf 8f4f 	dsb	sy
 80209e0:	603b      	str	r3, [r7, #0]
 80209e2:	e7fe      	b.n	80209e2 <vPortEnterCritical+0x46>
	}
}
 80209e4:	bf00      	nop
 80209e6:	370c      	adds	r7, #12
 80209e8:	46bd      	mov	sp, r7
 80209ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209ee:	4770      	bx	lr
 80209f0:	240000dc 	.word	0x240000dc
 80209f4:	e000ed04 	.word	0xe000ed04

080209f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80209f8:	b480      	push	{r7}
 80209fa:	b083      	sub	sp, #12
 80209fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80209fe:	4b11      	ldr	r3, [pc, #68]	; (8020a44 <vPortExitCritical+0x4c>)
 8020a00:	681b      	ldr	r3, [r3, #0]
 8020a02:	2b00      	cmp	r3, #0
 8020a04:	d109      	bne.n	8020a1a <vPortExitCritical+0x22>
 8020a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a0a:	f383 8811 	msr	BASEPRI, r3
 8020a0e:	f3bf 8f6f 	isb	sy
 8020a12:	f3bf 8f4f 	dsb	sy
 8020a16:	607b      	str	r3, [r7, #4]
 8020a18:	e7fe      	b.n	8020a18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8020a1a:	4b0a      	ldr	r3, [pc, #40]	; (8020a44 <vPortExitCritical+0x4c>)
 8020a1c:	681b      	ldr	r3, [r3, #0]
 8020a1e:	3b01      	subs	r3, #1
 8020a20:	4a08      	ldr	r2, [pc, #32]	; (8020a44 <vPortExitCritical+0x4c>)
 8020a22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8020a24:	4b07      	ldr	r3, [pc, #28]	; (8020a44 <vPortExitCritical+0x4c>)
 8020a26:	681b      	ldr	r3, [r3, #0]
 8020a28:	2b00      	cmp	r3, #0
 8020a2a:	d104      	bne.n	8020a36 <vPortExitCritical+0x3e>
 8020a2c:	2300      	movs	r3, #0
 8020a2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8020a30:	683b      	ldr	r3, [r7, #0]
 8020a32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8020a36:	bf00      	nop
 8020a38:	370c      	adds	r7, #12
 8020a3a:	46bd      	mov	sp, r7
 8020a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a40:	4770      	bx	lr
 8020a42:	bf00      	nop
 8020a44:	240000dc 	.word	0x240000dc
	...

08020a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8020a50:	f3ef 8009 	mrs	r0, PSP
 8020a54:	f3bf 8f6f 	isb	sy
 8020a58:	4b15      	ldr	r3, [pc, #84]	; (8020ab0 <pxCurrentTCBConst>)
 8020a5a:	681a      	ldr	r2, [r3, #0]
 8020a5c:	f01e 0f10 	tst.w	lr, #16
 8020a60:	bf08      	it	eq
 8020a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8020a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a6a:	6010      	str	r0, [r2, #0]
 8020a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8020a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8020a74:	f380 8811 	msr	BASEPRI, r0
 8020a78:	f3bf 8f4f 	dsb	sy
 8020a7c:	f3bf 8f6f 	isb	sy
 8020a80:	f7fe fcfe 	bl	801f480 <vTaskSwitchContext>
 8020a84:	f04f 0000 	mov.w	r0, #0
 8020a88:	f380 8811 	msr	BASEPRI, r0
 8020a8c:	bc09      	pop	{r0, r3}
 8020a8e:	6819      	ldr	r1, [r3, #0]
 8020a90:	6808      	ldr	r0, [r1, #0]
 8020a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a96:	f01e 0f10 	tst.w	lr, #16
 8020a9a:	bf08      	it	eq
 8020a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8020aa0:	f380 8809 	msr	PSP, r0
 8020aa4:	f3bf 8f6f 	isb	sy
 8020aa8:	4770      	bx	lr
 8020aaa:	bf00      	nop
 8020aac:	f3af 8000 	nop.w

08020ab0 <pxCurrentTCBConst>:
 8020ab0:	24001130 	.word	0x24001130
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8020ab4:	bf00      	nop
 8020ab6:	bf00      	nop

08020ab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8020ab8:	b580      	push	{r7, lr}
 8020aba:	b082      	sub	sp, #8
 8020abc:	af00      	add	r7, sp, #0
	__asm volatile
 8020abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ac2:	f383 8811 	msr	BASEPRI, r3
 8020ac6:	f3bf 8f6f 	isb	sy
 8020aca:	f3bf 8f4f 	dsb	sy
 8020ace:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8020ad0:	f7fe fc1e 	bl	801f310 <xTaskIncrementTick>
 8020ad4:	4603      	mov	r3, r0
 8020ad6:	2b00      	cmp	r3, #0
 8020ad8:	d003      	beq.n	8020ae2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8020ada:	4b06      	ldr	r3, [pc, #24]	; (8020af4 <SysTick_Handler+0x3c>)
 8020adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020ae0:	601a      	str	r2, [r3, #0]
 8020ae2:	2300      	movs	r3, #0
 8020ae4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8020ae6:	683b      	ldr	r3, [r7, #0]
 8020ae8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8020aec:	bf00      	nop
 8020aee:	3708      	adds	r7, #8
 8020af0:	46bd      	mov	sp, r7
 8020af2:	bd80      	pop	{r7, pc}
 8020af4:	e000ed04 	.word	0xe000ed04

08020af8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8020af8:	b480      	push	{r7}
 8020afa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8020afc:	4b0b      	ldr	r3, [pc, #44]	; (8020b2c <vPortSetupTimerInterrupt+0x34>)
 8020afe:	2200      	movs	r2, #0
 8020b00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8020b02:	4b0b      	ldr	r3, [pc, #44]	; (8020b30 <vPortSetupTimerInterrupt+0x38>)
 8020b04:	2200      	movs	r2, #0
 8020b06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8020b08:	4b0a      	ldr	r3, [pc, #40]	; (8020b34 <vPortSetupTimerInterrupt+0x3c>)
 8020b0a:	681b      	ldr	r3, [r3, #0]
 8020b0c:	4a0a      	ldr	r2, [pc, #40]	; (8020b38 <vPortSetupTimerInterrupt+0x40>)
 8020b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8020b12:	099b      	lsrs	r3, r3, #6
 8020b14:	4a09      	ldr	r2, [pc, #36]	; (8020b3c <vPortSetupTimerInterrupt+0x44>)
 8020b16:	3b01      	subs	r3, #1
 8020b18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8020b1a:	4b04      	ldr	r3, [pc, #16]	; (8020b2c <vPortSetupTimerInterrupt+0x34>)
 8020b1c:	2207      	movs	r2, #7
 8020b1e:	601a      	str	r2, [r3, #0]
}
 8020b20:	bf00      	nop
 8020b22:	46bd      	mov	sp, r7
 8020b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b28:	4770      	bx	lr
 8020b2a:	bf00      	nop
 8020b2c:	e000e010 	.word	0xe000e010
 8020b30:	e000e018 	.word	0xe000e018
 8020b34:	240000cc 	.word	0x240000cc
 8020b38:	10624dd3 	.word	0x10624dd3
 8020b3c:	e000e014 	.word	0xe000e014

08020b40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8020b40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8020b50 <vPortEnableVFP+0x10>
 8020b44:	6801      	ldr	r1, [r0, #0]
 8020b46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020b4a:	6001      	str	r1, [r0, #0]
 8020b4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8020b4e:	bf00      	nop
 8020b50:	e000ed88 	.word	0xe000ed88

08020b54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8020b54:	b480      	push	{r7}
 8020b56:	b085      	sub	sp, #20
 8020b58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8020b5a:	f3ef 8305 	mrs	r3, IPSR
 8020b5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8020b60:	68fb      	ldr	r3, [r7, #12]
 8020b62:	2b0f      	cmp	r3, #15
 8020b64:	d913      	bls.n	8020b8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8020b66:	4a16      	ldr	r2, [pc, #88]	; (8020bc0 <vPortValidateInterruptPriority+0x6c>)
 8020b68:	68fb      	ldr	r3, [r7, #12]
 8020b6a:	4413      	add	r3, r2
 8020b6c:	781b      	ldrb	r3, [r3, #0]
 8020b6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8020b70:	4b14      	ldr	r3, [pc, #80]	; (8020bc4 <vPortValidateInterruptPriority+0x70>)
 8020b72:	781b      	ldrb	r3, [r3, #0]
 8020b74:	7afa      	ldrb	r2, [r7, #11]
 8020b76:	429a      	cmp	r2, r3
 8020b78:	d209      	bcs.n	8020b8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8020b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b7e:	f383 8811 	msr	BASEPRI, r3
 8020b82:	f3bf 8f6f 	isb	sy
 8020b86:	f3bf 8f4f 	dsb	sy
 8020b8a:	607b      	str	r3, [r7, #4]
 8020b8c:	e7fe      	b.n	8020b8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8020b8e:	4b0e      	ldr	r3, [pc, #56]	; (8020bc8 <vPortValidateInterruptPriority+0x74>)
 8020b90:	681b      	ldr	r3, [r3, #0]
 8020b92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8020b96:	4b0d      	ldr	r3, [pc, #52]	; (8020bcc <vPortValidateInterruptPriority+0x78>)
 8020b98:	681b      	ldr	r3, [r3, #0]
 8020b9a:	429a      	cmp	r2, r3
 8020b9c:	d909      	bls.n	8020bb2 <vPortValidateInterruptPriority+0x5e>
 8020b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ba2:	f383 8811 	msr	BASEPRI, r3
 8020ba6:	f3bf 8f6f 	isb	sy
 8020baa:	f3bf 8f4f 	dsb	sy
 8020bae:	603b      	str	r3, [r7, #0]
 8020bb0:	e7fe      	b.n	8020bb0 <vPortValidateInterruptPriority+0x5c>
	}
 8020bb2:	bf00      	nop
 8020bb4:	3714      	adds	r7, #20
 8020bb6:	46bd      	mov	sp, r7
 8020bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bbc:	4770      	bx	lr
 8020bbe:	bf00      	nop
 8020bc0:	e000e3f0 	.word	0xe000e3f0
 8020bc4:	2400175c 	.word	0x2400175c
 8020bc8:	e000ed0c 	.word	0xe000ed0c
 8020bcc:	24001760 	.word	0x24001760

08020bd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8020bd0:	b580      	push	{r7, lr}
 8020bd2:	b08a      	sub	sp, #40	; 0x28
 8020bd4:	af00      	add	r7, sp, #0
 8020bd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8020bd8:	2300      	movs	r3, #0
 8020bda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8020bdc:	f7fe facc 	bl	801f178 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8020be0:	4b57      	ldr	r3, [pc, #348]	; (8020d40 <pvPortMalloc+0x170>)
 8020be2:	681b      	ldr	r3, [r3, #0]
 8020be4:	2b00      	cmp	r3, #0
 8020be6:	d101      	bne.n	8020bec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8020be8:	f000 f90c 	bl	8020e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8020bec:	4b55      	ldr	r3, [pc, #340]	; (8020d44 <pvPortMalloc+0x174>)
 8020bee:	681a      	ldr	r2, [r3, #0]
 8020bf0:	687b      	ldr	r3, [r7, #4]
 8020bf2:	4013      	ands	r3, r2
 8020bf4:	2b00      	cmp	r3, #0
 8020bf6:	f040 808c 	bne.w	8020d12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8020bfa:	687b      	ldr	r3, [r7, #4]
 8020bfc:	2b00      	cmp	r3, #0
 8020bfe:	d01c      	beq.n	8020c3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8020c00:	2208      	movs	r2, #8
 8020c02:	687b      	ldr	r3, [r7, #4]
 8020c04:	4413      	add	r3, r2
 8020c06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8020c08:	687b      	ldr	r3, [r7, #4]
 8020c0a:	f003 0307 	and.w	r3, r3, #7
 8020c0e:	2b00      	cmp	r3, #0
 8020c10:	d013      	beq.n	8020c3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8020c12:	687b      	ldr	r3, [r7, #4]
 8020c14:	f023 0307 	bic.w	r3, r3, #7
 8020c18:	3308      	adds	r3, #8
 8020c1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	f003 0307 	and.w	r3, r3, #7
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	d009      	beq.n	8020c3a <pvPortMalloc+0x6a>
 8020c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c2a:	f383 8811 	msr	BASEPRI, r3
 8020c2e:	f3bf 8f6f 	isb	sy
 8020c32:	f3bf 8f4f 	dsb	sy
 8020c36:	617b      	str	r3, [r7, #20]
 8020c38:	e7fe      	b.n	8020c38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8020c3a:	687b      	ldr	r3, [r7, #4]
 8020c3c:	2b00      	cmp	r3, #0
 8020c3e:	d068      	beq.n	8020d12 <pvPortMalloc+0x142>
 8020c40:	4b41      	ldr	r3, [pc, #260]	; (8020d48 <pvPortMalloc+0x178>)
 8020c42:	681b      	ldr	r3, [r3, #0]
 8020c44:	687a      	ldr	r2, [r7, #4]
 8020c46:	429a      	cmp	r2, r3
 8020c48:	d863      	bhi.n	8020d12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8020c4a:	4b40      	ldr	r3, [pc, #256]	; (8020d4c <pvPortMalloc+0x17c>)
 8020c4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8020c4e:	4b3f      	ldr	r3, [pc, #252]	; (8020d4c <pvPortMalloc+0x17c>)
 8020c50:	681b      	ldr	r3, [r3, #0]
 8020c52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8020c54:	e004      	b.n	8020c60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8020c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8020c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c5c:	681b      	ldr	r3, [r3, #0]
 8020c5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8020c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c62:	685b      	ldr	r3, [r3, #4]
 8020c64:	687a      	ldr	r2, [r7, #4]
 8020c66:	429a      	cmp	r2, r3
 8020c68:	d903      	bls.n	8020c72 <pvPortMalloc+0xa2>
 8020c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c6c:	681b      	ldr	r3, [r3, #0]
 8020c6e:	2b00      	cmp	r3, #0
 8020c70:	d1f1      	bne.n	8020c56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8020c72:	4b33      	ldr	r3, [pc, #204]	; (8020d40 <pvPortMalloc+0x170>)
 8020c74:	681b      	ldr	r3, [r3, #0]
 8020c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020c78:	429a      	cmp	r2, r3
 8020c7a:	d04a      	beq.n	8020d12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8020c7c:	6a3b      	ldr	r3, [r7, #32]
 8020c7e:	681b      	ldr	r3, [r3, #0]
 8020c80:	2208      	movs	r2, #8
 8020c82:	4413      	add	r3, r2
 8020c84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8020c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c88:	681a      	ldr	r2, [r3, #0]
 8020c8a:	6a3b      	ldr	r3, [r7, #32]
 8020c8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8020c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020c90:	685a      	ldr	r2, [r3, #4]
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	1ad2      	subs	r2, r2, r3
 8020c96:	2308      	movs	r3, #8
 8020c98:	005b      	lsls	r3, r3, #1
 8020c9a:	429a      	cmp	r2, r3
 8020c9c:	d91e      	bls.n	8020cdc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8020c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020ca0:	687b      	ldr	r3, [r7, #4]
 8020ca2:	4413      	add	r3, r2
 8020ca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8020ca6:	69bb      	ldr	r3, [r7, #24]
 8020ca8:	f003 0307 	and.w	r3, r3, #7
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	d009      	beq.n	8020cc4 <pvPortMalloc+0xf4>
 8020cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020cb4:	f383 8811 	msr	BASEPRI, r3
 8020cb8:	f3bf 8f6f 	isb	sy
 8020cbc:	f3bf 8f4f 	dsb	sy
 8020cc0:	613b      	str	r3, [r7, #16]
 8020cc2:	e7fe      	b.n	8020cc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8020cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cc6:	685a      	ldr	r2, [r3, #4]
 8020cc8:	687b      	ldr	r3, [r7, #4]
 8020cca:	1ad2      	subs	r2, r2, r3
 8020ccc:	69bb      	ldr	r3, [r7, #24]
 8020cce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8020cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020cd2:	687a      	ldr	r2, [r7, #4]
 8020cd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8020cd6:	69b8      	ldr	r0, [r7, #24]
 8020cd8:	f000 f8f6 	bl	8020ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8020cdc:	4b1a      	ldr	r3, [pc, #104]	; (8020d48 <pvPortMalloc+0x178>)
 8020cde:	681a      	ldr	r2, [r3, #0]
 8020ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020ce2:	685b      	ldr	r3, [r3, #4]
 8020ce4:	1ad3      	subs	r3, r2, r3
 8020ce6:	4a18      	ldr	r2, [pc, #96]	; (8020d48 <pvPortMalloc+0x178>)
 8020ce8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8020cea:	4b17      	ldr	r3, [pc, #92]	; (8020d48 <pvPortMalloc+0x178>)
 8020cec:	681a      	ldr	r2, [r3, #0]
 8020cee:	4b18      	ldr	r3, [pc, #96]	; (8020d50 <pvPortMalloc+0x180>)
 8020cf0:	681b      	ldr	r3, [r3, #0]
 8020cf2:	429a      	cmp	r2, r3
 8020cf4:	d203      	bcs.n	8020cfe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8020cf6:	4b14      	ldr	r3, [pc, #80]	; (8020d48 <pvPortMalloc+0x178>)
 8020cf8:	681b      	ldr	r3, [r3, #0]
 8020cfa:	4a15      	ldr	r2, [pc, #84]	; (8020d50 <pvPortMalloc+0x180>)
 8020cfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8020cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d00:	685a      	ldr	r2, [r3, #4]
 8020d02:	4b10      	ldr	r3, [pc, #64]	; (8020d44 <pvPortMalloc+0x174>)
 8020d04:	681b      	ldr	r3, [r3, #0]
 8020d06:	431a      	orrs	r2, r3
 8020d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8020d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d0e:	2200      	movs	r2, #0
 8020d10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8020d12:	f7fe fa3f 	bl	801f194 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8020d16:	69fb      	ldr	r3, [r7, #28]
 8020d18:	f003 0307 	and.w	r3, r3, #7
 8020d1c:	2b00      	cmp	r3, #0
 8020d1e:	d009      	beq.n	8020d34 <pvPortMalloc+0x164>
 8020d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d24:	f383 8811 	msr	BASEPRI, r3
 8020d28:	f3bf 8f6f 	isb	sy
 8020d2c:	f3bf 8f4f 	dsb	sy
 8020d30:	60fb      	str	r3, [r7, #12]
 8020d32:	e7fe      	b.n	8020d32 <pvPortMalloc+0x162>
	return pvReturn;
 8020d34:	69fb      	ldr	r3, [r7, #28]
}
 8020d36:	4618      	mov	r0, r3
 8020d38:	3728      	adds	r7, #40	; 0x28
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	bd80      	pop	{r7, pc}
 8020d3e:	bf00      	nop
 8020d40:	2400536c 	.word	0x2400536c
 8020d44:	24005378 	.word	0x24005378
 8020d48:	24005370 	.word	0x24005370
 8020d4c:	24005364 	.word	0x24005364
 8020d50:	24005374 	.word	0x24005374

08020d54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8020d54:	b580      	push	{r7, lr}
 8020d56:	b086      	sub	sp, #24
 8020d58:	af00      	add	r7, sp, #0
 8020d5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8020d5c:	687b      	ldr	r3, [r7, #4]
 8020d5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	2b00      	cmp	r3, #0
 8020d64:	d046      	beq.n	8020df4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8020d66:	2308      	movs	r3, #8
 8020d68:	425b      	negs	r3, r3
 8020d6a:	697a      	ldr	r2, [r7, #20]
 8020d6c:	4413      	add	r3, r2
 8020d6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8020d70:	697b      	ldr	r3, [r7, #20]
 8020d72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8020d74:	693b      	ldr	r3, [r7, #16]
 8020d76:	685a      	ldr	r2, [r3, #4]
 8020d78:	4b20      	ldr	r3, [pc, #128]	; (8020dfc <vPortFree+0xa8>)
 8020d7a:	681b      	ldr	r3, [r3, #0]
 8020d7c:	4013      	ands	r3, r2
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d109      	bne.n	8020d96 <vPortFree+0x42>
 8020d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d86:	f383 8811 	msr	BASEPRI, r3
 8020d8a:	f3bf 8f6f 	isb	sy
 8020d8e:	f3bf 8f4f 	dsb	sy
 8020d92:	60fb      	str	r3, [r7, #12]
 8020d94:	e7fe      	b.n	8020d94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8020d96:	693b      	ldr	r3, [r7, #16]
 8020d98:	681b      	ldr	r3, [r3, #0]
 8020d9a:	2b00      	cmp	r3, #0
 8020d9c:	d009      	beq.n	8020db2 <vPortFree+0x5e>
 8020d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020da2:	f383 8811 	msr	BASEPRI, r3
 8020da6:	f3bf 8f6f 	isb	sy
 8020daa:	f3bf 8f4f 	dsb	sy
 8020dae:	60bb      	str	r3, [r7, #8]
 8020db0:	e7fe      	b.n	8020db0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8020db2:	693b      	ldr	r3, [r7, #16]
 8020db4:	685a      	ldr	r2, [r3, #4]
 8020db6:	4b11      	ldr	r3, [pc, #68]	; (8020dfc <vPortFree+0xa8>)
 8020db8:	681b      	ldr	r3, [r3, #0]
 8020dba:	4013      	ands	r3, r2
 8020dbc:	2b00      	cmp	r3, #0
 8020dbe:	d019      	beq.n	8020df4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8020dc0:	693b      	ldr	r3, [r7, #16]
 8020dc2:	681b      	ldr	r3, [r3, #0]
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	d115      	bne.n	8020df4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8020dc8:	693b      	ldr	r3, [r7, #16]
 8020dca:	685a      	ldr	r2, [r3, #4]
 8020dcc:	4b0b      	ldr	r3, [pc, #44]	; (8020dfc <vPortFree+0xa8>)
 8020dce:	681b      	ldr	r3, [r3, #0]
 8020dd0:	43db      	mvns	r3, r3
 8020dd2:	401a      	ands	r2, r3
 8020dd4:	693b      	ldr	r3, [r7, #16]
 8020dd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8020dd8:	f7fe f9ce 	bl	801f178 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8020ddc:	693b      	ldr	r3, [r7, #16]
 8020dde:	685a      	ldr	r2, [r3, #4]
 8020de0:	4b07      	ldr	r3, [pc, #28]	; (8020e00 <vPortFree+0xac>)
 8020de2:	681b      	ldr	r3, [r3, #0]
 8020de4:	4413      	add	r3, r2
 8020de6:	4a06      	ldr	r2, [pc, #24]	; (8020e00 <vPortFree+0xac>)
 8020de8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8020dea:	6938      	ldr	r0, [r7, #16]
 8020dec:	f000 f86c 	bl	8020ec8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8020df0:	f7fe f9d0 	bl	801f194 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8020df4:	bf00      	nop
 8020df6:	3718      	adds	r7, #24
 8020df8:	46bd      	mov	sp, r7
 8020dfa:	bd80      	pop	{r7, pc}
 8020dfc:	24005378 	.word	0x24005378
 8020e00:	24005370 	.word	0x24005370

08020e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8020e04:	b480      	push	{r7}
 8020e06:	b085      	sub	sp, #20
 8020e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8020e0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8020e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8020e10:	4b27      	ldr	r3, [pc, #156]	; (8020eb0 <prvHeapInit+0xac>)
 8020e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8020e14:	68fb      	ldr	r3, [r7, #12]
 8020e16:	f003 0307 	and.w	r3, r3, #7
 8020e1a:	2b00      	cmp	r3, #0
 8020e1c:	d00c      	beq.n	8020e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8020e1e:	68fb      	ldr	r3, [r7, #12]
 8020e20:	3307      	adds	r3, #7
 8020e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8020e24:	68fb      	ldr	r3, [r7, #12]
 8020e26:	f023 0307 	bic.w	r3, r3, #7
 8020e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8020e2c:	68ba      	ldr	r2, [r7, #8]
 8020e2e:	68fb      	ldr	r3, [r7, #12]
 8020e30:	1ad3      	subs	r3, r2, r3
 8020e32:	4a1f      	ldr	r2, [pc, #124]	; (8020eb0 <prvHeapInit+0xac>)
 8020e34:	4413      	add	r3, r2
 8020e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8020e38:	68fb      	ldr	r3, [r7, #12]
 8020e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8020e3c:	4a1d      	ldr	r2, [pc, #116]	; (8020eb4 <prvHeapInit+0xb0>)
 8020e3e:	687b      	ldr	r3, [r7, #4]
 8020e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8020e42:	4b1c      	ldr	r3, [pc, #112]	; (8020eb4 <prvHeapInit+0xb0>)
 8020e44:	2200      	movs	r2, #0
 8020e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8020e48:	687b      	ldr	r3, [r7, #4]
 8020e4a:	68ba      	ldr	r2, [r7, #8]
 8020e4c:	4413      	add	r3, r2
 8020e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8020e50:	2208      	movs	r2, #8
 8020e52:	68fb      	ldr	r3, [r7, #12]
 8020e54:	1a9b      	subs	r3, r3, r2
 8020e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8020e58:	68fb      	ldr	r3, [r7, #12]
 8020e5a:	f023 0307 	bic.w	r3, r3, #7
 8020e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8020e60:	68fb      	ldr	r3, [r7, #12]
 8020e62:	4a15      	ldr	r2, [pc, #84]	; (8020eb8 <prvHeapInit+0xb4>)
 8020e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8020e66:	4b14      	ldr	r3, [pc, #80]	; (8020eb8 <prvHeapInit+0xb4>)
 8020e68:	681b      	ldr	r3, [r3, #0]
 8020e6a:	2200      	movs	r2, #0
 8020e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8020e6e:	4b12      	ldr	r3, [pc, #72]	; (8020eb8 <prvHeapInit+0xb4>)
 8020e70:	681b      	ldr	r3, [r3, #0]
 8020e72:	2200      	movs	r2, #0
 8020e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8020e76:	687b      	ldr	r3, [r7, #4]
 8020e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8020e7a:	683b      	ldr	r3, [r7, #0]
 8020e7c:	68fa      	ldr	r2, [r7, #12]
 8020e7e:	1ad2      	subs	r2, r2, r3
 8020e80:	683b      	ldr	r3, [r7, #0]
 8020e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8020e84:	4b0c      	ldr	r3, [pc, #48]	; (8020eb8 <prvHeapInit+0xb4>)
 8020e86:	681a      	ldr	r2, [r3, #0]
 8020e88:	683b      	ldr	r3, [r7, #0]
 8020e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8020e8c:	683b      	ldr	r3, [r7, #0]
 8020e8e:	685b      	ldr	r3, [r3, #4]
 8020e90:	4a0a      	ldr	r2, [pc, #40]	; (8020ebc <prvHeapInit+0xb8>)
 8020e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8020e94:	683b      	ldr	r3, [r7, #0]
 8020e96:	685b      	ldr	r3, [r3, #4]
 8020e98:	4a09      	ldr	r2, [pc, #36]	; (8020ec0 <prvHeapInit+0xbc>)
 8020e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8020e9c:	4b09      	ldr	r3, [pc, #36]	; (8020ec4 <prvHeapInit+0xc0>)
 8020e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8020ea2:	601a      	str	r2, [r3, #0]
}
 8020ea4:	bf00      	nop
 8020ea6:	3714      	adds	r7, #20
 8020ea8:	46bd      	mov	sp, r7
 8020eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eae:	4770      	bx	lr
 8020eb0:	24001764 	.word	0x24001764
 8020eb4:	24005364 	.word	0x24005364
 8020eb8:	2400536c 	.word	0x2400536c
 8020ebc:	24005374 	.word	0x24005374
 8020ec0:	24005370 	.word	0x24005370
 8020ec4:	24005378 	.word	0x24005378

08020ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8020ec8:	b480      	push	{r7}
 8020eca:	b085      	sub	sp, #20
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8020ed0:	4b28      	ldr	r3, [pc, #160]	; (8020f74 <prvInsertBlockIntoFreeList+0xac>)
 8020ed2:	60fb      	str	r3, [r7, #12]
 8020ed4:	e002      	b.n	8020edc <prvInsertBlockIntoFreeList+0x14>
 8020ed6:	68fb      	ldr	r3, [r7, #12]
 8020ed8:	681b      	ldr	r3, [r3, #0]
 8020eda:	60fb      	str	r3, [r7, #12]
 8020edc:	68fb      	ldr	r3, [r7, #12]
 8020ede:	681b      	ldr	r3, [r3, #0]
 8020ee0:	687a      	ldr	r2, [r7, #4]
 8020ee2:	429a      	cmp	r2, r3
 8020ee4:	d8f7      	bhi.n	8020ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8020ee6:	68fb      	ldr	r3, [r7, #12]
 8020ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8020eea:	68fb      	ldr	r3, [r7, #12]
 8020eec:	685b      	ldr	r3, [r3, #4]
 8020eee:	68ba      	ldr	r2, [r7, #8]
 8020ef0:	4413      	add	r3, r2
 8020ef2:	687a      	ldr	r2, [r7, #4]
 8020ef4:	429a      	cmp	r2, r3
 8020ef6:	d108      	bne.n	8020f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8020ef8:	68fb      	ldr	r3, [r7, #12]
 8020efa:	685a      	ldr	r2, [r3, #4]
 8020efc:	687b      	ldr	r3, [r7, #4]
 8020efe:	685b      	ldr	r3, [r3, #4]
 8020f00:	441a      	add	r2, r3
 8020f02:	68fb      	ldr	r3, [r7, #12]
 8020f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8020f06:	68fb      	ldr	r3, [r7, #12]
 8020f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8020f0a:	687b      	ldr	r3, [r7, #4]
 8020f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8020f0e:	687b      	ldr	r3, [r7, #4]
 8020f10:	685b      	ldr	r3, [r3, #4]
 8020f12:	68ba      	ldr	r2, [r7, #8]
 8020f14:	441a      	add	r2, r3
 8020f16:	68fb      	ldr	r3, [r7, #12]
 8020f18:	681b      	ldr	r3, [r3, #0]
 8020f1a:	429a      	cmp	r2, r3
 8020f1c:	d118      	bne.n	8020f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8020f1e:	68fb      	ldr	r3, [r7, #12]
 8020f20:	681a      	ldr	r2, [r3, #0]
 8020f22:	4b15      	ldr	r3, [pc, #84]	; (8020f78 <prvInsertBlockIntoFreeList+0xb0>)
 8020f24:	681b      	ldr	r3, [r3, #0]
 8020f26:	429a      	cmp	r2, r3
 8020f28:	d00d      	beq.n	8020f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8020f2a:	687b      	ldr	r3, [r7, #4]
 8020f2c:	685a      	ldr	r2, [r3, #4]
 8020f2e:	68fb      	ldr	r3, [r7, #12]
 8020f30:	681b      	ldr	r3, [r3, #0]
 8020f32:	685b      	ldr	r3, [r3, #4]
 8020f34:	441a      	add	r2, r3
 8020f36:	687b      	ldr	r3, [r7, #4]
 8020f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8020f3a:	68fb      	ldr	r3, [r7, #12]
 8020f3c:	681b      	ldr	r3, [r3, #0]
 8020f3e:	681a      	ldr	r2, [r3, #0]
 8020f40:	687b      	ldr	r3, [r7, #4]
 8020f42:	601a      	str	r2, [r3, #0]
 8020f44:	e008      	b.n	8020f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8020f46:	4b0c      	ldr	r3, [pc, #48]	; (8020f78 <prvInsertBlockIntoFreeList+0xb0>)
 8020f48:	681a      	ldr	r2, [r3, #0]
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	601a      	str	r2, [r3, #0]
 8020f4e:	e003      	b.n	8020f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8020f50:	68fb      	ldr	r3, [r7, #12]
 8020f52:	681a      	ldr	r2, [r3, #0]
 8020f54:	687b      	ldr	r3, [r7, #4]
 8020f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8020f58:	68fa      	ldr	r2, [r7, #12]
 8020f5a:	687b      	ldr	r3, [r7, #4]
 8020f5c:	429a      	cmp	r2, r3
 8020f5e:	d002      	beq.n	8020f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8020f60:	68fb      	ldr	r3, [r7, #12]
 8020f62:	687a      	ldr	r2, [r7, #4]
 8020f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8020f66:	bf00      	nop
 8020f68:	3714      	adds	r7, #20
 8020f6a:	46bd      	mov	sp, r7
 8020f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f70:	4770      	bx	lr
 8020f72:	bf00      	nop
 8020f74:	24005364 	.word	0x24005364
 8020f78:	2400536c 	.word	0x2400536c

08020f7c <cosf>:
 8020f7c:	ee10 3a10 	vmov	r3, s0
 8020f80:	b507      	push	{r0, r1, r2, lr}
 8020f82:	4a1c      	ldr	r2, [pc, #112]	; (8020ff4 <cosf+0x78>)
 8020f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020f88:	4293      	cmp	r3, r2
 8020f8a:	dc04      	bgt.n	8020f96 <cosf+0x1a>
 8020f8c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8020ff8 <cosf+0x7c>
 8020f90:	f000 fbe0 	bl	8021754 <__kernel_cosf>
 8020f94:	e004      	b.n	8020fa0 <cosf+0x24>
 8020f96:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8020f9a:	db04      	blt.n	8020fa6 <cosf+0x2a>
 8020f9c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8020fa0:	b003      	add	sp, #12
 8020fa2:	f85d fb04 	ldr.w	pc, [sp], #4
 8020fa6:	4668      	mov	r0, sp
 8020fa8:	f000 faa4 	bl	80214f4 <__ieee754_rem_pio2f>
 8020fac:	f000 0003 	and.w	r0, r0, #3
 8020fb0:	2801      	cmp	r0, #1
 8020fb2:	d007      	beq.n	8020fc4 <cosf+0x48>
 8020fb4:	2802      	cmp	r0, #2
 8020fb6:	d00e      	beq.n	8020fd6 <cosf+0x5a>
 8020fb8:	b9a0      	cbnz	r0, 8020fe4 <cosf+0x68>
 8020fba:	eddd 0a01 	vldr	s1, [sp, #4]
 8020fbe:	ed9d 0a00 	vldr	s0, [sp]
 8020fc2:	e7e5      	b.n	8020f90 <cosf+0x14>
 8020fc4:	eddd 0a01 	vldr	s1, [sp, #4]
 8020fc8:	ed9d 0a00 	vldr	s0, [sp]
 8020fcc:	f000 fea2 	bl	8021d14 <__kernel_sinf>
 8020fd0:	eeb1 0a40 	vneg.f32	s0, s0
 8020fd4:	e7e4      	b.n	8020fa0 <cosf+0x24>
 8020fd6:	eddd 0a01 	vldr	s1, [sp, #4]
 8020fda:	ed9d 0a00 	vldr	s0, [sp]
 8020fde:	f000 fbb9 	bl	8021754 <__kernel_cosf>
 8020fe2:	e7f5      	b.n	8020fd0 <cosf+0x54>
 8020fe4:	2001      	movs	r0, #1
 8020fe6:	eddd 0a01 	vldr	s1, [sp, #4]
 8020fea:	ed9d 0a00 	vldr	s0, [sp]
 8020fee:	f000 fe91 	bl	8021d14 <__kernel_sinf>
 8020ff2:	e7d5      	b.n	8020fa0 <cosf+0x24>
 8020ff4:	3f490fd8 	.word	0x3f490fd8
 8020ff8:	00000000 	.word	0x00000000

08020ffc <sinf>:
 8020ffc:	ee10 3a10 	vmov	r3, s0
 8021000:	b507      	push	{r0, r1, r2, lr}
 8021002:	4a1d      	ldr	r2, [pc, #116]	; (8021078 <sinf+0x7c>)
 8021004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021008:	4293      	cmp	r3, r2
 802100a:	dc05      	bgt.n	8021018 <sinf+0x1c>
 802100c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 802107c <sinf+0x80>
 8021010:	2000      	movs	r0, #0
 8021012:	f000 fe7f 	bl	8021d14 <__kernel_sinf>
 8021016:	e004      	b.n	8021022 <sinf+0x26>
 8021018:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802101c:	db04      	blt.n	8021028 <sinf+0x2c>
 802101e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8021022:	b003      	add	sp, #12
 8021024:	f85d fb04 	ldr.w	pc, [sp], #4
 8021028:	4668      	mov	r0, sp
 802102a:	f000 fa63 	bl	80214f4 <__ieee754_rem_pio2f>
 802102e:	f000 0003 	and.w	r0, r0, #3
 8021032:	2801      	cmp	r0, #1
 8021034:	d008      	beq.n	8021048 <sinf+0x4c>
 8021036:	2802      	cmp	r0, #2
 8021038:	d00d      	beq.n	8021056 <sinf+0x5a>
 802103a:	b9b0      	cbnz	r0, 802106a <sinf+0x6e>
 802103c:	2001      	movs	r0, #1
 802103e:	eddd 0a01 	vldr	s1, [sp, #4]
 8021042:	ed9d 0a00 	vldr	s0, [sp]
 8021046:	e7e4      	b.n	8021012 <sinf+0x16>
 8021048:	eddd 0a01 	vldr	s1, [sp, #4]
 802104c:	ed9d 0a00 	vldr	s0, [sp]
 8021050:	f000 fb80 	bl	8021754 <__kernel_cosf>
 8021054:	e7e5      	b.n	8021022 <sinf+0x26>
 8021056:	2001      	movs	r0, #1
 8021058:	eddd 0a01 	vldr	s1, [sp, #4]
 802105c:	ed9d 0a00 	vldr	s0, [sp]
 8021060:	f000 fe58 	bl	8021d14 <__kernel_sinf>
 8021064:	eeb1 0a40 	vneg.f32	s0, s0
 8021068:	e7db      	b.n	8021022 <sinf+0x26>
 802106a:	eddd 0a01 	vldr	s1, [sp, #4]
 802106e:	ed9d 0a00 	vldr	s0, [sp]
 8021072:	f000 fb6f 	bl	8021754 <__kernel_cosf>
 8021076:	e7f5      	b.n	8021064 <sinf+0x68>
 8021078:	3f490fd8 	.word	0x3f490fd8
 802107c:	00000000 	.word	0x00000000

08021080 <asinf>:
 8021080:	b510      	push	{r4, lr}
 8021082:	ed2d 8b02 	vpush	{d8}
 8021086:	4c25      	ldr	r4, [pc, #148]	; (802111c <asinf+0x9c>)
 8021088:	b08a      	sub	sp, #40	; 0x28
 802108a:	eeb0 8a40 	vmov.f32	s16, s0
 802108e:	f000 f89f 	bl	80211d0 <__ieee754_asinf>
 8021092:	f994 3000 	ldrsb.w	r3, [r4]
 8021096:	3301      	adds	r3, #1
 8021098:	eef0 8a40 	vmov.f32	s17, s0
 802109c:	d038      	beq.n	8021110 <asinf+0x90>
 802109e:	eeb4 8a48 	vcmp.f32	s16, s16
 80210a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210a6:	d633      	bvs.n	8021110 <asinf+0x90>
 80210a8:	eeb0 0a48 	vmov.f32	s0, s16
 80210ac:	f000 ff56 	bl	8021f5c <fabsf>
 80210b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80210b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80210b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210bc:	dd28      	ble.n	8021110 <asinf+0x90>
 80210be:	2301      	movs	r3, #1
 80210c0:	9300      	str	r3, [sp, #0]
 80210c2:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 80210c6:	4b16      	ldr	r3, [pc, #88]	; (8021120 <asinf+0xa0>)
 80210c8:	9301      	str	r3, [sp, #4]
 80210ca:	4816      	ldr	r0, [pc, #88]	; (8021124 <asinf+0xa4>)
 80210cc:	2300      	movs	r3, #0
 80210ce:	9308      	str	r3, [sp, #32]
 80210d0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80210d4:	ed8d 8b02 	vstr	d8, [sp, #8]
 80210d8:	f000 fe66 	bl	8021da8 <nan>
 80210dc:	f994 3000 	ldrsb.w	r3, [r4]
 80210e0:	2b02      	cmp	r3, #2
 80210e2:	ed8d 0b06 	vstr	d0, [sp, #24]
 80210e6:	d104      	bne.n	80210f2 <asinf+0x72>
 80210e8:	f001 f80c 	bl	8022104 <__errno>
 80210ec:	2321      	movs	r3, #33	; 0x21
 80210ee:	6003      	str	r3, [r0, #0]
 80210f0:	e004      	b.n	80210fc <asinf+0x7c>
 80210f2:	4668      	mov	r0, sp
 80210f4:	f000 fe56 	bl	8021da4 <matherr>
 80210f8:	2800      	cmp	r0, #0
 80210fa:	d0f5      	beq.n	80210e8 <asinf+0x68>
 80210fc:	9b08      	ldr	r3, [sp, #32]
 80210fe:	b11b      	cbz	r3, 8021108 <asinf+0x88>
 8021100:	f001 f800 	bl	8022104 <__errno>
 8021104:	9b08      	ldr	r3, [sp, #32]
 8021106:	6003      	str	r3, [r0, #0]
 8021108:	ed9d 0b06 	vldr	d0, [sp, #24]
 802110c:	eef7 8bc0 	vcvt.f32.f64	s17, d0
 8021110:	eeb0 0a68 	vmov.f32	s0, s17
 8021114:	b00a      	add	sp, #40	; 0x28
 8021116:	ecbd 8b02 	vpop	{d8}
 802111a:	bd10      	pop	{r4, pc}
 802111c:	240000e0 	.word	0x240000e0
 8021120:	08023c44 	.word	0x08023c44
 8021124:	0802407b 	.word	0x0802407b

08021128 <atan2f>:
 8021128:	f000 b93a 	b.w	80213a0 <__ieee754_atan2f>
 802112c:	0000      	movs	r0, r0
	...

08021130 <sqrtf>:
 8021130:	b500      	push	{lr}
 8021132:	ed2d 8b02 	vpush	{d8}
 8021136:	b08b      	sub	sp, #44	; 0x2c
 8021138:	eeb0 8a40 	vmov.f32	s16, s0
 802113c:	f000 fb06 	bl	802174c <__ieee754_sqrtf>
 8021140:	4b21      	ldr	r3, [pc, #132]	; (80211c8 <sqrtf+0x98>)
 8021142:	f993 3000 	ldrsb.w	r3, [r3]
 8021146:	1c5a      	adds	r2, r3, #1
 8021148:	d028      	beq.n	802119c <sqrtf+0x6c>
 802114a:	eeb4 8a48 	vcmp.f32	s16, s16
 802114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021152:	d623      	bvs.n	802119c <sqrtf+0x6c>
 8021154:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8021158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802115c:	d51e      	bpl.n	802119c <sqrtf+0x6c>
 802115e:	2201      	movs	r2, #1
 8021160:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8021164:	9200      	str	r2, [sp, #0]
 8021166:	4a19      	ldr	r2, [pc, #100]	; (80211cc <sqrtf+0x9c>)
 8021168:	9201      	str	r2, [sp, #4]
 802116a:	2200      	movs	r2, #0
 802116c:	9208      	str	r2, [sp, #32]
 802116e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8021172:	ed8d 8b02 	vstr	d8, [sp, #8]
 8021176:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80211c0 <sqrtf+0x90>
 802117a:	b9a3      	cbnz	r3, 80211a6 <sqrtf+0x76>
 802117c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021180:	4668      	mov	r0, sp
 8021182:	f000 fe0f 	bl	8021da4 <matherr>
 8021186:	b1a0      	cbz	r0, 80211b2 <sqrtf+0x82>
 8021188:	9b08      	ldr	r3, [sp, #32]
 802118a:	b11b      	cbz	r3, 8021194 <sqrtf+0x64>
 802118c:	f000 ffba 	bl	8022104 <__errno>
 8021190:	9b08      	ldr	r3, [sp, #32]
 8021192:	6003      	str	r3, [r0, #0]
 8021194:	ed9d 0b06 	vldr	d0, [sp, #24]
 8021198:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802119c:	b00b      	add	sp, #44	; 0x2c
 802119e:	ecbd 8b02 	vpop	{d8}
 80211a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80211a6:	2b02      	cmp	r3, #2
 80211a8:	ee87 6b07 	vdiv.f64	d6, d7, d7
 80211ac:	ed8d 6b06 	vstr	d6, [sp, #24]
 80211b0:	d1e6      	bne.n	8021180 <sqrtf+0x50>
 80211b2:	f000 ffa7 	bl	8022104 <__errno>
 80211b6:	2321      	movs	r3, #33	; 0x21
 80211b8:	6003      	str	r3, [r0, #0]
 80211ba:	e7e5      	b.n	8021188 <sqrtf+0x58>
 80211bc:	f3af 8000 	nop.w
	...
 80211c8:	240000e0 	.word	0x240000e0
 80211cc:	08023c4a 	.word	0x08023c4a

080211d0 <__ieee754_asinf>:
 80211d0:	b538      	push	{r3, r4, r5, lr}
 80211d2:	ee10 5a10 	vmov	r5, s0
 80211d6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80211da:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80211de:	ed2d 8b04 	vpush	{d8-d9}
 80211e2:	d10c      	bne.n	80211fe <__ieee754_asinf+0x2e>
 80211e4:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8021360 <__ieee754_asinf+0x190>
 80211e8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8021364 <__ieee754_asinf+0x194>
 80211ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 80211f0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80211f4:	eeb0 0a67 	vmov.f32	s0, s15
 80211f8:	ecbd 8b04 	vpop	{d8-d9}
 80211fc:	bd38      	pop	{r3, r4, r5, pc}
 80211fe:	dd04      	ble.n	802120a <__ieee754_asinf+0x3a>
 8021200:	ee70 7a40 	vsub.f32	s15, s0, s0
 8021204:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8021208:	e7f6      	b.n	80211f8 <__ieee754_asinf+0x28>
 802120a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 802120e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8021212:	da0b      	bge.n	802122c <__ieee754_asinf+0x5c>
 8021214:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8021218:	da52      	bge.n	80212c0 <__ieee754_asinf+0xf0>
 802121a:	eddf 7a53 	vldr	s15, [pc, #332]	; 8021368 <__ieee754_asinf+0x198>
 802121e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8021222:	eef4 7ae8 	vcmpe.f32	s15, s17
 8021226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802122a:	dce5      	bgt.n	80211f8 <__ieee754_asinf+0x28>
 802122c:	f000 fe96 	bl	8021f5c <fabsf>
 8021230:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8021234:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8021238:	ee20 8a08 	vmul.f32	s16, s0, s16
 802123c:	eddf 7a4b 	vldr	s15, [pc, #300]	; 802136c <__ieee754_asinf+0x19c>
 8021240:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8021370 <__ieee754_asinf+0x1a0>
 8021244:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8021374 <__ieee754_asinf+0x1a4>
 8021248:	eea8 7a27 	vfma.f32	s14, s16, s15
 802124c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8021378 <__ieee754_asinf+0x1a8>
 8021250:	eee7 7a08 	vfma.f32	s15, s14, s16
 8021254:	ed9f 7a49 	vldr	s14, [pc, #292]	; 802137c <__ieee754_asinf+0x1ac>
 8021258:	eea7 7a88 	vfma.f32	s14, s15, s16
 802125c:	eddf 7a48 	vldr	s15, [pc, #288]	; 8021380 <__ieee754_asinf+0x1b0>
 8021260:	eee7 7a08 	vfma.f32	s15, s14, s16
 8021264:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8021384 <__ieee754_asinf+0x1b4>
 8021268:	eea7 9a88 	vfma.f32	s18, s15, s16
 802126c:	eddf 7a46 	vldr	s15, [pc, #280]	; 8021388 <__ieee754_asinf+0x1b8>
 8021270:	eee8 7a07 	vfma.f32	s15, s16, s14
 8021274:	ed9f 7a45 	vldr	s14, [pc, #276]	; 802138c <__ieee754_asinf+0x1bc>
 8021278:	eea7 7a88 	vfma.f32	s14, s15, s16
 802127c:	eddf 7a44 	vldr	s15, [pc, #272]	; 8021390 <__ieee754_asinf+0x1c0>
 8021280:	eee7 7a08 	vfma.f32	s15, s14, s16
 8021284:	eeb0 0a48 	vmov.f32	s0, s16
 8021288:	eee7 8a88 	vfma.f32	s17, s15, s16
 802128c:	f000 fa5e 	bl	802174c <__ieee754_sqrtf>
 8021290:	4b40      	ldr	r3, [pc, #256]	; (8021394 <__ieee754_asinf+0x1c4>)
 8021292:	ee29 9a08 	vmul.f32	s18, s18, s16
 8021296:	429c      	cmp	r4, r3
 8021298:	ee89 6a28 	vdiv.f32	s12, s18, s17
 802129c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80212a0:	dd3d      	ble.n	802131e <__ieee754_asinf+0x14e>
 80212a2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80212a6:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8021398 <__ieee754_asinf+0x1c8>
 80212aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80212ae:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8021364 <__ieee754_asinf+0x194>
 80212b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80212b6:	2d00      	cmp	r5, #0
 80212b8:	bfd8      	it	le
 80212ba:	eeb1 0a40 	vnegle.f32	s0, s0
 80212be:	e79b      	b.n	80211f8 <__ieee754_asinf+0x28>
 80212c0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80212c4:	eddf 6a29 	vldr	s13, [pc, #164]	; 802136c <__ieee754_asinf+0x19c>
 80212c8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8021370 <__ieee754_asinf+0x1a0>
 80212cc:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8021384 <__ieee754_asinf+0x1b4>
 80212d0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80212d4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8021378 <__ieee754_asinf+0x1a8>
 80212d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80212dc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 802137c <__ieee754_asinf+0x1ac>
 80212e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80212e4:	eddf 6a26 	vldr	s13, [pc, #152]	; 8021380 <__ieee754_asinf+0x1b0>
 80212e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80212ec:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8021374 <__ieee754_asinf+0x1a4>
 80212f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80212f4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8021388 <__ieee754_asinf+0x1b8>
 80212f8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80212fc:	ed9f 6a23 	vldr	s12, [pc, #140]	; 802138c <__ieee754_asinf+0x1bc>
 8021300:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8021304:	eddf 6a22 	vldr	s13, [pc, #136]	; 8021390 <__ieee754_asinf+0x1c0>
 8021308:	eee6 6a27 	vfma.f32	s13, s12, s15
 802130c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8021310:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8021314:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8021318:	eea0 0a27 	vfma.f32	s0, s0, s15
 802131c:	e76c      	b.n	80211f8 <__ieee754_asinf+0x28>
 802131e:	ee10 3a10 	vmov	r3, s0
 8021322:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8021326:	f023 030f 	bic.w	r3, r3, #15
 802132a:	ee07 3a90 	vmov	s15, r3
 802132e:	eef1 6a67 	vneg.f32	s13, s15
 8021332:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8021336:	ee70 5a00 	vadd.f32	s11, s0, s0
 802133a:	ee37 0a80 	vadd.f32	s0, s15, s0
 802133e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8021360 <__ieee754_asinf+0x190>
 8021342:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8021346:	ed9f 0a15 	vldr	s0, [pc, #84]	; 802139c <__ieee754_asinf+0x1cc>
 802134a:	eee5 7a47 	vfms.f32	s15, s10, s14
 802134e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8021352:	eeb0 6a40 	vmov.f32	s12, s0
 8021356:	eea6 6a87 	vfma.f32	s12, s13, s14
 802135a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 802135e:	e7a8      	b.n	80212b2 <__ieee754_asinf+0xe2>
 8021360:	b33bbd2e 	.word	0xb33bbd2e
 8021364:	3fc90fdb 	.word	0x3fc90fdb
 8021368:	7149f2ca 	.word	0x7149f2ca
 802136c:	3811ef08 	.word	0x3811ef08
 8021370:	3a4f7f04 	.word	0x3a4f7f04
 8021374:	3e2aaaab 	.word	0x3e2aaaab
 8021378:	bd241146 	.word	0xbd241146
 802137c:	3e4e0aa8 	.word	0x3e4e0aa8
 8021380:	bea6b090 	.word	0xbea6b090
 8021384:	3d9dc62e 	.word	0x3d9dc62e
 8021388:	bf303361 	.word	0xbf303361
 802138c:	4001572d 	.word	0x4001572d
 8021390:	c019d139 	.word	0xc019d139
 8021394:	3f799999 	.word	0x3f799999
 8021398:	333bbd2e 	.word	0x333bbd2e
 802139c:	3f490fdb 	.word	0x3f490fdb

080213a0 <__ieee754_atan2f>:
 80213a0:	ee10 2a90 	vmov	r2, s1
 80213a4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80213a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80213ac:	b510      	push	{r4, lr}
 80213ae:	eef0 7a40 	vmov.f32	s15, s0
 80213b2:	dc06      	bgt.n	80213c2 <__ieee754_atan2f+0x22>
 80213b4:	ee10 0a10 	vmov	r0, s0
 80213b8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80213bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80213c0:	dd04      	ble.n	80213cc <__ieee754_atan2f+0x2c>
 80213c2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80213c6:	eeb0 0a67 	vmov.f32	s0, s15
 80213ca:	bd10      	pop	{r4, pc}
 80213cc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80213d0:	d103      	bne.n	80213da <__ieee754_atan2f+0x3a>
 80213d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80213d6:	f000 bcef 	b.w	8021db8 <atanf>
 80213da:	1794      	asrs	r4, r2, #30
 80213dc:	f004 0402 	and.w	r4, r4, #2
 80213e0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80213e4:	b93b      	cbnz	r3, 80213f6 <__ieee754_atan2f+0x56>
 80213e6:	2c02      	cmp	r4, #2
 80213e8:	d06b      	beq.n	80214c2 <__ieee754_atan2f+0x122>
 80213ea:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80214c8 <__ieee754_atan2f+0x128>
 80213ee:	2c03      	cmp	r4, #3
 80213f0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80213f4:	e7e7      	b.n	80213c6 <__ieee754_atan2f+0x26>
 80213f6:	b939      	cbnz	r1, 8021408 <__ieee754_atan2f+0x68>
 80213f8:	eddf 7a34 	vldr	s15, [pc, #208]	; 80214cc <__ieee754_atan2f+0x12c>
 80213fc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80214d0 <__ieee754_atan2f+0x130>
 8021400:	2800      	cmp	r0, #0
 8021402:	fe67 7a87 	vselge.f32	s15, s15, s14
 8021406:	e7de      	b.n	80213c6 <__ieee754_atan2f+0x26>
 8021408:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802140c:	d121      	bne.n	8021452 <__ieee754_atan2f+0xb2>
 802140e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021412:	d111      	bne.n	8021438 <__ieee754_atan2f+0x98>
 8021414:	2c02      	cmp	r4, #2
 8021416:	d009      	beq.n	802142c <__ieee754_atan2f+0x8c>
 8021418:	2c03      	cmp	r4, #3
 802141a:	d00a      	beq.n	8021432 <__ieee754_atan2f+0x92>
 802141c:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80214d4 <__ieee754_atan2f+0x134>
 8021420:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80214d8 <__ieee754_atan2f+0x138>
 8021424:	2c01      	cmp	r4, #1
 8021426:	fe47 7a87 	vseleq.f32	s15, s15, s14
 802142a:	e7cc      	b.n	80213c6 <__ieee754_atan2f+0x26>
 802142c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80214dc <__ieee754_atan2f+0x13c>
 8021430:	e7c9      	b.n	80213c6 <__ieee754_atan2f+0x26>
 8021432:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80214e0 <__ieee754_atan2f+0x140>
 8021436:	e7c6      	b.n	80213c6 <__ieee754_atan2f+0x26>
 8021438:	2c02      	cmp	r4, #2
 802143a:	d042      	beq.n	80214c2 <__ieee754_atan2f+0x122>
 802143c:	2c03      	cmp	r4, #3
 802143e:	d005      	beq.n	802144c <__ieee754_atan2f+0xac>
 8021440:	2c01      	cmp	r4, #1
 8021442:	eddf 7a28 	vldr	s15, [pc, #160]	; 80214e4 <__ieee754_atan2f+0x144>
 8021446:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80214e8 <__ieee754_atan2f+0x148>
 802144a:	e7ec      	b.n	8021426 <__ieee754_atan2f+0x86>
 802144c:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80214c8 <__ieee754_atan2f+0x128>
 8021450:	e7b9      	b.n	80213c6 <__ieee754_atan2f+0x26>
 8021452:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021456:	d0cf      	beq.n	80213f8 <__ieee754_atan2f+0x58>
 8021458:	1a5b      	subs	r3, r3, r1
 802145a:	15db      	asrs	r3, r3, #23
 802145c:	2b3c      	cmp	r3, #60	; 0x3c
 802145e:	dc1a      	bgt.n	8021496 <__ieee754_atan2f+0xf6>
 8021460:	2a00      	cmp	r2, #0
 8021462:	da01      	bge.n	8021468 <__ieee754_atan2f+0xc8>
 8021464:	333c      	adds	r3, #60	; 0x3c
 8021466:	db19      	blt.n	802149c <__ieee754_atan2f+0xfc>
 8021468:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802146c:	f000 fd76 	bl	8021f5c <fabsf>
 8021470:	f000 fca2 	bl	8021db8 <atanf>
 8021474:	eef0 7a40 	vmov.f32	s15, s0
 8021478:	2c01      	cmp	r4, #1
 802147a:	d012      	beq.n	80214a2 <__ieee754_atan2f+0x102>
 802147c:	2c02      	cmp	r4, #2
 802147e:	d017      	beq.n	80214b0 <__ieee754_atan2f+0x110>
 8021480:	2c00      	cmp	r4, #0
 8021482:	d0a0      	beq.n	80213c6 <__ieee754_atan2f+0x26>
 8021484:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80214ec <__ieee754_atan2f+0x14c>
 8021488:	ee77 7a87 	vadd.f32	s15, s15, s14
 802148c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80214f0 <__ieee754_atan2f+0x150>
 8021490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021494:	e797      	b.n	80213c6 <__ieee754_atan2f+0x26>
 8021496:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80214cc <__ieee754_atan2f+0x12c>
 802149a:	e7ed      	b.n	8021478 <__ieee754_atan2f+0xd8>
 802149c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80214e8 <__ieee754_atan2f+0x148>
 80214a0:	e7ea      	b.n	8021478 <__ieee754_atan2f+0xd8>
 80214a2:	ee17 3a90 	vmov	r3, s15
 80214a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80214aa:	ee07 3a90 	vmov	s15, r3
 80214ae:	e78a      	b.n	80213c6 <__ieee754_atan2f+0x26>
 80214b0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80214ec <__ieee754_atan2f+0x14c>
 80214b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80214b8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80214f0 <__ieee754_atan2f+0x150>
 80214bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80214c0:	e781      	b.n	80213c6 <__ieee754_atan2f+0x26>
 80214c2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80214f0 <__ieee754_atan2f+0x150>
 80214c6:	e77e      	b.n	80213c6 <__ieee754_atan2f+0x26>
 80214c8:	c0490fdb 	.word	0xc0490fdb
 80214cc:	3fc90fdb 	.word	0x3fc90fdb
 80214d0:	bfc90fdb 	.word	0xbfc90fdb
 80214d4:	bf490fdb 	.word	0xbf490fdb
 80214d8:	3f490fdb 	.word	0x3f490fdb
 80214dc:	4016cbe4 	.word	0x4016cbe4
 80214e0:	c016cbe4 	.word	0xc016cbe4
 80214e4:	80000000 	.word	0x80000000
 80214e8:	00000000 	.word	0x00000000
 80214ec:	33bbbd2e 	.word	0x33bbbd2e
 80214f0:	40490fdb 	.word	0x40490fdb

080214f4 <__ieee754_rem_pio2f>:
 80214f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214f6:	ee10 6a10 	vmov	r6, s0
 80214fa:	4b86      	ldr	r3, [pc, #536]	; (8021714 <__ieee754_rem_pio2f+0x220>)
 80214fc:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8021500:	429c      	cmp	r4, r3
 8021502:	b087      	sub	sp, #28
 8021504:	4605      	mov	r5, r0
 8021506:	dc05      	bgt.n	8021514 <__ieee754_rem_pio2f+0x20>
 8021508:	2300      	movs	r3, #0
 802150a:	ed85 0a00 	vstr	s0, [r5]
 802150e:	6043      	str	r3, [r0, #4]
 8021510:	2000      	movs	r0, #0
 8021512:	e020      	b.n	8021556 <__ieee754_rem_pio2f+0x62>
 8021514:	4b80      	ldr	r3, [pc, #512]	; (8021718 <__ieee754_rem_pio2f+0x224>)
 8021516:	429c      	cmp	r4, r3
 8021518:	dc38      	bgt.n	802158c <__ieee754_rem_pio2f+0x98>
 802151a:	2e00      	cmp	r6, #0
 802151c:	f024 040f 	bic.w	r4, r4, #15
 8021520:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 802171c <__ieee754_rem_pio2f+0x228>
 8021524:	4b7e      	ldr	r3, [pc, #504]	; (8021720 <__ieee754_rem_pio2f+0x22c>)
 8021526:	dd18      	ble.n	802155a <__ieee754_rem_pio2f+0x66>
 8021528:	429c      	cmp	r4, r3
 802152a:	ee70 7a47 	vsub.f32	s15, s0, s14
 802152e:	bf09      	itett	eq
 8021530:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8021724 <__ieee754_rem_pio2f+0x230>
 8021534:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8021728 <__ieee754_rem_pio2f+0x234>
 8021538:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 802153c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 802172c <__ieee754_rem_pio2f+0x238>
 8021540:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8021544:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021548:	edc0 6a00 	vstr	s13, [r0]
 802154c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021550:	edc0 7a01 	vstr	s15, [r0, #4]
 8021554:	2001      	movs	r0, #1
 8021556:	b007      	add	sp, #28
 8021558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802155a:	429c      	cmp	r4, r3
 802155c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8021560:	bf09      	itett	eq
 8021562:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8021724 <__ieee754_rem_pio2f+0x230>
 8021566:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8021728 <__ieee754_rem_pio2f+0x234>
 802156a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 802156e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 802172c <__ieee754_rem_pio2f+0x238>
 8021572:	ee77 6a87 	vadd.f32	s13, s15, s14
 8021576:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802157a:	edc0 6a00 	vstr	s13, [r0]
 802157e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021582:	edc0 7a01 	vstr	s15, [r0, #4]
 8021586:	f04f 30ff 	mov.w	r0, #4294967295
 802158a:	e7e4      	b.n	8021556 <__ieee754_rem_pio2f+0x62>
 802158c:	4b68      	ldr	r3, [pc, #416]	; (8021730 <__ieee754_rem_pio2f+0x23c>)
 802158e:	429c      	cmp	r4, r3
 8021590:	dc71      	bgt.n	8021676 <__ieee754_rem_pio2f+0x182>
 8021592:	f000 fce3 	bl	8021f5c <fabsf>
 8021596:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8021734 <__ieee754_rem_pio2f+0x240>
 802159a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802159e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80215a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80215a6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80215aa:	ee17 0a90 	vmov	r0, s15
 80215ae:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802171c <__ieee754_rem_pio2f+0x228>
 80215b2:	eeb1 7a46 	vneg.f32	s14, s12
 80215b6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80215ba:	281f      	cmp	r0, #31
 80215bc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8021728 <__ieee754_rem_pio2f+0x234>
 80215c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80215c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80215c8:	ee16 3a90 	vmov	r3, s13
 80215cc:	dc1c      	bgt.n	8021608 <__ieee754_rem_pio2f+0x114>
 80215ce:	1e47      	subs	r7, r0, #1
 80215d0:	4959      	ldr	r1, [pc, #356]	; (8021738 <__ieee754_rem_pio2f+0x244>)
 80215d2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80215d6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80215da:	428a      	cmp	r2, r1
 80215dc:	d014      	beq.n	8021608 <__ieee754_rem_pio2f+0x114>
 80215de:	602b      	str	r3, [r5, #0]
 80215e0:	ed95 7a00 	vldr	s14, [r5]
 80215e4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80215e8:	2e00      	cmp	r6, #0
 80215ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80215ee:	ed85 0a01 	vstr	s0, [r5, #4]
 80215f2:	dab0      	bge.n	8021556 <__ieee754_rem_pio2f+0x62>
 80215f4:	eeb1 7a47 	vneg.f32	s14, s14
 80215f8:	eeb1 0a40 	vneg.f32	s0, s0
 80215fc:	ed85 7a00 	vstr	s14, [r5]
 8021600:	ed85 0a01 	vstr	s0, [r5, #4]
 8021604:	4240      	negs	r0, r0
 8021606:	e7a6      	b.n	8021556 <__ieee754_rem_pio2f+0x62>
 8021608:	15e4      	asrs	r4, r4, #23
 802160a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 802160e:	1aa2      	subs	r2, r4, r2
 8021610:	2a08      	cmp	r2, #8
 8021612:	dde4      	ble.n	80215de <__ieee754_rem_pio2f+0xea>
 8021614:	eddf 7a43 	vldr	s15, [pc, #268]	; 8021724 <__ieee754_rem_pio2f+0x230>
 8021618:	eef0 6a40 	vmov.f32	s13, s0
 802161c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8021620:	ee30 0a66 	vsub.f32	s0, s0, s13
 8021624:	eea7 0a27 	vfma.f32	s0, s14, s15
 8021628:	eddf 7a40 	vldr	s15, [pc, #256]	; 802172c <__ieee754_rem_pio2f+0x238>
 802162c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8021630:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8021634:	eef0 7a40 	vmov.f32	s15, s0
 8021638:	ee15 3a90 	vmov	r3, s11
 802163c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8021640:	1aa4      	subs	r4, r4, r2
 8021642:	2c19      	cmp	r4, #25
 8021644:	dc04      	bgt.n	8021650 <__ieee754_rem_pio2f+0x15c>
 8021646:	edc5 5a00 	vstr	s11, [r5]
 802164a:	eeb0 0a66 	vmov.f32	s0, s13
 802164e:	e7c7      	b.n	80215e0 <__ieee754_rem_pio2f+0xec>
 8021650:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802173c <__ieee754_rem_pio2f+0x248>
 8021654:	eeb0 0a66 	vmov.f32	s0, s13
 8021658:	eea7 0a25 	vfma.f32	s0, s14, s11
 802165c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8021660:	eee7 7a25 	vfma.f32	s15, s14, s11
 8021664:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8021740 <__ieee754_rem_pio2f+0x24c>
 8021668:	eed6 7a07 	vfnms.f32	s15, s12, s14
 802166c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8021670:	ed85 7a00 	vstr	s14, [r5]
 8021674:	e7b4      	b.n	80215e0 <__ieee754_rem_pio2f+0xec>
 8021676:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 802167a:	db06      	blt.n	802168a <__ieee754_rem_pio2f+0x196>
 802167c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8021680:	edc0 7a01 	vstr	s15, [r0, #4]
 8021684:	edc0 7a00 	vstr	s15, [r0]
 8021688:	e742      	b.n	8021510 <__ieee754_rem_pio2f+0x1c>
 802168a:	15e2      	asrs	r2, r4, #23
 802168c:	3a86      	subs	r2, #134	; 0x86
 802168e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8021692:	ee07 3a90 	vmov	s15, r3
 8021696:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802169a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8021744 <__ieee754_rem_pio2f+0x250>
 802169e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80216a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80216a6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80216aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80216ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80216b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80216b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80216ba:	ed8d 7a04 	vstr	s14, [sp, #16]
 80216be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80216c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80216c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216ca:	edcd 7a05 	vstr	s15, [sp, #20]
 80216ce:	d11e      	bne.n	802170e <__ieee754_rem_pio2f+0x21a>
 80216d0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80216d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216d8:	bf0c      	ite	eq
 80216da:	2301      	moveq	r3, #1
 80216dc:	2302      	movne	r3, #2
 80216de:	491a      	ldr	r1, [pc, #104]	; (8021748 <__ieee754_rem_pio2f+0x254>)
 80216e0:	9101      	str	r1, [sp, #4]
 80216e2:	2102      	movs	r1, #2
 80216e4:	9100      	str	r1, [sp, #0]
 80216e6:	a803      	add	r0, sp, #12
 80216e8:	4629      	mov	r1, r5
 80216ea:	f000 f891 	bl	8021810 <__kernel_rem_pio2f>
 80216ee:	2e00      	cmp	r6, #0
 80216f0:	f6bf af31 	bge.w	8021556 <__ieee754_rem_pio2f+0x62>
 80216f4:	edd5 7a00 	vldr	s15, [r5]
 80216f8:	eef1 7a67 	vneg.f32	s15, s15
 80216fc:	edc5 7a00 	vstr	s15, [r5]
 8021700:	edd5 7a01 	vldr	s15, [r5, #4]
 8021704:	eef1 7a67 	vneg.f32	s15, s15
 8021708:	edc5 7a01 	vstr	s15, [r5, #4]
 802170c:	e77a      	b.n	8021604 <__ieee754_rem_pio2f+0x110>
 802170e:	2303      	movs	r3, #3
 8021710:	e7e5      	b.n	80216de <__ieee754_rem_pio2f+0x1ea>
 8021712:	bf00      	nop
 8021714:	3f490fd8 	.word	0x3f490fd8
 8021718:	4016cbe3 	.word	0x4016cbe3
 802171c:	3fc90f80 	.word	0x3fc90f80
 8021720:	3fc90fd0 	.word	0x3fc90fd0
 8021724:	37354400 	.word	0x37354400
 8021728:	37354443 	.word	0x37354443
 802172c:	2e85a308 	.word	0x2e85a308
 8021730:	43490f80 	.word	0x43490f80
 8021734:	3f22f984 	.word	0x3f22f984
 8021738:	08023c50 	.word	0x08023c50
 802173c:	2e85a300 	.word	0x2e85a300
 8021740:	248d3132 	.word	0x248d3132
 8021744:	43800000 	.word	0x43800000
 8021748:	08023cd0 	.word	0x08023cd0

0802174c <__ieee754_sqrtf>:
 802174c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8021750:	4770      	bx	lr
	...

08021754 <__kernel_cosf>:
 8021754:	ee10 3a10 	vmov	r3, s0
 8021758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802175c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8021760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021764:	da05      	bge.n	8021772 <__kernel_cosf+0x1e>
 8021766:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 802176a:	ee17 2a90 	vmov	r2, s15
 802176e:	2a00      	cmp	r2, #0
 8021770:	d03b      	beq.n	80217ea <__kernel_cosf+0x96>
 8021772:	ee20 6a00 	vmul.f32	s12, s0, s0
 8021776:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802177a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80217f0 <__kernel_cosf+0x9c>
 802177e:	4a1d      	ldr	r2, [pc, #116]	; (80217f4 <__kernel_cosf+0xa0>)
 8021780:	ee66 7a07 	vmul.f32	s15, s12, s14
 8021784:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80217f8 <__kernel_cosf+0xa4>
 8021788:	eea6 7a25 	vfma.f32	s14, s12, s11
 802178c:	4293      	cmp	r3, r2
 802178e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 80217fc <__kernel_cosf+0xa8>
 8021792:	eee7 5a06 	vfma.f32	s11, s14, s12
 8021796:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8021800 <__kernel_cosf+0xac>
 802179a:	eea5 7a86 	vfma.f32	s14, s11, s12
 802179e:	eddf 5a19 	vldr	s11, [pc, #100]	; 8021804 <__kernel_cosf+0xb0>
 80217a2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80217a6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8021808 <__kernel_cosf+0xb4>
 80217aa:	eea5 7a86 	vfma.f32	s14, s11, s12
 80217ae:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80217b2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80217b6:	eee6 0a07 	vfma.f32	s1, s12, s14
 80217ba:	dc04      	bgt.n	80217c6 <__kernel_cosf+0x72>
 80217bc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80217c0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80217c4:	4770      	bx	lr
 80217c6:	4a11      	ldr	r2, [pc, #68]	; (802180c <__kernel_cosf+0xb8>)
 80217c8:	4293      	cmp	r3, r2
 80217ca:	bfda      	itte	le
 80217cc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80217d0:	ee07 3a10 	vmovle	s14, r3
 80217d4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80217d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80217dc:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80217e0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80217e4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80217e8:	4770      	bx	lr
 80217ea:	eeb0 0a66 	vmov.f32	s0, s13
 80217ee:	4770      	bx	lr
 80217f0:	ad47d74e 	.word	0xad47d74e
 80217f4:	3e999999 	.word	0x3e999999
 80217f8:	310f74f6 	.word	0x310f74f6
 80217fc:	b493f27c 	.word	0xb493f27c
 8021800:	37d00d01 	.word	0x37d00d01
 8021804:	bab60b61 	.word	0xbab60b61
 8021808:	3d2aaaab 	.word	0x3d2aaaab
 802180c:	3f480000 	.word	0x3f480000

08021810 <__kernel_rem_pio2f>:
 8021810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021814:	ed2d 8b04 	vpush	{d8-d9}
 8021818:	b0d7      	sub	sp, #348	; 0x15c
 802181a:	469b      	mov	fp, r3
 802181c:	460e      	mov	r6, r1
 802181e:	4bbe      	ldr	r3, [pc, #760]	; (8021b18 <__kernel_rem_pio2f+0x308>)
 8021820:	9964      	ldr	r1, [sp, #400]	; 0x190
 8021822:	9002      	str	r0, [sp, #8]
 8021824:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8021828:	9865      	ldr	r0, [sp, #404]	; 0x194
 802182a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8021b28 <__kernel_rem_pio2f+0x318>
 802182e:	1ed1      	subs	r1, r2, #3
 8021830:	2308      	movs	r3, #8
 8021832:	fb91 f1f3 	sdiv	r1, r1, r3
 8021836:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802183a:	f10b 3aff 	add.w	sl, fp, #4294967295
 802183e:	1c4c      	adds	r4, r1, #1
 8021840:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8021844:	eba1 050a 	sub.w	r5, r1, sl
 8021848:	aa1a      	add	r2, sp, #104	; 0x68
 802184a:	eb09 070a 	add.w	r7, r9, sl
 802184e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8021852:	4696      	mov	lr, r2
 8021854:	2300      	movs	r3, #0
 8021856:	42bb      	cmp	r3, r7
 8021858:	dd0f      	ble.n	802187a <__kernel_rem_pio2f+0x6a>
 802185a:	af42      	add	r7, sp, #264	; 0x108
 802185c:	2200      	movs	r2, #0
 802185e:	454a      	cmp	r2, r9
 8021860:	dc27      	bgt.n	80218b2 <__kernel_rem_pio2f+0xa2>
 8021862:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8021866:	eb0b 0302 	add.w	r3, fp, r2
 802186a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 802186e:	9d02      	ldr	r5, [sp, #8]
 8021870:	eddf 7aad 	vldr	s15, [pc, #692]	; 8021b28 <__kernel_rem_pio2f+0x318>
 8021874:	f04f 0c00 	mov.w	ip, #0
 8021878:	e015      	b.n	80218a6 <__kernel_rem_pio2f+0x96>
 802187a:	42dd      	cmn	r5, r3
 802187c:	bf5d      	ittte	pl
 802187e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8021882:	ee07 2a90 	vmovpl	s15, r2
 8021886:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 802188a:	eef0 7a47 	vmovmi.f32	s15, s14
 802188e:	ecee 7a01 	vstmia	lr!, {s15}
 8021892:	3301      	adds	r3, #1
 8021894:	e7df      	b.n	8021856 <__kernel_rem_pio2f+0x46>
 8021896:	ecf5 6a01 	vldmia	r5!, {s13}
 802189a:	ed33 7a01 	vldmdb	r3!, {s14}
 802189e:	eee6 7a87 	vfma.f32	s15, s13, s14
 80218a2:	f10c 0c01 	add.w	ip, ip, #1
 80218a6:	45d4      	cmp	ip, sl
 80218a8:	ddf5      	ble.n	8021896 <__kernel_rem_pio2f+0x86>
 80218aa:	ece7 7a01 	vstmia	r7!, {s15}
 80218ae:	3201      	adds	r2, #1
 80218b0:	e7d5      	b.n	802185e <__kernel_rem_pio2f+0x4e>
 80218b2:	ab06      	add	r3, sp, #24
 80218b4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80218b8:	9304      	str	r3, [sp, #16]
 80218ba:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8021b24 <__kernel_rem_pio2f+0x314>
 80218be:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8021b20 <__kernel_rem_pio2f+0x310>
 80218c2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80218c6:	9303      	str	r3, [sp, #12]
 80218c8:	464d      	mov	r5, r9
 80218ca:	ab56      	add	r3, sp, #344	; 0x158
 80218cc:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80218d0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80218d4:	3f01      	subs	r7, #1
 80218d6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80218da:	00bf      	lsls	r7, r7, #2
 80218dc:	ab56      	add	r3, sp, #344	; 0x158
 80218de:	19da      	adds	r2, r3, r7
 80218e0:	3a4c      	subs	r2, #76	; 0x4c
 80218e2:	2300      	movs	r3, #0
 80218e4:	1ae9      	subs	r1, r5, r3
 80218e6:	2900      	cmp	r1, #0
 80218e8:	dc4c      	bgt.n	8021984 <__kernel_rem_pio2f+0x174>
 80218ea:	4620      	mov	r0, r4
 80218ec:	f000 fb80 	bl	8021ff0 <scalbnf>
 80218f0:	eeb0 8a40 	vmov.f32	s16, s0
 80218f4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80218f8:	ee28 0a00 	vmul.f32	s0, s16, s0
 80218fc:	f000 fb36 	bl	8021f6c <floorf>
 8021900:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8021904:	eea0 8a67 	vfms.f32	s16, s0, s15
 8021908:	2c00      	cmp	r4, #0
 802190a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802190e:	edcd 7a01 	vstr	s15, [sp, #4]
 8021912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021916:	ee38 8a67 	vsub.f32	s16, s16, s15
 802191a:	dd48      	ble.n	80219ae <__kernel_rem_pio2f+0x19e>
 802191c:	1e69      	subs	r1, r5, #1
 802191e:	ab06      	add	r3, sp, #24
 8021920:	f1c4 0008 	rsb	r0, r4, #8
 8021924:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8021928:	9a01      	ldr	r2, [sp, #4]
 802192a:	fa4c f300 	asr.w	r3, ip, r0
 802192e:	441a      	add	r2, r3
 8021930:	4083      	lsls	r3, r0
 8021932:	9201      	str	r2, [sp, #4]
 8021934:	ebac 0203 	sub.w	r2, ip, r3
 8021938:	ab06      	add	r3, sp, #24
 802193a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 802193e:	f1c4 0307 	rsb	r3, r4, #7
 8021942:	fa42 f803 	asr.w	r8, r2, r3
 8021946:	f1b8 0f00 	cmp.w	r8, #0
 802194a:	dd41      	ble.n	80219d0 <__kernel_rem_pio2f+0x1c0>
 802194c:	9b01      	ldr	r3, [sp, #4]
 802194e:	2000      	movs	r0, #0
 8021950:	3301      	adds	r3, #1
 8021952:	9301      	str	r3, [sp, #4]
 8021954:	4601      	mov	r1, r0
 8021956:	4285      	cmp	r5, r0
 8021958:	dc6d      	bgt.n	8021a36 <__kernel_rem_pio2f+0x226>
 802195a:	2c00      	cmp	r4, #0
 802195c:	dd04      	ble.n	8021968 <__kernel_rem_pio2f+0x158>
 802195e:	2c01      	cmp	r4, #1
 8021960:	d07e      	beq.n	8021a60 <__kernel_rem_pio2f+0x250>
 8021962:	2c02      	cmp	r4, #2
 8021964:	f000 8086 	beq.w	8021a74 <__kernel_rem_pio2f+0x264>
 8021968:	f1b8 0f02 	cmp.w	r8, #2
 802196c:	d130      	bne.n	80219d0 <__kernel_rem_pio2f+0x1c0>
 802196e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8021972:	ee30 8a48 	vsub.f32	s16, s0, s16
 8021976:	b359      	cbz	r1, 80219d0 <__kernel_rem_pio2f+0x1c0>
 8021978:	4620      	mov	r0, r4
 802197a:	f000 fb39 	bl	8021ff0 <scalbnf>
 802197e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8021982:	e025      	b.n	80219d0 <__kernel_rem_pio2f+0x1c0>
 8021984:	ee60 7a28 	vmul.f32	s15, s0, s17
 8021988:	a806      	add	r0, sp, #24
 802198a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802198e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021992:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8021996:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802199a:	ee10 1a10 	vmov	r1, s0
 802199e:	ed32 0a01 	vldmdb	r2!, {s0}
 80219a2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80219a6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80219aa:	3301      	adds	r3, #1
 80219ac:	e79a      	b.n	80218e4 <__kernel_rem_pio2f+0xd4>
 80219ae:	d106      	bne.n	80219be <__kernel_rem_pio2f+0x1ae>
 80219b0:	1e6b      	subs	r3, r5, #1
 80219b2:	aa06      	add	r2, sp, #24
 80219b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80219b8:	ea4f 2822 	mov.w	r8, r2, asr #8
 80219bc:	e7c3      	b.n	8021946 <__kernel_rem_pio2f+0x136>
 80219be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80219c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80219c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219ca:	da31      	bge.n	8021a30 <__kernel_rem_pio2f+0x220>
 80219cc:	f04f 0800 	mov.w	r8, #0
 80219d0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80219d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219d8:	f040 80a8 	bne.w	8021b2c <__kernel_rem_pio2f+0x31c>
 80219dc:	1e6b      	subs	r3, r5, #1
 80219de:	4618      	mov	r0, r3
 80219e0:	2200      	movs	r2, #0
 80219e2:	4548      	cmp	r0, r9
 80219e4:	da4d      	bge.n	8021a82 <__kernel_rem_pio2f+0x272>
 80219e6:	2a00      	cmp	r2, #0
 80219e8:	f000 8087 	beq.w	8021afa <__kernel_rem_pio2f+0x2ea>
 80219ec:	aa06      	add	r2, sp, #24
 80219ee:	3c08      	subs	r4, #8
 80219f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80219f4:	2900      	cmp	r1, #0
 80219f6:	f000 808d 	beq.w	8021b14 <__kernel_rem_pio2f+0x304>
 80219fa:	4620      	mov	r0, r4
 80219fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8021a00:	9302      	str	r3, [sp, #8]
 8021a02:	f000 faf5 	bl	8021ff0 <scalbnf>
 8021a06:	9b02      	ldr	r3, [sp, #8]
 8021a08:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8021b24 <__kernel_rem_pio2f+0x314>
 8021a0c:	0099      	lsls	r1, r3, #2
 8021a0e:	aa42      	add	r2, sp, #264	; 0x108
 8021a10:	1850      	adds	r0, r2, r1
 8021a12:	1d05      	adds	r5, r0, #4
 8021a14:	461c      	mov	r4, r3
 8021a16:	2c00      	cmp	r4, #0
 8021a18:	f280 80b8 	bge.w	8021b8c <__kernel_rem_pio2f+0x37c>
 8021a1c:	2500      	movs	r5, #0
 8021a1e:	1b5c      	subs	r4, r3, r5
 8021a20:	2c00      	cmp	r4, #0
 8021a22:	f2c0 80d8 	blt.w	8021bd6 <__kernel_rem_pio2f+0x3c6>
 8021a26:	4f3d      	ldr	r7, [pc, #244]	; (8021b1c <__kernel_rem_pio2f+0x30c>)
 8021a28:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8021b28 <__kernel_rem_pio2f+0x318>
 8021a2c:	2400      	movs	r4, #0
 8021a2e:	e0c6      	b.n	8021bbe <__kernel_rem_pio2f+0x3ae>
 8021a30:	f04f 0802 	mov.w	r8, #2
 8021a34:	e78a      	b.n	802194c <__kernel_rem_pio2f+0x13c>
 8021a36:	ab06      	add	r3, sp, #24
 8021a38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8021a3c:	b949      	cbnz	r1, 8021a52 <__kernel_rem_pio2f+0x242>
 8021a3e:	b12b      	cbz	r3, 8021a4c <__kernel_rem_pio2f+0x23c>
 8021a40:	aa06      	add	r2, sp, #24
 8021a42:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8021a46:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8021a4a:	2301      	movs	r3, #1
 8021a4c:	3001      	adds	r0, #1
 8021a4e:	4619      	mov	r1, r3
 8021a50:	e781      	b.n	8021956 <__kernel_rem_pio2f+0x146>
 8021a52:	aa06      	add	r2, sp, #24
 8021a54:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8021a58:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8021a5c:	460b      	mov	r3, r1
 8021a5e:	e7f5      	b.n	8021a4c <__kernel_rem_pio2f+0x23c>
 8021a60:	1e68      	subs	r0, r5, #1
 8021a62:	ab06      	add	r3, sp, #24
 8021a64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8021a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021a6c:	aa06      	add	r2, sp, #24
 8021a6e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8021a72:	e779      	b.n	8021968 <__kernel_rem_pio2f+0x158>
 8021a74:	1e68      	subs	r0, r5, #1
 8021a76:	ab06      	add	r3, sp, #24
 8021a78:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8021a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8021a80:	e7f4      	b.n	8021a6c <__kernel_rem_pio2f+0x25c>
 8021a82:	a906      	add	r1, sp, #24
 8021a84:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8021a88:	3801      	subs	r0, #1
 8021a8a:	430a      	orrs	r2, r1
 8021a8c:	e7a9      	b.n	80219e2 <__kernel_rem_pio2f+0x1d2>
 8021a8e:	f10c 0c01 	add.w	ip, ip, #1
 8021a92:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8021a96:	2a00      	cmp	r2, #0
 8021a98:	d0f9      	beq.n	8021a8e <__kernel_rem_pio2f+0x27e>
 8021a9a:	eb0b 0305 	add.w	r3, fp, r5
 8021a9e:	aa1a      	add	r2, sp, #104	; 0x68
 8021aa0:	009b      	lsls	r3, r3, #2
 8021aa2:	1898      	adds	r0, r3, r2
 8021aa4:	3004      	adds	r0, #4
 8021aa6:	1c69      	adds	r1, r5, #1
 8021aa8:	3704      	adds	r7, #4
 8021aaa:	2200      	movs	r2, #0
 8021aac:	4465      	add	r5, ip
 8021aae:	9005      	str	r0, [sp, #20]
 8021ab0:	428d      	cmp	r5, r1
 8021ab2:	f6ff af0a 	blt.w	80218ca <__kernel_rem_pio2f+0xba>
 8021ab6:	a81a      	add	r0, sp, #104	; 0x68
 8021ab8:	eb02 0c03 	add.w	ip, r2, r3
 8021abc:	4484      	add	ip, r0
 8021abe:	9803      	ldr	r0, [sp, #12]
 8021ac0:	f8dd e008 	ldr.w	lr, [sp, #8]
 8021ac4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8021ac8:	9001      	str	r0, [sp, #4]
 8021aca:	ee07 0a90 	vmov	s15, r0
 8021ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021ad2:	9805      	ldr	r0, [sp, #20]
 8021ad4:	edcc 7a00 	vstr	s15, [ip]
 8021ad8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8021b28 <__kernel_rem_pio2f+0x318>
 8021adc:	eb00 0802 	add.w	r8, r0, r2
 8021ae0:	f04f 0c00 	mov.w	ip, #0
 8021ae4:	45d4      	cmp	ip, sl
 8021ae6:	dd0c      	ble.n	8021b02 <__kernel_rem_pio2f+0x2f2>
 8021ae8:	eb02 0c07 	add.w	ip, r2, r7
 8021aec:	a842      	add	r0, sp, #264	; 0x108
 8021aee:	4484      	add	ip, r0
 8021af0:	edcc 7a01 	vstr	s15, [ip, #4]
 8021af4:	3101      	adds	r1, #1
 8021af6:	3204      	adds	r2, #4
 8021af8:	e7da      	b.n	8021ab0 <__kernel_rem_pio2f+0x2a0>
 8021afa:	9b04      	ldr	r3, [sp, #16]
 8021afc:	f04f 0c01 	mov.w	ip, #1
 8021b00:	e7c7      	b.n	8021a92 <__kernel_rem_pio2f+0x282>
 8021b02:	ecfe 6a01 	vldmia	lr!, {s13}
 8021b06:	ed38 7a01 	vldmdb	r8!, {s14}
 8021b0a:	f10c 0c01 	add.w	ip, ip, #1
 8021b0e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021b12:	e7e7      	b.n	8021ae4 <__kernel_rem_pio2f+0x2d4>
 8021b14:	3b01      	subs	r3, #1
 8021b16:	e769      	b.n	80219ec <__kernel_rem_pio2f+0x1dc>
 8021b18:	08024014 	.word	0x08024014
 8021b1c:	08023fe8 	.word	0x08023fe8
 8021b20:	43800000 	.word	0x43800000
 8021b24:	3b800000 	.word	0x3b800000
 8021b28:	00000000 	.word	0x00000000
 8021b2c:	4260      	negs	r0, r4
 8021b2e:	eeb0 0a48 	vmov.f32	s0, s16
 8021b32:	f000 fa5d 	bl	8021ff0 <scalbnf>
 8021b36:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8021b20 <__kernel_rem_pio2f+0x310>
 8021b3a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8021b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b42:	db1a      	blt.n	8021b7a <__kernel_rem_pio2f+0x36a>
 8021b44:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8021b24 <__kernel_rem_pio2f+0x314>
 8021b48:	ee60 7a27 	vmul.f32	s15, s0, s15
 8021b4c:	aa06      	add	r2, sp, #24
 8021b4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021b52:	a906      	add	r1, sp, #24
 8021b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021b58:	3408      	adds	r4, #8
 8021b5a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8021b5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021b62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021b66:	ee10 3a10 	vmov	r3, s0
 8021b6a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8021b6e:	1c6b      	adds	r3, r5, #1
 8021b70:	ee17 2a90 	vmov	r2, s15
 8021b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8021b78:	e73f      	b.n	80219fa <__kernel_rem_pio2f+0x1ea>
 8021b7a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021b7e:	aa06      	add	r2, sp, #24
 8021b80:	ee10 3a10 	vmov	r3, s0
 8021b84:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8021b88:	462b      	mov	r3, r5
 8021b8a:	e736      	b.n	80219fa <__kernel_rem_pio2f+0x1ea>
 8021b8c:	aa06      	add	r2, sp, #24
 8021b8e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8021b92:	9202      	str	r2, [sp, #8]
 8021b94:	ee07 2a90 	vmov	s15, r2
 8021b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021b9c:	3c01      	subs	r4, #1
 8021b9e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021ba2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8021ba6:	ed65 7a01 	vstmdb	r5!, {s15}
 8021baa:	e734      	b.n	8021a16 <__kernel_rem_pio2f+0x206>
 8021bac:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8021bb0:	ecf7 6a01 	vldmia	r7!, {s13}
 8021bb4:	ed9c 7a00 	vldr	s14, [ip]
 8021bb8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021bbc:	3401      	adds	r4, #1
 8021bbe:	454c      	cmp	r4, r9
 8021bc0:	dc01      	bgt.n	8021bc6 <__kernel_rem_pio2f+0x3b6>
 8021bc2:	42a5      	cmp	r5, r4
 8021bc4:	daf2      	bge.n	8021bac <__kernel_rem_pio2f+0x39c>
 8021bc6:	aa56      	add	r2, sp, #344	; 0x158
 8021bc8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8021bcc:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8021bd0:	3501      	adds	r5, #1
 8021bd2:	3804      	subs	r0, #4
 8021bd4:	e723      	b.n	8021a1e <__kernel_rem_pio2f+0x20e>
 8021bd6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8021bd8:	2a03      	cmp	r2, #3
 8021bda:	d84d      	bhi.n	8021c78 <__kernel_rem_pio2f+0x468>
 8021bdc:	e8df f002 	tbb	[pc, r2]
 8021be0:	021f1f3e 	.word	0x021f1f3e
 8021be4:	aa56      	add	r2, sp, #344	; 0x158
 8021be6:	4411      	add	r1, r2
 8021be8:	399c      	subs	r1, #156	; 0x9c
 8021bea:	4608      	mov	r0, r1
 8021bec:	461c      	mov	r4, r3
 8021bee:	2c00      	cmp	r4, #0
 8021bf0:	dc5f      	bgt.n	8021cb2 <__kernel_rem_pio2f+0x4a2>
 8021bf2:	4608      	mov	r0, r1
 8021bf4:	461c      	mov	r4, r3
 8021bf6:	2c01      	cmp	r4, #1
 8021bf8:	dc6b      	bgt.n	8021cd2 <__kernel_rem_pio2f+0x4c2>
 8021bfa:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8021b28 <__kernel_rem_pio2f+0x318>
 8021bfe:	2b01      	cmp	r3, #1
 8021c00:	dc77      	bgt.n	8021cf2 <__kernel_rem_pio2f+0x4e2>
 8021c02:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8021c06:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8021c0a:	f1b8 0f00 	cmp.w	r8, #0
 8021c0e:	d176      	bne.n	8021cfe <__kernel_rem_pio2f+0x4ee>
 8021c10:	edc6 6a00 	vstr	s13, [r6]
 8021c14:	ed86 7a01 	vstr	s14, [r6, #4]
 8021c18:	edc6 7a02 	vstr	s15, [r6, #8]
 8021c1c:	e02c      	b.n	8021c78 <__kernel_rem_pio2f+0x468>
 8021c1e:	aa56      	add	r2, sp, #344	; 0x158
 8021c20:	4411      	add	r1, r2
 8021c22:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8021b28 <__kernel_rem_pio2f+0x318>
 8021c26:	399c      	subs	r1, #156	; 0x9c
 8021c28:	4618      	mov	r0, r3
 8021c2a:	2800      	cmp	r0, #0
 8021c2c:	da32      	bge.n	8021c94 <__kernel_rem_pio2f+0x484>
 8021c2e:	f1b8 0f00 	cmp.w	r8, #0
 8021c32:	d035      	beq.n	8021ca0 <__kernel_rem_pio2f+0x490>
 8021c34:	eef1 7a47 	vneg.f32	s15, s14
 8021c38:	edc6 7a00 	vstr	s15, [r6]
 8021c3c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8021c40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021c44:	a82f      	add	r0, sp, #188	; 0xbc
 8021c46:	2101      	movs	r1, #1
 8021c48:	428b      	cmp	r3, r1
 8021c4a:	da2c      	bge.n	8021ca6 <__kernel_rem_pio2f+0x496>
 8021c4c:	f1b8 0f00 	cmp.w	r8, #0
 8021c50:	d001      	beq.n	8021c56 <__kernel_rem_pio2f+0x446>
 8021c52:	eef1 7a67 	vneg.f32	s15, s15
 8021c56:	edc6 7a01 	vstr	s15, [r6, #4]
 8021c5a:	e00d      	b.n	8021c78 <__kernel_rem_pio2f+0x468>
 8021c5c:	aa56      	add	r2, sp, #344	; 0x158
 8021c5e:	4411      	add	r1, r2
 8021c60:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8021b28 <__kernel_rem_pio2f+0x318>
 8021c64:	399c      	subs	r1, #156	; 0x9c
 8021c66:	2b00      	cmp	r3, #0
 8021c68:	da0e      	bge.n	8021c88 <__kernel_rem_pio2f+0x478>
 8021c6a:	f1b8 0f00 	cmp.w	r8, #0
 8021c6e:	d001      	beq.n	8021c74 <__kernel_rem_pio2f+0x464>
 8021c70:	eef1 7a67 	vneg.f32	s15, s15
 8021c74:	edc6 7a00 	vstr	s15, [r6]
 8021c78:	9b01      	ldr	r3, [sp, #4]
 8021c7a:	f003 0007 	and.w	r0, r3, #7
 8021c7e:	b057      	add	sp, #348	; 0x15c
 8021c80:	ecbd 8b04 	vpop	{d8-d9}
 8021c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c88:	ed31 7a01 	vldmdb	r1!, {s14}
 8021c8c:	3b01      	subs	r3, #1
 8021c8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c92:	e7e8      	b.n	8021c66 <__kernel_rem_pio2f+0x456>
 8021c94:	ed71 7a01 	vldmdb	r1!, {s15}
 8021c98:	3801      	subs	r0, #1
 8021c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021c9e:	e7c4      	b.n	8021c2a <__kernel_rem_pio2f+0x41a>
 8021ca0:	eef0 7a47 	vmov.f32	s15, s14
 8021ca4:	e7c8      	b.n	8021c38 <__kernel_rem_pio2f+0x428>
 8021ca6:	ecb0 7a01 	vldmia	r0!, {s14}
 8021caa:	3101      	adds	r1, #1
 8021cac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021cb0:	e7ca      	b.n	8021c48 <__kernel_rem_pio2f+0x438>
 8021cb2:	ed50 7a02 	vldr	s15, [r0, #-8]
 8021cb6:	ed70 6a01 	vldmdb	r0!, {s13}
 8021cba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8021cbe:	3c01      	subs	r4, #1
 8021cc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021cc4:	ed00 7a01 	vstr	s14, [r0, #-4]
 8021cc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021ccc:	edc0 7a00 	vstr	s15, [r0]
 8021cd0:	e78d      	b.n	8021bee <__kernel_rem_pio2f+0x3de>
 8021cd2:	ed50 7a02 	vldr	s15, [r0, #-8]
 8021cd6:	ed70 6a01 	vldmdb	r0!, {s13}
 8021cda:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8021cde:	3c01      	subs	r4, #1
 8021ce0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021ce4:	ed00 7a01 	vstr	s14, [r0, #-4]
 8021ce8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021cec:	edc0 7a00 	vstr	s15, [r0]
 8021cf0:	e781      	b.n	8021bf6 <__kernel_rem_pio2f+0x3e6>
 8021cf2:	ed31 7a01 	vldmdb	r1!, {s14}
 8021cf6:	3b01      	subs	r3, #1
 8021cf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021cfc:	e77f      	b.n	8021bfe <__kernel_rem_pio2f+0x3ee>
 8021cfe:	eef1 6a66 	vneg.f32	s13, s13
 8021d02:	eeb1 7a47 	vneg.f32	s14, s14
 8021d06:	edc6 6a00 	vstr	s13, [r6]
 8021d0a:	ed86 7a01 	vstr	s14, [r6, #4]
 8021d0e:	eef1 7a67 	vneg.f32	s15, s15
 8021d12:	e781      	b.n	8021c18 <__kernel_rem_pio2f+0x408>

08021d14 <__kernel_sinf>:
 8021d14:	ee10 3a10 	vmov	r3, s0
 8021d18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021d1c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8021d20:	da04      	bge.n	8021d2c <__kernel_sinf+0x18>
 8021d22:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8021d26:	ee17 3a90 	vmov	r3, s15
 8021d2a:	b35b      	cbz	r3, 8021d84 <__kernel_sinf+0x70>
 8021d2c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8021d30:	eddf 7a15 	vldr	s15, [pc, #84]	; 8021d88 <__kernel_sinf+0x74>
 8021d34:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8021d8c <__kernel_sinf+0x78>
 8021d38:	eea7 6a27 	vfma.f32	s12, s14, s15
 8021d3c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8021d90 <__kernel_sinf+0x7c>
 8021d40:	eee6 7a07 	vfma.f32	s15, s12, s14
 8021d44:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8021d94 <__kernel_sinf+0x80>
 8021d48:	eea7 6a87 	vfma.f32	s12, s15, s14
 8021d4c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8021d98 <__kernel_sinf+0x84>
 8021d50:	ee60 6a07 	vmul.f32	s13, s0, s14
 8021d54:	eee6 7a07 	vfma.f32	s15, s12, s14
 8021d58:	b930      	cbnz	r0, 8021d68 <__kernel_sinf+0x54>
 8021d5a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8021d9c <__kernel_sinf+0x88>
 8021d5e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8021d62:	eea6 0a26 	vfma.f32	s0, s12, s13
 8021d66:	4770      	bx	lr
 8021d68:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8021d6c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8021d70:	eee0 7a86 	vfma.f32	s15, s1, s12
 8021d74:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8021d78:	eddf 7a09 	vldr	s15, [pc, #36]	; 8021da0 <__kernel_sinf+0x8c>
 8021d7c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8021d80:	ee30 0a60 	vsub.f32	s0, s0, s1
 8021d84:	4770      	bx	lr
 8021d86:	bf00      	nop
 8021d88:	2f2ec9d3 	.word	0x2f2ec9d3
 8021d8c:	b2d72f34 	.word	0xb2d72f34
 8021d90:	3638ef1b 	.word	0x3638ef1b
 8021d94:	b9500d01 	.word	0xb9500d01
 8021d98:	3c088889 	.word	0x3c088889
 8021d9c:	be2aaaab 	.word	0xbe2aaaab
 8021da0:	3e2aaaab 	.word	0x3e2aaaab

08021da4 <matherr>:
 8021da4:	2000      	movs	r0, #0
 8021da6:	4770      	bx	lr

08021da8 <nan>:
 8021da8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8021db0 <nan+0x8>
 8021dac:	4770      	bx	lr
 8021dae:	bf00      	nop
 8021db0:	00000000 	.word	0x00000000
 8021db4:	7ff80000 	.word	0x7ff80000

08021db8 <atanf>:
 8021db8:	b538      	push	{r3, r4, r5, lr}
 8021dba:	ee10 5a10 	vmov	r5, s0
 8021dbe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8021dc2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8021dc6:	eef0 7a40 	vmov.f32	s15, s0
 8021dca:	db0f      	blt.n	8021dec <atanf+0x34>
 8021dcc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8021dd0:	dd04      	ble.n	8021ddc <atanf+0x24>
 8021dd2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8021dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8021dda:	bd38      	pop	{r3, r4, r5, pc}
 8021ddc:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8021f10 <atanf+0x158>
 8021de0:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8021f14 <atanf+0x15c>
 8021de4:	2d00      	cmp	r5, #0
 8021de6:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8021dea:	e7f4      	b.n	8021dd6 <atanf+0x1e>
 8021dec:	4b4a      	ldr	r3, [pc, #296]	; (8021f18 <atanf+0x160>)
 8021dee:	429c      	cmp	r4, r3
 8021df0:	dc10      	bgt.n	8021e14 <atanf+0x5c>
 8021df2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8021df6:	da0a      	bge.n	8021e0e <atanf+0x56>
 8021df8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8021f1c <atanf+0x164>
 8021dfc:	ee30 7a07 	vadd.f32	s14, s0, s14
 8021e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021e04:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8021e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e0c:	dce3      	bgt.n	8021dd6 <atanf+0x1e>
 8021e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8021e12:	e013      	b.n	8021e3c <atanf+0x84>
 8021e14:	f000 f8a2 	bl	8021f5c <fabsf>
 8021e18:	4b41      	ldr	r3, [pc, #260]	; (8021f20 <atanf+0x168>)
 8021e1a:	429c      	cmp	r4, r3
 8021e1c:	dc4f      	bgt.n	8021ebe <atanf+0x106>
 8021e1e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8021e22:	429c      	cmp	r4, r3
 8021e24:	dc41      	bgt.n	8021eaa <atanf+0xf2>
 8021e26:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8021e2a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8021e2e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8021e32:	2300      	movs	r3, #0
 8021e34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021e38:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021e3c:	1c5a      	adds	r2, r3, #1
 8021e3e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8021e42:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8021f24 <atanf+0x16c>
 8021e46:	eddf 5a38 	vldr	s11, [pc, #224]	; 8021f28 <atanf+0x170>
 8021e4a:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8021f2c <atanf+0x174>
 8021e4e:	ee66 6a06 	vmul.f32	s13, s12, s12
 8021e52:	eee6 5a87 	vfma.f32	s11, s13, s14
 8021e56:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8021f30 <atanf+0x178>
 8021e5a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8021e5e:	eddf 5a35 	vldr	s11, [pc, #212]	; 8021f34 <atanf+0x17c>
 8021e62:	eee7 5a26 	vfma.f32	s11, s14, s13
 8021e66:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8021f38 <atanf+0x180>
 8021e6a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8021e6e:	eddf 5a33 	vldr	s11, [pc, #204]	; 8021f3c <atanf+0x184>
 8021e72:	eee7 5a26 	vfma.f32	s11, s14, s13
 8021e76:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8021f40 <atanf+0x188>
 8021e7a:	eea6 5a87 	vfma.f32	s10, s13, s14
 8021e7e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8021f44 <atanf+0x18c>
 8021e82:	eea5 7a26 	vfma.f32	s14, s10, s13
 8021e86:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8021f48 <atanf+0x190>
 8021e8a:	eea7 5a26 	vfma.f32	s10, s14, s13
 8021e8e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8021f4c <atanf+0x194>
 8021e92:	eea5 7a26 	vfma.f32	s14, s10, s13
 8021e96:	ee27 7a26 	vmul.f32	s14, s14, s13
 8021e9a:	eea5 7a86 	vfma.f32	s14, s11, s12
 8021e9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8021ea2:	d121      	bne.n	8021ee8 <atanf+0x130>
 8021ea4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021ea8:	e795      	b.n	8021dd6 <atanf+0x1e>
 8021eaa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021eae:	ee30 7a67 	vsub.f32	s14, s0, s15
 8021eb2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021eb6:	2301      	movs	r3, #1
 8021eb8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021ebc:	e7be      	b.n	8021e3c <atanf+0x84>
 8021ebe:	4b24      	ldr	r3, [pc, #144]	; (8021f50 <atanf+0x198>)
 8021ec0:	429c      	cmp	r4, r3
 8021ec2:	dc0b      	bgt.n	8021edc <atanf+0x124>
 8021ec4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8021ec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021ecc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8021ed0:	2302      	movs	r3, #2
 8021ed2:	ee70 6a67 	vsub.f32	s13, s0, s15
 8021ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021eda:	e7af      	b.n	8021e3c <atanf+0x84>
 8021edc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8021ee0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021ee4:	2303      	movs	r3, #3
 8021ee6:	e7a9      	b.n	8021e3c <atanf+0x84>
 8021ee8:	4a1a      	ldr	r2, [pc, #104]	; (8021f54 <atanf+0x19c>)
 8021eea:	491b      	ldr	r1, [pc, #108]	; (8021f58 <atanf+0x1a0>)
 8021eec:	009b      	lsls	r3, r3, #2
 8021eee:	441a      	add	r2, r3
 8021ef0:	440b      	add	r3, r1
 8021ef2:	edd3 6a00 	vldr	s13, [r3]
 8021ef6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8021efa:	2d00      	cmp	r5, #0
 8021efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021f00:	ed92 7a00 	vldr	s14, [r2]
 8021f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021f08:	bfb8      	it	lt
 8021f0a:	eef1 7a67 	vneglt.f32	s15, s15
 8021f0e:	e762      	b.n	8021dd6 <atanf+0x1e>
 8021f10:	bfc90fdb 	.word	0xbfc90fdb
 8021f14:	3fc90fdb 	.word	0x3fc90fdb
 8021f18:	3edfffff 	.word	0x3edfffff
 8021f1c:	7149f2ca 	.word	0x7149f2ca
 8021f20:	3f97ffff 	.word	0x3f97ffff
 8021f24:	3c8569d7 	.word	0x3c8569d7
 8021f28:	3d4bda59 	.word	0x3d4bda59
 8021f2c:	bd6ef16b 	.word	0xbd6ef16b
 8021f30:	3d886b35 	.word	0x3d886b35
 8021f34:	3dba2e6e 	.word	0x3dba2e6e
 8021f38:	3e124925 	.word	0x3e124925
 8021f3c:	3eaaaaab 	.word	0x3eaaaaab
 8021f40:	bd15a221 	.word	0xbd15a221
 8021f44:	bd9d8795 	.word	0xbd9d8795
 8021f48:	bde38e38 	.word	0xbde38e38
 8021f4c:	be4ccccd 	.word	0xbe4ccccd
 8021f50:	401bffff 	.word	0x401bffff
 8021f54:	08024020 	.word	0x08024020
 8021f58:	08024030 	.word	0x08024030

08021f5c <fabsf>:
 8021f5c:	ee10 3a10 	vmov	r3, s0
 8021f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021f64:	ee00 3a10 	vmov	s0, r3
 8021f68:	4770      	bx	lr
	...

08021f6c <floorf>:
 8021f6c:	ee10 3a10 	vmov	r3, s0
 8021f70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8021f74:	0dca      	lsrs	r2, r1, #23
 8021f76:	3a7f      	subs	r2, #127	; 0x7f
 8021f78:	2a16      	cmp	r2, #22
 8021f7a:	dc2a      	bgt.n	8021fd2 <floorf+0x66>
 8021f7c:	2a00      	cmp	r2, #0
 8021f7e:	da11      	bge.n	8021fa4 <floorf+0x38>
 8021f80:	eddf 7a18 	vldr	s15, [pc, #96]	; 8021fe4 <floorf+0x78>
 8021f84:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021f88:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f90:	dd05      	ble.n	8021f9e <floorf+0x32>
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	da23      	bge.n	8021fde <floorf+0x72>
 8021f96:	4a14      	ldr	r2, [pc, #80]	; (8021fe8 <floorf+0x7c>)
 8021f98:	2900      	cmp	r1, #0
 8021f9a:	bf18      	it	ne
 8021f9c:	4613      	movne	r3, r2
 8021f9e:	ee00 3a10 	vmov	s0, r3
 8021fa2:	4770      	bx	lr
 8021fa4:	4911      	ldr	r1, [pc, #68]	; (8021fec <floorf+0x80>)
 8021fa6:	4111      	asrs	r1, r2
 8021fa8:	420b      	tst	r3, r1
 8021faa:	d0fa      	beq.n	8021fa2 <floorf+0x36>
 8021fac:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8021fe4 <floorf+0x78>
 8021fb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021fb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021fbc:	ddef      	ble.n	8021f9e <floorf+0x32>
 8021fbe:	2b00      	cmp	r3, #0
 8021fc0:	bfbe      	ittt	lt
 8021fc2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8021fc6:	fa40 f202 	asrlt.w	r2, r0, r2
 8021fca:	189b      	addlt	r3, r3, r2
 8021fcc:	ea23 0301 	bic.w	r3, r3, r1
 8021fd0:	e7e5      	b.n	8021f9e <floorf+0x32>
 8021fd2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8021fd6:	d3e4      	bcc.n	8021fa2 <floorf+0x36>
 8021fd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8021fdc:	4770      	bx	lr
 8021fde:	2300      	movs	r3, #0
 8021fe0:	e7dd      	b.n	8021f9e <floorf+0x32>
 8021fe2:	bf00      	nop
 8021fe4:	7149f2ca 	.word	0x7149f2ca
 8021fe8:	bf800000 	.word	0xbf800000
 8021fec:	007fffff 	.word	0x007fffff

08021ff0 <scalbnf>:
 8021ff0:	b508      	push	{r3, lr}
 8021ff2:	ee10 2a10 	vmov	r2, s0
 8021ff6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8021ffa:	ed2d 8b02 	vpush	{d8}
 8021ffe:	eef0 0a40 	vmov.f32	s1, s0
 8022002:	d004      	beq.n	802200e <scalbnf+0x1e>
 8022004:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8022008:	d306      	bcc.n	8022018 <scalbnf+0x28>
 802200a:	ee70 0a00 	vadd.f32	s1, s0, s0
 802200e:	ecbd 8b02 	vpop	{d8}
 8022012:	eeb0 0a60 	vmov.f32	s0, s1
 8022016:	bd08      	pop	{r3, pc}
 8022018:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 802201c:	d21c      	bcs.n	8022058 <scalbnf+0x68>
 802201e:	4b1f      	ldr	r3, [pc, #124]	; (802209c <scalbnf+0xac>)
 8022020:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80220a0 <scalbnf+0xb0>
 8022024:	4298      	cmp	r0, r3
 8022026:	ee60 0a27 	vmul.f32	s1, s0, s15
 802202a:	db10      	blt.n	802204e <scalbnf+0x5e>
 802202c:	ee10 2a90 	vmov	r2, s1
 8022030:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8022034:	3b19      	subs	r3, #25
 8022036:	4403      	add	r3, r0
 8022038:	2bfe      	cmp	r3, #254	; 0xfe
 802203a:	dd0f      	ble.n	802205c <scalbnf+0x6c>
 802203c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80220a4 <scalbnf+0xb4>
 8022040:	eeb0 0a48 	vmov.f32	s0, s16
 8022044:	f000 f834 	bl	80220b0 <copysignf>
 8022048:	ee60 0a08 	vmul.f32	s1, s0, s16
 802204c:	e7df      	b.n	802200e <scalbnf+0x1e>
 802204e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80220a8 <scalbnf+0xb8>
 8022052:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8022056:	e7da      	b.n	802200e <scalbnf+0x1e>
 8022058:	0ddb      	lsrs	r3, r3, #23
 802205a:	e7ec      	b.n	8022036 <scalbnf+0x46>
 802205c:	2b00      	cmp	r3, #0
 802205e:	dd06      	ble.n	802206e <scalbnf+0x7e>
 8022060:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8022064:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8022068:	ee00 3a90 	vmov	s1, r3
 802206c:	e7cf      	b.n	802200e <scalbnf+0x1e>
 802206e:	f113 0f16 	cmn.w	r3, #22
 8022072:	da06      	bge.n	8022082 <scalbnf+0x92>
 8022074:	f24c 3350 	movw	r3, #50000	; 0xc350
 8022078:	4298      	cmp	r0, r3
 802207a:	dcdf      	bgt.n	802203c <scalbnf+0x4c>
 802207c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80220a8 <scalbnf+0xb8>
 8022080:	e7de      	b.n	8022040 <scalbnf+0x50>
 8022082:	3319      	adds	r3, #25
 8022084:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8022088:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 802208c:	eddf 7a07 	vldr	s15, [pc, #28]	; 80220ac <scalbnf+0xbc>
 8022090:	ee07 3a10 	vmov	s14, r3
 8022094:	ee67 0a27 	vmul.f32	s1, s14, s15
 8022098:	e7b9      	b.n	802200e <scalbnf+0x1e>
 802209a:	bf00      	nop
 802209c:	ffff3cb0 	.word	0xffff3cb0
 80220a0:	4c000000 	.word	0x4c000000
 80220a4:	7149f2ca 	.word	0x7149f2ca
 80220a8:	0da24260 	.word	0x0da24260
 80220ac:	33000000 	.word	0x33000000

080220b0 <copysignf>:
 80220b0:	ee10 3a10 	vmov	r3, s0
 80220b4:	ee10 2a90 	vmov	r2, s1
 80220b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80220bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80220c0:	4313      	orrs	r3, r2
 80220c2:	ee00 3a10 	vmov	s0, r3
 80220c6:	4770      	bx	lr

080220c8 <__assert_func>:
 80220c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80220ca:	461c      	mov	r4, r3
 80220cc:	4b09      	ldr	r3, [pc, #36]	; (80220f4 <__assert_func+0x2c>)
 80220ce:	681b      	ldr	r3, [r3, #0]
 80220d0:	4605      	mov	r5, r0
 80220d2:	68d8      	ldr	r0, [r3, #12]
 80220d4:	b152      	cbz	r2, 80220ec <__assert_func+0x24>
 80220d6:	4b08      	ldr	r3, [pc, #32]	; (80220f8 <__assert_func+0x30>)
 80220d8:	9100      	str	r1, [sp, #0]
 80220da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80220de:	4907      	ldr	r1, [pc, #28]	; (80220fc <__assert_func+0x34>)
 80220e0:	462b      	mov	r3, r5
 80220e2:	4622      	mov	r2, r4
 80220e4:	f000 f814 	bl	8022110 <fiprintf>
 80220e8:	f000 fd14 	bl	8022b14 <abort>
 80220ec:	4b04      	ldr	r3, [pc, #16]	; (8022100 <__assert_func+0x38>)
 80220ee:	461a      	mov	r2, r3
 80220f0:	e7f2      	b.n	80220d8 <__assert_func+0x10>
 80220f2:	bf00      	nop
 80220f4:	240000e4 	.word	0x240000e4
 80220f8:	08024040 	.word	0x08024040
 80220fc:	0802404d 	.word	0x0802404d
 8022100:	0802407b 	.word	0x0802407b

08022104 <__errno>:
 8022104:	4b01      	ldr	r3, [pc, #4]	; (802210c <__errno+0x8>)
 8022106:	6818      	ldr	r0, [r3, #0]
 8022108:	4770      	bx	lr
 802210a:	bf00      	nop
 802210c:	240000e4 	.word	0x240000e4

08022110 <fiprintf>:
 8022110:	b40e      	push	{r1, r2, r3}
 8022112:	b503      	push	{r0, r1, lr}
 8022114:	4601      	mov	r1, r0
 8022116:	ab03      	add	r3, sp, #12
 8022118:	4805      	ldr	r0, [pc, #20]	; (8022130 <fiprintf+0x20>)
 802211a:	f853 2b04 	ldr.w	r2, [r3], #4
 802211e:	6800      	ldr	r0, [r0, #0]
 8022120:	9301      	str	r3, [sp, #4]
 8022122:	f000 f867 	bl	80221f4 <_vfiprintf_r>
 8022126:	b002      	add	sp, #8
 8022128:	f85d eb04 	ldr.w	lr, [sp], #4
 802212c:	b003      	add	sp, #12
 802212e:	4770      	bx	lr
 8022130:	240000e4 	.word	0x240000e4

08022134 <__libc_init_array>:
 8022134:	b570      	push	{r4, r5, r6, lr}
 8022136:	4e0d      	ldr	r6, [pc, #52]	; (802216c <__libc_init_array+0x38>)
 8022138:	4c0d      	ldr	r4, [pc, #52]	; (8022170 <__libc_init_array+0x3c>)
 802213a:	1ba4      	subs	r4, r4, r6
 802213c:	10a4      	asrs	r4, r4, #2
 802213e:	2500      	movs	r5, #0
 8022140:	42a5      	cmp	r5, r4
 8022142:	d109      	bne.n	8022158 <__libc_init_array+0x24>
 8022144:	4e0b      	ldr	r6, [pc, #44]	; (8022174 <__libc_init_array+0x40>)
 8022146:	4c0c      	ldr	r4, [pc, #48]	; (8022178 <__libc_init_array+0x44>)
 8022148:	f001 f87c 	bl	8023244 <_init>
 802214c:	1ba4      	subs	r4, r4, r6
 802214e:	10a4      	asrs	r4, r4, #2
 8022150:	2500      	movs	r5, #0
 8022152:	42a5      	cmp	r5, r4
 8022154:	d105      	bne.n	8022162 <__libc_init_array+0x2e>
 8022156:	bd70      	pop	{r4, r5, r6, pc}
 8022158:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802215c:	4798      	blx	r3
 802215e:	3501      	adds	r5, #1
 8022160:	e7ee      	b.n	8022140 <__libc_init_array+0xc>
 8022162:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022166:	4798      	blx	r3
 8022168:	3501      	adds	r5, #1
 802216a:	e7f2      	b.n	8022152 <__libc_init_array+0x1e>
 802216c:	0802411c 	.word	0x0802411c
 8022170:	0802411c 	.word	0x0802411c
 8022174:	0802411c 	.word	0x0802411c
 8022178:	0802412c 	.word	0x0802412c

0802217c <memcpy>:
 802217c:	b510      	push	{r4, lr}
 802217e:	1e43      	subs	r3, r0, #1
 8022180:	440a      	add	r2, r1
 8022182:	4291      	cmp	r1, r2
 8022184:	d100      	bne.n	8022188 <memcpy+0xc>
 8022186:	bd10      	pop	{r4, pc}
 8022188:	f811 4b01 	ldrb.w	r4, [r1], #1
 802218c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022190:	e7f7      	b.n	8022182 <memcpy+0x6>

08022192 <memset>:
 8022192:	4402      	add	r2, r0
 8022194:	4603      	mov	r3, r0
 8022196:	4293      	cmp	r3, r2
 8022198:	d100      	bne.n	802219c <memset+0xa>
 802219a:	4770      	bx	lr
 802219c:	f803 1b01 	strb.w	r1, [r3], #1
 80221a0:	e7f9      	b.n	8022196 <memset+0x4>

080221a2 <__sfputc_r>:
 80221a2:	6893      	ldr	r3, [r2, #8]
 80221a4:	3b01      	subs	r3, #1
 80221a6:	2b00      	cmp	r3, #0
 80221a8:	b410      	push	{r4}
 80221aa:	6093      	str	r3, [r2, #8]
 80221ac:	da08      	bge.n	80221c0 <__sfputc_r+0x1e>
 80221ae:	6994      	ldr	r4, [r2, #24]
 80221b0:	42a3      	cmp	r3, r4
 80221b2:	db01      	blt.n	80221b8 <__sfputc_r+0x16>
 80221b4:	290a      	cmp	r1, #10
 80221b6:	d103      	bne.n	80221c0 <__sfputc_r+0x1e>
 80221b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80221bc:	f000 bbea 	b.w	8022994 <__swbuf_r>
 80221c0:	6813      	ldr	r3, [r2, #0]
 80221c2:	1c58      	adds	r0, r3, #1
 80221c4:	6010      	str	r0, [r2, #0]
 80221c6:	7019      	strb	r1, [r3, #0]
 80221c8:	4608      	mov	r0, r1
 80221ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80221ce:	4770      	bx	lr

080221d0 <__sfputs_r>:
 80221d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80221d2:	4606      	mov	r6, r0
 80221d4:	460f      	mov	r7, r1
 80221d6:	4614      	mov	r4, r2
 80221d8:	18d5      	adds	r5, r2, r3
 80221da:	42ac      	cmp	r4, r5
 80221dc:	d101      	bne.n	80221e2 <__sfputs_r+0x12>
 80221de:	2000      	movs	r0, #0
 80221e0:	e007      	b.n	80221f2 <__sfputs_r+0x22>
 80221e2:	463a      	mov	r2, r7
 80221e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80221e8:	4630      	mov	r0, r6
 80221ea:	f7ff ffda 	bl	80221a2 <__sfputc_r>
 80221ee:	1c43      	adds	r3, r0, #1
 80221f0:	d1f3      	bne.n	80221da <__sfputs_r+0xa>
 80221f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080221f4 <_vfiprintf_r>:
 80221f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221f8:	460c      	mov	r4, r1
 80221fa:	b09d      	sub	sp, #116	; 0x74
 80221fc:	4617      	mov	r7, r2
 80221fe:	461d      	mov	r5, r3
 8022200:	4606      	mov	r6, r0
 8022202:	b118      	cbz	r0, 802220c <_vfiprintf_r+0x18>
 8022204:	6983      	ldr	r3, [r0, #24]
 8022206:	b90b      	cbnz	r3, 802220c <_vfiprintf_r+0x18>
 8022208:	f000 fd7c 	bl	8022d04 <__sinit>
 802220c:	4b7c      	ldr	r3, [pc, #496]	; (8022400 <_vfiprintf_r+0x20c>)
 802220e:	429c      	cmp	r4, r3
 8022210:	d158      	bne.n	80222c4 <_vfiprintf_r+0xd0>
 8022212:	6874      	ldr	r4, [r6, #4]
 8022214:	89a3      	ldrh	r3, [r4, #12]
 8022216:	0718      	lsls	r0, r3, #28
 8022218:	d55e      	bpl.n	80222d8 <_vfiprintf_r+0xe4>
 802221a:	6923      	ldr	r3, [r4, #16]
 802221c:	2b00      	cmp	r3, #0
 802221e:	d05b      	beq.n	80222d8 <_vfiprintf_r+0xe4>
 8022220:	2300      	movs	r3, #0
 8022222:	9309      	str	r3, [sp, #36]	; 0x24
 8022224:	2320      	movs	r3, #32
 8022226:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802222a:	2330      	movs	r3, #48	; 0x30
 802222c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022230:	9503      	str	r5, [sp, #12]
 8022232:	f04f 0b01 	mov.w	fp, #1
 8022236:	46b8      	mov	r8, r7
 8022238:	4645      	mov	r5, r8
 802223a:	f815 3b01 	ldrb.w	r3, [r5], #1
 802223e:	b10b      	cbz	r3, 8022244 <_vfiprintf_r+0x50>
 8022240:	2b25      	cmp	r3, #37	; 0x25
 8022242:	d154      	bne.n	80222ee <_vfiprintf_r+0xfa>
 8022244:	ebb8 0a07 	subs.w	sl, r8, r7
 8022248:	d00b      	beq.n	8022262 <_vfiprintf_r+0x6e>
 802224a:	4653      	mov	r3, sl
 802224c:	463a      	mov	r2, r7
 802224e:	4621      	mov	r1, r4
 8022250:	4630      	mov	r0, r6
 8022252:	f7ff ffbd 	bl	80221d0 <__sfputs_r>
 8022256:	3001      	adds	r0, #1
 8022258:	f000 80c2 	beq.w	80223e0 <_vfiprintf_r+0x1ec>
 802225c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802225e:	4453      	add	r3, sl
 8022260:	9309      	str	r3, [sp, #36]	; 0x24
 8022262:	f898 3000 	ldrb.w	r3, [r8]
 8022266:	2b00      	cmp	r3, #0
 8022268:	f000 80ba 	beq.w	80223e0 <_vfiprintf_r+0x1ec>
 802226c:	2300      	movs	r3, #0
 802226e:	f04f 32ff 	mov.w	r2, #4294967295
 8022272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022276:	9304      	str	r3, [sp, #16]
 8022278:	9307      	str	r3, [sp, #28]
 802227a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802227e:	931a      	str	r3, [sp, #104]	; 0x68
 8022280:	46a8      	mov	r8, r5
 8022282:	2205      	movs	r2, #5
 8022284:	f818 1b01 	ldrb.w	r1, [r8], #1
 8022288:	485e      	ldr	r0, [pc, #376]	; (8022404 <_vfiprintf_r+0x210>)
 802228a:	f7de f829 	bl	80002e0 <memchr>
 802228e:	9b04      	ldr	r3, [sp, #16]
 8022290:	bb78      	cbnz	r0, 80222f2 <_vfiprintf_r+0xfe>
 8022292:	06d9      	lsls	r1, r3, #27
 8022294:	bf44      	itt	mi
 8022296:	2220      	movmi	r2, #32
 8022298:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802229c:	071a      	lsls	r2, r3, #28
 802229e:	bf44      	itt	mi
 80222a0:	222b      	movmi	r2, #43	; 0x2b
 80222a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80222a6:	782a      	ldrb	r2, [r5, #0]
 80222a8:	2a2a      	cmp	r2, #42	; 0x2a
 80222aa:	d02a      	beq.n	8022302 <_vfiprintf_r+0x10e>
 80222ac:	9a07      	ldr	r2, [sp, #28]
 80222ae:	46a8      	mov	r8, r5
 80222b0:	2000      	movs	r0, #0
 80222b2:	250a      	movs	r5, #10
 80222b4:	4641      	mov	r1, r8
 80222b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80222ba:	3b30      	subs	r3, #48	; 0x30
 80222bc:	2b09      	cmp	r3, #9
 80222be:	d969      	bls.n	8022394 <_vfiprintf_r+0x1a0>
 80222c0:	b360      	cbz	r0, 802231c <_vfiprintf_r+0x128>
 80222c2:	e024      	b.n	802230e <_vfiprintf_r+0x11a>
 80222c4:	4b50      	ldr	r3, [pc, #320]	; (8022408 <_vfiprintf_r+0x214>)
 80222c6:	429c      	cmp	r4, r3
 80222c8:	d101      	bne.n	80222ce <_vfiprintf_r+0xda>
 80222ca:	68b4      	ldr	r4, [r6, #8]
 80222cc:	e7a2      	b.n	8022214 <_vfiprintf_r+0x20>
 80222ce:	4b4f      	ldr	r3, [pc, #316]	; (802240c <_vfiprintf_r+0x218>)
 80222d0:	429c      	cmp	r4, r3
 80222d2:	bf08      	it	eq
 80222d4:	68f4      	ldreq	r4, [r6, #12]
 80222d6:	e79d      	b.n	8022214 <_vfiprintf_r+0x20>
 80222d8:	4621      	mov	r1, r4
 80222da:	4630      	mov	r0, r6
 80222dc:	f000 fbac 	bl	8022a38 <__swsetup_r>
 80222e0:	2800      	cmp	r0, #0
 80222e2:	d09d      	beq.n	8022220 <_vfiprintf_r+0x2c>
 80222e4:	f04f 30ff 	mov.w	r0, #4294967295
 80222e8:	b01d      	add	sp, #116	; 0x74
 80222ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222ee:	46a8      	mov	r8, r5
 80222f0:	e7a2      	b.n	8022238 <_vfiprintf_r+0x44>
 80222f2:	4a44      	ldr	r2, [pc, #272]	; (8022404 <_vfiprintf_r+0x210>)
 80222f4:	1a80      	subs	r0, r0, r2
 80222f6:	fa0b f000 	lsl.w	r0, fp, r0
 80222fa:	4318      	orrs	r0, r3
 80222fc:	9004      	str	r0, [sp, #16]
 80222fe:	4645      	mov	r5, r8
 8022300:	e7be      	b.n	8022280 <_vfiprintf_r+0x8c>
 8022302:	9a03      	ldr	r2, [sp, #12]
 8022304:	1d11      	adds	r1, r2, #4
 8022306:	6812      	ldr	r2, [r2, #0]
 8022308:	9103      	str	r1, [sp, #12]
 802230a:	2a00      	cmp	r2, #0
 802230c:	db01      	blt.n	8022312 <_vfiprintf_r+0x11e>
 802230e:	9207      	str	r2, [sp, #28]
 8022310:	e004      	b.n	802231c <_vfiprintf_r+0x128>
 8022312:	4252      	negs	r2, r2
 8022314:	f043 0302 	orr.w	r3, r3, #2
 8022318:	9207      	str	r2, [sp, #28]
 802231a:	9304      	str	r3, [sp, #16]
 802231c:	f898 3000 	ldrb.w	r3, [r8]
 8022320:	2b2e      	cmp	r3, #46	; 0x2e
 8022322:	d10e      	bne.n	8022342 <_vfiprintf_r+0x14e>
 8022324:	f898 3001 	ldrb.w	r3, [r8, #1]
 8022328:	2b2a      	cmp	r3, #42	; 0x2a
 802232a:	d138      	bne.n	802239e <_vfiprintf_r+0x1aa>
 802232c:	9b03      	ldr	r3, [sp, #12]
 802232e:	1d1a      	adds	r2, r3, #4
 8022330:	681b      	ldr	r3, [r3, #0]
 8022332:	9203      	str	r2, [sp, #12]
 8022334:	2b00      	cmp	r3, #0
 8022336:	bfb8      	it	lt
 8022338:	f04f 33ff 	movlt.w	r3, #4294967295
 802233c:	f108 0802 	add.w	r8, r8, #2
 8022340:	9305      	str	r3, [sp, #20]
 8022342:	4d33      	ldr	r5, [pc, #204]	; (8022410 <_vfiprintf_r+0x21c>)
 8022344:	f898 1000 	ldrb.w	r1, [r8]
 8022348:	2203      	movs	r2, #3
 802234a:	4628      	mov	r0, r5
 802234c:	f7dd ffc8 	bl	80002e0 <memchr>
 8022350:	b140      	cbz	r0, 8022364 <_vfiprintf_r+0x170>
 8022352:	2340      	movs	r3, #64	; 0x40
 8022354:	1b40      	subs	r0, r0, r5
 8022356:	fa03 f000 	lsl.w	r0, r3, r0
 802235a:	9b04      	ldr	r3, [sp, #16]
 802235c:	4303      	orrs	r3, r0
 802235e:	f108 0801 	add.w	r8, r8, #1
 8022362:	9304      	str	r3, [sp, #16]
 8022364:	f898 1000 	ldrb.w	r1, [r8]
 8022368:	482a      	ldr	r0, [pc, #168]	; (8022414 <_vfiprintf_r+0x220>)
 802236a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802236e:	2206      	movs	r2, #6
 8022370:	f108 0701 	add.w	r7, r8, #1
 8022374:	f7dd ffb4 	bl	80002e0 <memchr>
 8022378:	2800      	cmp	r0, #0
 802237a:	d037      	beq.n	80223ec <_vfiprintf_r+0x1f8>
 802237c:	4b26      	ldr	r3, [pc, #152]	; (8022418 <_vfiprintf_r+0x224>)
 802237e:	bb1b      	cbnz	r3, 80223c8 <_vfiprintf_r+0x1d4>
 8022380:	9b03      	ldr	r3, [sp, #12]
 8022382:	3307      	adds	r3, #7
 8022384:	f023 0307 	bic.w	r3, r3, #7
 8022388:	3308      	adds	r3, #8
 802238a:	9303      	str	r3, [sp, #12]
 802238c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802238e:	444b      	add	r3, r9
 8022390:	9309      	str	r3, [sp, #36]	; 0x24
 8022392:	e750      	b.n	8022236 <_vfiprintf_r+0x42>
 8022394:	fb05 3202 	mla	r2, r5, r2, r3
 8022398:	2001      	movs	r0, #1
 802239a:	4688      	mov	r8, r1
 802239c:	e78a      	b.n	80222b4 <_vfiprintf_r+0xc0>
 802239e:	2300      	movs	r3, #0
 80223a0:	f108 0801 	add.w	r8, r8, #1
 80223a4:	9305      	str	r3, [sp, #20]
 80223a6:	4619      	mov	r1, r3
 80223a8:	250a      	movs	r5, #10
 80223aa:	4640      	mov	r0, r8
 80223ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80223b0:	3a30      	subs	r2, #48	; 0x30
 80223b2:	2a09      	cmp	r2, #9
 80223b4:	d903      	bls.n	80223be <_vfiprintf_r+0x1ca>
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	d0c3      	beq.n	8022342 <_vfiprintf_r+0x14e>
 80223ba:	9105      	str	r1, [sp, #20]
 80223bc:	e7c1      	b.n	8022342 <_vfiprintf_r+0x14e>
 80223be:	fb05 2101 	mla	r1, r5, r1, r2
 80223c2:	2301      	movs	r3, #1
 80223c4:	4680      	mov	r8, r0
 80223c6:	e7f0      	b.n	80223aa <_vfiprintf_r+0x1b6>
 80223c8:	ab03      	add	r3, sp, #12
 80223ca:	9300      	str	r3, [sp, #0]
 80223cc:	4622      	mov	r2, r4
 80223ce:	4b13      	ldr	r3, [pc, #76]	; (802241c <_vfiprintf_r+0x228>)
 80223d0:	a904      	add	r1, sp, #16
 80223d2:	4630      	mov	r0, r6
 80223d4:	f3af 8000 	nop.w
 80223d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80223dc:	4681      	mov	r9, r0
 80223de:	d1d5      	bne.n	802238c <_vfiprintf_r+0x198>
 80223e0:	89a3      	ldrh	r3, [r4, #12]
 80223e2:	065b      	lsls	r3, r3, #25
 80223e4:	f53f af7e 	bmi.w	80222e4 <_vfiprintf_r+0xf0>
 80223e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80223ea:	e77d      	b.n	80222e8 <_vfiprintf_r+0xf4>
 80223ec:	ab03      	add	r3, sp, #12
 80223ee:	9300      	str	r3, [sp, #0]
 80223f0:	4622      	mov	r2, r4
 80223f2:	4b0a      	ldr	r3, [pc, #40]	; (802241c <_vfiprintf_r+0x228>)
 80223f4:	a904      	add	r1, sp, #16
 80223f6:	4630      	mov	r0, r6
 80223f8:	f000 f888 	bl	802250c <_printf_i>
 80223fc:	e7ec      	b.n	80223d8 <_vfiprintf_r+0x1e4>
 80223fe:	bf00      	nop
 8022400:	080240d4 	.word	0x080240d4
 8022404:	08024080 	.word	0x08024080
 8022408:	080240f4 	.word	0x080240f4
 802240c:	080240b4 	.word	0x080240b4
 8022410:	08024086 	.word	0x08024086
 8022414:	0802408a 	.word	0x0802408a
 8022418:	00000000 	.word	0x00000000
 802241c:	080221d1 	.word	0x080221d1

08022420 <_printf_common>:
 8022420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022424:	4691      	mov	r9, r2
 8022426:	461f      	mov	r7, r3
 8022428:	688a      	ldr	r2, [r1, #8]
 802242a:	690b      	ldr	r3, [r1, #16]
 802242c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022430:	4293      	cmp	r3, r2
 8022432:	bfb8      	it	lt
 8022434:	4613      	movlt	r3, r2
 8022436:	f8c9 3000 	str.w	r3, [r9]
 802243a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802243e:	4606      	mov	r6, r0
 8022440:	460c      	mov	r4, r1
 8022442:	b112      	cbz	r2, 802244a <_printf_common+0x2a>
 8022444:	3301      	adds	r3, #1
 8022446:	f8c9 3000 	str.w	r3, [r9]
 802244a:	6823      	ldr	r3, [r4, #0]
 802244c:	0699      	lsls	r1, r3, #26
 802244e:	bf42      	ittt	mi
 8022450:	f8d9 3000 	ldrmi.w	r3, [r9]
 8022454:	3302      	addmi	r3, #2
 8022456:	f8c9 3000 	strmi.w	r3, [r9]
 802245a:	6825      	ldr	r5, [r4, #0]
 802245c:	f015 0506 	ands.w	r5, r5, #6
 8022460:	d107      	bne.n	8022472 <_printf_common+0x52>
 8022462:	f104 0a19 	add.w	sl, r4, #25
 8022466:	68e3      	ldr	r3, [r4, #12]
 8022468:	f8d9 2000 	ldr.w	r2, [r9]
 802246c:	1a9b      	subs	r3, r3, r2
 802246e:	42ab      	cmp	r3, r5
 8022470:	dc28      	bgt.n	80224c4 <_printf_common+0xa4>
 8022472:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8022476:	6822      	ldr	r2, [r4, #0]
 8022478:	3300      	adds	r3, #0
 802247a:	bf18      	it	ne
 802247c:	2301      	movne	r3, #1
 802247e:	0692      	lsls	r2, r2, #26
 8022480:	d42d      	bmi.n	80224de <_printf_common+0xbe>
 8022482:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022486:	4639      	mov	r1, r7
 8022488:	4630      	mov	r0, r6
 802248a:	47c0      	blx	r8
 802248c:	3001      	adds	r0, #1
 802248e:	d020      	beq.n	80224d2 <_printf_common+0xb2>
 8022490:	6823      	ldr	r3, [r4, #0]
 8022492:	68e5      	ldr	r5, [r4, #12]
 8022494:	f8d9 2000 	ldr.w	r2, [r9]
 8022498:	f003 0306 	and.w	r3, r3, #6
 802249c:	2b04      	cmp	r3, #4
 802249e:	bf08      	it	eq
 80224a0:	1aad      	subeq	r5, r5, r2
 80224a2:	68a3      	ldr	r3, [r4, #8]
 80224a4:	6922      	ldr	r2, [r4, #16]
 80224a6:	bf0c      	ite	eq
 80224a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80224ac:	2500      	movne	r5, #0
 80224ae:	4293      	cmp	r3, r2
 80224b0:	bfc4      	itt	gt
 80224b2:	1a9b      	subgt	r3, r3, r2
 80224b4:	18ed      	addgt	r5, r5, r3
 80224b6:	f04f 0900 	mov.w	r9, #0
 80224ba:	341a      	adds	r4, #26
 80224bc:	454d      	cmp	r5, r9
 80224be:	d11a      	bne.n	80224f6 <_printf_common+0xd6>
 80224c0:	2000      	movs	r0, #0
 80224c2:	e008      	b.n	80224d6 <_printf_common+0xb6>
 80224c4:	2301      	movs	r3, #1
 80224c6:	4652      	mov	r2, sl
 80224c8:	4639      	mov	r1, r7
 80224ca:	4630      	mov	r0, r6
 80224cc:	47c0      	blx	r8
 80224ce:	3001      	adds	r0, #1
 80224d0:	d103      	bne.n	80224da <_printf_common+0xba>
 80224d2:	f04f 30ff 	mov.w	r0, #4294967295
 80224d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224da:	3501      	adds	r5, #1
 80224dc:	e7c3      	b.n	8022466 <_printf_common+0x46>
 80224de:	18e1      	adds	r1, r4, r3
 80224e0:	1c5a      	adds	r2, r3, #1
 80224e2:	2030      	movs	r0, #48	; 0x30
 80224e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80224e8:	4422      	add	r2, r4
 80224ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80224ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80224f2:	3302      	adds	r3, #2
 80224f4:	e7c5      	b.n	8022482 <_printf_common+0x62>
 80224f6:	2301      	movs	r3, #1
 80224f8:	4622      	mov	r2, r4
 80224fa:	4639      	mov	r1, r7
 80224fc:	4630      	mov	r0, r6
 80224fe:	47c0      	blx	r8
 8022500:	3001      	adds	r0, #1
 8022502:	d0e6      	beq.n	80224d2 <_printf_common+0xb2>
 8022504:	f109 0901 	add.w	r9, r9, #1
 8022508:	e7d8      	b.n	80224bc <_printf_common+0x9c>
	...

0802250c <_printf_i>:
 802250c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022510:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8022514:	460c      	mov	r4, r1
 8022516:	7e09      	ldrb	r1, [r1, #24]
 8022518:	b085      	sub	sp, #20
 802251a:	296e      	cmp	r1, #110	; 0x6e
 802251c:	4617      	mov	r7, r2
 802251e:	4606      	mov	r6, r0
 8022520:	4698      	mov	r8, r3
 8022522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022524:	f000 80b3 	beq.w	802268e <_printf_i+0x182>
 8022528:	d822      	bhi.n	8022570 <_printf_i+0x64>
 802252a:	2963      	cmp	r1, #99	; 0x63
 802252c:	d036      	beq.n	802259c <_printf_i+0x90>
 802252e:	d80a      	bhi.n	8022546 <_printf_i+0x3a>
 8022530:	2900      	cmp	r1, #0
 8022532:	f000 80b9 	beq.w	80226a8 <_printf_i+0x19c>
 8022536:	2958      	cmp	r1, #88	; 0x58
 8022538:	f000 8083 	beq.w	8022642 <_printf_i+0x136>
 802253c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022540:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8022544:	e032      	b.n	80225ac <_printf_i+0xa0>
 8022546:	2964      	cmp	r1, #100	; 0x64
 8022548:	d001      	beq.n	802254e <_printf_i+0x42>
 802254a:	2969      	cmp	r1, #105	; 0x69
 802254c:	d1f6      	bne.n	802253c <_printf_i+0x30>
 802254e:	6820      	ldr	r0, [r4, #0]
 8022550:	6813      	ldr	r3, [r2, #0]
 8022552:	0605      	lsls	r5, r0, #24
 8022554:	f103 0104 	add.w	r1, r3, #4
 8022558:	d52a      	bpl.n	80225b0 <_printf_i+0xa4>
 802255a:	681b      	ldr	r3, [r3, #0]
 802255c:	6011      	str	r1, [r2, #0]
 802255e:	2b00      	cmp	r3, #0
 8022560:	da03      	bge.n	802256a <_printf_i+0x5e>
 8022562:	222d      	movs	r2, #45	; 0x2d
 8022564:	425b      	negs	r3, r3
 8022566:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802256a:	486f      	ldr	r0, [pc, #444]	; (8022728 <_printf_i+0x21c>)
 802256c:	220a      	movs	r2, #10
 802256e:	e039      	b.n	80225e4 <_printf_i+0xd8>
 8022570:	2973      	cmp	r1, #115	; 0x73
 8022572:	f000 809d 	beq.w	80226b0 <_printf_i+0x1a4>
 8022576:	d808      	bhi.n	802258a <_printf_i+0x7e>
 8022578:	296f      	cmp	r1, #111	; 0x6f
 802257a:	d020      	beq.n	80225be <_printf_i+0xb2>
 802257c:	2970      	cmp	r1, #112	; 0x70
 802257e:	d1dd      	bne.n	802253c <_printf_i+0x30>
 8022580:	6823      	ldr	r3, [r4, #0]
 8022582:	f043 0320 	orr.w	r3, r3, #32
 8022586:	6023      	str	r3, [r4, #0]
 8022588:	e003      	b.n	8022592 <_printf_i+0x86>
 802258a:	2975      	cmp	r1, #117	; 0x75
 802258c:	d017      	beq.n	80225be <_printf_i+0xb2>
 802258e:	2978      	cmp	r1, #120	; 0x78
 8022590:	d1d4      	bne.n	802253c <_printf_i+0x30>
 8022592:	2378      	movs	r3, #120	; 0x78
 8022594:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022598:	4864      	ldr	r0, [pc, #400]	; (802272c <_printf_i+0x220>)
 802259a:	e055      	b.n	8022648 <_printf_i+0x13c>
 802259c:	6813      	ldr	r3, [r2, #0]
 802259e:	1d19      	adds	r1, r3, #4
 80225a0:	681b      	ldr	r3, [r3, #0]
 80225a2:	6011      	str	r1, [r2, #0]
 80225a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80225a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80225ac:	2301      	movs	r3, #1
 80225ae:	e08c      	b.n	80226ca <_printf_i+0x1be>
 80225b0:	681b      	ldr	r3, [r3, #0]
 80225b2:	6011      	str	r1, [r2, #0]
 80225b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80225b8:	bf18      	it	ne
 80225ba:	b21b      	sxthne	r3, r3
 80225bc:	e7cf      	b.n	802255e <_printf_i+0x52>
 80225be:	6813      	ldr	r3, [r2, #0]
 80225c0:	6825      	ldr	r5, [r4, #0]
 80225c2:	1d18      	adds	r0, r3, #4
 80225c4:	6010      	str	r0, [r2, #0]
 80225c6:	0628      	lsls	r0, r5, #24
 80225c8:	d501      	bpl.n	80225ce <_printf_i+0xc2>
 80225ca:	681b      	ldr	r3, [r3, #0]
 80225cc:	e002      	b.n	80225d4 <_printf_i+0xc8>
 80225ce:	0668      	lsls	r0, r5, #25
 80225d0:	d5fb      	bpl.n	80225ca <_printf_i+0xbe>
 80225d2:	881b      	ldrh	r3, [r3, #0]
 80225d4:	4854      	ldr	r0, [pc, #336]	; (8022728 <_printf_i+0x21c>)
 80225d6:	296f      	cmp	r1, #111	; 0x6f
 80225d8:	bf14      	ite	ne
 80225da:	220a      	movne	r2, #10
 80225dc:	2208      	moveq	r2, #8
 80225de:	2100      	movs	r1, #0
 80225e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80225e4:	6865      	ldr	r5, [r4, #4]
 80225e6:	60a5      	str	r5, [r4, #8]
 80225e8:	2d00      	cmp	r5, #0
 80225ea:	f2c0 8095 	blt.w	8022718 <_printf_i+0x20c>
 80225ee:	6821      	ldr	r1, [r4, #0]
 80225f0:	f021 0104 	bic.w	r1, r1, #4
 80225f4:	6021      	str	r1, [r4, #0]
 80225f6:	2b00      	cmp	r3, #0
 80225f8:	d13d      	bne.n	8022676 <_printf_i+0x16a>
 80225fa:	2d00      	cmp	r5, #0
 80225fc:	f040 808e 	bne.w	802271c <_printf_i+0x210>
 8022600:	4665      	mov	r5, ip
 8022602:	2a08      	cmp	r2, #8
 8022604:	d10b      	bne.n	802261e <_printf_i+0x112>
 8022606:	6823      	ldr	r3, [r4, #0]
 8022608:	07db      	lsls	r3, r3, #31
 802260a:	d508      	bpl.n	802261e <_printf_i+0x112>
 802260c:	6923      	ldr	r3, [r4, #16]
 802260e:	6862      	ldr	r2, [r4, #4]
 8022610:	429a      	cmp	r2, r3
 8022612:	bfde      	ittt	le
 8022614:	2330      	movle	r3, #48	; 0x30
 8022616:	f805 3c01 	strble.w	r3, [r5, #-1]
 802261a:	f105 35ff 	addle.w	r5, r5, #4294967295
 802261e:	ebac 0305 	sub.w	r3, ip, r5
 8022622:	6123      	str	r3, [r4, #16]
 8022624:	f8cd 8000 	str.w	r8, [sp]
 8022628:	463b      	mov	r3, r7
 802262a:	aa03      	add	r2, sp, #12
 802262c:	4621      	mov	r1, r4
 802262e:	4630      	mov	r0, r6
 8022630:	f7ff fef6 	bl	8022420 <_printf_common>
 8022634:	3001      	adds	r0, #1
 8022636:	d14d      	bne.n	80226d4 <_printf_i+0x1c8>
 8022638:	f04f 30ff 	mov.w	r0, #4294967295
 802263c:	b005      	add	sp, #20
 802263e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022642:	4839      	ldr	r0, [pc, #228]	; (8022728 <_printf_i+0x21c>)
 8022644:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8022648:	6813      	ldr	r3, [r2, #0]
 802264a:	6821      	ldr	r1, [r4, #0]
 802264c:	1d1d      	adds	r5, r3, #4
 802264e:	681b      	ldr	r3, [r3, #0]
 8022650:	6015      	str	r5, [r2, #0]
 8022652:	060a      	lsls	r2, r1, #24
 8022654:	d50b      	bpl.n	802266e <_printf_i+0x162>
 8022656:	07ca      	lsls	r2, r1, #31
 8022658:	bf44      	itt	mi
 802265a:	f041 0120 	orrmi.w	r1, r1, #32
 802265e:	6021      	strmi	r1, [r4, #0]
 8022660:	b91b      	cbnz	r3, 802266a <_printf_i+0x15e>
 8022662:	6822      	ldr	r2, [r4, #0]
 8022664:	f022 0220 	bic.w	r2, r2, #32
 8022668:	6022      	str	r2, [r4, #0]
 802266a:	2210      	movs	r2, #16
 802266c:	e7b7      	b.n	80225de <_printf_i+0xd2>
 802266e:	064d      	lsls	r5, r1, #25
 8022670:	bf48      	it	mi
 8022672:	b29b      	uxthmi	r3, r3
 8022674:	e7ef      	b.n	8022656 <_printf_i+0x14a>
 8022676:	4665      	mov	r5, ip
 8022678:	fbb3 f1f2 	udiv	r1, r3, r2
 802267c:	fb02 3311 	mls	r3, r2, r1, r3
 8022680:	5cc3      	ldrb	r3, [r0, r3]
 8022682:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8022686:	460b      	mov	r3, r1
 8022688:	2900      	cmp	r1, #0
 802268a:	d1f5      	bne.n	8022678 <_printf_i+0x16c>
 802268c:	e7b9      	b.n	8022602 <_printf_i+0xf6>
 802268e:	6813      	ldr	r3, [r2, #0]
 8022690:	6825      	ldr	r5, [r4, #0]
 8022692:	6961      	ldr	r1, [r4, #20]
 8022694:	1d18      	adds	r0, r3, #4
 8022696:	6010      	str	r0, [r2, #0]
 8022698:	0628      	lsls	r0, r5, #24
 802269a:	681b      	ldr	r3, [r3, #0]
 802269c:	d501      	bpl.n	80226a2 <_printf_i+0x196>
 802269e:	6019      	str	r1, [r3, #0]
 80226a0:	e002      	b.n	80226a8 <_printf_i+0x19c>
 80226a2:	066a      	lsls	r2, r5, #25
 80226a4:	d5fb      	bpl.n	802269e <_printf_i+0x192>
 80226a6:	8019      	strh	r1, [r3, #0]
 80226a8:	2300      	movs	r3, #0
 80226aa:	6123      	str	r3, [r4, #16]
 80226ac:	4665      	mov	r5, ip
 80226ae:	e7b9      	b.n	8022624 <_printf_i+0x118>
 80226b0:	6813      	ldr	r3, [r2, #0]
 80226b2:	1d19      	adds	r1, r3, #4
 80226b4:	6011      	str	r1, [r2, #0]
 80226b6:	681d      	ldr	r5, [r3, #0]
 80226b8:	6862      	ldr	r2, [r4, #4]
 80226ba:	2100      	movs	r1, #0
 80226bc:	4628      	mov	r0, r5
 80226be:	f7dd fe0f 	bl	80002e0 <memchr>
 80226c2:	b108      	cbz	r0, 80226c8 <_printf_i+0x1bc>
 80226c4:	1b40      	subs	r0, r0, r5
 80226c6:	6060      	str	r0, [r4, #4]
 80226c8:	6863      	ldr	r3, [r4, #4]
 80226ca:	6123      	str	r3, [r4, #16]
 80226cc:	2300      	movs	r3, #0
 80226ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80226d2:	e7a7      	b.n	8022624 <_printf_i+0x118>
 80226d4:	6923      	ldr	r3, [r4, #16]
 80226d6:	462a      	mov	r2, r5
 80226d8:	4639      	mov	r1, r7
 80226da:	4630      	mov	r0, r6
 80226dc:	47c0      	blx	r8
 80226de:	3001      	adds	r0, #1
 80226e0:	d0aa      	beq.n	8022638 <_printf_i+0x12c>
 80226e2:	6823      	ldr	r3, [r4, #0]
 80226e4:	079b      	lsls	r3, r3, #30
 80226e6:	d413      	bmi.n	8022710 <_printf_i+0x204>
 80226e8:	68e0      	ldr	r0, [r4, #12]
 80226ea:	9b03      	ldr	r3, [sp, #12]
 80226ec:	4298      	cmp	r0, r3
 80226ee:	bfb8      	it	lt
 80226f0:	4618      	movlt	r0, r3
 80226f2:	e7a3      	b.n	802263c <_printf_i+0x130>
 80226f4:	2301      	movs	r3, #1
 80226f6:	464a      	mov	r2, r9
 80226f8:	4639      	mov	r1, r7
 80226fa:	4630      	mov	r0, r6
 80226fc:	47c0      	blx	r8
 80226fe:	3001      	adds	r0, #1
 8022700:	d09a      	beq.n	8022638 <_printf_i+0x12c>
 8022702:	3501      	adds	r5, #1
 8022704:	68e3      	ldr	r3, [r4, #12]
 8022706:	9a03      	ldr	r2, [sp, #12]
 8022708:	1a9b      	subs	r3, r3, r2
 802270a:	42ab      	cmp	r3, r5
 802270c:	dcf2      	bgt.n	80226f4 <_printf_i+0x1e8>
 802270e:	e7eb      	b.n	80226e8 <_printf_i+0x1dc>
 8022710:	2500      	movs	r5, #0
 8022712:	f104 0919 	add.w	r9, r4, #25
 8022716:	e7f5      	b.n	8022704 <_printf_i+0x1f8>
 8022718:	2b00      	cmp	r3, #0
 802271a:	d1ac      	bne.n	8022676 <_printf_i+0x16a>
 802271c:	7803      	ldrb	r3, [r0, #0]
 802271e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022722:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022726:	e76c      	b.n	8022602 <_printf_i+0xf6>
 8022728:	08024091 	.word	0x08024091
 802272c:	080240a2 	.word	0x080240a2

08022730 <iprintf>:
 8022730:	b40f      	push	{r0, r1, r2, r3}
 8022732:	4b0a      	ldr	r3, [pc, #40]	; (802275c <iprintf+0x2c>)
 8022734:	b513      	push	{r0, r1, r4, lr}
 8022736:	681c      	ldr	r4, [r3, #0]
 8022738:	b124      	cbz	r4, 8022744 <iprintf+0x14>
 802273a:	69a3      	ldr	r3, [r4, #24]
 802273c:	b913      	cbnz	r3, 8022744 <iprintf+0x14>
 802273e:	4620      	mov	r0, r4
 8022740:	f000 fae0 	bl	8022d04 <__sinit>
 8022744:	ab05      	add	r3, sp, #20
 8022746:	9a04      	ldr	r2, [sp, #16]
 8022748:	68a1      	ldr	r1, [r4, #8]
 802274a:	9301      	str	r3, [sp, #4]
 802274c:	4620      	mov	r0, r4
 802274e:	f7ff fd51 	bl	80221f4 <_vfiprintf_r>
 8022752:	b002      	add	sp, #8
 8022754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022758:	b004      	add	sp, #16
 802275a:	4770      	bx	lr
 802275c:	240000e4 	.word	0x240000e4

08022760 <_puts_r>:
 8022760:	b570      	push	{r4, r5, r6, lr}
 8022762:	460e      	mov	r6, r1
 8022764:	4605      	mov	r5, r0
 8022766:	b118      	cbz	r0, 8022770 <_puts_r+0x10>
 8022768:	6983      	ldr	r3, [r0, #24]
 802276a:	b90b      	cbnz	r3, 8022770 <_puts_r+0x10>
 802276c:	f000 faca 	bl	8022d04 <__sinit>
 8022770:	69ab      	ldr	r3, [r5, #24]
 8022772:	68ac      	ldr	r4, [r5, #8]
 8022774:	b913      	cbnz	r3, 802277c <_puts_r+0x1c>
 8022776:	4628      	mov	r0, r5
 8022778:	f000 fac4 	bl	8022d04 <__sinit>
 802277c:	4b23      	ldr	r3, [pc, #140]	; (802280c <_puts_r+0xac>)
 802277e:	429c      	cmp	r4, r3
 8022780:	d117      	bne.n	80227b2 <_puts_r+0x52>
 8022782:	686c      	ldr	r4, [r5, #4]
 8022784:	89a3      	ldrh	r3, [r4, #12]
 8022786:	071b      	lsls	r3, r3, #28
 8022788:	d51d      	bpl.n	80227c6 <_puts_r+0x66>
 802278a:	6923      	ldr	r3, [r4, #16]
 802278c:	b1db      	cbz	r3, 80227c6 <_puts_r+0x66>
 802278e:	3e01      	subs	r6, #1
 8022790:	68a3      	ldr	r3, [r4, #8]
 8022792:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022796:	3b01      	subs	r3, #1
 8022798:	60a3      	str	r3, [r4, #8]
 802279a:	b9e9      	cbnz	r1, 80227d8 <_puts_r+0x78>
 802279c:	2b00      	cmp	r3, #0
 802279e:	da2e      	bge.n	80227fe <_puts_r+0x9e>
 80227a0:	4622      	mov	r2, r4
 80227a2:	210a      	movs	r1, #10
 80227a4:	4628      	mov	r0, r5
 80227a6:	f000 f8f5 	bl	8022994 <__swbuf_r>
 80227aa:	3001      	adds	r0, #1
 80227ac:	d011      	beq.n	80227d2 <_puts_r+0x72>
 80227ae:	200a      	movs	r0, #10
 80227b0:	e011      	b.n	80227d6 <_puts_r+0x76>
 80227b2:	4b17      	ldr	r3, [pc, #92]	; (8022810 <_puts_r+0xb0>)
 80227b4:	429c      	cmp	r4, r3
 80227b6:	d101      	bne.n	80227bc <_puts_r+0x5c>
 80227b8:	68ac      	ldr	r4, [r5, #8]
 80227ba:	e7e3      	b.n	8022784 <_puts_r+0x24>
 80227bc:	4b15      	ldr	r3, [pc, #84]	; (8022814 <_puts_r+0xb4>)
 80227be:	429c      	cmp	r4, r3
 80227c0:	bf08      	it	eq
 80227c2:	68ec      	ldreq	r4, [r5, #12]
 80227c4:	e7de      	b.n	8022784 <_puts_r+0x24>
 80227c6:	4621      	mov	r1, r4
 80227c8:	4628      	mov	r0, r5
 80227ca:	f000 f935 	bl	8022a38 <__swsetup_r>
 80227ce:	2800      	cmp	r0, #0
 80227d0:	d0dd      	beq.n	802278e <_puts_r+0x2e>
 80227d2:	f04f 30ff 	mov.w	r0, #4294967295
 80227d6:	bd70      	pop	{r4, r5, r6, pc}
 80227d8:	2b00      	cmp	r3, #0
 80227da:	da04      	bge.n	80227e6 <_puts_r+0x86>
 80227dc:	69a2      	ldr	r2, [r4, #24]
 80227de:	429a      	cmp	r2, r3
 80227e0:	dc06      	bgt.n	80227f0 <_puts_r+0x90>
 80227e2:	290a      	cmp	r1, #10
 80227e4:	d004      	beq.n	80227f0 <_puts_r+0x90>
 80227e6:	6823      	ldr	r3, [r4, #0]
 80227e8:	1c5a      	adds	r2, r3, #1
 80227ea:	6022      	str	r2, [r4, #0]
 80227ec:	7019      	strb	r1, [r3, #0]
 80227ee:	e7cf      	b.n	8022790 <_puts_r+0x30>
 80227f0:	4622      	mov	r2, r4
 80227f2:	4628      	mov	r0, r5
 80227f4:	f000 f8ce 	bl	8022994 <__swbuf_r>
 80227f8:	3001      	adds	r0, #1
 80227fa:	d1c9      	bne.n	8022790 <_puts_r+0x30>
 80227fc:	e7e9      	b.n	80227d2 <_puts_r+0x72>
 80227fe:	6823      	ldr	r3, [r4, #0]
 8022800:	200a      	movs	r0, #10
 8022802:	1c5a      	adds	r2, r3, #1
 8022804:	6022      	str	r2, [r4, #0]
 8022806:	7018      	strb	r0, [r3, #0]
 8022808:	e7e5      	b.n	80227d6 <_puts_r+0x76>
 802280a:	bf00      	nop
 802280c:	080240d4 	.word	0x080240d4
 8022810:	080240f4 	.word	0x080240f4
 8022814:	080240b4 	.word	0x080240b4

08022818 <puts>:
 8022818:	4b02      	ldr	r3, [pc, #8]	; (8022824 <puts+0xc>)
 802281a:	4601      	mov	r1, r0
 802281c:	6818      	ldr	r0, [r3, #0]
 802281e:	f7ff bf9f 	b.w	8022760 <_puts_r>
 8022822:	bf00      	nop
 8022824:	240000e4 	.word	0x240000e4

08022828 <setvbuf>:
 8022828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802282c:	461d      	mov	r5, r3
 802282e:	4b51      	ldr	r3, [pc, #324]	; (8022974 <setvbuf+0x14c>)
 8022830:	681e      	ldr	r6, [r3, #0]
 8022832:	4604      	mov	r4, r0
 8022834:	460f      	mov	r7, r1
 8022836:	4690      	mov	r8, r2
 8022838:	b126      	cbz	r6, 8022844 <setvbuf+0x1c>
 802283a:	69b3      	ldr	r3, [r6, #24]
 802283c:	b913      	cbnz	r3, 8022844 <setvbuf+0x1c>
 802283e:	4630      	mov	r0, r6
 8022840:	f000 fa60 	bl	8022d04 <__sinit>
 8022844:	4b4c      	ldr	r3, [pc, #304]	; (8022978 <setvbuf+0x150>)
 8022846:	429c      	cmp	r4, r3
 8022848:	d152      	bne.n	80228f0 <setvbuf+0xc8>
 802284a:	6874      	ldr	r4, [r6, #4]
 802284c:	f1b8 0f02 	cmp.w	r8, #2
 8022850:	d006      	beq.n	8022860 <setvbuf+0x38>
 8022852:	f1b8 0f01 	cmp.w	r8, #1
 8022856:	f200 8089 	bhi.w	802296c <setvbuf+0x144>
 802285a:	2d00      	cmp	r5, #0
 802285c:	f2c0 8086 	blt.w	802296c <setvbuf+0x144>
 8022860:	4621      	mov	r1, r4
 8022862:	4630      	mov	r0, r6
 8022864:	f000 f9e4 	bl	8022c30 <_fflush_r>
 8022868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802286a:	b141      	cbz	r1, 802287e <setvbuf+0x56>
 802286c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022870:	4299      	cmp	r1, r3
 8022872:	d002      	beq.n	802287a <setvbuf+0x52>
 8022874:	4630      	mov	r0, r6
 8022876:	f000 fb3b 	bl	8022ef0 <_free_r>
 802287a:	2300      	movs	r3, #0
 802287c:	6363      	str	r3, [r4, #52]	; 0x34
 802287e:	2300      	movs	r3, #0
 8022880:	61a3      	str	r3, [r4, #24]
 8022882:	6063      	str	r3, [r4, #4]
 8022884:	89a3      	ldrh	r3, [r4, #12]
 8022886:	061b      	lsls	r3, r3, #24
 8022888:	d503      	bpl.n	8022892 <setvbuf+0x6a>
 802288a:	6921      	ldr	r1, [r4, #16]
 802288c:	4630      	mov	r0, r6
 802288e:	f000 fb2f 	bl	8022ef0 <_free_r>
 8022892:	89a3      	ldrh	r3, [r4, #12]
 8022894:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8022898:	f023 0303 	bic.w	r3, r3, #3
 802289c:	f1b8 0f02 	cmp.w	r8, #2
 80228a0:	81a3      	strh	r3, [r4, #12]
 80228a2:	d05d      	beq.n	8022960 <setvbuf+0x138>
 80228a4:	ab01      	add	r3, sp, #4
 80228a6:	466a      	mov	r2, sp
 80228a8:	4621      	mov	r1, r4
 80228aa:	4630      	mov	r0, r6
 80228ac:	f000 fab4 	bl	8022e18 <__swhatbuf_r>
 80228b0:	89a3      	ldrh	r3, [r4, #12]
 80228b2:	4318      	orrs	r0, r3
 80228b4:	81a0      	strh	r0, [r4, #12]
 80228b6:	bb2d      	cbnz	r5, 8022904 <setvbuf+0xdc>
 80228b8:	9d00      	ldr	r5, [sp, #0]
 80228ba:	4628      	mov	r0, r5
 80228bc:	f000 fb10 	bl	8022ee0 <malloc>
 80228c0:	4607      	mov	r7, r0
 80228c2:	2800      	cmp	r0, #0
 80228c4:	d14e      	bne.n	8022964 <setvbuf+0x13c>
 80228c6:	f8dd 9000 	ldr.w	r9, [sp]
 80228ca:	45a9      	cmp	r9, r5
 80228cc:	d13c      	bne.n	8022948 <setvbuf+0x120>
 80228ce:	f04f 30ff 	mov.w	r0, #4294967295
 80228d2:	89a3      	ldrh	r3, [r4, #12]
 80228d4:	f043 0302 	orr.w	r3, r3, #2
 80228d8:	81a3      	strh	r3, [r4, #12]
 80228da:	2300      	movs	r3, #0
 80228dc:	60a3      	str	r3, [r4, #8]
 80228de:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80228e2:	6023      	str	r3, [r4, #0]
 80228e4:	6123      	str	r3, [r4, #16]
 80228e6:	2301      	movs	r3, #1
 80228e8:	6163      	str	r3, [r4, #20]
 80228ea:	b003      	add	sp, #12
 80228ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80228f0:	4b22      	ldr	r3, [pc, #136]	; (802297c <setvbuf+0x154>)
 80228f2:	429c      	cmp	r4, r3
 80228f4:	d101      	bne.n	80228fa <setvbuf+0xd2>
 80228f6:	68b4      	ldr	r4, [r6, #8]
 80228f8:	e7a8      	b.n	802284c <setvbuf+0x24>
 80228fa:	4b21      	ldr	r3, [pc, #132]	; (8022980 <setvbuf+0x158>)
 80228fc:	429c      	cmp	r4, r3
 80228fe:	bf08      	it	eq
 8022900:	68f4      	ldreq	r4, [r6, #12]
 8022902:	e7a3      	b.n	802284c <setvbuf+0x24>
 8022904:	2f00      	cmp	r7, #0
 8022906:	d0d8      	beq.n	80228ba <setvbuf+0x92>
 8022908:	69b3      	ldr	r3, [r6, #24]
 802290a:	b913      	cbnz	r3, 8022912 <setvbuf+0xea>
 802290c:	4630      	mov	r0, r6
 802290e:	f000 f9f9 	bl	8022d04 <__sinit>
 8022912:	f1b8 0f01 	cmp.w	r8, #1
 8022916:	bf08      	it	eq
 8022918:	89a3      	ldrheq	r3, [r4, #12]
 802291a:	6027      	str	r7, [r4, #0]
 802291c:	bf04      	itt	eq
 802291e:	f043 0301 	orreq.w	r3, r3, #1
 8022922:	81a3      	strheq	r3, [r4, #12]
 8022924:	89a3      	ldrh	r3, [r4, #12]
 8022926:	f013 0008 	ands.w	r0, r3, #8
 802292a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 802292e:	d01b      	beq.n	8022968 <setvbuf+0x140>
 8022930:	f013 0001 	ands.w	r0, r3, #1
 8022934:	bf18      	it	ne
 8022936:	426d      	negne	r5, r5
 8022938:	f04f 0300 	mov.w	r3, #0
 802293c:	bf1d      	ittte	ne
 802293e:	60a3      	strne	r3, [r4, #8]
 8022940:	61a5      	strne	r5, [r4, #24]
 8022942:	4618      	movne	r0, r3
 8022944:	60a5      	streq	r5, [r4, #8]
 8022946:	e7d0      	b.n	80228ea <setvbuf+0xc2>
 8022948:	4648      	mov	r0, r9
 802294a:	f000 fac9 	bl	8022ee0 <malloc>
 802294e:	4607      	mov	r7, r0
 8022950:	2800      	cmp	r0, #0
 8022952:	d0bc      	beq.n	80228ce <setvbuf+0xa6>
 8022954:	89a3      	ldrh	r3, [r4, #12]
 8022956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802295a:	81a3      	strh	r3, [r4, #12]
 802295c:	464d      	mov	r5, r9
 802295e:	e7d3      	b.n	8022908 <setvbuf+0xe0>
 8022960:	2000      	movs	r0, #0
 8022962:	e7b6      	b.n	80228d2 <setvbuf+0xaa>
 8022964:	46a9      	mov	r9, r5
 8022966:	e7f5      	b.n	8022954 <setvbuf+0x12c>
 8022968:	60a0      	str	r0, [r4, #8]
 802296a:	e7be      	b.n	80228ea <setvbuf+0xc2>
 802296c:	f04f 30ff 	mov.w	r0, #4294967295
 8022970:	e7bb      	b.n	80228ea <setvbuf+0xc2>
 8022972:	bf00      	nop
 8022974:	240000e4 	.word	0x240000e4
 8022978:	080240d4 	.word	0x080240d4
 802297c:	080240f4 	.word	0x080240f4
 8022980:	080240b4 	.word	0x080240b4

08022984 <strcpy>:
 8022984:	4603      	mov	r3, r0
 8022986:	f811 2b01 	ldrb.w	r2, [r1], #1
 802298a:	f803 2b01 	strb.w	r2, [r3], #1
 802298e:	2a00      	cmp	r2, #0
 8022990:	d1f9      	bne.n	8022986 <strcpy+0x2>
 8022992:	4770      	bx	lr

08022994 <__swbuf_r>:
 8022994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022996:	460e      	mov	r6, r1
 8022998:	4614      	mov	r4, r2
 802299a:	4605      	mov	r5, r0
 802299c:	b118      	cbz	r0, 80229a6 <__swbuf_r+0x12>
 802299e:	6983      	ldr	r3, [r0, #24]
 80229a0:	b90b      	cbnz	r3, 80229a6 <__swbuf_r+0x12>
 80229a2:	f000 f9af 	bl	8022d04 <__sinit>
 80229a6:	4b21      	ldr	r3, [pc, #132]	; (8022a2c <__swbuf_r+0x98>)
 80229a8:	429c      	cmp	r4, r3
 80229aa:	d12a      	bne.n	8022a02 <__swbuf_r+0x6e>
 80229ac:	686c      	ldr	r4, [r5, #4]
 80229ae:	69a3      	ldr	r3, [r4, #24]
 80229b0:	60a3      	str	r3, [r4, #8]
 80229b2:	89a3      	ldrh	r3, [r4, #12]
 80229b4:	071a      	lsls	r2, r3, #28
 80229b6:	d52e      	bpl.n	8022a16 <__swbuf_r+0x82>
 80229b8:	6923      	ldr	r3, [r4, #16]
 80229ba:	b363      	cbz	r3, 8022a16 <__swbuf_r+0x82>
 80229bc:	6923      	ldr	r3, [r4, #16]
 80229be:	6820      	ldr	r0, [r4, #0]
 80229c0:	1ac0      	subs	r0, r0, r3
 80229c2:	6963      	ldr	r3, [r4, #20]
 80229c4:	b2f6      	uxtb	r6, r6
 80229c6:	4283      	cmp	r3, r0
 80229c8:	4637      	mov	r7, r6
 80229ca:	dc04      	bgt.n	80229d6 <__swbuf_r+0x42>
 80229cc:	4621      	mov	r1, r4
 80229ce:	4628      	mov	r0, r5
 80229d0:	f000 f92e 	bl	8022c30 <_fflush_r>
 80229d4:	bb28      	cbnz	r0, 8022a22 <__swbuf_r+0x8e>
 80229d6:	68a3      	ldr	r3, [r4, #8]
 80229d8:	3b01      	subs	r3, #1
 80229da:	60a3      	str	r3, [r4, #8]
 80229dc:	6823      	ldr	r3, [r4, #0]
 80229de:	1c5a      	adds	r2, r3, #1
 80229e0:	6022      	str	r2, [r4, #0]
 80229e2:	701e      	strb	r6, [r3, #0]
 80229e4:	6963      	ldr	r3, [r4, #20]
 80229e6:	3001      	adds	r0, #1
 80229e8:	4283      	cmp	r3, r0
 80229ea:	d004      	beq.n	80229f6 <__swbuf_r+0x62>
 80229ec:	89a3      	ldrh	r3, [r4, #12]
 80229ee:	07db      	lsls	r3, r3, #31
 80229f0:	d519      	bpl.n	8022a26 <__swbuf_r+0x92>
 80229f2:	2e0a      	cmp	r6, #10
 80229f4:	d117      	bne.n	8022a26 <__swbuf_r+0x92>
 80229f6:	4621      	mov	r1, r4
 80229f8:	4628      	mov	r0, r5
 80229fa:	f000 f919 	bl	8022c30 <_fflush_r>
 80229fe:	b190      	cbz	r0, 8022a26 <__swbuf_r+0x92>
 8022a00:	e00f      	b.n	8022a22 <__swbuf_r+0x8e>
 8022a02:	4b0b      	ldr	r3, [pc, #44]	; (8022a30 <__swbuf_r+0x9c>)
 8022a04:	429c      	cmp	r4, r3
 8022a06:	d101      	bne.n	8022a0c <__swbuf_r+0x78>
 8022a08:	68ac      	ldr	r4, [r5, #8]
 8022a0a:	e7d0      	b.n	80229ae <__swbuf_r+0x1a>
 8022a0c:	4b09      	ldr	r3, [pc, #36]	; (8022a34 <__swbuf_r+0xa0>)
 8022a0e:	429c      	cmp	r4, r3
 8022a10:	bf08      	it	eq
 8022a12:	68ec      	ldreq	r4, [r5, #12]
 8022a14:	e7cb      	b.n	80229ae <__swbuf_r+0x1a>
 8022a16:	4621      	mov	r1, r4
 8022a18:	4628      	mov	r0, r5
 8022a1a:	f000 f80d 	bl	8022a38 <__swsetup_r>
 8022a1e:	2800      	cmp	r0, #0
 8022a20:	d0cc      	beq.n	80229bc <__swbuf_r+0x28>
 8022a22:	f04f 37ff 	mov.w	r7, #4294967295
 8022a26:	4638      	mov	r0, r7
 8022a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022a2a:	bf00      	nop
 8022a2c:	080240d4 	.word	0x080240d4
 8022a30:	080240f4 	.word	0x080240f4
 8022a34:	080240b4 	.word	0x080240b4

08022a38 <__swsetup_r>:
 8022a38:	4b32      	ldr	r3, [pc, #200]	; (8022b04 <__swsetup_r+0xcc>)
 8022a3a:	b570      	push	{r4, r5, r6, lr}
 8022a3c:	681d      	ldr	r5, [r3, #0]
 8022a3e:	4606      	mov	r6, r0
 8022a40:	460c      	mov	r4, r1
 8022a42:	b125      	cbz	r5, 8022a4e <__swsetup_r+0x16>
 8022a44:	69ab      	ldr	r3, [r5, #24]
 8022a46:	b913      	cbnz	r3, 8022a4e <__swsetup_r+0x16>
 8022a48:	4628      	mov	r0, r5
 8022a4a:	f000 f95b 	bl	8022d04 <__sinit>
 8022a4e:	4b2e      	ldr	r3, [pc, #184]	; (8022b08 <__swsetup_r+0xd0>)
 8022a50:	429c      	cmp	r4, r3
 8022a52:	d10f      	bne.n	8022a74 <__swsetup_r+0x3c>
 8022a54:	686c      	ldr	r4, [r5, #4]
 8022a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022a5a:	b29a      	uxth	r2, r3
 8022a5c:	0715      	lsls	r5, r2, #28
 8022a5e:	d42c      	bmi.n	8022aba <__swsetup_r+0x82>
 8022a60:	06d0      	lsls	r0, r2, #27
 8022a62:	d411      	bmi.n	8022a88 <__swsetup_r+0x50>
 8022a64:	2209      	movs	r2, #9
 8022a66:	6032      	str	r2, [r6, #0]
 8022a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022a6c:	81a3      	strh	r3, [r4, #12]
 8022a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8022a72:	e03e      	b.n	8022af2 <__swsetup_r+0xba>
 8022a74:	4b25      	ldr	r3, [pc, #148]	; (8022b0c <__swsetup_r+0xd4>)
 8022a76:	429c      	cmp	r4, r3
 8022a78:	d101      	bne.n	8022a7e <__swsetup_r+0x46>
 8022a7a:	68ac      	ldr	r4, [r5, #8]
 8022a7c:	e7eb      	b.n	8022a56 <__swsetup_r+0x1e>
 8022a7e:	4b24      	ldr	r3, [pc, #144]	; (8022b10 <__swsetup_r+0xd8>)
 8022a80:	429c      	cmp	r4, r3
 8022a82:	bf08      	it	eq
 8022a84:	68ec      	ldreq	r4, [r5, #12]
 8022a86:	e7e6      	b.n	8022a56 <__swsetup_r+0x1e>
 8022a88:	0751      	lsls	r1, r2, #29
 8022a8a:	d512      	bpl.n	8022ab2 <__swsetup_r+0x7a>
 8022a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022a8e:	b141      	cbz	r1, 8022aa2 <__swsetup_r+0x6a>
 8022a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022a94:	4299      	cmp	r1, r3
 8022a96:	d002      	beq.n	8022a9e <__swsetup_r+0x66>
 8022a98:	4630      	mov	r0, r6
 8022a9a:	f000 fa29 	bl	8022ef0 <_free_r>
 8022a9e:	2300      	movs	r3, #0
 8022aa0:	6363      	str	r3, [r4, #52]	; 0x34
 8022aa2:	89a3      	ldrh	r3, [r4, #12]
 8022aa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022aa8:	81a3      	strh	r3, [r4, #12]
 8022aaa:	2300      	movs	r3, #0
 8022aac:	6063      	str	r3, [r4, #4]
 8022aae:	6923      	ldr	r3, [r4, #16]
 8022ab0:	6023      	str	r3, [r4, #0]
 8022ab2:	89a3      	ldrh	r3, [r4, #12]
 8022ab4:	f043 0308 	orr.w	r3, r3, #8
 8022ab8:	81a3      	strh	r3, [r4, #12]
 8022aba:	6923      	ldr	r3, [r4, #16]
 8022abc:	b94b      	cbnz	r3, 8022ad2 <__swsetup_r+0x9a>
 8022abe:	89a3      	ldrh	r3, [r4, #12]
 8022ac0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022ac8:	d003      	beq.n	8022ad2 <__swsetup_r+0x9a>
 8022aca:	4621      	mov	r1, r4
 8022acc:	4630      	mov	r0, r6
 8022ace:	f000 f9c7 	bl	8022e60 <__smakebuf_r>
 8022ad2:	89a2      	ldrh	r2, [r4, #12]
 8022ad4:	f012 0301 	ands.w	r3, r2, #1
 8022ad8:	d00c      	beq.n	8022af4 <__swsetup_r+0xbc>
 8022ada:	2300      	movs	r3, #0
 8022adc:	60a3      	str	r3, [r4, #8]
 8022ade:	6963      	ldr	r3, [r4, #20]
 8022ae0:	425b      	negs	r3, r3
 8022ae2:	61a3      	str	r3, [r4, #24]
 8022ae4:	6923      	ldr	r3, [r4, #16]
 8022ae6:	b953      	cbnz	r3, 8022afe <__swsetup_r+0xc6>
 8022ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022aec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8022af0:	d1ba      	bne.n	8022a68 <__swsetup_r+0x30>
 8022af2:	bd70      	pop	{r4, r5, r6, pc}
 8022af4:	0792      	lsls	r2, r2, #30
 8022af6:	bf58      	it	pl
 8022af8:	6963      	ldrpl	r3, [r4, #20]
 8022afa:	60a3      	str	r3, [r4, #8]
 8022afc:	e7f2      	b.n	8022ae4 <__swsetup_r+0xac>
 8022afe:	2000      	movs	r0, #0
 8022b00:	e7f7      	b.n	8022af2 <__swsetup_r+0xba>
 8022b02:	bf00      	nop
 8022b04:	240000e4 	.word	0x240000e4
 8022b08:	080240d4 	.word	0x080240d4
 8022b0c:	080240f4 	.word	0x080240f4
 8022b10:	080240b4 	.word	0x080240b4

08022b14 <abort>:
 8022b14:	b508      	push	{r3, lr}
 8022b16:	2006      	movs	r0, #6
 8022b18:	f000 faca 	bl	80230b0 <raise>
 8022b1c:	2001      	movs	r0, #1
 8022b1e:	f7e6 ffc9 	bl	8009ab4 <_exit>
	...

08022b24 <__sflush_r>:
 8022b24:	898a      	ldrh	r2, [r1, #12]
 8022b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022b2a:	4605      	mov	r5, r0
 8022b2c:	0710      	lsls	r0, r2, #28
 8022b2e:	460c      	mov	r4, r1
 8022b30:	d458      	bmi.n	8022be4 <__sflush_r+0xc0>
 8022b32:	684b      	ldr	r3, [r1, #4]
 8022b34:	2b00      	cmp	r3, #0
 8022b36:	dc05      	bgt.n	8022b44 <__sflush_r+0x20>
 8022b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022b3a:	2b00      	cmp	r3, #0
 8022b3c:	dc02      	bgt.n	8022b44 <__sflush_r+0x20>
 8022b3e:	2000      	movs	r0, #0
 8022b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022b46:	2e00      	cmp	r6, #0
 8022b48:	d0f9      	beq.n	8022b3e <__sflush_r+0x1a>
 8022b4a:	2300      	movs	r3, #0
 8022b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022b50:	682f      	ldr	r7, [r5, #0]
 8022b52:	6a21      	ldr	r1, [r4, #32]
 8022b54:	602b      	str	r3, [r5, #0]
 8022b56:	d032      	beq.n	8022bbe <__sflush_r+0x9a>
 8022b58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022b5a:	89a3      	ldrh	r3, [r4, #12]
 8022b5c:	075a      	lsls	r2, r3, #29
 8022b5e:	d505      	bpl.n	8022b6c <__sflush_r+0x48>
 8022b60:	6863      	ldr	r3, [r4, #4]
 8022b62:	1ac0      	subs	r0, r0, r3
 8022b64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022b66:	b10b      	cbz	r3, 8022b6c <__sflush_r+0x48>
 8022b68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022b6a:	1ac0      	subs	r0, r0, r3
 8022b6c:	2300      	movs	r3, #0
 8022b6e:	4602      	mov	r2, r0
 8022b70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022b72:	6a21      	ldr	r1, [r4, #32]
 8022b74:	4628      	mov	r0, r5
 8022b76:	47b0      	blx	r6
 8022b78:	1c43      	adds	r3, r0, #1
 8022b7a:	89a3      	ldrh	r3, [r4, #12]
 8022b7c:	d106      	bne.n	8022b8c <__sflush_r+0x68>
 8022b7e:	6829      	ldr	r1, [r5, #0]
 8022b80:	291d      	cmp	r1, #29
 8022b82:	d848      	bhi.n	8022c16 <__sflush_r+0xf2>
 8022b84:	4a29      	ldr	r2, [pc, #164]	; (8022c2c <__sflush_r+0x108>)
 8022b86:	40ca      	lsrs	r2, r1
 8022b88:	07d6      	lsls	r6, r2, #31
 8022b8a:	d544      	bpl.n	8022c16 <__sflush_r+0xf2>
 8022b8c:	2200      	movs	r2, #0
 8022b8e:	6062      	str	r2, [r4, #4]
 8022b90:	04d9      	lsls	r1, r3, #19
 8022b92:	6922      	ldr	r2, [r4, #16]
 8022b94:	6022      	str	r2, [r4, #0]
 8022b96:	d504      	bpl.n	8022ba2 <__sflush_r+0x7e>
 8022b98:	1c42      	adds	r2, r0, #1
 8022b9a:	d101      	bne.n	8022ba0 <__sflush_r+0x7c>
 8022b9c:	682b      	ldr	r3, [r5, #0]
 8022b9e:	b903      	cbnz	r3, 8022ba2 <__sflush_r+0x7e>
 8022ba0:	6560      	str	r0, [r4, #84]	; 0x54
 8022ba2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022ba4:	602f      	str	r7, [r5, #0]
 8022ba6:	2900      	cmp	r1, #0
 8022ba8:	d0c9      	beq.n	8022b3e <__sflush_r+0x1a>
 8022baa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022bae:	4299      	cmp	r1, r3
 8022bb0:	d002      	beq.n	8022bb8 <__sflush_r+0x94>
 8022bb2:	4628      	mov	r0, r5
 8022bb4:	f000 f99c 	bl	8022ef0 <_free_r>
 8022bb8:	2000      	movs	r0, #0
 8022bba:	6360      	str	r0, [r4, #52]	; 0x34
 8022bbc:	e7c0      	b.n	8022b40 <__sflush_r+0x1c>
 8022bbe:	2301      	movs	r3, #1
 8022bc0:	4628      	mov	r0, r5
 8022bc2:	47b0      	blx	r6
 8022bc4:	1c41      	adds	r1, r0, #1
 8022bc6:	d1c8      	bne.n	8022b5a <__sflush_r+0x36>
 8022bc8:	682b      	ldr	r3, [r5, #0]
 8022bca:	2b00      	cmp	r3, #0
 8022bcc:	d0c5      	beq.n	8022b5a <__sflush_r+0x36>
 8022bce:	2b1d      	cmp	r3, #29
 8022bd0:	d001      	beq.n	8022bd6 <__sflush_r+0xb2>
 8022bd2:	2b16      	cmp	r3, #22
 8022bd4:	d101      	bne.n	8022bda <__sflush_r+0xb6>
 8022bd6:	602f      	str	r7, [r5, #0]
 8022bd8:	e7b1      	b.n	8022b3e <__sflush_r+0x1a>
 8022bda:	89a3      	ldrh	r3, [r4, #12]
 8022bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022be0:	81a3      	strh	r3, [r4, #12]
 8022be2:	e7ad      	b.n	8022b40 <__sflush_r+0x1c>
 8022be4:	690f      	ldr	r7, [r1, #16]
 8022be6:	2f00      	cmp	r7, #0
 8022be8:	d0a9      	beq.n	8022b3e <__sflush_r+0x1a>
 8022bea:	0793      	lsls	r3, r2, #30
 8022bec:	680e      	ldr	r6, [r1, #0]
 8022bee:	bf08      	it	eq
 8022bf0:	694b      	ldreq	r3, [r1, #20]
 8022bf2:	600f      	str	r7, [r1, #0]
 8022bf4:	bf18      	it	ne
 8022bf6:	2300      	movne	r3, #0
 8022bf8:	eba6 0807 	sub.w	r8, r6, r7
 8022bfc:	608b      	str	r3, [r1, #8]
 8022bfe:	f1b8 0f00 	cmp.w	r8, #0
 8022c02:	dd9c      	ble.n	8022b3e <__sflush_r+0x1a>
 8022c04:	4643      	mov	r3, r8
 8022c06:	463a      	mov	r2, r7
 8022c08:	6a21      	ldr	r1, [r4, #32]
 8022c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022c0c:	4628      	mov	r0, r5
 8022c0e:	47b0      	blx	r6
 8022c10:	2800      	cmp	r0, #0
 8022c12:	dc06      	bgt.n	8022c22 <__sflush_r+0xfe>
 8022c14:	89a3      	ldrh	r3, [r4, #12]
 8022c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c1a:	81a3      	strh	r3, [r4, #12]
 8022c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8022c20:	e78e      	b.n	8022b40 <__sflush_r+0x1c>
 8022c22:	4407      	add	r7, r0
 8022c24:	eba8 0800 	sub.w	r8, r8, r0
 8022c28:	e7e9      	b.n	8022bfe <__sflush_r+0xda>
 8022c2a:	bf00      	nop
 8022c2c:	20400001 	.word	0x20400001

08022c30 <_fflush_r>:
 8022c30:	b538      	push	{r3, r4, r5, lr}
 8022c32:	690b      	ldr	r3, [r1, #16]
 8022c34:	4605      	mov	r5, r0
 8022c36:	460c      	mov	r4, r1
 8022c38:	b1db      	cbz	r3, 8022c72 <_fflush_r+0x42>
 8022c3a:	b118      	cbz	r0, 8022c44 <_fflush_r+0x14>
 8022c3c:	6983      	ldr	r3, [r0, #24]
 8022c3e:	b90b      	cbnz	r3, 8022c44 <_fflush_r+0x14>
 8022c40:	f000 f860 	bl	8022d04 <__sinit>
 8022c44:	4b0c      	ldr	r3, [pc, #48]	; (8022c78 <_fflush_r+0x48>)
 8022c46:	429c      	cmp	r4, r3
 8022c48:	d109      	bne.n	8022c5e <_fflush_r+0x2e>
 8022c4a:	686c      	ldr	r4, [r5, #4]
 8022c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022c50:	b17b      	cbz	r3, 8022c72 <_fflush_r+0x42>
 8022c52:	4621      	mov	r1, r4
 8022c54:	4628      	mov	r0, r5
 8022c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022c5a:	f7ff bf63 	b.w	8022b24 <__sflush_r>
 8022c5e:	4b07      	ldr	r3, [pc, #28]	; (8022c7c <_fflush_r+0x4c>)
 8022c60:	429c      	cmp	r4, r3
 8022c62:	d101      	bne.n	8022c68 <_fflush_r+0x38>
 8022c64:	68ac      	ldr	r4, [r5, #8]
 8022c66:	e7f1      	b.n	8022c4c <_fflush_r+0x1c>
 8022c68:	4b05      	ldr	r3, [pc, #20]	; (8022c80 <_fflush_r+0x50>)
 8022c6a:	429c      	cmp	r4, r3
 8022c6c:	bf08      	it	eq
 8022c6e:	68ec      	ldreq	r4, [r5, #12]
 8022c70:	e7ec      	b.n	8022c4c <_fflush_r+0x1c>
 8022c72:	2000      	movs	r0, #0
 8022c74:	bd38      	pop	{r3, r4, r5, pc}
 8022c76:	bf00      	nop
 8022c78:	080240d4 	.word	0x080240d4
 8022c7c:	080240f4 	.word	0x080240f4
 8022c80:	080240b4 	.word	0x080240b4

08022c84 <std>:
 8022c84:	2300      	movs	r3, #0
 8022c86:	b510      	push	{r4, lr}
 8022c88:	4604      	mov	r4, r0
 8022c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8022c8e:	6083      	str	r3, [r0, #8]
 8022c90:	8181      	strh	r1, [r0, #12]
 8022c92:	6643      	str	r3, [r0, #100]	; 0x64
 8022c94:	81c2      	strh	r2, [r0, #14]
 8022c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022c9a:	6183      	str	r3, [r0, #24]
 8022c9c:	4619      	mov	r1, r3
 8022c9e:	2208      	movs	r2, #8
 8022ca0:	305c      	adds	r0, #92	; 0x5c
 8022ca2:	f7ff fa76 	bl	8022192 <memset>
 8022ca6:	4b05      	ldr	r3, [pc, #20]	; (8022cbc <std+0x38>)
 8022ca8:	6263      	str	r3, [r4, #36]	; 0x24
 8022caa:	4b05      	ldr	r3, [pc, #20]	; (8022cc0 <std+0x3c>)
 8022cac:	62a3      	str	r3, [r4, #40]	; 0x28
 8022cae:	4b05      	ldr	r3, [pc, #20]	; (8022cc4 <std+0x40>)
 8022cb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022cb2:	4b05      	ldr	r3, [pc, #20]	; (8022cc8 <std+0x44>)
 8022cb4:	6224      	str	r4, [r4, #32]
 8022cb6:	6323      	str	r3, [r4, #48]	; 0x30
 8022cb8:	bd10      	pop	{r4, pc}
 8022cba:	bf00      	nop
 8022cbc:	080230e9 	.word	0x080230e9
 8022cc0:	0802310b 	.word	0x0802310b
 8022cc4:	08023143 	.word	0x08023143
 8022cc8:	08023167 	.word	0x08023167

08022ccc <_cleanup_r>:
 8022ccc:	4901      	ldr	r1, [pc, #4]	; (8022cd4 <_cleanup_r+0x8>)
 8022cce:	f000 b885 	b.w	8022ddc <_fwalk_reent>
 8022cd2:	bf00      	nop
 8022cd4:	08022c31 	.word	0x08022c31

08022cd8 <__sfmoreglue>:
 8022cd8:	b570      	push	{r4, r5, r6, lr}
 8022cda:	1e4a      	subs	r2, r1, #1
 8022cdc:	2568      	movs	r5, #104	; 0x68
 8022cde:	4355      	muls	r5, r2
 8022ce0:	460e      	mov	r6, r1
 8022ce2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022ce6:	f000 f951 	bl	8022f8c <_malloc_r>
 8022cea:	4604      	mov	r4, r0
 8022cec:	b140      	cbz	r0, 8022d00 <__sfmoreglue+0x28>
 8022cee:	2100      	movs	r1, #0
 8022cf0:	e9c0 1600 	strd	r1, r6, [r0]
 8022cf4:	300c      	adds	r0, #12
 8022cf6:	60a0      	str	r0, [r4, #8]
 8022cf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022cfc:	f7ff fa49 	bl	8022192 <memset>
 8022d00:	4620      	mov	r0, r4
 8022d02:	bd70      	pop	{r4, r5, r6, pc}

08022d04 <__sinit>:
 8022d04:	6983      	ldr	r3, [r0, #24]
 8022d06:	b510      	push	{r4, lr}
 8022d08:	4604      	mov	r4, r0
 8022d0a:	bb33      	cbnz	r3, 8022d5a <__sinit+0x56>
 8022d0c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8022d10:	6503      	str	r3, [r0, #80]	; 0x50
 8022d12:	4b12      	ldr	r3, [pc, #72]	; (8022d5c <__sinit+0x58>)
 8022d14:	4a12      	ldr	r2, [pc, #72]	; (8022d60 <__sinit+0x5c>)
 8022d16:	681b      	ldr	r3, [r3, #0]
 8022d18:	6282      	str	r2, [r0, #40]	; 0x28
 8022d1a:	4298      	cmp	r0, r3
 8022d1c:	bf04      	itt	eq
 8022d1e:	2301      	moveq	r3, #1
 8022d20:	6183      	streq	r3, [r0, #24]
 8022d22:	f000 f81f 	bl	8022d64 <__sfp>
 8022d26:	6060      	str	r0, [r4, #4]
 8022d28:	4620      	mov	r0, r4
 8022d2a:	f000 f81b 	bl	8022d64 <__sfp>
 8022d2e:	60a0      	str	r0, [r4, #8]
 8022d30:	4620      	mov	r0, r4
 8022d32:	f000 f817 	bl	8022d64 <__sfp>
 8022d36:	2200      	movs	r2, #0
 8022d38:	60e0      	str	r0, [r4, #12]
 8022d3a:	2104      	movs	r1, #4
 8022d3c:	6860      	ldr	r0, [r4, #4]
 8022d3e:	f7ff ffa1 	bl	8022c84 <std>
 8022d42:	2201      	movs	r2, #1
 8022d44:	2109      	movs	r1, #9
 8022d46:	68a0      	ldr	r0, [r4, #8]
 8022d48:	f7ff ff9c 	bl	8022c84 <std>
 8022d4c:	2202      	movs	r2, #2
 8022d4e:	2112      	movs	r1, #18
 8022d50:	68e0      	ldr	r0, [r4, #12]
 8022d52:	f7ff ff97 	bl	8022c84 <std>
 8022d56:	2301      	movs	r3, #1
 8022d58:	61a3      	str	r3, [r4, #24]
 8022d5a:	bd10      	pop	{r4, pc}
 8022d5c:	0802407c 	.word	0x0802407c
 8022d60:	08022ccd 	.word	0x08022ccd

08022d64 <__sfp>:
 8022d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d66:	4b1b      	ldr	r3, [pc, #108]	; (8022dd4 <__sfp+0x70>)
 8022d68:	681e      	ldr	r6, [r3, #0]
 8022d6a:	69b3      	ldr	r3, [r6, #24]
 8022d6c:	4607      	mov	r7, r0
 8022d6e:	b913      	cbnz	r3, 8022d76 <__sfp+0x12>
 8022d70:	4630      	mov	r0, r6
 8022d72:	f7ff ffc7 	bl	8022d04 <__sinit>
 8022d76:	3648      	adds	r6, #72	; 0x48
 8022d78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022d7c:	3b01      	subs	r3, #1
 8022d7e:	d503      	bpl.n	8022d88 <__sfp+0x24>
 8022d80:	6833      	ldr	r3, [r6, #0]
 8022d82:	b133      	cbz	r3, 8022d92 <__sfp+0x2e>
 8022d84:	6836      	ldr	r6, [r6, #0]
 8022d86:	e7f7      	b.n	8022d78 <__sfp+0x14>
 8022d88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022d8c:	b16d      	cbz	r5, 8022daa <__sfp+0x46>
 8022d8e:	3468      	adds	r4, #104	; 0x68
 8022d90:	e7f4      	b.n	8022d7c <__sfp+0x18>
 8022d92:	2104      	movs	r1, #4
 8022d94:	4638      	mov	r0, r7
 8022d96:	f7ff ff9f 	bl	8022cd8 <__sfmoreglue>
 8022d9a:	6030      	str	r0, [r6, #0]
 8022d9c:	2800      	cmp	r0, #0
 8022d9e:	d1f1      	bne.n	8022d84 <__sfp+0x20>
 8022da0:	230c      	movs	r3, #12
 8022da2:	603b      	str	r3, [r7, #0]
 8022da4:	4604      	mov	r4, r0
 8022da6:	4620      	mov	r0, r4
 8022da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022daa:	4b0b      	ldr	r3, [pc, #44]	; (8022dd8 <__sfp+0x74>)
 8022dac:	6665      	str	r5, [r4, #100]	; 0x64
 8022dae:	e9c4 5500 	strd	r5, r5, [r4]
 8022db2:	60a5      	str	r5, [r4, #8]
 8022db4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8022db8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8022dbc:	2208      	movs	r2, #8
 8022dbe:	4629      	mov	r1, r5
 8022dc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022dc4:	f7ff f9e5 	bl	8022192 <memset>
 8022dc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022dcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022dd0:	e7e9      	b.n	8022da6 <__sfp+0x42>
 8022dd2:	bf00      	nop
 8022dd4:	0802407c 	.word	0x0802407c
 8022dd8:	ffff0001 	.word	0xffff0001

08022ddc <_fwalk_reent>:
 8022ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022de0:	4680      	mov	r8, r0
 8022de2:	4689      	mov	r9, r1
 8022de4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022de8:	2600      	movs	r6, #0
 8022dea:	b914      	cbnz	r4, 8022df2 <_fwalk_reent+0x16>
 8022dec:	4630      	mov	r0, r6
 8022dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022df2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8022df6:	3f01      	subs	r7, #1
 8022df8:	d501      	bpl.n	8022dfe <_fwalk_reent+0x22>
 8022dfa:	6824      	ldr	r4, [r4, #0]
 8022dfc:	e7f5      	b.n	8022dea <_fwalk_reent+0xe>
 8022dfe:	89ab      	ldrh	r3, [r5, #12]
 8022e00:	2b01      	cmp	r3, #1
 8022e02:	d907      	bls.n	8022e14 <_fwalk_reent+0x38>
 8022e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022e08:	3301      	adds	r3, #1
 8022e0a:	d003      	beq.n	8022e14 <_fwalk_reent+0x38>
 8022e0c:	4629      	mov	r1, r5
 8022e0e:	4640      	mov	r0, r8
 8022e10:	47c8      	blx	r9
 8022e12:	4306      	orrs	r6, r0
 8022e14:	3568      	adds	r5, #104	; 0x68
 8022e16:	e7ee      	b.n	8022df6 <_fwalk_reent+0x1a>

08022e18 <__swhatbuf_r>:
 8022e18:	b570      	push	{r4, r5, r6, lr}
 8022e1a:	460e      	mov	r6, r1
 8022e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e20:	2900      	cmp	r1, #0
 8022e22:	b096      	sub	sp, #88	; 0x58
 8022e24:	4614      	mov	r4, r2
 8022e26:	461d      	mov	r5, r3
 8022e28:	da07      	bge.n	8022e3a <__swhatbuf_r+0x22>
 8022e2a:	2300      	movs	r3, #0
 8022e2c:	602b      	str	r3, [r5, #0]
 8022e2e:	89b3      	ldrh	r3, [r6, #12]
 8022e30:	061a      	lsls	r2, r3, #24
 8022e32:	d410      	bmi.n	8022e56 <__swhatbuf_r+0x3e>
 8022e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022e38:	e00e      	b.n	8022e58 <__swhatbuf_r+0x40>
 8022e3a:	466a      	mov	r2, sp
 8022e3c:	f000 f9ba 	bl	80231b4 <_fstat_r>
 8022e40:	2800      	cmp	r0, #0
 8022e42:	dbf2      	blt.n	8022e2a <__swhatbuf_r+0x12>
 8022e44:	9a01      	ldr	r2, [sp, #4]
 8022e46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022e4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022e4e:	425a      	negs	r2, r3
 8022e50:	415a      	adcs	r2, r3
 8022e52:	602a      	str	r2, [r5, #0]
 8022e54:	e7ee      	b.n	8022e34 <__swhatbuf_r+0x1c>
 8022e56:	2340      	movs	r3, #64	; 0x40
 8022e58:	2000      	movs	r0, #0
 8022e5a:	6023      	str	r3, [r4, #0]
 8022e5c:	b016      	add	sp, #88	; 0x58
 8022e5e:	bd70      	pop	{r4, r5, r6, pc}

08022e60 <__smakebuf_r>:
 8022e60:	898b      	ldrh	r3, [r1, #12]
 8022e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022e64:	079d      	lsls	r5, r3, #30
 8022e66:	4606      	mov	r6, r0
 8022e68:	460c      	mov	r4, r1
 8022e6a:	d507      	bpl.n	8022e7c <__smakebuf_r+0x1c>
 8022e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022e70:	6023      	str	r3, [r4, #0]
 8022e72:	6123      	str	r3, [r4, #16]
 8022e74:	2301      	movs	r3, #1
 8022e76:	6163      	str	r3, [r4, #20]
 8022e78:	b002      	add	sp, #8
 8022e7a:	bd70      	pop	{r4, r5, r6, pc}
 8022e7c:	ab01      	add	r3, sp, #4
 8022e7e:	466a      	mov	r2, sp
 8022e80:	f7ff ffca 	bl	8022e18 <__swhatbuf_r>
 8022e84:	9900      	ldr	r1, [sp, #0]
 8022e86:	4605      	mov	r5, r0
 8022e88:	4630      	mov	r0, r6
 8022e8a:	f000 f87f 	bl	8022f8c <_malloc_r>
 8022e8e:	b948      	cbnz	r0, 8022ea4 <__smakebuf_r+0x44>
 8022e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022e94:	059a      	lsls	r2, r3, #22
 8022e96:	d4ef      	bmi.n	8022e78 <__smakebuf_r+0x18>
 8022e98:	f023 0303 	bic.w	r3, r3, #3
 8022e9c:	f043 0302 	orr.w	r3, r3, #2
 8022ea0:	81a3      	strh	r3, [r4, #12]
 8022ea2:	e7e3      	b.n	8022e6c <__smakebuf_r+0xc>
 8022ea4:	4b0d      	ldr	r3, [pc, #52]	; (8022edc <__smakebuf_r+0x7c>)
 8022ea6:	62b3      	str	r3, [r6, #40]	; 0x28
 8022ea8:	89a3      	ldrh	r3, [r4, #12]
 8022eaa:	6020      	str	r0, [r4, #0]
 8022eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022eb0:	81a3      	strh	r3, [r4, #12]
 8022eb2:	9b00      	ldr	r3, [sp, #0]
 8022eb4:	6163      	str	r3, [r4, #20]
 8022eb6:	9b01      	ldr	r3, [sp, #4]
 8022eb8:	6120      	str	r0, [r4, #16]
 8022eba:	b15b      	cbz	r3, 8022ed4 <__smakebuf_r+0x74>
 8022ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022ec0:	4630      	mov	r0, r6
 8022ec2:	f000 f989 	bl	80231d8 <_isatty_r>
 8022ec6:	b128      	cbz	r0, 8022ed4 <__smakebuf_r+0x74>
 8022ec8:	89a3      	ldrh	r3, [r4, #12]
 8022eca:	f023 0303 	bic.w	r3, r3, #3
 8022ece:	f043 0301 	orr.w	r3, r3, #1
 8022ed2:	81a3      	strh	r3, [r4, #12]
 8022ed4:	89a3      	ldrh	r3, [r4, #12]
 8022ed6:	431d      	orrs	r5, r3
 8022ed8:	81a5      	strh	r5, [r4, #12]
 8022eda:	e7cd      	b.n	8022e78 <__smakebuf_r+0x18>
 8022edc:	08022ccd 	.word	0x08022ccd

08022ee0 <malloc>:
 8022ee0:	4b02      	ldr	r3, [pc, #8]	; (8022eec <malloc+0xc>)
 8022ee2:	4601      	mov	r1, r0
 8022ee4:	6818      	ldr	r0, [r3, #0]
 8022ee6:	f000 b851 	b.w	8022f8c <_malloc_r>
 8022eea:	bf00      	nop
 8022eec:	240000e4 	.word	0x240000e4

08022ef0 <_free_r>:
 8022ef0:	b538      	push	{r3, r4, r5, lr}
 8022ef2:	4605      	mov	r5, r0
 8022ef4:	2900      	cmp	r1, #0
 8022ef6:	d045      	beq.n	8022f84 <_free_r+0x94>
 8022ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022efc:	1f0c      	subs	r4, r1, #4
 8022efe:	2b00      	cmp	r3, #0
 8022f00:	bfb8      	it	lt
 8022f02:	18e4      	addlt	r4, r4, r3
 8022f04:	f000 f98a 	bl	802321c <__malloc_lock>
 8022f08:	4a1f      	ldr	r2, [pc, #124]	; (8022f88 <_free_r+0x98>)
 8022f0a:	6813      	ldr	r3, [r2, #0]
 8022f0c:	4610      	mov	r0, r2
 8022f0e:	b933      	cbnz	r3, 8022f1e <_free_r+0x2e>
 8022f10:	6063      	str	r3, [r4, #4]
 8022f12:	6014      	str	r4, [r2, #0]
 8022f14:	4628      	mov	r0, r5
 8022f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022f1a:	f000 b980 	b.w	802321e <__malloc_unlock>
 8022f1e:	42a3      	cmp	r3, r4
 8022f20:	d90c      	bls.n	8022f3c <_free_r+0x4c>
 8022f22:	6821      	ldr	r1, [r4, #0]
 8022f24:	1862      	adds	r2, r4, r1
 8022f26:	4293      	cmp	r3, r2
 8022f28:	bf04      	itt	eq
 8022f2a:	681a      	ldreq	r2, [r3, #0]
 8022f2c:	685b      	ldreq	r3, [r3, #4]
 8022f2e:	6063      	str	r3, [r4, #4]
 8022f30:	bf04      	itt	eq
 8022f32:	1852      	addeq	r2, r2, r1
 8022f34:	6022      	streq	r2, [r4, #0]
 8022f36:	6004      	str	r4, [r0, #0]
 8022f38:	e7ec      	b.n	8022f14 <_free_r+0x24>
 8022f3a:	4613      	mov	r3, r2
 8022f3c:	685a      	ldr	r2, [r3, #4]
 8022f3e:	b10a      	cbz	r2, 8022f44 <_free_r+0x54>
 8022f40:	42a2      	cmp	r2, r4
 8022f42:	d9fa      	bls.n	8022f3a <_free_r+0x4a>
 8022f44:	6819      	ldr	r1, [r3, #0]
 8022f46:	1858      	adds	r0, r3, r1
 8022f48:	42a0      	cmp	r0, r4
 8022f4a:	d10b      	bne.n	8022f64 <_free_r+0x74>
 8022f4c:	6820      	ldr	r0, [r4, #0]
 8022f4e:	4401      	add	r1, r0
 8022f50:	1858      	adds	r0, r3, r1
 8022f52:	4282      	cmp	r2, r0
 8022f54:	6019      	str	r1, [r3, #0]
 8022f56:	d1dd      	bne.n	8022f14 <_free_r+0x24>
 8022f58:	6810      	ldr	r0, [r2, #0]
 8022f5a:	6852      	ldr	r2, [r2, #4]
 8022f5c:	605a      	str	r2, [r3, #4]
 8022f5e:	4401      	add	r1, r0
 8022f60:	6019      	str	r1, [r3, #0]
 8022f62:	e7d7      	b.n	8022f14 <_free_r+0x24>
 8022f64:	d902      	bls.n	8022f6c <_free_r+0x7c>
 8022f66:	230c      	movs	r3, #12
 8022f68:	602b      	str	r3, [r5, #0]
 8022f6a:	e7d3      	b.n	8022f14 <_free_r+0x24>
 8022f6c:	6820      	ldr	r0, [r4, #0]
 8022f6e:	1821      	adds	r1, r4, r0
 8022f70:	428a      	cmp	r2, r1
 8022f72:	bf04      	itt	eq
 8022f74:	6811      	ldreq	r1, [r2, #0]
 8022f76:	6852      	ldreq	r2, [r2, #4]
 8022f78:	6062      	str	r2, [r4, #4]
 8022f7a:	bf04      	itt	eq
 8022f7c:	1809      	addeq	r1, r1, r0
 8022f7e:	6021      	streq	r1, [r4, #0]
 8022f80:	605c      	str	r4, [r3, #4]
 8022f82:	e7c7      	b.n	8022f14 <_free_r+0x24>
 8022f84:	bd38      	pop	{r3, r4, r5, pc}
 8022f86:	bf00      	nop
 8022f88:	2400537c 	.word	0x2400537c

08022f8c <_malloc_r>:
 8022f8c:	b570      	push	{r4, r5, r6, lr}
 8022f8e:	1ccd      	adds	r5, r1, #3
 8022f90:	f025 0503 	bic.w	r5, r5, #3
 8022f94:	3508      	adds	r5, #8
 8022f96:	2d0c      	cmp	r5, #12
 8022f98:	bf38      	it	cc
 8022f9a:	250c      	movcc	r5, #12
 8022f9c:	2d00      	cmp	r5, #0
 8022f9e:	4606      	mov	r6, r0
 8022fa0:	db01      	blt.n	8022fa6 <_malloc_r+0x1a>
 8022fa2:	42a9      	cmp	r1, r5
 8022fa4:	d903      	bls.n	8022fae <_malloc_r+0x22>
 8022fa6:	230c      	movs	r3, #12
 8022fa8:	6033      	str	r3, [r6, #0]
 8022faa:	2000      	movs	r0, #0
 8022fac:	bd70      	pop	{r4, r5, r6, pc}
 8022fae:	f000 f935 	bl	802321c <__malloc_lock>
 8022fb2:	4a21      	ldr	r2, [pc, #132]	; (8023038 <_malloc_r+0xac>)
 8022fb4:	6814      	ldr	r4, [r2, #0]
 8022fb6:	4621      	mov	r1, r4
 8022fb8:	b991      	cbnz	r1, 8022fe0 <_malloc_r+0x54>
 8022fba:	4c20      	ldr	r4, [pc, #128]	; (802303c <_malloc_r+0xb0>)
 8022fbc:	6823      	ldr	r3, [r4, #0]
 8022fbe:	b91b      	cbnz	r3, 8022fc8 <_malloc_r+0x3c>
 8022fc0:	4630      	mov	r0, r6
 8022fc2:	f000 f83d 	bl	8023040 <_sbrk_r>
 8022fc6:	6020      	str	r0, [r4, #0]
 8022fc8:	4629      	mov	r1, r5
 8022fca:	4630      	mov	r0, r6
 8022fcc:	f000 f838 	bl	8023040 <_sbrk_r>
 8022fd0:	1c43      	adds	r3, r0, #1
 8022fd2:	d124      	bne.n	802301e <_malloc_r+0x92>
 8022fd4:	230c      	movs	r3, #12
 8022fd6:	6033      	str	r3, [r6, #0]
 8022fd8:	4630      	mov	r0, r6
 8022fda:	f000 f920 	bl	802321e <__malloc_unlock>
 8022fde:	e7e4      	b.n	8022faa <_malloc_r+0x1e>
 8022fe0:	680b      	ldr	r3, [r1, #0]
 8022fe2:	1b5b      	subs	r3, r3, r5
 8022fe4:	d418      	bmi.n	8023018 <_malloc_r+0x8c>
 8022fe6:	2b0b      	cmp	r3, #11
 8022fe8:	d90f      	bls.n	802300a <_malloc_r+0x7e>
 8022fea:	600b      	str	r3, [r1, #0]
 8022fec:	50cd      	str	r5, [r1, r3]
 8022fee:	18cc      	adds	r4, r1, r3
 8022ff0:	4630      	mov	r0, r6
 8022ff2:	f000 f914 	bl	802321e <__malloc_unlock>
 8022ff6:	f104 000b 	add.w	r0, r4, #11
 8022ffa:	1d23      	adds	r3, r4, #4
 8022ffc:	f020 0007 	bic.w	r0, r0, #7
 8023000:	1ac3      	subs	r3, r0, r3
 8023002:	d0d3      	beq.n	8022fac <_malloc_r+0x20>
 8023004:	425a      	negs	r2, r3
 8023006:	50e2      	str	r2, [r4, r3]
 8023008:	e7d0      	b.n	8022fac <_malloc_r+0x20>
 802300a:	428c      	cmp	r4, r1
 802300c:	684b      	ldr	r3, [r1, #4]
 802300e:	bf16      	itet	ne
 8023010:	6063      	strne	r3, [r4, #4]
 8023012:	6013      	streq	r3, [r2, #0]
 8023014:	460c      	movne	r4, r1
 8023016:	e7eb      	b.n	8022ff0 <_malloc_r+0x64>
 8023018:	460c      	mov	r4, r1
 802301a:	6849      	ldr	r1, [r1, #4]
 802301c:	e7cc      	b.n	8022fb8 <_malloc_r+0x2c>
 802301e:	1cc4      	adds	r4, r0, #3
 8023020:	f024 0403 	bic.w	r4, r4, #3
 8023024:	42a0      	cmp	r0, r4
 8023026:	d005      	beq.n	8023034 <_malloc_r+0xa8>
 8023028:	1a21      	subs	r1, r4, r0
 802302a:	4630      	mov	r0, r6
 802302c:	f000 f808 	bl	8023040 <_sbrk_r>
 8023030:	3001      	adds	r0, #1
 8023032:	d0cf      	beq.n	8022fd4 <_malloc_r+0x48>
 8023034:	6025      	str	r5, [r4, #0]
 8023036:	e7db      	b.n	8022ff0 <_malloc_r+0x64>
 8023038:	2400537c 	.word	0x2400537c
 802303c:	24005380 	.word	0x24005380

08023040 <_sbrk_r>:
 8023040:	b538      	push	{r3, r4, r5, lr}
 8023042:	4c06      	ldr	r4, [pc, #24]	; (802305c <_sbrk_r+0x1c>)
 8023044:	2300      	movs	r3, #0
 8023046:	4605      	mov	r5, r0
 8023048:	4608      	mov	r0, r1
 802304a:	6023      	str	r3, [r4, #0]
 802304c:	f7e6 fdaa 	bl	8009ba4 <_sbrk>
 8023050:	1c43      	adds	r3, r0, #1
 8023052:	d102      	bne.n	802305a <_sbrk_r+0x1a>
 8023054:	6823      	ldr	r3, [r4, #0]
 8023056:	b103      	cbz	r3, 802305a <_sbrk_r+0x1a>
 8023058:	602b      	str	r3, [r5, #0]
 802305a:	bd38      	pop	{r3, r4, r5, pc}
 802305c:	2400a164 	.word	0x2400a164

08023060 <_raise_r>:
 8023060:	291f      	cmp	r1, #31
 8023062:	b538      	push	{r3, r4, r5, lr}
 8023064:	4604      	mov	r4, r0
 8023066:	460d      	mov	r5, r1
 8023068:	d904      	bls.n	8023074 <_raise_r+0x14>
 802306a:	2316      	movs	r3, #22
 802306c:	6003      	str	r3, [r0, #0]
 802306e:	f04f 30ff 	mov.w	r0, #4294967295
 8023072:	bd38      	pop	{r3, r4, r5, pc}
 8023074:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023076:	b112      	cbz	r2, 802307e <_raise_r+0x1e>
 8023078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802307c:	b94b      	cbnz	r3, 8023092 <_raise_r+0x32>
 802307e:	4620      	mov	r0, r4
 8023080:	f000 f830 	bl	80230e4 <_getpid_r>
 8023084:	462a      	mov	r2, r5
 8023086:	4601      	mov	r1, r0
 8023088:	4620      	mov	r0, r4
 802308a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802308e:	f000 b817 	b.w	80230c0 <_kill_r>
 8023092:	2b01      	cmp	r3, #1
 8023094:	d00a      	beq.n	80230ac <_raise_r+0x4c>
 8023096:	1c59      	adds	r1, r3, #1
 8023098:	d103      	bne.n	80230a2 <_raise_r+0x42>
 802309a:	2316      	movs	r3, #22
 802309c:	6003      	str	r3, [r0, #0]
 802309e:	2001      	movs	r0, #1
 80230a0:	e7e7      	b.n	8023072 <_raise_r+0x12>
 80230a2:	2400      	movs	r4, #0
 80230a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80230a8:	4628      	mov	r0, r5
 80230aa:	4798      	blx	r3
 80230ac:	2000      	movs	r0, #0
 80230ae:	e7e0      	b.n	8023072 <_raise_r+0x12>

080230b0 <raise>:
 80230b0:	4b02      	ldr	r3, [pc, #8]	; (80230bc <raise+0xc>)
 80230b2:	4601      	mov	r1, r0
 80230b4:	6818      	ldr	r0, [r3, #0]
 80230b6:	f7ff bfd3 	b.w	8023060 <_raise_r>
 80230ba:	bf00      	nop
 80230bc:	240000e4 	.word	0x240000e4

080230c0 <_kill_r>:
 80230c0:	b538      	push	{r3, r4, r5, lr}
 80230c2:	4c07      	ldr	r4, [pc, #28]	; (80230e0 <_kill_r+0x20>)
 80230c4:	2300      	movs	r3, #0
 80230c6:	4605      	mov	r5, r0
 80230c8:	4608      	mov	r0, r1
 80230ca:	4611      	mov	r1, r2
 80230cc:	6023      	str	r3, [r4, #0]
 80230ce:	f7e6 fce1 	bl	8009a94 <_kill>
 80230d2:	1c43      	adds	r3, r0, #1
 80230d4:	d102      	bne.n	80230dc <_kill_r+0x1c>
 80230d6:	6823      	ldr	r3, [r4, #0]
 80230d8:	b103      	cbz	r3, 80230dc <_kill_r+0x1c>
 80230da:	602b      	str	r3, [r5, #0]
 80230dc:	bd38      	pop	{r3, r4, r5, pc}
 80230de:	bf00      	nop
 80230e0:	2400a164 	.word	0x2400a164

080230e4 <_getpid_r>:
 80230e4:	f7e6 bcce 	b.w	8009a84 <_getpid>

080230e8 <__sread>:
 80230e8:	b510      	push	{r4, lr}
 80230ea:	460c      	mov	r4, r1
 80230ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80230f0:	f000 f896 	bl	8023220 <_read_r>
 80230f4:	2800      	cmp	r0, #0
 80230f6:	bfab      	itete	ge
 80230f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80230fa:	89a3      	ldrhlt	r3, [r4, #12]
 80230fc:	181b      	addge	r3, r3, r0
 80230fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023102:	bfac      	ite	ge
 8023104:	6563      	strge	r3, [r4, #84]	; 0x54
 8023106:	81a3      	strhlt	r3, [r4, #12]
 8023108:	bd10      	pop	{r4, pc}

0802310a <__swrite>:
 802310a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802310e:	461f      	mov	r7, r3
 8023110:	898b      	ldrh	r3, [r1, #12]
 8023112:	05db      	lsls	r3, r3, #23
 8023114:	4605      	mov	r5, r0
 8023116:	460c      	mov	r4, r1
 8023118:	4616      	mov	r6, r2
 802311a:	d505      	bpl.n	8023128 <__swrite+0x1e>
 802311c:	2302      	movs	r3, #2
 802311e:	2200      	movs	r2, #0
 8023120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023124:	f000 f868 	bl	80231f8 <_lseek_r>
 8023128:	89a3      	ldrh	r3, [r4, #12]
 802312a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802312e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023132:	81a3      	strh	r3, [r4, #12]
 8023134:	4632      	mov	r2, r6
 8023136:	463b      	mov	r3, r7
 8023138:	4628      	mov	r0, r5
 802313a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802313e:	f000 b817 	b.w	8023170 <_write_r>

08023142 <__sseek>:
 8023142:	b510      	push	{r4, lr}
 8023144:	460c      	mov	r4, r1
 8023146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802314a:	f000 f855 	bl	80231f8 <_lseek_r>
 802314e:	1c43      	adds	r3, r0, #1
 8023150:	89a3      	ldrh	r3, [r4, #12]
 8023152:	bf15      	itete	ne
 8023154:	6560      	strne	r0, [r4, #84]	; 0x54
 8023156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802315a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802315e:	81a3      	strheq	r3, [r4, #12]
 8023160:	bf18      	it	ne
 8023162:	81a3      	strhne	r3, [r4, #12]
 8023164:	bd10      	pop	{r4, pc}

08023166 <__sclose>:
 8023166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802316a:	f000 b813 	b.w	8023194 <_close_r>
	...

08023170 <_write_r>:
 8023170:	b538      	push	{r3, r4, r5, lr}
 8023172:	4c07      	ldr	r4, [pc, #28]	; (8023190 <_write_r+0x20>)
 8023174:	4605      	mov	r5, r0
 8023176:	4608      	mov	r0, r1
 8023178:	4611      	mov	r1, r2
 802317a:	2200      	movs	r2, #0
 802317c:	6022      	str	r2, [r4, #0]
 802317e:	461a      	mov	r2, r3
 8023180:	f7e6 fcbf 	bl	8009b02 <_write>
 8023184:	1c43      	adds	r3, r0, #1
 8023186:	d102      	bne.n	802318e <_write_r+0x1e>
 8023188:	6823      	ldr	r3, [r4, #0]
 802318a:	b103      	cbz	r3, 802318e <_write_r+0x1e>
 802318c:	602b      	str	r3, [r5, #0]
 802318e:	bd38      	pop	{r3, r4, r5, pc}
 8023190:	2400a164 	.word	0x2400a164

08023194 <_close_r>:
 8023194:	b538      	push	{r3, r4, r5, lr}
 8023196:	4c06      	ldr	r4, [pc, #24]	; (80231b0 <_close_r+0x1c>)
 8023198:	2300      	movs	r3, #0
 802319a:	4605      	mov	r5, r0
 802319c:	4608      	mov	r0, r1
 802319e:	6023      	str	r3, [r4, #0]
 80231a0:	f7e6 fccb 	bl	8009b3a <_close>
 80231a4:	1c43      	adds	r3, r0, #1
 80231a6:	d102      	bne.n	80231ae <_close_r+0x1a>
 80231a8:	6823      	ldr	r3, [r4, #0]
 80231aa:	b103      	cbz	r3, 80231ae <_close_r+0x1a>
 80231ac:	602b      	str	r3, [r5, #0]
 80231ae:	bd38      	pop	{r3, r4, r5, pc}
 80231b0:	2400a164 	.word	0x2400a164

080231b4 <_fstat_r>:
 80231b4:	b538      	push	{r3, r4, r5, lr}
 80231b6:	4c07      	ldr	r4, [pc, #28]	; (80231d4 <_fstat_r+0x20>)
 80231b8:	2300      	movs	r3, #0
 80231ba:	4605      	mov	r5, r0
 80231bc:	4608      	mov	r0, r1
 80231be:	4611      	mov	r1, r2
 80231c0:	6023      	str	r3, [r4, #0]
 80231c2:	f7e6 fcc6 	bl	8009b52 <_fstat>
 80231c6:	1c43      	adds	r3, r0, #1
 80231c8:	d102      	bne.n	80231d0 <_fstat_r+0x1c>
 80231ca:	6823      	ldr	r3, [r4, #0]
 80231cc:	b103      	cbz	r3, 80231d0 <_fstat_r+0x1c>
 80231ce:	602b      	str	r3, [r5, #0]
 80231d0:	bd38      	pop	{r3, r4, r5, pc}
 80231d2:	bf00      	nop
 80231d4:	2400a164 	.word	0x2400a164

080231d8 <_isatty_r>:
 80231d8:	b538      	push	{r3, r4, r5, lr}
 80231da:	4c06      	ldr	r4, [pc, #24]	; (80231f4 <_isatty_r+0x1c>)
 80231dc:	2300      	movs	r3, #0
 80231de:	4605      	mov	r5, r0
 80231e0:	4608      	mov	r0, r1
 80231e2:	6023      	str	r3, [r4, #0]
 80231e4:	f7e6 fcc5 	bl	8009b72 <_isatty>
 80231e8:	1c43      	adds	r3, r0, #1
 80231ea:	d102      	bne.n	80231f2 <_isatty_r+0x1a>
 80231ec:	6823      	ldr	r3, [r4, #0]
 80231ee:	b103      	cbz	r3, 80231f2 <_isatty_r+0x1a>
 80231f0:	602b      	str	r3, [r5, #0]
 80231f2:	bd38      	pop	{r3, r4, r5, pc}
 80231f4:	2400a164 	.word	0x2400a164

080231f8 <_lseek_r>:
 80231f8:	b538      	push	{r3, r4, r5, lr}
 80231fa:	4c07      	ldr	r4, [pc, #28]	; (8023218 <_lseek_r+0x20>)
 80231fc:	4605      	mov	r5, r0
 80231fe:	4608      	mov	r0, r1
 8023200:	4611      	mov	r1, r2
 8023202:	2200      	movs	r2, #0
 8023204:	6022      	str	r2, [r4, #0]
 8023206:	461a      	mov	r2, r3
 8023208:	f7e6 fcbe 	bl	8009b88 <_lseek>
 802320c:	1c43      	adds	r3, r0, #1
 802320e:	d102      	bne.n	8023216 <_lseek_r+0x1e>
 8023210:	6823      	ldr	r3, [r4, #0]
 8023212:	b103      	cbz	r3, 8023216 <_lseek_r+0x1e>
 8023214:	602b      	str	r3, [r5, #0]
 8023216:	bd38      	pop	{r3, r4, r5, pc}
 8023218:	2400a164 	.word	0x2400a164

0802321c <__malloc_lock>:
 802321c:	4770      	bx	lr

0802321e <__malloc_unlock>:
 802321e:	4770      	bx	lr

08023220 <_read_r>:
 8023220:	b538      	push	{r3, r4, r5, lr}
 8023222:	4c07      	ldr	r4, [pc, #28]	; (8023240 <_read_r+0x20>)
 8023224:	4605      	mov	r5, r0
 8023226:	4608      	mov	r0, r1
 8023228:	4611      	mov	r1, r2
 802322a:	2200      	movs	r2, #0
 802322c:	6022      	str	r2, [r4, #0]
 802322e:	461a      	mov	r2, r3
 8023230:	f7e6 fc4a 	bl	8009ac8 <_read>
 8023234:	1c43      	adds	r3, r0, #1
 8023236:	d102      	bne.n	802323e <_read_r+0x1e>
 8023238:	6823      	ldr	r3, [r4, #0]
 802323a:	b103      	cbz	r3, 802323e <_read_r+0x1e>
 802323c:	602b      	str	r3, [r5, #0]
 802323e:	bd38      	pop	{r3, r4, r5, pc}
 8023240:	2400a164 	.word	0x2400a164

08023244 <_init>:
 8023244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023246:	bf00      	nop
 8023248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802324a:	bc08      	pop	{r3}
 802324c:	469e      	mov	lr, r3
 802324e:	4770      	bx	lr

08023250 <_fini>:
 8023250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023252:	bf00      	nop
 8023254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023256:	bc08      	pop	{r3}
 8023258:	469e      	mov	lr, r3
 802325a:	4770      	bx	lr
